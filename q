[33mcommit 15f5988281a7b2ca5cf85691de5cdc664ebf2930[m[33m ([m[1;36mHEAD -> [m[1;32mmain[m[33m, [m[1;31msjael/main[m[33m)[m
Author: Sjael <jakeobrien44@gmail.com>
Date:   Thu Jan 19 22:11:27 2023 -0800

    cleanup

[33mcommit b75493913513a0982b666363fd8f95bde8c16150[m
Author: Sjael <jakeobrien44@gmail.com>
Date:   Thu Jan 19 22:02:41 2023 -0800

    bevy_pbr merge

[33mcommit 31fac8229e56457b4cf394a1ff7be0fc2a79a2a8[m
Author: Sjael <jakeobrien44@gmail.com>
Date:   Thu Jan 19 21:46:39 2023 -0800

    docs

[33mcommit ee20b69abaeb36715b9f0289693453af9c31416c[m
Author: Sjael <jakeobrien44@gmail.com>
Date:   Thu Jan 19 21:44:29 2023 -0800

    merged with core pipeline

[33mcommit 47da4e80746aca0565fa522fc215d7a98cbbf8c0[m
Merge: e6543928 cab065ba
Author: Sjael <jakeobrien44@gmail.com>
Date:   Thu Jan 19 21:37:12 2023 -0800

    squashed

[33mcommit e6543928935fd80166567ee3b6a6225b22dfa866[m
Author: Sjael <jakeobrien44@gmail.com>
Date:   Thu Jan 19 21:27:28 2023 -0800

    squashed

[33mcommit 9067d598bd8786e8e02968e656aedd1ed168fac6[m
Merge: 519f6f45 bd3e9556
Author: Sjael <jakeobrien44@gmail.com>
Date:   Thu Jan 19 18:37:09 2023 -0800

    Merge branch 'main' of https://github.com/RedMachete/bevy

[33mcommit cab065bad4302e4df427ffbafcdb112e755321ce[m[33m ([m[1;31morigin/staging[m[33m, [m[1;31morigin/main[m[33m, [m[1;31morigin/HEAD[m[33m)[m
Author: ickshonpe <david.curthoys@googlemail.com>
Date:   Fri Jan 20 01:05:30 2023 +0000

    remove the image loaded check for nodes without images in extract_uinodes  (#7280)
    
    ## Problem
    
    `extract_uinodes` checks if an image is loaded for nodes without images
    
    ## Solution
    
    Move the image loading skip check so that it is only performed for nodes with a `UiImage` component.

[33mcommit 2027af4c54082007fed2091f112a11cb0bc5fc08[m
Author: Mike <mike.hsu@gmail.com>
Date:   Thu Jan 19 23:45:46 2023 +0000

    Pipelined Rendering (#6503)
    
    # Objective
    
    - Implement pipelined rendering
    - Fixes #5082
    - Fixes #4718
    
    ## User Facing Description
    
    Bevy now implements piplelined rendering! Pipelined rendering allows the app logic and rendering logic to run on different threads leading to large gains in performance.
    
    ![image](https://user-images.githubusercontent.com/2180432/202049871-3c00b801-58ab-448f-93fd-471e30aba55f.png)
    *tracy capture of many_foxes example*
    
    To use pipelined rendering, you just need to add the `PipelinedRenderingPlugin`. If you're using `DefaultPlugins` then it will automatically be added for you on all platforms except wasm. Bevy does not currently support multithreading on wasm which is needed for this feature to work. If you aren't using `DefaultPlugins` you can add the plugin manually.
    
    ```rust
    use bevy::prelude::*;
    use bevy::render::pipelined_rendering::PipelinedRenderingPlugin;
    
    fn main() {
        App::new()
            // whatever other plugins you need
            .add_plugin(RenderPlugin)
            // needs to be added after RenderPlugin
            .add_plugin(PipelinedRenderingPlugin)
            .run();
    }
    ```
    
    If for some reason pipelined rendering needs to be removed. You can also disable the plugin the normal way.
    
    ```rust
    use bevy::prelude::*;
    use bevy::render::pipelined_rendering::PipelinedRenderingPlugin;
    
    fn main() {
        App::new.add_plugins(DefaultPlugins.build().disable::<PipelinedRenderingPlugin>());
    }
    ```
    
    ### A setup function was added to plugins
    
    A optional plugin lifecycle function was added to the `Plugin trait`. This function is called after all plugins have been built, but before the app runner is called. This allows for some final setup to be done. In the case of pipelined rendering, the function removes the sub app from the main app and sends it to the render thread.
    
    ```rust
    struct MyPlugin;
    impl Plugin for MyPlugin {
        fn build(&self, app: &mut App) {
    
        }
    
        // optional function
        fn setup(&self, app: &mut App) {
            // do some final setup before runner is called
        }
    }
    ```
    
    ### A Stage for Frame Pacing
    
    In the `RenderExtractApp` there is a stage labelled `BeforeIoAfterRenderStart` that systems can be added to.  The specific use case for this stage is for a frame pacing system that can delay the start of main app processing in render bound apps to reduce input latency i.e. "frame pacing". This is not currently built into bevy, but exists as `bevy`
    
    ```text
    |-------------------------------------------------------------------|
    |         | BeforeIoAfterRenderStart | winit events | main schedule |
    | extract |---------------------------------------------------------|
    |         | extract commands | rendering schedule                   |
    |-------------------------------------------------------------------|
    ```
    
    ### Small API additions
    
    * `Schedule::remove_stage`
    * `App::insert_sub_app`
    * `App::remove_sub_app`
    * `TaskPool::scope_with_executor`
    
    ## Problems and Solutions
    
    ### Moving render app to another thread
    
    Most of the hard bits for this were done with the render redo. This PR just sends the render app back and forth through channels which seems to work ok. I originally experimented with using a scope to run the render task. It was cuter, but that approach didn't allow render to start before i/o processing. So I switched to using channels. There is much complexity in the coordination that needs to be done, but it's worth it. By moving rendering during i/o processing the frame times should be much more consistent in render bound apps. See https://github.com/bevyengine/bevy/issues/4691.
    
    ### Unsoundness with Sending World with NonSend resources
    
    Dropping !Send things on threads other than the thread they were spawned on is considered unsound. The render world doesn't have any nonsend resources. So if we tell the users to "pretty please don't spawn nonsend resource on the render world", we can avoid this problem.
    
    More seriously there is this https://github.com/bevyengine/bevy/pull/6534 pr, which patches the unsoundness by aborting the app if a nonsend resource is dropped on the wrong thread. ~~That PR should probably be merged before this one.~~ For a longer term solution we have this discussion going https://github.com/bevyengine/bevy/discussions/6552.
    
    ### NonSend Systems in render world
    
    The render world doesn't have any !Send resources, but it does have a non send system. While Window is Send, winit does have some API's that can only be accessed on the main thread. `prepare_windows` in the render schedule thus needs to be scheduled on the main thread. Currently we run nonsend systems by running them on the thread the TaskPool::scope runs on. When we move render to another thread this no longer works.
    
    To fix this, a new `scope_with_executor` method was added that takes a optional `TheadExecutor` that can only be ticked on the thread it was initialized on. The render world then holds a `MainThreadExecutor` resource which can be passed to the scope in the parallel executor that it uses to spawn it's non send systems on.
    
    ### Scopes executors between render and main should not share tasks
    
    Since the render world and the app world share the `ComputeTaskPool`. Because `scope` has executors for the ComputeTaskPool a system from the main world could run on the render thread or a render system could run on the main thread. This can cause performance problems because it can delay a stage from finishing. See https://github.com/bevyengine/bevy/pull/6503#issuecomment-1309791442 for more details.
    
    To avoid this problem, `TaskPool::scope` has been changed to not tick the ComputeTaskPool when it's used by the parallel executor. In the future when we move closer to the 1 thread to 1 logical core model we may want to overprovide threads, because the render and main app threads don't do much when executing the schedule.
    
    ## Performance
    
    My machine is Windows 11, AMD Ryzen 5600x, RX 6600
    
    ### Examples
    
    #### This PR with pipelining vs Main
    
    > Note that these were run on an older version of main and the performance profile has probably changed due to optimizations
    
    Seeing a perf gain from 29% on many lights to 7% on many sprites.
    
    <html>
    <body>
    <!--StartFragment--><google-sheets-html-origin>
    
    Â  | percent | Â  | Â  | Diff | Â  | Â  | Main | Â  | Â  | PR | Â  | Â 
    -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --
    tracy frame time | mean | median | sigma | mean | median | sigma | mean | median | sigma | mean | median | sigma
    many foxes | 27.01% | 27.34% | -47.09% | 1.58 | 1.55 | -1.78 | 5.85 | 5.67 | 3.78 | 4.27 | 4.12 | 5.56
    many lights | 29.35% | 29.94% | -10.84% | 3.02 | 3.03 | -0.57 | 10.29 | 10.12 | 5.26 | 7.27 | 7.09 | 5.83
    many animated sprites | 13.97% | 15.69% | 14.20% | 3.79 | 4.17 | 1.41 | 27.12 | 26.57 | 9.93 | 23.33 | 22.4 | 8.52
    3d scene | 25.79% | 26.78% | 7.46% | 0.49 | 0.49 | 0.15 | 1.9 | 1.83 | 2.01 | 1.41 | 1.34 | 1.86
    many cubes | 11.97% | 11.28% | 14.51% | 1.93 | 1.78 | 1.31 | 16.13 | 15.78 | 9.03 | 14.2 | 14 | 7.72
    many sprites | 7.14% | 9.42% | -85.42% | 1.72 | 2.23 | -6.15 | 24.09 | 23.68 | 7.2 | 22.37 | 21.45 | 13.35
    
    <!--EndFragment-->
    </body>
    </html>
    
    #### This PR with pipelining disabled vs Main
    
    Mostly regressions here. I don't think this should be a problem as users that are disabling pipelined rendering are probably running single threaded and not using the parallel executor. The regression is probably mostly due to the switch to use `async_executor::run` instead of `try_tick` and also having one less thread to run systems on. I'll do a writeup on why switching to `run` causes regressions, so we can try to eventually fix it. Using try_tick causes issues when pipeline rendering is enable as seen [here](https://github.com/bevyengine/bevy/pull/6503#issuecomment-1380803518)
    
    <html>
    <body>
    <!--StartFragment--><google-sheets-html-origin>
    
    Â  | percent | Â  | Â  | Diff | Â  | Â  | Main | Â  | Â  | PR no pipelining | Â  | Â 
    -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --
    tracy frame time | mean | median | sigma | mean | median | sigma | mean | median | sigma | mean | median | sigma
    many foxes | -3.72% | -4.42% | -1.07% | -0.21 | -0.24 | -0.04 | 5.64 | 5.43 | 3.74 | 5.85 | 5.67 | 3.78
    many lights | 0.29% | -0.30% | 4.75% | 0.03 | -0.03 | 0.25 | 10.29 | 10.12 | 5.26 | 10.26 | 10.15 | 5.01
    many animated sprites | 0.22% | 1.81% | -2.72% | 0.06 | 0.48 | -0.27 | 27.12 | 26.57 | 9.93 | 27.06 | 26.09 | 10.2
    3d scene | -15.79% | -14.75% | -31.34% | -0.3 | -0.27 | -0.63 | 1.9 | 1.83 | 2.01 | 2.2 | 2.1 | 2.64
    many cubes | -2.85% | -3.30% | 0.00% | -0.46 | -0.52 | 0 | 16.13 | 15.78 | 9.03 | 16.59 | 16.3 | 9.03
    many sprites | 2.49% | 2.41% | 0.69% | 0.6 | 0.57 | 0.05 | 24.09 | 23.68 | 7.2 | 23.49 | 23.11 | 7.15
    
    <!--EndFragment-->
    </body>
    </html>
    
    ### Benchmarks
    
    Mostly the same except empty_systems has got a touch slower. The maybe_pipelining+1 column has the compute task pool with an extra thread over default added. This is because pipelining loses one thread over main to execute systems on, since the main thread no longer runs normal systems.
    
    <details>
    <summary>Click Me</summary>
    
    ```text
    group                                                             main                                         maybe-pipelining+1
    -----                                                             -------------------------                ------------------
    busy_systems/01x_entities_03_systems                              1.07     30.7Â±1.32Âµs        ? ?/sec      1.00     28.6Â±1.35Âµs        ? ?/sec
    busy_systems/01x_entities_06_systems                              1.10     52.1Â±1.10Âµs        ? ?/sec      1.00     47.2Â±1.08Âµs        ? ?/sec
    busy_systems/01x_entities_09_systems                              1.00     74.6Â±1.36Âµs        ? ?/sec      1.00     75.0Â±1.93Âµs        ? ?/sec
    busy_systems/01x_entities_12_systems                              1.03    100.6Â±6.68Âµs        ? ?/sec      1.00     98.0Â±1.46Âµs        ? ?/sec
    busy_systems/01x_entities_15_systems                              1.11    128.5Â±3.53Âµs        ? ?/sec      1.00    115.5Â±1.02Âµs        ? ?/sec
    busy_systems/02x_entities_03_systems                              1.16     50.4Â±2.56Âµs        ? ?/sec      1.00     43.5Â±3.00Âµs        ? ?/sec
    busy_systems/02x_entities_06_systems                              1.00     87.1Â±1.27Âµs        ? ?/sec      1.05     91.5Â±7.15Âµs        ? ?/sec
    busy_systems/02x_entities_09_systems                              1.04    139.9Â±6.37Âµs        ? ?/sec      1.00    134.0Â±1.06Âµs        ? ?/sec
    busy_systems/02x_entities_12_systems                              1.05    179.2Â±3.47Âµs        ? ?/sec      1.00    170.1Â±3.17Âµs        ? ?/sec
    busy_systems/02x_entities_15_systems                              1.01    219.6Â±3.75Âµs        ? ?/sec      1.00    218.1Â±2.55Âµs        ? ?/sec
    busy_systems/03x_entities_03_systems                              1.10     70.6Â±2.33Âµs        ? ?/sec      1.00     64.3Â±0.69Âµs        ? ?/sec
    busy_systems/03x_entities_06_systems                              1.02    130.2Â±3.11Âµs        ? ?/sec      1.00    128.0Â±1.34Âµs        ? ?/sec
    busy_systems/03x_entities_09_systems                              1.00   195.0Â±10.11Âµs        ? ?/sec      1.00    194.8Â±1.41Âµs        ? ?/sec
    busy_systems/03x_entities_12_systems                              1.01    261.7Â±4.05Âµs        ? ?/sec      1.00    259.8Â±4.11Âµs        ? ?/sec
    busy_systems/03x_entities_15_systems                              1.00    318.0Â±3.04Âµs        ? ?/sec      1.06   338.3Â±20.25Âµs        ? ?/sec
    busy_systems/04x_entities_03_systems                              1.00     82.9Â±0.63Âµs        ? ?/sec      1.02     84.3Â±0.63Âµs        ? ?/sec
    busy_systems/04x_entities_06_systems                              1.01    181.7Â±3.65Âµs        ? ?/sec      1.00    179.8Â±1.76Âµs        ? ?/sec
    busy_systems/04x_entities_09_systems                              1.04    265.0Â±4.68Âµs        ? ?/sec      1.00    255.3Â±1.98Âµs        ? ?/sec
    busy_systems/04x_entities_12_systems                              1.00    335.9Â±3.00Âµs        ? ?/sec      1.05   352.6Â±15.84Âµs        ? ?/sec
    busy_systems/04x_entities_15_systems                              1.00   418.6Â±10.26Âµs        ? ?/sec      1.08   450.2Â±39.58Âµs        ? ?/sec
    busy_systems/05x_entities_03_systems                              1.07    114.3Â±0.95Âµs        ? ?/sec      1.00    106.9Â±1.52Âµs        ? ?/sec
    busy_systems/05x_entities_06_systems                              1.08    229.8Â±2.90Âµs        ? ?/sec      1.00    212.3Â±4.18Âµs        ? ?/sec
    busy_systems/05x_entities_09_systems                              1.03    329.3Â±1.99Âµs        ? ?/sec      1.00    319.2Â±2.43Âµs        ? ?/sec
    busy_systems/05x_entities_12_systems                              1.06    454.7Â±6.77Âµs        ? ?/sec      1.00    430.1Â±3.58Âµs        ? ?/sec
    busy_systems/05x_entities_15_systems                              1.03    554.6Â±6.15Âµs        ? ?/sec      1.00   538.4Â±23.87Âµs        ? ?/sec
    contrived/01x_entities_03_systems                                 1.00     14.0Â±0.15Âµs        ? ?/sec      1.08     15.1Â±0.21Âµs        ? ?/sec
    contrived/01x_entities_06_systems                                 1.04     28.5Â±0.37Âµs        ? ?/sec      1.00     27.4Â±0.44Âµs        ? ?/sec
    contrived/01x_entities_09_systems                                 1.00     41.5Â±4.38Âµs        ? ?/sec      1.02     42.2Â±2.24Âµs        ? ?/sec
    contrived/01x_entities_12_systems                                 1.06     55.9Â±1.49Âµs        ? ?/sec      1.00     52.6Â±1.36Âµs        ? ?/sec
    contrived/01x_entities_15_systems                                 1.02     68.0Â±2.00Âµs        ? ?/sec      1.00     66.5Â±0.78Âµs        ? ?/sec
    contrived/02x_entities_03_systems                                 1.03     25.2Â±0.38Âµs        ? ?/sec      1.00     24.6Â±0.52Âµs        ? ?/sec
    contrived/02x_entities_06_systems                                 1.00     46.3Â±0.49Âµs        ? ?/sec      1.04     48.1Â±4.13Âµs        ? ?/sec
    contrived/02x_entities_09_systems                                 1.02     70.4Â±0.99Âµs        ? ?/sec      1.00     68.8Â±1.04Âµs        ? ?/sec
    contrived/02x_entities_12_systems                                 1.06     96.8Â±1.49Âµs        ? ?/sec      1.00     91.5Â±0.93Âµs        ? ?/sec
    contrived/02x_entities_15_systems                                 1.02    116.2Â±0.95Âµs        ? ?/sec      1.00    114.2Â±1.42Âµs        ? ?/sec
    contrived/03x_entities_03_systems                                 1.00     33.2Â±0.38Âµs        ? ?/sec      1.01     33.6Â±0.45Âµs        ? ?/sec
    contrived/03x_entities_06_systems                                 1.00     62.4Â±0.73Âµs        ? ?/sec      1.01     63.3Â±1.05Âµs        ? ?/sec
    contrived/03x_entities_09_systems                                 1.02     96.4Â±0.85Âµs        ? ?/sec      1.00     94.8Â±3.02Âµs        ? ?/sec
    contrived/03x_entities_12_systems                                 1.01    126.3Â±4.67Âµs        ? ?/sec      1.00    125.6Â±2.27Âµs        ? ?/sec
    contrived/03x_entities_15_systems                                 1.03    160.2Â±9.37Âµs        ? ?/sec      1.00    156.0Â±1.53Âµs        ? ?/sec
    contrived/04x_entities_03_systems                                 1.02     41.4Â±3.39Âµs        ? ?/sec      1.00     40.5Â±0.52Âµs        ? ?/sec
    contrived/04x_entities_06_systems                                 1.00     78.9Â±1.61Âµs        ? ?/sec      1.02     80.3Â±1.06Âµs        ? ?/sec
    contrived/04x_entities_09_systems                                 1.02    121.8Â±3.97Âµs        ? ?/sec      1.00    119.2Â±1.46Âµs        ? ?/sec
    contrived/04x_entities_12_systems                                 1.00    157.8Â±1.48Âµs        ? ?/sec      1.01    160.1Â±1.72Âµs        ? ?/sec
    contrived/04x_entities_15_systems                                 1.00    197.9Â±1.47Âµs        ? ?/sec      1.08   214.2Â±34.61Âµs        ? ?/sec
    contrived/05x_entities_03_systems                                 1.00     49.1Â±0.33Âµs        ? ?/sec      1.01     49.7Â±0.75Âµs        ? ?/sec
    contrived/05x_entities_06_systems                                 1.00     95.0Â±0.93Âµs        ? ?/sec      1.00     94.6Â±0.94Âµs        ? ?/sec
    contrived/05x_entities_09_systems                                 1.01    143.2Â±1.68Âµs        ? ?/sec      1.00    142.2Â±2.00Âµs        ? ?/sec
    contrived/05x_entities_12_systems                                 1.00    191.8Â±2.03Âµs        ? ?/sec      1.01    192.7Â±7.88Âµs        ? ?/sec
    contrived/05x_entities_15_systems                                 1.02    239.7Â±3.71Âµs        ? ?/sec      1.00    235.8Â±4.11Âµs        ? ?/sec
    empty_systems/000_systems                                         1.01     47.8Â±0.67ns        ? ?/sec      1.00     47.5Â±2.02ns        ? ?/sec
    empty_systems/001_systems                                         1.00  1743.2Â±126.14ns        ? ?/sec     1.01  1761.1Â±70.10ns        ? ?/sec
    empty_systems/002_systems                                         1.01      2.2Â±0.04Âµs        ? ?/sec      1.00      2.2Â±0.02Âµs        ? ?/sec
    empty_systems/003_systems                                         1.02      2.7Â±0.09Âµs        ? ?/sec      1.00      2.7Â±0.16Âµs        ? ?/sec
    empty_systems/004_systems                                         1.00      3.1Â±0.11Âµs        ? ?/sec      1.00      3.1Â±0.24Âµs        ? ?/sec
    empty_systems/005_systems                                         1.00      3.5Â±0.05Âµs        ? ?/sec      1.11      3.9Â±0.70Âµs        ? ?/sec
    empty_systems/010_systems                                         1.00      5.5Â±0.12Âµs        ? ?/sec      1.03      5.7Â±0.17Âµs        ? ?/sec
    empty_systems/015_systems                                         1.00      7.9Â±0.19Âµs        ? ?/sec      1.06      8.4Â±0.16Âµs        ? ?/sec
    empty_systems/020_systems                                         1.00     10.4Â±1.25Âµs        ? ?/sec      1.02     10.6Â±0.18Âµs        ? ?/sec
    empty_systems/025_systems                                         1.00     12.4Â±0.39Âµs        ? ?/sec      1.14     14.1Â±1.07Âµs        ? ?/sec
    empty_systems/030_systems                                         1.00     15.1Â±0.39Âµs        ? ?/sec      1.05     15.8Â±0.62Âµs        ? ?/sec
    empty_systems/035_systems                                         1.00     16.9Â±0.47Âµs        ? ?/sec      1.07     18.0Â±0.37Âµs        ? ?/sec
    empty_systems/040_systems                                         1.00     19.3Â±0.41Âµs        ? ?/sec      1.05     20.3Â±0.39Âµs        ? ?/sec
    empty_systems/045_systems                                         1.00     22.4Â±1.67Âµs        ? ?/sec      1.02     22.9Â±0.51Âµs        ? ?/sec
    empty_systems/050_systems                                         1.00     24.4Â±1.67Âµs        ? ?/sec      1.01     24.7Â±0.40Âµs        ? ?/sec
    empty_systems/055_systems                                         1.05     28.6Â±5.27Âµs        ? ?/sec      1.00     27.2Â±0.70Âµs        ? ?/sec
    empty_systems/060_systems                                         1.02     29.9Â±1.64Âµs        ? ?/sec      1.00     29.3Â±0.66Âµs        ? ?/sec
    empty_systems/065_systems                                         1.02     32.7Â±3.15Âµs        ? ?/sec      1.00     32.1Â±0.98Âµs        ? ?/sec
    empty_systems/070_systems                                         1.00     33.0Â±1.42Âµs        ? ?/sec      1.03     34.1Â±1.44Âµs        ? ?/sec
    empty_systems/075_systems                                         1.00     34.8Â±0.89Âµs        ? ?/sec      1.04     36.2Â±0.70Âµs        ? ?/sec
    empty_systems/080_systems                                         1.00     37.0Â±1.82Âµs        ? ?/sec      1.05     38.7Â±1.37Âµs        ? ?/sec
    empty_systems/085_systems                                         1.00     38.7Â±0.76Âµs        ? ?/sec      1.05     40.8Â±0.83Âµs        ? ?/sec
    empty_systems/090_systems                                         1.00     41.5Â±1.09Âµs        ? ?/sec      1.04     43.2Â±0.82Âµs        ? ?/sec
    empty_systems/095_systems                                         1.00     43.6Â±1.10Âµs        ? ?/sec      1.04     45.2Â±0.99Âµs        ? ?/sec
    empty_systems/100_systems                                         1.00     46.7Â±2.27Âµs        ? ?/sec      1.03     48.1Â±1.25Âµs        ? ?/sec
    ```
    </details>
    
    ## Migration Guide
    
    ### App `runner` and SubApp `extract` functions are now required to be Send
    
    This was changed to enable pipelined rendering. If this breaks your use case please report it as these new bounds might be able to be relaxed.
    
    ## ToDo
    
    * [x] redo benchmarking
    * [x] reinvestigate the perf of the try_tick -> run change for task pool scope

[33mcommit b3224e135bd82b445fa506e6b68c71cb13a4e7be[m
Author: IceSentry <c.giguere42@gmail.com>
Date:   Thu Jan 19 22:11:13 2023 +0000

    Add depth and normal prepass  (#6284)
    
    # Objective
    
    - Add a configurable prepass
    - A depth prepass is useful for various shader effects and to reduce overdraw. It can be expansive depending on the scene so it's important to be able to disable it if you don't need any effects that uses it or don't suffer from excessive overdraw.
    - The goal is to eventually use it for things like TAA, Ambient Occlusion, SSR and various other techniques that can benefit from having a prepass.
    
    ## Solution
    
    The prepass node is inserted before the main pass. It runs for each `Camera3d` with a prepass component (`DepthPrepass`, `NormalPrepass`). The presence of one of those components is used to determine which textures are generated in the prepass. When any prepass is enabled, the depth buffer generated will be used by the main pass to reduce overdraw.
    
    The prepass runs for each `Material` created with the `MaterialPlugin::prepass_enabled` option set to `true`. You can overload the shader used by the prepass by using `Material::prepass_vertex_shader()` and/or `Material::prepass_fragment_shader()`. It will also use the `Material::specialize()` for more advanced use cases. It is enabled by default on all materials.
    
    The prepass works on opaque materials and materials using an alpha mask. Transparent materials are ignored.
    
    The `StandardMaterial` overloads the prepass fragment shader to support alpha mask and normal maps.
    
    ---
    
    ## Changelog
    
    - Add a new `PrepassNode` that runs before the main pass
    - Add a `PrepassPlugin` to extract/prepare/queue the necessary data
    - Add a `DepthPrepass` and `NormalPrepass` component to control which textures will be created by the prepass and available in later passes.
    - Add a new `prepass_enabled` flag to the `MaterialPlugin` that will control if a material uses the prepass or not.
    - Add a new `prepass_enabled` flag to the `PbrPlugin` to control if the StandardMaterial uses the prepass. Currently defaults to false.
    - Add `Material::prepass_vertex_shader()` and `Material::prepass_fragment_shader()` to control the prepass from the `Material`
    
    ## Notes
    
    In bevy's sample 3d scene, the performance is actually worse when enabling the prepass, but on more complex scenes the performance is generally better. I would like more testing on this, but @DGriffin91 has reported a very noticeable improvements in some scenes.
    
    The prepass is also used by @JMS55 for TAA and GTAO
    
    discord thread: <https://discord.com/channels/691052431525675048/1011624228627419187>
    
    This PR was built on top of the work of multiple people
    
    Co-Authored-By: @superdump
    Co-Authored-By: @robtfm
    Co-Authored-By: @JMS55
    
    Co-authored-by: Charles <IceSentry@users.noreply.github.com>
    Co-authored-by: JMS55 <47158642+JMS55@users.noreply.github.com>

[33mcommit 519f6f45de0fc16592c7adcf40748f174569f807[m
Author: Aceeri <conmcclusk@gmail.com>
Date:   Thu Jan 19 06:05:39 2023 +0000

    Remove unnecessary windows.rs file (#7277)
    
    # Objective
    Accidentally re-added this old file at some point during the Windows as Entities PR apparently
    
    ## Solution
    Removed the file, its unused

[33mcommit 884ebbf4b7a61d8748b2b309ab0bcdf02b51abbf[m
Author: Mike <mike.hsu@gmail.com>
Date:   Thu Jan 19 05:08:55 2023 +0000

    min version of fixedbitset was changed (#7275)
    
    # Objective
    
    - schedule v3 is using is_clear which was added in 0.4.2, so bump the version

[33mcommit fe382acfd09870992c0516173360fd7da8c108a8[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Thu Jan 19 04:35:46 2023 +0000

    Fix a typo on `Window::set_minimized` (#7276)
    
    # Objective
    
    There is a typo on the method `Window::set_minimized`.
    
    ## Solution
    
    fix it

[33mcommit 629cfab135e5f4087ad2a481a4a9be8921d13b83[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Thu Jan 19 03:04:39 2023 +0000

    Improve safety for `CommandQueue` internals (#7039)
    
    # Objective
    
    - Safety comments for the `CommandQueue` type are quite sparse and very imprecise. Sometimes, they are right for the wrong reasons or use circular reasoning.
    
    ## Solution
    
    - Document previously-implicit safety invariants.
    - Rewrite safety comments to actually reflect the specific invariants of each operation.
    - Use `OwningPtr` instead of raw pointers, to encode an invariant in the type system instead of via comments.
    - Use typed pointer methods when possible to increase reliability.
    
    ---
    
    ## Changelog
    
    + Added the function `OwningPtr::read_unaligned`.

[33mcommit ddfafab971e335ce5a47d4e4b3fcf51f124d999f[m
Author: Aceeri <conmcclusk@gmail.com>
Date:   Thu Jan 19 00:38:28 2023 +0000

    Windows as Entities (#5589)
    
    # Objective
    
    Fix https://github.com/bevyengine/bevy/issues/4530
    
    - Make it easier to open/close/modify windows by setting them up as `Entity`s with a `Window` component.
    - Make multiple windows very simple to set up. (just add a `Window` component to an entity and it should open)
    
    ## Solution
    
    - Move all properties of window descriptor to ~components~ a component.
    - Replace `WindowId` with `Entity`.
    - ~Use change detection for components to update backend rather than events/commands. (The `CursorMoved`/`WindowResized`/... events are kept for user convenience.~
      Check each field individually to see what we need to update, events are still kept for user convenience.
    
    ---
    
    ## Changelog
    
    - `WindowDescriptor` renamed to `Window`.
        - Width/height consolidated into a `WindowResolution` component.
        - Requesting maximization/minimization is done on the [`Window::state`] field.
    - `WindowId` is now `Entity`.
    
    ## Migration Guide
    
    - Replace `WindowDescriptor` with `Window`.
        - Change `width` and `height` fields in a `WindowResolution`, either by doing
          ```rust
          WindowResolution::new(width, height) // Explicitly
          // or using From<_> for tuples for convenience
          (1920., 1080.).into()
          ```
    - Replace any `WindowCommand` code to just modify the `Window`'s fields directly  and creating/closing windows is now by spawning/despawning an entity with a `Window` component like so:
      ```rust
      let window = commands.spawn(Window { ... }).id(); // open window
      commands.entity(window).despawn(); // close window
      ```
    
    ## Unresolved
    - ~How do we tell when a window is minimized by a user?~
      ~Currently using the `Resize(0, 0)` as an indicator of minimization.~
      No longer attempting to tell given how finnicky this was across platforms, now the user can only request that a window be maximized/minimized.
    
     ## Future work
     - Move `exit_on_close` functionality out from windowing and into app(?)
     - https://github.com/bevyengine/bevy/issues/5621
     - https://github.com/bevyengine/bevy/issues/7099
     - https://github.com/bevyengine/bevy/issues/7098
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit f0c504947ce653068a424979faf226c1e990818d[m
Author: Stephen Martindale <stephenmartindale@users.noreply.github.com>
Date:   Wed Jan 18 23:02:38 2023 +0000

    Docs: App::run() might never return; effect of WinitSettings::return_from_run. (#7228)
    
    # Objective
    
    See:
    
    - https://github.com/bevyengine/bevy/issues/7067#issuecomment-1381982285
      - (This does not fully close that issue in my opinion.)
    - https://discord.com/channels/691052431525675048/1063454009769340989
    
    ## Solution
    
    This merge request adds documentation:
    
    1. Alert users to the fact that `App::run()` might never return and code placed after it might never be executed.
    2. Makes `winit::WinitSettings::return_from_run` discoverable.
    3. Better explains why `winit::WinitSettings::return_from_run` is discouraged and better links to up-stream docs. on that topic.
    4. Adds notes to the `app/return_after_run.rs` example which otherwise promotes a feature that carries caveats.
    
    Furthermore, w.r.t `winit::WinitSettings::return_from_run`:
    
    - Broken links to `winit` docs are fixed.
    - Links now point to BOTH `EventLoop::run()` and `EventLoopExtRunReturn::run_return()` which are the salient up-stream pages and make more sense, taken together.
    - Collateral damage: "Supported platforms" heading; disambiguation of "run" â `App::run()`; links.
    
    ## Future Work
    
    I deliberately structured the "`run()` might not return" section under `App::run()` to allow for alternative patterns (e.g. `AppExit` event, `WindowClosed` event) to be listed or mentioned, beneath it, in the future.

[33mcommit f8feec6ef1a47a6c8a562399b883d92198f02222[m
Author: targrub <targrub@gmail.com>
Date:   Wed Jan 18 17:20:27 2023 +0000

    Fix tiny clippy issue for upcoming Rust version (#7266)
    
    
    
    Co-authored-by: targrub <62773321+targrub@users.noreply.github.com>

[33mcommit e0b921fbd99dffb612860ac9684f800b472a66ec[m
Author: harudagondi <giogdeasis@gmail.com>
Date:   Wed Jan 18 17:20:26 2023 +0000

    AudioOutput is actually a normal resource now, not a non-send resource (#7262)
    
    # Objective
    
    - Fixes #7260
    
    ## Solution
    
    - #6649 used `init_non_send_resource` for `AudioOutput`, but this is before #6436 was merged.
    - Use `init_resource` instead.

[33mcommit 46293ce1e4c61421e353dc0b0431da67af6b7568[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Wed Jan 18 17:06:08 2023 +0000

    Fix init_non_send_resource overwriting previous values (#7261)
    
    # Objective
    
    Repeated calls to `init_non_send_resource` currently overwrite the old value because the wrong storage is being checked.
    
    ## Solution
    
    Use the correct storage. Add some tests.
    
    ## Notes
    
    Without the fix, the new test fails with
    ```
    thread 'world::tests::init_non_send_resource_does_not_overwrite' panicked at 'assertion failed: `(left == right)`
      left: `1`,
     right: `0`', crates/bevy_ecs/src/world/mod.rs:2267:9
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
    test world::tests::init_non_send_resource_does_not_overwrite ... FAILED
    ```
    
    This was introduced by #7174 and it seems like a fairly straightforward oopsie.

[33mcommit d6bfd44f8f48af92c727a42ca7fe43f32a2ab747[m
Author: Charles Bournhonesque <cbournhonesque@snapchat.com>
Date:   Wed Jan 18 14:26:07 2023 +0000

    update doc comment for new_archetype in query-state (#7241)
    
    # Objective
    
    I was reading through the bevy_ecs code, trying to understand how everything works.
    I was getting a bit confused when reading the doc comment for the `new_archetype` function; it looks like it doesn't create a new archetype but instead updates some internal state in the SystemParam to facility QueryIteration.
    
    (I still couldn't find where a new archetype was actually created)
    
    
    ## Solution
    
    - Adding a doc comment with a more correct explanation.
    
    If it's deemed correct, I can also update the doc-comment for the other `new_archetype` calls

[33mcommit 88b353c4b1665625d5aabe6149e184ec5ba5984c[m
Author: James Liu <contact@jamessliu.com>
Date:   Wed Jan 18 02:19:19 2023 +0000

    Reduce the use of atomics in the render phase (#7084)
    
    # Objective
    Speed up the render phase of rendering. An extension of #6885.
    
    `SystemState::get` increments the `World`'s change tick atomically every time it's called. This is notably more expensive than a unsynchronized increment, even without contention. It also updates the archetypes, even when there has been nothing to update when it's called repeatedly.
    
    ## Solution
    Piggyback off of #6885. Split `SystemState::validate_world_and_update_archetypes` into `SystemState::validate_world` and `SystemState::update_archetypes`, and make the later `pub`. Then create safe variants of `SystemState::get_unchecked_manual` that still validate the `World` but do not update archetypes and do not increment the change tick using `World::read_change_tick` and `World::change_tick`. Update `RenderCommandState` to call `SystemState::update_archetypes` in `Draw::prepare` and `SystemState::get_manual` in `Draw::draw`.
    
    ## Performance
    There's a slight perf benefit (~2%) for `main_opaque_pass_3d` on `many_foxes` (340.39 us -> 333.32 us)
    
    ![image](https://user-images.githubusercontent.com/3137680/210643746-25320b98-3e2b-4a95-8084-892c23bb8b4e.png)
    
    ## Alternatives
    We can change `SystemState::get` to not increment the `World`'s change tick. Though this would still put updating the archetypes and an atomic read on the hot-path.
    
    ---
    
    ## Changelog
    Added: `SystemState::get_manual`
    Added: `SystemState::get_manual_mut`
    Added: `SystemState::update_archetypes`

[33mcommit 9eefd7c022efe572ffd2840cfc7a8b9eee982428[m
Author: ickshonpe <david.curthoys@googlemail.com>
Date:   Wed Jan 18 02:19:17 2023 +0000

    Remove VerticalAlign from TextAlignment (#6807)
    
    # Objective
    
    Remove the `VerticalAlign` enum.
    
    Text's alignment field should only affect the text's internal text alignment, not its position. The only way to control a `TextBundle`'s position and bounds should be through the manipulation of the constraints in the `Style` components of the nodes in the Bevy UI's layout tree.
    
     `Text2dBundle` should have a separate `Anchor` component that sets its position relative to its transform.
    
    Related issues: #676, #1490, #5502, #5513, #5834, #6717, #6724, #6741, #6748
    
    ## Changelog
    * Changed `TextAlignment` into an enum with `Left`, `Center`, and `Right` variants.
    * Removed the `HorizontalAlign` and `VerticalAlign` types.
    * Added an `Anchor` component to `Text2dBundle`
    * Added `Component` derive to `Anchor`
    * Use `f32::INFINITY` instead of `f32::MAX` to represent unbounded text in Text2dBounds
    
    ## Migration Guide
    The `alignment` field of `Text` now only affects the text's internal alignment.
    
    ### Change `TextAlignment` to TextAlignment` which is now an enum. Replace:
      * `TextAlignment::TOP_LEFT`, `TextAlignment::CENTER_LEFT`, `TextAlignment::BOTTOM_LEFT` with `TextAlignment::Left`
      * `TextAlignment::TOP_CENTER`, `TextAlignment::CENTER_LEFT`, `TextAlignment::BOTTOM_CENTER` with `TextAlignment::Center`
      * `TextAlignment::TOP_RIGHT`, `TextAlignment::CENTER_RIGHT`, `TextAlignment::BOTTOM_RIGHT` with `TextAlignment::Right`
    
    ### Changes for `Text2dBundle`
    `Text2dBundle` has a new field 'text_anchor' that takes an `Anchor` component that controls its position relative to its transform.

[33mcommit 4ff50f6b5062145592575c98d9cc85f04a23ec82[m
Author: IceSentry <c.giguere42@gmail.com>
Date:   Wed Jan 18 02:07:26 2023 +0000

    fix load_internal_binary_asset with debug_asset_server (#7246)
    
    # Objective
    
    - Enabling the `debug_asset_server` feature doesn't compile when using it with `load_internal_binary_asset!()`. The issue is because it assumes the loader takes an `&'static str` as a parameter, but binary assets loader expect `&'static [u8]`.
    
    ## Solution
    
    - Add a generic type for the loader and use a different type in `load_internal_asset` and `load_internal_binary_asset`

[33mcommit 0df67cdaae30becd35447c6767d5e30afeee17f1[m
Author: dis-da-moe <moe.uraijah@gmail.com>
Date:   Tue Jan 17 22:42:00 2023 +0000

    Add `AddAudioSource` trait and improve `Decodable` docs (#6649)
    
    # Objective
    
    - Fixes #6361
    - Fixes #6362
    - Fixes #6364
    
    ## Solution
    - Added an example for creating a custom `Decodable` type
    - Clarified the documentation on `Decodable`
    - Added an `AddAudioSource` trait and implemented it for `App`
    
    Co-authored-by: dis-da-moe <84386186+dis-da-moe@users.noreply.github.com>

[33mcommit 7d0edbc4d65c483d3e73c574b93a4a36560c0d07[m
Author: James Liu <contact@jamessliu.com>
Date:   Tue Jan 17 22:26:51 2023 +0000

    Improve change detection behavior for transform propagation (#6870)
    
    # Objective
    Fix #4647. If any child is changed, or even reordered, `Changed<Children>` is true, which causes transform propagation to propagate changes to all siblings of a changed child, even if they don't need to be.
    
    ## Solution
    As `Parent` and `Children` are updated in tandem in hierarchy commands after #4800. `Changed<Parent>` is true on the child when `Changed<Children>` is true on the parent. However, unlike checking children, checking `Changed<Parent>` is only localized to the current entity and will not force propagation to the siblings.
    
    Also took the opportunity to change propagation to use `Query::iter_many` instead of repeated `Query::get` calls. Should cut a bit of the overhead out of propagation. This means we won't panic when there isn't a `Parent` on the child, just skip over it.
    
    The tests from #4608 still pass, so the change detection here still works just fine under this approach.

[33mcommit 0ca9c618e1dedecfe737d9a1a23748192e348441[m
Author: Boxy <supbscripter@gmail.com>
Date:   Tue Jan 17 21:11:26 2023 +0000

    Update "Classifying PRs" section to talk about `D-Complex` (#7216)
    
    The current section does not talk about `D-Complex` and lists things like "adds unsafe code" as a reason to mark a PR `S-Controversial`. This is not how `D-Complex` and `S-Controversial` are being used at the moment.
    
    This PR lists what classifies a PR as `D-Complex` and what classifies a PR as `S-Controversial`. It also links to some PRs with each combination of labels to help give an idea for what this means in practice.
    
    cc #7211 which is doing a similar thing

[33mcommit 63a291c6a800a12e8beb3dbad8f64927380493ca[m
Author: Mike <mike.hsu@gmail.com>
Date:   Tue Jan 17 17:54:53 2023 +0000

    add tests for change detection and conditions for stageless (#7249)
    
    # Objective
    
    - add some tests for how change detection and run criteria interact in stageless

[33mcommit 45dfa71e032fef2827f154f60928da84e11cc92d[m
Author: robtfm <50659922+robtfm@users.noreply.github.com>
Date:   Tue Jan 17 17:39:28 2023 +0000

    fix bloom viewport (#6802)
    
    # Objective
    
    fix bloom when used on a camera with a viewport specified
    
    ## Solution
    
    - pass viewport into the prefilter shader, and use it to read from the correct section of the original rendered screen
    - don't apply viewport for the intermediate bloom passes, only for the final blend output

[33mcommit 1cc663f2909e8d8a989668383bb0c3c5f034a816[m
Author: wyhaya <hi@wyhaya.com>
Date:   Tue Jan 17 13:26:43 2023 +0000

    Improve `Color::hex` performance (#6940)
    
    # Objective
    
    Improve `Color::hex` performance
    
    #### Bench
    
    ```bash
    running 2 tests
    test bench_color_hex_after  ... bench:           4 ns/iter (+/- 0)
    test bench_color_hex_before ... bench:          14 ns/iter (+/- 0)
    ```
    
    ## Solution
    
    Use `const fn` decode hex value.
    
    ---
    
    ## Changelog
    
    Rename
    
    ```rust
    HexColorError::Hex(FromHexError) -> HexColorError::Char(char)
    ```

[33mcommit 16ff05acdf2f04c37059c76dc87457d36f78c2f8[m
Author: 2ne1ugly <chattermin@gmail.com>
Date:   Tue Jan 17 04:20:42 2023 +0000

    Add `World::clear_resources` & `World::clear_all` (#3212)
    
    # Objective
    
    - Fixes #3158
    
    ## Solution
    
    - clear columns
    
    My implementation of `clear_resources` do not remove the components itself but it clears the columns that keeps the resource data. I'm not sure if the issue meant to clear all resources, even the components and component ids (which I'm not sure if it's possible)
    
    Co-authored-by: 2ne1ugly <47616772+2ne1ugly@users.noreply.github.com>

[33mcommit b5893e570d2a68471d2f3d147751dcc33bac32e0[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Tue Jan 17 03:29:08 2023 +0000

    Add a missing impl of `ReadOnlySystemParam` for `Option<NonSend<>>` (#7245)
    
    # Objective
    
    The trait `ReadOnlySystemParam` is not implemented for `Option<NonSend<>>`, even though it should be.
    
    Follow-up to #7243. This fixes another mistake made in #6919.
    
    ## Solution
    
    Add the missing impl.

[33mcommit 0efe66b081e0e8ea5bf089b7d2394598a9774993[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Tue Jan 17 01:39:19 2023 +0000

    Remove an incorrect impl of `ReadOnlySystemParam` for `NonSendMut` (#7243)
    
    # Objective
    
    The trait `ReadOnlySystemParam` is implemented for `NonSendMut`, when it should not be. This mistake was made in #6919.
    
    ## Solution
    
    Remove the incorrect impl.

[33mcommit 684f07595f2f440556cd26a3d8fb5af0d809f872[m
Author: Cameron <51241057+maniwani@users.noreply.github.com>
Date:   Tue Jan 17 01:39:17 2023 +0000

    Add `bevy_ecs::schedule_v3` module (#6587)
    
    # Objective
    
    Complete the first part of the migration detailed in bevyengine/rfcs#45.
    
    ## Solution
    
    Add all the new stuff.
    
    ### TODO
    
    - [x] Impl tuple methods.
    - [x] Impl chaining.
    - [x] Port ambiguity detection.
    - [x] Write docs.
    - [x] ~~Write more tests.~~(will do later)
    - [ ] Write changelog and examples here?
    - [x] ~~Replace `petgraph`.~~ (will do later)
    
    
    
    Co-authored-by: james7132 <contact@jamessliu.com>
    Co-authored-by: Michael Hsu <mike.hsu@gmail.com>
    Co-authored-by: Mike Hsu <mike.hsu@gmail.com>

[33mcommit 6b4795c428f694a332f0a4710df1ba9b5499bc26[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Mon Jan 16 23:13:11 2023 +0000

    Add `Camera::viewport_to_world_2d` (#6557)
    
    # Objective
    
    Add a simpler and less expensive 2D variant of `viewport_to_world`.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 39e14a4a40014fe5f14bef9cf39916ed3e799b2e[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Mon Jan 16 22:10:51 2023 +0000

    Make `EntityRef::new` unsafe (#7222)
    
    # Objective
    
    - We rely on the construction of `EntityRef` to be valid elsewhere in unsafe code. This construction is not checked (for performance reasons), and thus this private method must be unsafe.
    - Fixes #7218.
    
    ## Solution
    
    - Make the method unsafe.
    - Add safety docs.
    - Improve safety docs slightly for the sibling `EntityMut::new`.
    - Add debug asserts to start to verify these assumptions in debug mode.
    
    
    ## Context for reviewers
    
    I attempted to verify the `EntityLocation` more thoroughly, but this turned out to be more work than expected. I've spun that off into #7221 as a result.

[33mcommit e44990a48d97fe73aef8f53d2016bd05b260e1ba[m
Author: ld000 <voidd247@outlook.com>
Date:   Mon Jan 16 21:24:15 2023 +0000

    Add ReplaceChildren and ClearChildren EntityCommands (#6035)
    
    # Objective
    
    Fixes #5859
    
    ## Solution
    
    - Add `ClearChildren` and `ReplaceChildren` commands in the `crates/bevy_hierarchy/src/child_builder.rs`
    
    ---
    
    ## Changelog
    
      - Added `ClearChildren` and `ReplaceChildren` struct
      - Added `clear_children(&mut self) -> &mut Self` and `replace_children(&mut self, children: &[Entity]) -> &mut Self` function in `BuildChildren` trait
      - Changed `PushChildren` `write` function body to a `push_children ` function to reused in `ReplaceChildren`
      - Added `clear_children` function
      - Added `push_and_replace_children_commands` and `push_and_clear_children_commands` test
    
    
    
    Co-authored-by: ld000 <lidong9144@163.com>
    Co-authored-by: lidong63 <lidong63@meituan.com>

[33mcommit d4e3fcdfbf306c10cd28cb914e228cc0a24c2336[m
Author: Elbert Ronnie <elbert.ronniep@gmail.com>
Date:   Mon Jan 16 21:09:24 2023 +0000

    Fix incorrect behavior of `just_pressed` and `just_released` in `Input<GamepadButton>` (#7238)
    
    # Objective
    
    - Fixes a bug where `just_pressed` and `just_released` in `Input<GamepadButton>` might behave incorrectly due calling `clear` 3 times in a single frame through these three different systems: `gamepad_button_event_system`, `gamepad_axis_event_system` and `gamepad_connection_system` in any order
    
    ## Solution
    
    - Call `clear` only once and before all the above three systems, i.e. in `gamepad_event_system`
    
    ## Additional Info
    
    - Discussion in Discord: https://discord.com/channels/691052431525675048/768253008416342076/1064621963693273279

[33mcommit addc36fe297bce3325cf1fa110a67692ac09d232[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Mon Jan 16 20:35:15 2023 +0000

    Add safety comments to usages of `byte_add` (`Ptr`, `PtrMut`, `OwningPtr`) (#7214)
    
    # Objective
    
    The usages of the unsafe function `byte_add` are not properly documented.
    
    Follow-up to #7151.
    
    ## Solution
    
    Add safety comments to each call-site.

[33mcommit 5fd628ebd32aea9a38882dfc38cc3160cf4c82f7[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Mon Jan 16 20:20:37 2023 +0000

    Fix Alien Cake Addict example despawn warnings (#7236)
    
    # Problem
    The example's `teardown` system despawns all entities besides the camera using `despawn_recursive` causing it to despawn child entities multiple times which logs a warning.
    ![image](https://user-images.githubusercontent.com/29694403/212756554-06b3fa42-ddcb-4a05-b841-f587488a10fc.png)
    
    # Solution
    Use `despawn` instead.
    
    Co-authored-by: Devil Ira <justthecooldude@gmail.com>

[33mcommit 2f4cf768661839079f49fe5ef9527248a9131b95[m
Author: Nicola Papale <nico@nicopap.ch>
Date:   Mon Jan 16 18:13:04 2023 +0000

    Fix axis settings constructor (#7233)
    
    # Objective
    
    Currently, the `AxisSettings::new` function is unusable due to
    an implementation quirk. It only allows `AxisSettings` where
    the bounds that are supposed to be positive are negative!
    
    ## Solution
    
    - We fix the bound check
    - We add a test to make sure the method is usable
    
    
    Seems like the error slipped through because of the relatively
    verbose code style. With all those `if/else`, very long names,
    range syntax, the bound check is actually hard to spot. I first
    refactored a lot of code, but I left out the refactor because the
    fix should be integrated independently.
    
    ---
    
    ## Changelog
    
    - Fix `AxisSettings::new` only accepting invalid bounds

[33mcommit 83028994d17842e975b17bd849ab76c3ef6e5fbb[m
Author: Thierry Berger <contact@thierryberger.com>
Date:   Mon Jan 16 17:36:09 2023 +0000

    Optional BEVY_ASSET_ROOT to find assets directory (#5346)
    
    # Objective
    
    Fixes #5345
    
    ## Changelog
    
    - Support optional env variable `BEVY_ASSET_ROOT` to explicitly specify root assets directory.

[33mcommit a792f37040f5edb62a6a13166c72978e1cbc9c9c[m
Author: Dawid Piotrowski <dawidekpe@gmail.com>
Date:   Mon Jan 16 17:17:45 2023 +0000

    Relative cursor position (#7199)
    
    # Objective
    
    Add useful information about cursor position relative to a UI node. Fixes #7079.
    
    ## Solution
    
    - Added a new `RelativeCursorPosition` component
    
    ---
    
    ## Changelog
    
    - Added
      - `RelativeCursorPosition`
      - an example showcasing the new component
    
    Co-authored-by: Dawid Piotrowski <41804418+Pietrek14@users.noreply.github.com>

[33mcommit 517deda215f58da2b6f27d373c42b97a93a95d58[m
Author: Daniel Chia <danstryder@gmail.com>
Date:   Mon Jan 16 15:41:14 2023 +0000

    Make PipelineCache internally mutable. (#7205)
    
    # Objective
    
    - Allow rendering queue systems to use a `Res<PipelineCache>` even for queueing up new rendering pipelines. This is part of unblocking parallel execution queue systems.
    
    ## Solution
    
    - Make `PipelineCache` internally mutable w.r.t to queueing new pipelines. Pipelines are no longer immediately updated into the cache state, but rather queued into a Vec. The Vec of pending new pipelines is then later processed at the same time we actually create the queued pipelines on the GPU device.
    
    ---
    
    ## Changelog
    
    `PipelineCache` no longer requires mutable access in order to queue render / compute pipelines.
    
    ## Migration Guide
    
    * Most usages of `resource_mut::<PipelineCache>` and `ResMut<PipelineCache>` can be changed to `resource::<PipelineCache>` and `Res<PipelineCache>` as long as they don't use any methods requiring mutability - the only public method requiring it is `process_queue`.

[33mcommit 4b326fb4caed0bcad85954083f87846adface8ad[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Mon Jan 16 15:41:12 2023 +0000

    Improve safety for `BlobVec::replace_unchecked` (#7181)
    
    # Objective
    
    - The function `BlobVec::replace_unchecked` has informal use of safety comments.
    - This function does strange things with `OwningPtr` in order to get around the borrow checker.
    
    ## Solution
    
    - Put safety comments in front of each unsafe operation. Describe the specific invariants of each operation and how they apply here.
    - Added a guard type `OnDrop`, which is used to simplify ownership transfer in case of a panic.
    
    ---
    
    ## Changelog
    
    + Added the guard type `bevy_utils::OnDrop`.
    + Added conversions from `Ptr`, `PtrMut`, and `OwningPtr` to `NonNull<u8>`.

[33mcommit 38005b07021691af5d36f07a78a69671e250a5f1[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Mon Jan 16 15:22:38 2023 +0000

    Support piping exclusive systems (#7023)
    
    # Objective
    
    Fix #5248.
    
    ## Solution
    
    Support `In<T>` parameters and allow returning arbitrary types in exclusive systems.
    
    ---
    
    ## Changelog
    
    - Exclusive systems may now be used with system piping.
    
    ## Migration Guide
    
    Exclusive systems (systems that access `&mut World`) now support system piping, so the `ExclusiveSystemParamFunction` trait now has generics for the `In`put and `Out`put types.
    
    ```rust
    // Before
    fn my_generic_system<T, Param>(system_function: T)
    where T: ExclusiveSystemParamFunction<Param>
    { ... }
    
    // After
    fn my_generic_system<T, In, Out, Param>(system_function: T)
    where T: ExclusiveSystemParamFunction<In, Out, Param>
    { ... }
    ```

[33mcommit c56bbcb3b037916ffa64d4b753fb8636756ea9be[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jan 15 06:13:56 2023 +0000

    Use Bevy People links in The Bevy Organization Doc (#7200)
    
    Bevy People should be considered the source of truth for Bevy Organization roles. This replaces inline lists of maintainers and SMEs with links to Bevy People.

[33mcommit e42c0988eba616902d2fa615adde6d5598b3712a[m
Author: 2ne1ugly <47616772+2ne1ugly@users.noreply.github.com>
Date:   Sun Jan 15 05:56:14 2023 +0000

    Add missing discord link in "the_bevy_organization.md" (#7203)
    
    # Objective
    
    - Add change that was suggested in https://github.com/bevyengine/bevy/pull/7185#pullrequestreview-1248746032 but missed
    
    ## Solution
    
    - Add the change

[33mcommit 82b0e712cea379f8134b93d154efec616314f7a9[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jan 14 20:36:56 2023 +0000

    Subject Matter Experts and new Bevy Org docs (#7185)
    
    We are in the process of rolling out a new Bevy Organization role! (Subject Matter Expert)
    
    This adds a new "The Bevy Organization" document and links to it from CONTRIBUTING.md. This doc describes how the Bevy Organization will work going forward. It outlines the functionality of each role, as well as the expectations we have for them. The previously existing roles (Project Lead, Maintainer) still work the same way, but their definition and scope have been made much clearer.
    
    Tomorrow we will be announcing this publicly in a blog post. This will describe the motivation and announce the first round of SMEs . But before that  it makes sense to do a quick review round first.
    
    Given the quick turnaround on this PR, this isn't the best platform to discuss changes to the SME system (or its validity). After you have read the announcement tomorrow, feel free to start discussions wherever is preferable to you (this repo, discord, etc). So for now, please just review for clarity / typos / phrasing / missed info / etc.
    
    [Rendered](https://github.com/bevyengine/bevy/blob/08ceae43dbfacf630447e5f5f1cfa53397242687/docs/the_bevy_organization.md)

[33mcommit 908c40dd88f88219ab8fc11650531bd194bab2e7[m
Author: Sludge <96552222+SludgePhD@users.noreply.github.com>
Date:   Sat Jan 14 18:33:38 2023 +0000

    Implement `Clone` for all pipeline types (#6653)
    
    # Objective
    
    Pipelines can be customized by wrapping an existing pipeline in a newtype and adding custom logic to its implementation of `SpecializedMeshPipeline::specialize`. To make that easier, the wrapped pipeline type needs to implement `Clone`.
    
    For example, the current non-cloneable pipelines require wrapper pipelines to pull apart the wrapped pipeline like this:
    
    ```rust
    impl FromWorld for Wireframe2dPipeline {
        fn from_world(world: &mut World) -> Self {
            let p = &world.resource::<Material2dPipeline<ColorMaterial>>();
            Self {
                mesh2d_pipeline: p.mesh2d_pipeline.clone(),
                material2d_layout: p.material2d_layout.clone(),
                vertex_shader: p.vertex_shader.clone(),
                fragment_shader: p.fragment_shader.clone(),
            }
        }
    }
    ```
    
    ## Solution
    
    Derive or implement `Clone` on all built-in pipeline types. This is easy to do since they mostly just contain cheaply clonable reference-counted types.
    
    ---
    
    ## Changelog
    
    Implement `Clone` for all pipeline types.

[33mcommit d9265db3447dfe8b74b40de297a3ad7d696f4ece[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Fri Jan 13 22:35:43 2023 +0000

    Implement `ReadOnlySystemParam` for `Extract<>` (#7182)
    
    # Objective
    
    - `Extract` does not implement `ReadOnlySystemParam` even though it should.
    - Noticed by @hymm on discord: https://discord.com/channels/691052431525675048/749335865876021248/1063535818267963543
    
    ## Solution
    
    Implement the trait.

[33mcommit 0af8e1c2117fa5b36e084848edf0a173207d6f4e[m
Author: robtfm <50659922+robtfm@users.noreply.github.com>
Date:   Fri Jan 13 17:06:24 2023 +0000

    fix spot dir nan again (#7176)
    
    # Objective
    
    fix error with shadow shader's spotlight direction calculation when direction.y ~= 0
    fixes #7152
    
    ## Solution
    
    same as #6167: in shadows.wgsl, clamp 1-x^2-z^2 to >= 0 so that we can safely sqrt it

[33mcommit 008c156991a52532fbab7061a1bee668c78fac91[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Fri Jan 13 16:50:26 2023 +0000

    refactor: move internals from `entity_ref` to `World`, add `SAFETY` comments (#6402)
    
    # Objective
    
    There are some utility functions for actually working with `Storages` inside `entity_ref.rs` that are used both for `EntityRef/EntityMut` and `World`, with a `// TODO: move to Storages`.
    This PR moves them to private methods on `World`, because that's the safest API boundary. On `Storages` you would need to ensure that you pass `Components` from the same world.
    
    ## Solution
    
    - move get_component[_with_type], get_ticks[_with_type], get_component_and_ticks[_with_type] to `World` (still pub(crate))
    - replace `pub use entity_ref::*;` with `pub use entity_ref::{EntityRef, EntityMut}` and qualified `entity_ref::get_mut[_by_id]` in `world.rs`
    - add safety comments to a bunch of methods

[33mcommit feac2c206c820934942e5228a1e77c723385e717[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Thu Jan 12 23:25:11 2023 +0000

    Remove duplicate lookups from `Resource` initialization (#7174)
    
    # Objective
    
    * `World::init_resource` and `World::get_resource_or_insert_with` are implemented naively, and as such they perform duplicate `TypeId -> ComponentId` lookups.
    * `World::get_resource_or_insert_with` contains an additional duplicate `ComponentId -> ResourceData` lookup.
        * This function also contains an unnecessary panic branch, which we rely on the optimizer to be able to remove.
    
    ## Solution
    
    Implement the functions using engine-internal code, instead of combining high-level functions. This allows computed variables to persist across different branches, instead of being recomputed.

[33mcommit b47c466880dd94b36e085e4e7fc7d271cf94353b[m
Author: James Liu <contact@jamessliu.com>
Date:   Thu Jan 12 22:39:59 2023 +0000

    Use Ref instead of &T and Changed<T> (#7175)
    
    # Objective
    Follow up #7097. Use `Ref<T>` instead of `&T` and the change detection query params.
    
    ## Solution
    Replace them.

[33mcommit 689eab6fb7028e3da2d0e01b8e2d8b26f59c92cb[m
Author: Nicola Papale <nico@nicopap.ch>
Date:   Thu Jan 12 18:46:11 2023 +0000

    Add an extension trait to `EntityCommands` to update hierarchy while preserving `GlobalTransform` (#7024)
    
    # Objective
    
    It is often necessary  to update an entity's parent
    while keeping its GlobalTransform static. Currently
    it is cumbersome and error-prone (two questions in
    the discord `#help` channel in the past week)
    
    - Part 2, resolves #5475
    - Builds on: #7020.
    
    ## Solution
    
    - Added the `BuildChildrenTransformExt` trait, it is part
      of `bevy::prelude` and adds the following methods to `EntityCommands`:
      - `set_parent_in_place`: Change the parent of an entity and
        update its `Transform` in order to preserve its `GlobalTransform` after the parent change
      - `remove_parent_in_place`: Remove an entity from a hierarchy,
        while preserving its `GlobalTransform`.
    
    ---
    
    ## Changelog
    
    
    - Added the `BuildChildrenTransformExt` trait, it is part
      of `bevy::prelude` and adds the following methods to `EntityCommands`:
      - `set_parent_in_place`: Change the parent of an entity and
        update its `Transform` in order to preserve its `GlobalTransform` after the parent change
      - `remove_parent_in_place`: Remove an entity from a hierarchy,
        while preserving its `GlobalTransform`.
    
    Co-authored-by: Nicola Papale <nicopap@users.noreply.github.com>

[33mcommit ba3069f008c7384cbc3179991699ceb38a6f3a8f[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Jan 12 17:15:20 2023 +0000

    Change default FocusPolicy to Pass (#7161)
    
    # Objective
    
    - While building UI, it makes more sense for most nodes to have a `FocusPolicy` of `Pass`, so that user interaction can correctly bubble
    - Only `ButtonBundle` blocks by default
    
    This change means that for someone adding children to a button, it's not needed to change the focus policy of those children to `Pass` for the button to continue to work.
    
    ---
    
    ## Changelog
    
    - `FocusPolicy` default has changed from `FocusPolicy::Block` to `FocusPolicy::Pass`
    
    ## Migration Guide
    
    - `FocusPolicy` default has changed from `FocusPolicy::Block` to `FocusPolicy::Pass`

[33mcommit 76de9f940786698ec7a33ecbfe916acbc9e2f33b[m
Author: Kurt KÃ¼hnert <kurt@kuehnert.dev>
Date:   Thu Jan 12 15:11:58 2023 +0000

    Improve render phase documentation (#7016)
    
    # Objective
    
    The documentation of the bevy_render crate is still pretty incomplete.
    This PR follows up on #6885 and improves the documentation of the `render_phase` module.
    This module contains one of our most important rendering abstractions and the current documentation is pretty confusing. This PR tries to clarify what all of these pieces are for and how they work together to form bevy`s modular rendering logic.
    
    ## Solution
    
    ### Code Reformating
    - I have moved the `rangefinder` into the `render_phase` module since it is only used there.
    - I have moved the `PhaseItem` (and the `BatchedPhaseItem`) from `render_phase::draw` over to `render_phase::mod`. This does not change the public-facing API since they are reexported anyway, but this change makes the relation between `RenderPhase` and `PhaseItem` clear and easier to discover.
    
    ### Documentation
    - revised all documentation in the `render_phase` module
    - added a module-level explanation of how `RenderPhase`s, `RenderPass`es, `PhaseItem`s, `Draw` functions, and `RenderCommands` relate to each other and how they are used
    
    ---
    
    ## Changelog
    
    - The `rangefinder` module has been moved into the `render_phase` module.
    
    ## Migration Guide
    
    - The `rangefinder` module has been moved into the `render_phase` module.
    
    ```rust
    //old
    use bevy::render::rangefinder::*;
    
    // new
    use bevy::render::render_phase::rangefinder::*;
    ```

[33mcommit f4920bbd6d2d31c1fb25a359c2aff71eefe2620a[m
Author: James Liu <contact@jamessliu.com>
Date:   Wed Jan 11 23:31:22 2023 +0000

    Mark TableRow and TableId as repr(transparent) (#7166)
    
    # Objective
    Following #6681, both `TableRow` and `TableId` are now part of `EntityLocation`. However, the safety invariant on `EntityLocation` requires that all of the constituent fields are `repr(transprent)` or `repr(C)` and the bit pattern of all 1s must be valid. This is not true for `TableRow` and `TableId` currently.
    
    ## Solution
    Mark `TableRow` and `TableId` to satisfy the safety requirement. Add safety comments on `ArchetypeId`, `ArchetypeRow`, `TableId` and `TableRow`.

[33mcommit dfc4f05c87bba6c54ae8bc8d70c32f4dec4fefba[m
Author: James Liu <contact@jamessliu.com>
Date:   Wed Jan 11 23:12:20 2023 +0000

    Ensure Ptr/PtrMut/OwningPtr are aligned when casting in debug builds (#7117)
    
    # Objective
    Improve safety testing when using `bevy_ptr` types. This is a follow-up to #7113.
    
    ## Solution
    Add a debug-only assertion that pointers are aligned when casting to a concrete type. This should very quickly catch any unsoundness from unaligned pointers, even without miri. However, this can have a large negative perf impact on debug builds.
    
    ---
    
    ## Changelog
    Added: `Ptr::deref` will now panic in debug builds if the pointer is not aligned.
    Added: `PtrMut::deref_mut` will now panic in debug builds if the pointer is not aligned.
    Added: `OwningPtr::read` will now panic in debug builds if the pointer is not aligned.
    Added: `OwningPtr::drop_as` will now panic in debug builds if the pointer is not aligned.

[33mcommit 60be8759e37e00131d01b649e288c599652aff0d[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Jan 11 21:12:02 2023 +0000

    add helper for macro to get either bevy::x or bevy_x depending on how it was imported (#7164)
    
    # Objective
    
    - It can be useful for third party crates to work independently on how bevy is imported
    
    ## Solution
    
    - Expose an helper to get a subcrate path for macros

[33mcommit 7783393c56f183bcd3b5506906b84d3014594b55[m
Author: å¼ æä¼ <lewiszlw520@gmail.com>
Date:   Wed Jan 11 21:12:01 2023 +0000

    Expose transform propagate systems (#7145)
    
    # Objective
    
    - I tried to create a fork of bevy_rapier to track latest bevy main branch. But bevy_rapier depends on bevy internal `propagate_transforms` system (see https://github.com/dimforge/bevy_rapier/blob/master/src/plugin/plugin.rs#L64).
    - `propagate_transforms` system was changed to private in https://github.com/bevyengine/bevy/pull/4775.
    
    I don't know if it's reasonable that making `propagate_transforms` public. I also created an issue to bevy_rapier https://github.com/dimforge/bevy_rapier/issues/307 to see how offical team will solve this issue.
    
    ## Solution
    
    - make `propagate_transforms` system public.

[33mcommit aa3dd14badcb0e1f170614bce35040ef22a234d1[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Jan 11 20:52:04 2023 +0000

    gate an import used only for a debug assert (#7165)
    
    # Objective
    
    - There is a warning when building in release:
    ```
    warning: unused import: `bevy_ecs::system::Local`
     --> crates/bevy_render/src/extract_resource.rs:5:5
      |
    5 | use bevy_ecs::system::Local;
      |     ^^^^^^^^^^^^^^^^^^^^^^^
      |
      = note: `#[warn(unused_imports)]` on by default
    ```
    - It's used https://github.com/bevyengine/bevy/blob/59751d6e33d94eff6e1fc20c9ae155974b3860b1/crates/bevy_render/src/extract_resource.rs#L47
    - Fix it
    
    ## Solution
    
    - Gate the import
    - repeat of #5320

[33mcommit 59751d6e33d94eff6e1fc20c9ae155974b3860b1[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Wed Jan 11 17:47:54 2023 +0000

    Add a method for converting `MutUntyped` -> `Mut<T>` (#7113)
    
    # Objective
    
    `MutUntyped` is a struct that stores a `PtrMut` alongside change tick metadata. Working with this type is cumbersome, and has few benefits over storing the pointer and change ticks separately.
    
    Related: #6430 (title is out of date)
    
    ## Solution
    
    Add a convenience method for transforming an untyped change detection pointer into its typed counterpart.
    
    ---
    
    ## Changelog
    
    - Added the method `MutUntyped::with_type`.

[33mcommit 15ee98db8d1c6705111e0f11a8fc240ceaf9f2db[m
Author: Guillaume Gomez <guillaume1.gomez@gmail.com>
Date:   Wed Jan 11 17:01:11 2023 +0000

    Add "transparent" doc alias for Color::NONE (#7160)
    
    As mentioned in https://github.com/bevyengine/bevy/pull/6530. It allows to not create a new constant and simply having it to show up in the documentation when someone is looking for "transparent" (case insensitive) in rustdoc search.
    
    cc @alice-i-cecile

[33mcommit 6cc01c144947b54392a71a261651c6fe11916eea[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Wed Jan 11 16:46:27 2023 +0000

    bevy_reflect: Add simple enum support to reflection paths (#6560)
    
    # Objective
    
    Enums are now reflectable, but are not accessible via reflection paths.
    
    This would allow us to do things like:
    
    ```rust
    #[derive(Reflect)]
    struct MyStruct {
      data: MyEnum
    }
    
    #[derive(Reflect)]
    struct MyEnum {
      Foo(u32, u32),
      Bar(bool)
    }
    
    let x = MyStruct {
      data: MyEnum::Foo(123),
    };
    
    assert_eq!(*x.get_path::<u32>("data.1").unwrap(), 123);
    ```
    
    ## Solution
    
    Added support for enums in reflection paths.
    
    ##### Note
    This uses a simple approach of just getting the field with the given accessor. It does not do matching or anything else to ensure the enum is the intended variant. This means that the variant must be known ahead of time or matched outside the reflection path (i.e. path to variant, perform manual match, and continue pathing).
    
    ---
    
    ## Changelog
    
    - Added support for enums in reflection paths

[33mcommit 229d6c686fae19ff45b7bddfe9f853096b56f211[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Wed Jan 11 16:25:37 2023 +0000

    bevy_reflect: Simplify `take`-or-else-`from_reflect` operation (#6566)
    
    # Objective
    
    There are times where we want to simply take an owned `dyn Reflect` and cast it to a type `T`.
    
    Currently, this involves doing:
    
    ```rust
    let value = value.take::<T>().unwrap_or_else(|value| {
      T::from_reflect(&*value).unwrap_or_else(|| {
        panic!(
          "expected value of type {} to convert to type {}.",
          value.type_name(),
          std::any::type_name::<T>()
        )
      })
    });
    ```
    
    This is a common operation that could be easily be simplified.
    
    ## Solution
    
    Add the `FromReflect::take_from_reflect` method. This first tries to `take` the value, calling `from_reflect` iff that fails.
    
    ```rust
    let value = T::take_from_reflect(value).unwrap_or_else(|value| {
      panic!(
        "expected value of type {} to convert to type {}.",
        value.type_name(),
        std::any::type_name::<T>()
      )
    });
    ```
    
    Based on suggestion from @soqb on [Discord](https://discord.com/channels/691052431525675048/1002362493634629796/1041046880316043374).
    
    ---
    
    ## Changelog
    
    - Add `FromReflect::take_from_reflect` method

[33mcommit 9dd8fbc570fb08eca9301ac4cd47844624eed22a[m
Author: Joshua Chapman <guvante@gmail.com>
Date:   Wed Jan 11 15:41:54 2023 +0000

    Added Ref to allow immutable access with change detection (#7097)
    
    # Objective
    
    - Fixes #7066
    
    ## Solution
    
    - Split the ChangeDetection trait into ChangeDetection and ChangeDetectionMut
    - Added Ref as equivalent to &T with change detection
    
    ---
    
    ## Changelog
    
    - Support for Ref which allow inspecting change detection flags in an immutable way
    
    ## Migration Guide
    
    - While bevy prelude includes both ChangeDetection and ChangeDetectionMut any code explicitly referencing ChangeDetection might need to be updated to ChangeDetectionMut or both. Specifically any reading logic requires ChangeDetection while writes requires ChangeDetectionMut.
    
    use bevy_ecs::change_detection::DetectChanges -> use bevy_ecs::change_detection::{DetectChanges, DetectChangesMut}
    
    - Previously Res had methods to access change detection `is_changed` and `is_added` those methods have been moved to the `DetectChanges` trait. If you are including bevy prelude you will have access to these types otherwise you will need to `use bevy_ecs::change_detection::DetectChanges` to continue using them.

[33mcommit 0d2cdb450d49bc8abea5e0b46275288efc453f3c[m
Author: å¼ æä¼ <lewiszlw520@gmail.com>
Date:   Wed Jan 11 09:51:22 2023 +0000

    Fix beta clippy lints (#7154)
    
    # Objective
    
    - When I run `cargo run -p ci` for my pr locally using latest beta toolchain, the ci failed due to [uninlined_format_args](https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args) and [needless_lifetimes](https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes) lints
    
    ## Solution
    
    - Fix lints according to clippy suggestions.

[33mcommit bb79903938691220641a9afcdb73b9bce7ca522b[m
Author: å¼ æä¼ <lewiszlw520@gmail.com>
Date:   Wed Jan 11 09:32:07 2023 +0000

    Fix clippy issue for benches crate (#6806)
    
    # Objective
    
    - https://github.com/bevyengine/bevy/pull/3505 marked `S-Adopt-Me` , this pr is to continue his work.
    
    ## Solution
    
    - run `cargo clippy --workspace --all-targets --all-features -- -Aclippy::type_complexity -Wclippy::doc_markdown -Wclippy::redundant_else -Wclippy::match_same_arms -Wclippy::semicolon_if_nothing_returned -Wclippy::explicit_iter_loop -Wclippy::map_flatten -Dwarnings` under benches dir.
    - fix issue according to suggestion.

[33mcommit 512f376fc1f88a696849cd06586bccc85441bb2e[m
Author: Boxy <supbscripter@gmail.com>
Date:   Tue Jan 10 23:12:52 2023 +0000

    Document alignment requirements of `Ptr`, `PtrMut` and `OwningPtr` (#7151)
    
    # Objective
    
    The types in the `bevy_ptr` accidentally did not document anything relating to alignment. This is unsound as many methods rely on the pointer being correctly aligned.
    
    ## Solution
    
    This PR introduces new safety invariants on the `$ptr::new`, `$ptr::byte_offset` and `$ptr::byte_add` methods requiring them to keep the pointer aligned. This is consistent with the documentation of these pointer types which document them as being "type erased borrows".
    
    As it was pointed out (by @JoJoJet in #7117) that working with unaligned pointers can be useful (for example our commands abstraction which does not try to align anything properly, see #7039) this PR also introduces a default type parameter to all the pointer types that specifies whether it has alignment requirements or not. I could not find any code in `bevy_ecs` that would need unaligned pointers right now so this is going unused.
    
    ---
    
    ## Changelog
    
    - Correctly document alignment requirements on `bevy_ptr` types.
    - Support variants of `bevy_ptr` types that do not require being correctly aligned for the pointee type.
    
    ## Migration Guide
    
    - Safety invariants on `bevy_ptr` types' `new` `byte_add` and `byte_offset` methods have been changed. All callers should re-audit for soundness.

[33mcommit a13b6f8a054c0d6d21de5cb6dd2ed7705c9bea92[m
Author: Mike <mike.hsu@gmail.com>
Date:   Tue Jan 10 22:32:42 2023 +0000

    Thread executor for running tasks on specific threads. (#7087)
    
    # Objective
    
    - Spawn tasks from other threads onto an async executor, but limit those tasks to run on a specific thread.
    - This is a continuation of trying to break up some of the changes in pipelined rendering.
    - Eventually this will be used to allow `NonSend` systems to run on the main thread in pipelined rendering #6503 and also to solve #6552.
    - For this specific PR this allows for us to store a thread executor in a thread local, rather than recreating a scope executor for every scope which should save on a little work.
    
    ## Solution
    
    - We create a Executor that does a runtime check for what thread it's on before creating a !Send ticker. The ticker is the only way for the executor to make progress.
    
    ---
    
    ## Changelog
    
    - create a ThreadExecutor that can only be ticked on one thread.

[33mcommit d4babafe81afb20f1d8d3665c1f04440dba90628[m
Author: Boxy <supbscripter@gmail.com>
Date:   Tue Jan 10 18:55:23 2023 +0000

    Make `Query` fields private (#7149)
    
    `Query`'s fields being `pub(crate)` means that the struct can be constructed via safe code from anywhere in `bevy_ecs` . This is Not Good since it is intended that all construction of this type goes through `Query::new` which is an `unsafe fn` letting various `Query` methods rely on those invariants holding even though they can be trivially bypassed.
    
    This has no user facing impact

[33mcommit 3600c5a340bb4d3a7fae0c463e01d6c0028ccf97[m
Author: Nicola Papale <nico@nicopap.ch>
Date:   Tue Jan 10 18:55:22 2023 +0000

    Remove the `GlobalTransform::translation_mut` method (#7134)
    
    # Objective
    
    It is possible to manually update `GlobalTransform`.
    The engine actually assumes this is not possible.
    For example, `propagate_transform` does not update children
    of an `Entity` which **`GlobalTransform`** changed,
    leading to unexpected behaviors.
    
    A `GlobalTransform` set by the user may also be blindly
    overwritten by the propagation system.
    
    ## Solution
    
    - Remove `translation_mut`
    - Explain to users that they shouldn't manually update the `GlobalTransform`
    - Remove `global_vs_local.rs` example, since it misleads users
      in believing that it is a valid use-case to manually update the
      `GlobalTransform`
    
    ---
    
    ## Changelog
    
    - Remove `GlobalTransform::translation_mut`
    
    ## Migration Guide
    
    `GlobalTransform::translation_mut` has been removed without alternative,
    if you were relying on this, update the `Transform` instead. If the given entity
    had children or parent, you may need to remove its parent to make its transform
    independent (in which case the new `Commands::set_parent_in_place` and
    `Commands::remove_parent_in_place` may be of interest)
    
    Bevy may add in the future a way to toggle transform propagation on
    an entity basis.

[33mcommit fa40e2badb1dbd0ffa8a78ef9068e68abaf70493[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Tue Jan 10 18:41:50 2023 +0000

    Fix a miscompilation with `#[derive(SystemParam)]` (#7105)
    
    # Objective
    
    - Fix #7103.
    - The issue is caused because I forgot to add a where clause to a generated struct in #7056.
    
    ## Solution
    
    - Add the where clause.

[33mcommit a2071783446e85db716db4bb0068b03444d3825a[m
Author: Tirth Patel <tirthnp@live.com>
Date:   Tue Jan 10 17:48:34 2023 +0000

    Add wrapping_add to change_tick (#7146)
    
    # Objective
    
    Fixes #7140
    
    
    ## Solution
    
    As discussed in the issue, added wrapping_add
    
    ---

[33mcommit d03c1a06874f95bba1127b9aa2fd7a4d0b3eb723[m
Author: Boxy <supbscripter@gmail.com>
Date:   Tue Jan 10 17:25:45 2023 +0000

    Ensure `Query` does not use the wrong `World` (#7150)
    
    `Query` relies on the `World` it stores being the same as the world used for creating the `QueryState` it stores. If they are not the same then everything is very unsound. This was not actually being checked anywhere, `Query::new` did not have a safety invariant or even an assertion that the `WorldId`'s are the same.
    
    This shouldn't have any user facing impact unless we have really messed up in bevy and have unsoundness elsewhere (in which case we would now get a panic instead of being unsound).

[33mcommit aaaf357dbb352232810a02c7bbd0090109eaea53[m
Author: zeroacez <sebfr298@student.liu.se>
Date:   Tue Jan 10 17:25:44 2023 +0000

    Added docs for ``.apply()``in basic usage of ``systemState`` (#7138)
    
    # Objective
    
    Fixes #5940
    
    ## Solution
    
    Added the suggested comment.
    
    Co-authored-by: zeroacez <43633834+zeroacez@users.noreply.github.com>

[33mcommit e4d54739e7539a45e9c47157ef3a6f27f0f32a5c[m
Author: Mike <mike.hsu@gmail.com>
Date:   Tue Jan 10 17:07:27 2023 +0000

    add link to tracy compatibility table (#7144)
    
    # Objective
    
    - Fixes https://github.com/bevyengine/bevy/issues/5200

[33mcommit 9adc8cdaf6d3ae9249654d80f44fc6b327f721ba[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Mon Jan 9 22:20:10 2023 +0000

    Add `Mut::reborrow` (#7114)
    
    # Objective
    
    - In some cases, you need a `Mut<T>` pointer, but you only have a mutable reference to one. There is no easy way of converting `&'a mut Mut<'_, T>` -> `Mut<'a, T>` outside of the engine.
    
    ### Example (Before)
    
    ```rust
    fn do_with_mut<T>(val: Mut<T>) { ... }
    
    for x: Mut<T> in &mut query {
        // The function expects a `Mut<T>`, so `x` gets moved here.
        do_with_mut(x);
        // Error: use of moved value.
        do_a_thing(&x);
    }
    ```
    
    ## Solution
    
    - Add the function `reborrow`, which performs the mapping. This is analogous to `PtrMut::reborrow`.
    
    ### Example (After)
    
    ```rust
    fn do_with_mut<T>(val: Mut<T>) { ... }
    
    for x: Mut<T> in &mut query {
        // We reborrow `x`, so the original does not get moved.
        do_with_mut(x.reborrow());
        // Works fine.
        do_a_thing(&x);
    }
    ```
    
    ---
    
    ## Changelog
    
    - Added the method `reborrow` to `Mut`, `ResMut`, `NonSendMut`, and `MutUntyped`.

[33mcommit 871c80c103f977425b28e3ae31e565785cffa4be[m
Author: Giacomo Stevanato <giaco.stevanato@gmail.com>
Date:   Mon Jan 9 21:57:14 2023 +0000

    Add `TypeRegistrationDeserializer` and remove `BorrowedStr` (#7094)
    
    # Objective
    
    This a follow-up to #6894, see https://github.com/bevyengine/bevy/pull/6894#discussion_r1045203113
    
    The goal is to avoid cloning any string when getting a `&TypeRegistration` corresponding to a string which is being deserialized. As a bonus code duplication is also reduced.
    
    ## Solution
    
    The manual deserialization of a string and lookup into the type registry has been moved into a separate `TypeRegistrationDeserializer` type, which implements `DeserializeSeed` with a `Visitor` that accepts any string with `visit_str`, even ones that may not live longer than that function call.
    `BorrowedStr` has been removed since it's no longer used.
    
    ---
    
    ## Changelog
    
    - The type `TypeRegistrationDeserializer` has been added, which simplifies getting a `&TypeRegistration` while deserializing a string.

[33mcommit 9be47e3328b729e31b80ab9d23e5331fc7079bf8[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Jan 9 21:43:30 2023 +0000

    Fix overflow scaling for images (#7142)
    
    # Objective
    
    - Fixes #4057
    - Do not multiply position by scale factor

[33mcommit 76a4695f334aed1504777686950452579363ebbb[m
Author: 2ne1ugly <47616772+2ne1ugly@users.noreply.github.com>
Date:   Mon Jan 9 21:43:29 2023 +0000

    Fix doc in `App::add_sub_app` (#7139)
    
    # Objective
    
    - Fix the name of function parameter name in docs
    
    ## Solution
    
    - Change `f` to `sub_app_runner`
    
    ---
    
    It confused me a bit when I was reading the docs in the autocomplete hint.
    Hesitated about filing a PR since it's just a one single word change in the comment.
    Is this the right process to change these docs?

[33mcommit 0e9f80e00b513fd7cb17bf971a970d23f902bde4[m
Author: 2ne1ugly <47616772+2ne1ugly@users.noreply.github.com>
Date:   Mon Jan 9 21:43:27 2023 +0000

    Implement `SparseSetIndex` for `WorldId` (#7125)
    
    # Objective
    
    - Fixes #7124
    
    ## Solution
    
    - Add Hash Derive on `WorldId`
    - Add `SparseSetIndex` impl

[33mcommit 7df680bb0a2e3da35b27160b0e52b0e817c289a4[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Jan 9 21:19:48 2023 +0000

    add rust-version for MSRV and CI job to check (#6852)
    
    # Objective
    
    - Fixes #6777, fixes #2998, replaces #5518
    - Help avoid confusing error message when using an older version of Rust
    
    ## Solution
    
    - Add the `rust-version` field to `Cargo.toml`
    - Add a CI job checking the MSRV
    - Add the job to bors

[33mcommit afe0a0650bdf907cf1826a9de20d4a728b9ef7f4[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Mon Jan 9 20:56:06 2023 +0000

    Relax `Sync` bound on `Local<T> as ExclusiveSystemParam` (#7040)
    
    # Objective
    
    The type `Local<T>` unnecessarily has the bound `T: Sync` when the local is used in an exclusive system.
    
    ## Solution
    
    Lift the bound.
    
    ---
    
    ## Changelog
    
    Removed the bound `T: Sync` from `Local<T>` when used as an `ExclusiveSystemParam`.

[33mcommit aaf384ae589a88ee2b842fd2050f68bf7e77c6df[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon Jan 9 20:40:34 2023 +0000

    Panic on dropping NonSend in non-origin thread. (#6534)
    
    # Objective
    
    Fixes #3310. Fixes #6282. Fixes #6278. Fixes #3666.
    
    ## Solution
    Split out `!Send` resources into `NonSendResources`. Add a `origin_thread_id` to all `!Send` Resources, check it on dropping `NonSendResourceData`, if there's a mismatch, panic. Moved all of the checks that `MainThreadValidator` would do into `NonSendResources` instead.
    
    All `!Send` resources now individually track which thread they were inserted from. This is validated against for every access, mutation, and drop that could be done against the value.
    
    A regression test using an altered version of the example from #3310 has been added.
    
    This is a stopgap solution for the current status quo. A full solution may involve fully removing `!Send` resources/components from `World`, which will likely require a much more thorough design on how to handle the existing in-engine and ecosystem use cases.
    
    This PR also introduces another breaking change:
    
    ```rust
        use bevy_ecs::prelude::*;
    
        #[derive(Resource)]
        struct Resource(u32);
    
        fn main() {
            let mut world = World::new();
            world.insert_resource(Resource(1));
            world.insert_non_send_resource(Resource(2));
            let res = world.get_resource_mut::<Resource>().unwrap();
            assert_eq!(res.0, 2);
        }
    ```
    
    This code will run correctly on 0.9.1 but not with this PR, since NonSend resources and normal resources have become actual distinct concepts storage wise.
    
    ## Changelog
    Changed: Fix soundness bug with `World: Send`. Dropping a `World` that contains a `!Send` resource on the wrong thread will now panic.
    
    ## Migration Guide
    Normal resources and `NonSend` resources no longer share the same backing storage. If `R: Resource`, then `NonSend<R>` and `Res<R>` will return different instances from each other. If you are using both `Res<T>` and `NonSend<T>` (or their mutable variants), to fetch the same resources, it's strongly advised to use `Res<T>`.

[33mcommit 1b9c156479c60c2b791081f4b5d7db5edf38726b[m
Author: radiish <cb.setho@gmail.com>
Date:   Mon Jan 9 19:47:07 2023 +0000

    reflect: add `insert` and `remove` methods to `List` (#7063)
    
    # Objective
    
    - Fixes #7061
    
    ## Solution
    
    - Add and implement `insert` and `remove` methods for `List`.
    
    ---
    
    ## Changelog
    
    - Added `insert` and `remove` methods to `List`.
    - Changed the `push` and `pop` methods on `List` to have default implementations.
    
    ## Migration Guide
    
    - Manual implementors of `List` need to implement the new methods `insert` and `remove` and
    consider whether to use the new default implementation of `push` and `pop`.
    
    Co-authored-by: radiish <thesethskigamer@gmail.com>

[33mcommit bef9bc18449936a112b74d60395b46109cfefed9[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon Jan 9 19:24:56 2023 +0000

    Reduce branching in TrackedRenderPass (#7053)
    
    # Objective
    Speed up the render phase for rendering.
    
    ## Solution
     - Follow up #6988 and make the internals of atomic IDs `NonZeroU32`. This niches the `Option`s of the IDs in draw state, which reduces the size and branching behavior when evaluating for equality.
     - Require `&RenderDevice` to get the device's `Limits` when initializing a `TrackedRenderPass` to preallocate the bind groups and vertex buffer state in `DrawState`, this removes the branch on needing to resize those `Vec`s.
    
    ## Performance
    This produces a similar speed up akin to that of #6885. This shows an approximate 6% speed up in `main_opaque_pass_3d` on `many_foxes` (408.79 us -> 388us). This should be orthogonal to the gains seen there.
    
    ![image](https://user-images.githubusercontent.com/3137680/209906239-e430f026-63c2-4b95-957e-a2045b810d79.png)
    
    ---
    
    ## Changelog
    Added: `RenderContext::begin_tracked_render_pass`.
    Changed: `TrackedRenderPass` now requires a `&RenderDevice` on construction.
    Removed: `bevy_render::render_phase::DrawState`. It was not usable in any form outside of `bevy_render`.
    
    ## Migration Guide
    TODO

[33mcommit d76b53bf4db552d505c4d319f5cf565579635002[m
Author: Mike <mike.hsu@gmail.com>
Date:   Mon Jan 9 19:24:54 2023 +0000

    Separate Extract from Sub App Schedule (#7046)
    
    # Objective
    
    - This pulls out some of the changes to Plugin setup and sub apps from #6503 to make that PR easier to review.
    - Separate the extract stage from running the sub app's schedule to allow for them to be run on separate threads in the future
    - Fixes #6990
    
    ## Solution
    
    - add a run method to `SubApp` that runs the schedule
    - change the name of `sub_app_runner` to extract to make it clear that this function is only for extracting data between the main app and the sub app
    - remove the extract stage from the sub app schedule so it can be run separately. This is done by adding a `setup` method to the `Plugin` trait that runs after all plugin build methods run. This is required to allow the extract stage to be removed from the schedule after all the plugins have added their systems to the stage. We will also need the setup method for pipelined rendering to setup the render thread. See https://github.com/bevyengine/bevy/blob/e3267965e15f14be18eec942dcaf16807144eb05/crates/bevy_render/src/pipelined_rendering.rs#L57-L98
    
    ## Changelog
    
    - Separate SubApp Extract stage from running the sub app schedule.
    
    ## Migration Guide
    
    ### SubApp `runner` has conceptually been changed to an `extract` function.
    
    The `runner` no longer is in charge of running the sub app schedule. It's only concern is now moving data between the main world and the sub app. The `sub_app.app.schedule` is now run for you after the provided function is called.
    
    ```rust
    // before
    fn main() {
        let sub_app = App::empty();
        sub_app.add_stage(MyStage, SystemStage::parallel());
    
        App::new().add_sub_app(MySubApp, sub_app, move |main_world, sub_app| {
            extract(app_world, render_app);
            render_app.app.schedule.run();
        });
    }
    
    // after
    fn main() {
            let sub_app = App::empty();
        sub_app.add_stage(MyStage, SystemStage::parallel());
    
        App::new().add_sub_app(MySubApp, sub_app, move |main_world, sub_app| {
            extract(app_world, render_app);
            // schedule is automatically called for you after extract is run
        });
    }
    ```

[33mcommit e94215c4c6d8d7fbd4632bf957d1abe1c2424999[m
Author: DevinLeamy <devinleamy@gmail.com>
Date:   Mon Jan 9 19:24:52 2023 +0000

    Gamepad events refactor (#6965)
    
    # Objective
    
    - Remove redundant gamepad events
    - Simplify consuming gamepad events.
    - Refactor: Separate handling of gamepad events into multiple systems.
    
    ## Solution
    
    - Removed `GamepadEventRaw`, and `GamepadEventType`.
    - Added bespoke `GamepadConnectionEvent`, `GamepadAxisChangedEvent`, and `GamepadButtonChangedEvent`.
    - Refactored `gamepad_event_system`.
    - Added `gamepad_button_event_system`, `gamepad_axis_event_system`, and `gamepad_connection_system`, which update the `Input` and `Axis` resources using their corresponding event type.
    
    Gamepad events are now handled in their own systems and have their own types.
    
    This allows for querying for gamepad events without having to match on `GamepadEventType` and makes creating handlers for specific gamepad event types, like a `GamepadConnectionEvent` or `GamepadButtonChangedEvent` possible.
    
    We remove `GamepadEventRaw` by filtering the gamepad events, using `GamepadSettings`, _at the source_, in `bevy_gilrs`. This way we can create `GamepadEvent`s directly and avoid creating `GamepadEventRaw` which do not pass the user defined filters.
    
    We expose ordered `GamepadEvent`s and we can respond to individual gamepad event types.
    
    ## Migration Guide
    
    - Replace `GamepadEvent` and `GamepadEventRaw` types with their specific gamepad event type.

[33mcommit fa15b319309c0e7fc66a8cf9394f34e7ae3f6cf9[m
Author: Sebastian MeÃmer <mail@smessmer.de>
Date:   Mon Jan 9 19:24:51 2023 +0000

    Smooth Transition between Animations (#6922)
    
    # Objective
    
    - Fixes https://github.com/bevyengine/bevy/discussions/6338
    
    This PR allows for smooth transitions between different animations.
    
    ## Solution
    
    - This PR uses very simple linear blending of animations.
    - When starting a new animation, you can give it a duration, and throughout that duration, the previous and the new animation are being linearly blended, until only the new animation is running.
    - I'm aware of https://github.com/bevyengine/rfcs/pull/49 and https://github.com/bevyengine/rfcs/pull/51, which are more complete solutions to this problem, but they seem still far from being implemented. Until they're ready, this PR allows for the most basic use case of blending, i.e. smoothly transitioning between different animations.
    
    ## Migration Guide
    
    - no bc breaking changes

[33mcommit a41e869aa9e410b37d88d1c01a651b78c4ed3250[m
Author: Yyee <ongyernyee@gmail.com>
Date:   Mon Jan 9 19:05:30 2023 +0000

    Expose symphonia features from rodio in bevy_audio and bevy (#6388)
    
    # Objective
    Fix #6301
    
    ## Solution
    Add new features in `bevy_audio` to use `symphonia` sound format from `rodio`
    Also add in `bevy`

[33mcommit ee4e98f8a98e1f528065ddaa4a87394715a4c339[m
Author: IceSentry <c.giguere42@gmail.com>
Date:   Mon Jan 9 18:50:55 2023 +0000

    Support storage buffers in derive `AsBindGroup` (#6129)
    
    # Objective
    
    - Storage buffers are useful and not currently supported by the `AsBindGroup` derive which means you need to expand the macro if you need a storage buffer
    
    ## Solution
    
    - Add a new `#[storage]` attribute to the derive `AsBindGroup` macro.
            - Support and optional `read_only` parameter that defaults to false when not present.
            - Support visibility parameters like the texture and sampler attributes.
    
    ---
    
    ## Changelog
    
    - Add a new `#[storage(index)]` attribute to the derive `AsBindGroup` macro.
    
    
    Co-authored-by: IceSentry <IceSentry@users.noreply.github.com>

[33mcommit 16748b838793487b4251f4ab177ffda71ab128b5[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Mon Jan 9 13:41:59 2023 +0000

    bevy_render: Run calculate_bounds in the end-of-update exclusive systems (#7127)
    
    # Objective
    
    - Avoid slower than necessary first frame after spawning many entities due to them not having `Aabb`s and so being marked visible
      - Avoids unnecessarily large system and VRAM allocations as a consequence
    
    ## Solution
    
    - I noticed when debugging the `many_cubes` stress test in Xcode that the `MeshUniform` binding was much larger than it needed to be. I realised that this was because initially, all mesh entities are marked as being visible because they don't have `Aabb`s because `calculate_bounds` is being run in `PostUpdate` and there are no system commands applications before executing the visibility check systems that need the `Aabb`s. The solution then is to run the `calculate_bounds` system just before the previous system commands are applied which is at the end of the `Update` stage.

[33mcommit 1efdbb7e3ea2c7226385eb457123322430891b1d[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Sat Jan 7 23:20:32 2023 +0000

    Remove the `SystemParamState` trait and remove types like `ResState` (#6919)
    
    Spiritual successor to #5205.
    Actual successor to #6865.
    
    # Objective
    
    Currently, system params are defined using three traits: `SystemParam`, `ReadOnlySystemParam`, `SystemParamState`. The behavior for each param is specified by the `SystemParamState` trait, while `SystemParam` simply defers to the state.
    
    Splitting the traits in this way makes it easier to implement within macros, but it increases the cognitive load. Worst of all, this approach requires each `MySystemParam` to have a public `MySystemParamState` type associated with it.
    
    ## Solution
    
    * Merge the trait `SystemParamState` into `SystemParam`.
    * Remove all trivial `SystemParam` state types.
      * `OptionNonSendMutState<T>`: you will not be missed.
    
    ---
    
    - [x] Fix/resolve the remaining test failure.
    
    ## Changelog
    
    * Removed the trait `SystemParamState`, merging its functionality into `SystemParam`.
    
    ## Migration Guide
    
    **Note**: this should replace the migration guide for #6865.
    This is relative to Bevy 0.9, not main.
    
    The traits `SystemParamState` and `SystemParamFetch` have been removed, and their functionality has been transferred to `SystemParam`.
    
    
    ```rust
    // Before (0.9)
    impl SystemParam for MyParam<'_, '_> {
        type State = MyParamState;
    }
    unsafe impl SystemParamState for MyParamState {
        fn init(world: &mut World, system_meta: &mut SystemMeta) -> Self { ... }
    }
    unsafe impl<'w, 's> SystemParamFetch<'w, 's> for MyParamState {
        type Item = MyParam<'w, 's>;
        fn get_param(&mut self, ...) -> Self::Item;
    }
    unsafe impl ReadOnlySystemParamFetch for MyParamState { }
    
    // After (0.10)
    unsafe impl SystemParam for MyParam<'_, '_> {
        type State = MyParamState;
        type Item<'w, 's> = MyParam<'w, 's>;
        fn init_state(world: &mut World, system_meta: &mut SystemMeta) -> Self::State { ... }
        fn get_param<'w, 's>(state: &mut Self::State, ...) -> Self::Item<'w, 's>;
    }
    unsafe impl ReadOnlySystemParam for MyParam<'_, '_> { }
    ```
    
    The trait `ReadOnlySystemParamFetch` has been replaced with `ReadOnlySystemParam`.
    
    ```rust
    // Before
    unsafe impl ReadOnlySystemParamFetch for MyParamState {}
    
    // After
    unsafe impl ReadOnlySystemParam for MyParam<'_, '_> {}
    ```

[33mcommit 076e6f780cdc523d7b2e5bea03aa093227bceb1c[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Fri Jan 6 23:24:25 2023 +0000

    Update an outdated example for `Mut::map_unchanged` (#7115)
    
    # Objective
    
    - The doctest for `Mut::map_unchanged` uses a fake function `set_if_not_equal` to demonstrate usage.
    - Now that #6853 has been merged, we can use `Mut::set_if_neq` directly instead of mocking it.

[33mcommit 41a5c30fb713a16c9b3f1a8eca10b0ff869a52ff[m
Author: 1e1001 <michael@malinov.com>
Date:   Fri Jan 6 18:00:22 2023 +0000

    add `Axis::devices` to get all the input devices (#5400)
    
    (github made me type out a message for the commit which looked like it was for the pr, sorry)
    
    # Objective
    
    - Add a way to get all of the input devices of an `Axis`, primarily useful for looping through them
    
    ## Solution
    
    - Adds `Axis<T>::devices()` which returns a `FixedSizeIterator<Item = &T>`
    - Adds a (probably unneeded) `test_axis_devices` test because tests are cool.
    
    ---
    
    ## Changelog
    
    - Added `Axis<T>::devices()` method
    
    ## Migration Guide
    
    Not a breaking change.

[33mcommit ebc5cb352d781fd51f14e588ee8045c03f2d2f04[m
Author: A-Walrus <ofek.r.guy@gmail.com>
Date:   Fri Jan 6 17:46:44 2023 +0000

    Fix doc comment "Turbo" -> "Extreme" (#7091)
    
    # Objective
    Doc comment mentions turbo which is a sensitivity that doesn't exist.
    
    ## Solution
    
    Change the comment to "Extreme" which does exist

[33mcommit 653c062ba325535c652f8e5bbe912052e5688ab4[m
Author: iiYese <iiYese@outlook.com>
Date:   Fri Jan 6 15:40:10 2023 +0000

    Added missing details to SystemParam Local documentation. (#7106)
    
    # Objective
    
    `SystemParam` `Local`s documentation currently leaves out information that should be documented.
    - What happens when multiple `SystemParam`s within the same system have the same `Local` type.
    - What lifetime parameter is expected by `Local`.
    
    ## Solution
    
    - Added sentences to documentation to communicate this information.
    - Renamed `Local` lifetimes in code to `'s` where they previously were not. Users can get complicated incorrect suggested fixes if they pass the wrong lifetime. Some instance of the code had `'w` indicating the expected lifetime might not have been known to those that wrote the code either.
    
    Co-authored-by: iiYese <83026177+iiYese@users.noreply.github.com>

[33mcommit 3dd8b42f7287340913055db34db5606c1720b9d5[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Fri Jan 6 00:43:30 2023 +0000

    Fix various typos (#7096)
    
    I stumbled across a typo in some docs. Fixed some more while I was in there.

[33mcommit 329b71fa62c6fbe0211204e5726a5fb21637fa88[m
Author: targrub <targrub@gmail.com>
Date:   Thu Jan 5 11:42:35 2023 +0000

    Break `CorePlugin` into `TaskPoolPlugin`, `TypeRegistrationPlugin`, `FrameCountPlugin`. (#7083)
    
    # Objective
    
    - Fixes #7081.
    
    ## Solution
    
    - Moved functionality from kitchen sink plugin `CorePlugin` to separate plugins, `TaskPoolPlugin`, `TypeRegistrationPlugin`, `FrameCountPlugin`.  `TaskPoolOptions` resource should now be used with `TaskPoolPlugin`.
    
    ## Changelog
    
    Minimal changes made (code kept in `bevy_core/lib.rs`).
    
    ## Migration Guide
    
    - `CorePlugin` broken into separate plugins.  If not using `DefaultPlugins` or `MinimalPlugins` `PluginGroup`s, the replacement for `CorePlugin` is now to add `TaskPoolPlugin`, `TypeRegistrationPlugin`, and `FrameCountPlugin` to the app.
    
    ## Notes
    
    - Consistent with Bevy goal "modularity over deep integration" but the functionality of `TypeRegistrationPlugin` and `FrameCountPlugin` is weak (the code has to go somewhere, though!).
    - No additional tests written.

[33mcommit 85743ce49eda885854252bab59d57b0ddc9fe8a7[m
Author: Matthias Schiffer <mschiffer@universe-factory.net>
Date:   Wed Jan 4 23:40:43 2023 +0000

    asset: make HandleUntyped::id private (#7076)
    
    # Objective
    
    It is currently possible to break reference counting for assets by creating a strong `HandleUntyped` and then modifying the `id` field before dropping the handle. This should not be allowed.
    
    ## Solution
    
    Change the `id` field visibility to private and add a getter instead. The same change was previously done for `Handle<T>` in #6176, but `HandleUntyped` was forgotten.
    
    ---
    
    ## Migration Guide
    
    - Instead of directly accessing the ID of a `HandleUntyped` as `handle.id`, use the new getter `handle.id()`.

[33mcommit 4fff0ce8376317cd12307dd4dc622f996cb5df38[m
Author: Anton Pushkarev <arewerage@gmail.com>
Date:   Wed Jan 4 23:40:42 2023 +0000

    Add a more familiar hex color entry (#7060)
    
    # Objective
    
    - When using `Color::hex` for the first time, I was confused by the fact that I can't specify colors using #, which is much more familiar.
    - In the code editor (if there is support) there is a preview of the color, which is very convenient.
    ![Ð¡Ð½Ð¸Ð¼Ð¾Ðº ÑÐºÑÐ°Ð½Ð° Ð¾Ñ 2022-12-30 02-54-00](https://user-images.githubusercontent.com/69102503/209990973-f6fc3bc6-08f6-4e51-a9a9-1de8a675c82d.png)
    
    ## Solution
    
    - Allow you to enter colors like `#ff33f2` and use the `.strip_prefix` method to delete the `#` character.

[33mcommit 8ca3d0462cbbde064933dc619e26d3a57485d14a[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Wed Jan 4 23:25:36 2023 +0000

    Allow `SystemParam`s with private fields (#7056)
    
    # Objective
    
    - Fix #4200
    
    Currently, `#[derive(SystemParam)]` publicly exposes each field type, which makes it impossible to encapsulate private fields.
    
    ## Solution
    
    Previously, the fields were leaked because they were used as an input generic type to the macro-generated `SystemParam::State` struct. That type has been changed to store its state in a field with a specific type, instead of a generic type.
    
    ---
    
    ## Changelog
    
    - Fixed a bug that caused `#[derive(SystemParam)]` to leak the types of private fields.

[33mcommit 9ff111e24c4b5f8a0068d477e1e90963b963111a[m
Author: VitalyR <vitalyankh@gmail.com>
Date:   Wed Jan 4 23:00:12 2023 +0000

    fix cursor grab issue (#7010)
    
    # Objective
    
    - Set the cursor grab mode after the window is built, fix #7007, clean some conversion code.
    
    ## Solution
    
    - Set the cursor grab mode after the window is built.

[33mcommit 717def2ccf140b767cb79f0bc7ec7ac2bfb8b884[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Wed Jan 4 22:03:31 2023 +0000

    bevy_reflect: Fix deserialization with readers (#6894)
    
    # Objective
    
    Fixes #6891
    
    ## Solution
    
    Replaces deserializing map keys as `&str` with deserializing them as `String`.
    
    This bug seems to occur when using something like `File` or `BufReader` rather than bytes or a string directly (I only tested `File` and `BufReader` for `rmp-serde` and `serde_json`). This might be an issue with other `Read` impls as well (except `&[u8]` it seems).
    
    We already had passing tests for Message Pack but none that use a `File` or `BufReader`. This PR also adds or modifies tests to check for this in the future.
    
    This change was also based on [feedback](https://github.com/bevyengine/bevy/pull/4561#discussion_r957385136) I received in a previous PR.
    
    ---
    
    ## Changelog
    
    - Fix bug where scene deserialization using certain readers could fail (e.g. `BufReader`, `File`, etc.)

[33mcommit 8d19045d2f8d12e51cf04a5254cdd47557bfa69d[m
Author: James Liu <contact@jamessliu.com>
Date:   Wed Jan 4 20:43:39 2023 +0000

    Parallelize forward kinematics animation systems (#6785)
    
    # Objective
    Speed up animation by leveraging all threads in `ComputeTaskPool`.
    
    ## Solution
    This PR parallelizes animation sampling across all threads.
    
    To ensure that this is safely done, all animation is predicated with an ancestor query to ensure that there is no conflicting `AnimationPlayer` above each animated hierarchy that may cause this to alias.
    
    Unlike the RFC, this does not add support for reflect based "animate anything", but only extends the existing `AnimationPlayer` to support high numbers of animated characters on screen at once.
    
    ## Performance
    This cuts `many_foxes`'s frame time on my machine by a full millisecond, from 7.49ms to 6.5ms. (yellow is this PR, red is main).
    ![image](https://user-images.githubusercontent.com/3137680/204219698-ffe0136c-5e9b-436f-b8d9-b23f0b8d7d36.png)
    
    ---
    
    ## Changelog
    Changed: Animation sampling now runs fully multi-threaded using threads from `ComputeTaskPool`.
    Changed: `AnimationPlayer` that are on a child or descendant of another entity with another player will no longer be run.

[33mcommit df3673f679258598ba3e558f4c4400c769ee65a4[m
Author: James O'Brien <james.obrien@drafly.net>
Date:   Wed Jan 4 19:58:09 2023 +0000

    Add const to methods and const defaults to bevy_ui (#5542)
    
    # Objective
    - Fixes #5529
    
    ## Solution
    - Add assosciated constants named DEFAULT to as many types as possible
    - Add const to as many methods in bevy_ui as possible
    
    I have not applied the same treatment to the bundles in bevy_ui as it would require going into other bevy crates to implement const defaults for structs in bevy_text or relies on UiImage which calls HandleUntyped.typed() which isn't const safe.
    
    Alternatively the defaults could relatively easily be turned into a macro to regain some of the readability and conciseness at the cost of explicitness.
    Such a macro that partially implements this exists as a crate here: [const-default](https://docs.rs/const-default/latest/const_default/derive.ConstDefault.html) but does not support enums.
    
    Let me know if there's anything I've missed or if I should push further into other crates.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 2d727afaf74fb653facfb9233d79b5516690a146[m
Author: James Liu <contact@jamessliu.com>
Date:   Wed Jan 4 01:13:30 2023 +0000

    Flatten render commands (#6885)
    
    # Objective
    Speed up the render phase of rendering. Simplify the trait structure for render commands.
    
    ## Solution
    
     - Merge `EntityPhaseItem` into `PhaseItem` (`EntityPhaseItem::entity` -> `PhaseItem::entity`)
     - Merge `EntityRenderCommand` into `RenderCommand`.
     - Add two associated types to `RenderCommand`: `RenderCommand::ViewWorldQuery` and `RenderCommand::WorldQuery`.
     - Use the new associated types to construct two `QueryStates`s for `RenderCommandState`.
     - Hoist any `SQuery<T>` fetches in `EntityRenderCommand`s into the aformentioned two queries. Batch fetch them all at once.
    
    ## Performance
    `main_opaque_pass_3d` is slightly faster on `many_foxes` (427.52us -> 401.15us)
    
    ![image](https://user-images.githubusercontent.com/3137680/206359804-9928b20a-7d92-41f8-bf7d-6e8c5cc802f0.png)
    
    The shadow pass node is also slightly faster (344.52 -> 338.24us)
    
    ![image](https://user-images.githubusercontent.com/3137680/206359977-1212198d-f933-49a0-80f1-62ff88eb5727.png)
    
    ## Future Work
    
     - Can we hoist the view level queries out of the core loop?
    
    ---
    
    ## Changelog
    Added: `PhaseItem::entity`
    Added: `RenderCommand::ViewWorldQuery` associated type.
    Added: `RenderCommand::ItemorldQuery` associated type.
    Added: `Draw<T>::prepare` optional trait function.
    Removed: `EntityPhaseItem` trait
    
    ## Migration Guide
    TODO

[33mcommit f866d72f150fccb6d4aa5b96688d664cc401517c[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Tue Jan 3 22:18:21 2023 +0000

    Fix: CI `bench-check` command (#7077)
    
    # Objective
    
    I noticed that running the following command didn't actually do anything:
    
    ```
    cargo run -p ci -- bench-check
    ```
    
    ## Solution
    
    Made it so that running `cargo run -p ci -- bench-check` actually runs a compile check on the `benches` directory.

[33mcommit b44b606d29f7bea22e725452af41944f6fc8d630[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Mon Jan 2 22:07:33 2023 +0000

    bevy_pbr: Avoid copying structs and using registers in shaders (#7069)
    
    # Objective
    
    - The #7064 PR had poor performance on an M1 Max in MacOS due to significant overuse of registers resulting in 'register spilling' where data that would normally be stored in registers on the GPU is instead stored in VRAM. The latency to read from/write to VRAM instead of registers incurs a significant performance penalty.
    - Use of registers is a limiting factor in shader performance. Assignment of a struct from memory to a local variable can incur copies. Passing a variable that has struct type as an argument to a function can also incur copies. As such, these two cases can incur increased register usage and decreased performance.
    
    ## Solution
    
    - Remove/avoid a number of assignments of light struct type data to local variables.
    - Remove/avoid a number of passing light struct type variables/data as value arguments to shader functions.

[33mcommit b833bdab17a74d68c74862564d31fa986efd1ec5[m
Author: Kurt KÃ¼hnert <kurt@kuehnert.dev>
Date:   Mon Jan 2 21:39:54 2023 +0000

    Allow to reuse the same RenderPass for multiple RenderPhases (#7043)
    
    # Objective
    
    - The recently merged PR #7013 does not allow multiple `RenderPhase`s to share the same `RenderPass`.
    - Due to the introduced overhead we want to minimize the number of `RenderPass`es recorded during each frame.
    
    ## Solution
    
    - Take a constructed `TrackedRenderPass` instead of a `RenderPassDiscriptor` as a parameter to the `RenderPhase::render` method.
    
    ---
    
    ## Changelog
    
    To enable multiple `RenderPhases` to share the same `TrackedRenderPass`,
    the `RenderPhase::render` signature has changed.
    
    ```rust
    pub fn render<'w>(
      &self,
      render_pass: &mut TrackedRenderPass<'w>,
      world: &'w World,
      view: Entity)
    ```
    
    
    Co-authored-by: Kurt KÃ¼hnert <51823519+kurtkuehnert@users.noreply.github.com>

[33mcommit a5b1c46d5bfb64113ba273c6cc803a2abecdafb4[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon Jan 2 21:25:04 2023 +0000

    Extend EntityLocation with TableId and TableRow (#6681)
    
    # Objective
    `Query::get` and other random access methods require looking up `EntityLocation` for every provided entity, then always looking up the `Archetype` to get the table ID and table row. This requires 4 total random fetches from memory: the `Entities` lookup, the `Archetype` lookup, the table row lookup, and the final fetch from table/sparse sets. If `EntityLocation` contains the table ID and table row, only the `Entities` lookup and the final storage fetch are required.
    
    ## Solution
    Add `TableId` and table row to `EntityLocation`. Ensure it's updated whenever entities are moved around. To ensure `EntityMeta` does not grow bigger, both `TableId` and `ArchetypeId` have been shrunk to u32, and the archetype index and table row are stored as u32s instead of as usizes. This should shrink `EntityMeta` by 4 bytes, from 24 to 20 bytes, as there is no padding anymore due to the change in alignment.
    
    This idea was partially concocted by @BoxyUwU.
    
    ## Performance
    This should restore the `Query::get` "gains" lost to #6625 that were introduced in #4800 without being unsound, and also incorporates some of the memory usage reductions seen in #3678.
    
    This also removes the same lookups during add/remove/spawn commands, so there may be a bit of a speedup in commands and `Entity{Ref,Mut}`.
    
    ---
    
    ## Changelog
    Added: `EntityLocation::table_id`
    Added: `EntityLocation::table_row`.
    Changed: `World`s can now only hold a maximum of 2<sup>32</sup>- 1 archetypes.
    Changed: `World`s can now only hold a maximum of 2<sup>32</sup> - 1 tables.
    
    ## Migration Guide
    
    A `World` can only hold a maximum of 2<sup>32</sup> - 1 archetypes and tables now. If your use case requires more than this, please file an issue explaining your use case.

[33mcommit f8a229b0c9522505bac48f036447ab6675acc4a4[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Mon Jan 2 21:07:33 2023 +0000

    bevy_reflect: Add compile fail tests for bevy_reflect (#7041)
    
    # Objective
    
    There isn't really a way to test that code using bevy_reflect compiles or doesn't compile for certain scenarios. This would be especially useful for macro-centric PRs like #6511 and #6042.
    
    ## Solution
    
    Using `bevy_ecs_compile_fail_tests` as reference, added the `bevy_reflect_compile_fail_tests` crate.
    
    Currently, this crate contains a very simple test case. This is so that we can get the basic foundation of this crate agreed upon and merged so that more tests can be added by other PRs.
    
    ### Open Questions
    
    - [x] Should this be added to CI? (Answer: Yes)
    
    ---
    
    ## Changelog
    
    - Added the `bevy_reflect_compile_fail_tests` crate for testing compilation errors

[33mcommit 290d6363b8efd226c92ab5c03ac3a0953b5cda14[m
Author: l1npengtul <l1npengtul@protonmail.com>
Date:   Mon Jan 2 20:49:43 2023 +0000

    add system information plugin and update relevant examples (#5911)
    
    # Objective
    Solve #5464
    
    ## Solution
    Adds a `SystemInformationDiagnosticsPlugin` to add diagnostics.
    
    Adds `Cargo.toml` flags to fix building on different platforms.
    
    ---
    
    ## Changelog
    
    Adds `sysinfo` crate to `bevy-diagnostics`.
    
    Changes in import order are due to clippy.
    
    Co-authored-by: l1npengtul <35755164+l1npengtul@users.noreply.github.com>
    Co-authored-by: IceSentry <c.giguere42@gmail.com>

[33mcommit b027d402e29d7d4f26062051161bc2187f168e80[m
Author: ZoOL <zhooul@gmail.com>
Date:   Thu Dec 29 23:45:07 2022 +0000

    Update Box vertices comment (#7055)
    
    Old comment is Z-up ,  Fix comment for bevy Y-up
    
    # Objective
    
    - Update Box vertices comment for bevy Y-up
    
    ## Solution
    
    - Update comment for Y-up
    
    ---
    
    ## Changelog
    
    None
    
    ## Migration Guide
    
    None

[33mcommit d2963267ba632a1b845aa843370f170f85633b13[m
Author: figsoda <figsoda@pm.me>
Date:   Thu Dec 29 21:37:27 2022 +0000

    improve nix docs (#7044)
    
    # Objective
    
    `xlibsWrapper` is being deprecated: https://github.com/NixOS/nixpkgs/issues/194054, this pr removes the deprecated xlibsWrapper and makes a couple more improvements
    
    ## Solution
    
    - rename NixOS to Nix since this is not specific to NixOS
    - remove usage of `xlibsWrapper`
    - add instructions for nix flakes with `nix develop`
    - add example of a packaged bevy program in nixpkgs
    - minor cosmetic/grammatical changes

[33mcommit 61e027e8a8e43098085322f89fc46bdcaf602992[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Dec 28 20:07:35 2022 +0000

    Shadow render phase - pass the correct view entity (#7048)
    
    # Objective
    
    - Fixes #7047
    
    ## Solution
    
    - Pass the correct view entity

[33mcommit 2665299d1c50bb0411b61a8c524579bd7b4243ad[m
Author: Predko Silvestr <Silvestr1994@gmail.com>
Date:   Wed Dec 28 17:09:35 2022 +0000

    Use ```bevy``` with default features in iOS example (#7042)
    
    # Objective
    
    I am new to Bevy. And during my development, I noticed that the `iOS` example doesn't work.
    Example panics with next message: ```panicked at 'Resource requested by bevy_ui::widget::text::text_system does not exist: bevy_asset::assets::Assets```.
    
    I have asked for help in a `discord` iOS chat and there I receive a recommendation that it is possible that some bevy features missing.
    
    ## Solution
    
    So, I used ```bevy``` with default features.

[33mcommit 09c64ffe9fd8d52d097d84a349c5d4e67eb994f0[m
Author: Jinlei Li <jinleili0@outlook.com>
Date:   Tue Dec 27 16:27:55 2022 +0000

    Remove redundant bitwise OR `TEXTURE_ADAPTER_SPECIFIC_FORMAT_FEATURES` (#7033)
    
    # Objective
    
    `TEXTURE_ADAPTER_SPECIFIC_FORMAT_FEATURES`  was already included in `adapter.features()` on non-wasm target, and since it is the default value for `WgpuSettings.features`, the subsequent code will also combine into this feature:
    https://github.com/bevyengine/bevy/blob/b6066c30b6cfa7bffa598d45706dbe6e46ad24fc/crates/bevy_render/src/renderer/mod.rs#L155-L156

[33mcommit 0ddaa7e83ad0f8de7f011319d50114cb8011e5d2[m
Author: Nile <therawmeatball@gmail.com>
Date:   Tue Dec 27 16:05:16 2022 +0000

    Round out the untyped api s (#7009)
    
    # Objective
    
    Bevy uses custom `Ptr` types so the rust borrow checker can help ensure lifetimes are correct, even when types aren't known. However, these types don't benefit from the automatic lifetime coercion regular rust references enjoy
    
    ## Solution
    
    Add a couple methods to Ptr, PtrMut, and MutUntyped to allow for easy usage of these types in more complex scenarios.
    
    ## Changelog
    
    - Added `as_mut` and `as_ref` methods to `MutUntyped`.
    - Added `shrink` and `as_ref` methods to `PtrMut`.
    
    ## Migration Guide
    
    - `MutUntyped::into_inner` now marks things as changed.

[33mcommit ca85f6c9030157fa70488466f4880e6659a070aa[m
Author: Kurt KÃ¼hnert <kurt@kuehnert.dev>
Date:   Tue Dec 27 03:29:59 2022 +0000

    Extract common RenderPhase code into render method (#7013)
    
    # Objective
    
    All `RenderPhases` follow the same render procedure.
    The same code is duplicated multiple times across the codebase.
    
    ## Solution
    
    I simply extracted this code into a method on the `RenderPhase`.
    This avoids code duplication and makes setting up new `RenderPhases` easier.
    
    ---
    
    ## Changelog
    
    ### Changed
    
    You can now set up the rendering code of a `RenderPhase` directly using the `RenderPhase::render` method, instead of implementing it manually in your render graph node.

[33mcommit 5566d73d9e49be09f8e85b546b8102b0841ae1c0[m
Author: Aceeri <conmcclusk@gmail.com>
Date:   Tue Dec 27 00:34:06 2022 +0000

    Nicer usage for scene viewer (#7035)
    
    # Objective
    Scene viewer mouse sensitivity/cursor usage isn't the best it could be atm, so just adding some quick, maybe opinionated, tweaks to make it feel more at home in usage.
    
    ## Solution
    - Mouse delta shouldn't be affected by delta time, it should be more expected that if I move my mouse 1 inch to the right that it should move the in game camera/whatever is controlled the same regardless of FPS.
    - Uses a magic number of 180.0 for a nice default sensitivity, modeled after Valorant's default sensitivity.
    - Cursor now gets locked/hidden when rotating the camera to give it more of the effect that you are grabbing the camera.

[33mcommit 741a91ed461d0193c37c13c00c1e86fa78580d3f[m
Author: Jinlei Li <jinleili0@outlook.com>
Date:   Mon Dec 26 19:47:01 2022 +0000

    Replace `WgpuAdapterInfo` with `RenderAdapterInfo` in the documentation. (#7036)
    
    # Objective
    
    Fixes #6598
    In addition, macOS can also support GL backends through ANGLE.

[33mcommit 4ca19ac4d32bc74ab67ae0f3545c005b398cad23[m
Author: aktaboot <120214979+aktaboot@users.noreply.github.com>
Date:   Mon Dec 26 16:52:17 2022 +0000

    Update linux_dependencies.md (#7021)
    
    fixes alsalib dependency for NixOS

[33mcommit f1a21db250bf6923d949cc74e47d209290851ebf[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Dec 26 16:39:17 2022 +0000

    don't error when sending HierarchyEvents when Event type not registered (#7031)
    
    # Objective
    
    - Loading a gltf files prints many errors
    ```
    ERROR bevy_ecs::world: Unable to send event `bevy_hierarchy::events::HierarchyEvent`
            Event must be added to the app with `add_event()`
            https://docs.rs/bevy/*/bevy/app/struct.App.html#method.add_event
    ```
    - Loading a gltf file create a world for a scene where events are not registered. Executing hierarchy commands on that world should not print error
    
    ## Solution
    
    - Revert part of #6921
    - don't use `world.send_event` / `world.send_event_batch` from commands

[33mcommit 7763b5ec7410def0539b95b5176f897eb6aac8c0[m
Author: IceSentry <c.giguere42@gmail.com>
Date:   Mon Dec 26 15:16:46 2022 +0000

    log system info on startup (#5454)
    
    # Objective
    
    - We already log the adapter info on startup when bevy_render is present. It would be nice to have more info about the system to be able to ask users to submit it in bug reports
    
    ## Solution
    
    - Use the `sysinfo` crate to get all the information
      - I made sure it _only_ gets the required informations to avoid unnecessary system request
    - Add a system that logs this on startup
      - This system is currently in `bevy_diagnostics` because I didn't really know where to put it.
    
    Here's an example log from my system:
    ```log
    INFO bevy_diagnostic: SystemInformation { os: "Windows 10 Pro", kernel: "19044", cpu: "AMD Ryzen 7 5800X 8-Core Processor", core_count: "8", memory: "34282242 KB" }
    ```
    ---
    
    ## Changelog
    
    - Added a new default log when starting a bevy app that logs the system information

[33mcommit b6066c30b6cfa7bffa598d45706dbe6e46ad24fc[m
Author: Jinlei Li <jinleili0@outlook.com>
Date:   Sun Dec 25 05:06:03 2022 +0000

    Fix ndk-macro link (#7027)
    
    # Objective
    
    [ndk-glue](https://github.com/rust-mobile/ndk-glue)  has been split from `android-ndk-rs` into a separate repository.

[33mcommit b8a9933d463ae6a6dd1deb80097d718f74328c87[m
Author: Nicola Papale <nico@nicopap.ch>
Date:   Sun Dec 25 00:51:20 2022 +0000

    Add a reparented_to method to `GlobalTransform` (#7020)
    
    # Objective
    
    It is often necessary  to update an entity's parent while keeping its GlobalTransform static. Currently it is cumbersome and error-prone (two questions in the discord `#help` channel in the past week)
    
    - Part 1 of #5475
    - Part 2: #7024.
    
    ## Solution
    
    - Add a `reparented_to` method to `GlobalTransform`
    
    ---
    
    ## Changelog
    
    - Add a `reparented_to` method to `GlobalTransform`

[33mcommit 48b4a45d82dfb0e4bf31575c0f6282b596ca11ad[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Sun Dec 25 00:51:19 2022 +0000

    Add a const `PipeSystem` constructor (#7019)
    
    # Objective
    
    Fix #5914.
    
    `PipeSystem` cannot be constructed in `const` contexts.
    
    ## Solution
    
    Add a const `PipeSystem::new` function.

[33mcommit a91f89db733ae75dc9d48ea29c5c54cefe0a5893[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Sun Dec 25 00:51:17 2022 +0000

    Add a basic example for system ordering (#7017)
    
    # Objective
    
    Fix #5653.
    
    ## Solution
    
    - Add an example of how systems can be ordered from within a stage.
    - Update some docs from before #4224

[33mcommit 65d390163f9850c53e934e94aa9d6aedfbd10687[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Sun Dec 25 00:51:16 2022 +0000

    Add a trait for commands that run for a given `Entity` (#7015)
    
    # Objective
    
    Resolve #6156.
    
    The most common type of command is one that runs for a single entity. Built-in commands like this can be ergonomically added to the command queue using the `EntityCommands` struct. However, adding custom entity commands to the queue is quite cumbersome. You must first spawn an entity, store its ID in a local, then construct a command using that ID and add it to the queue. This prevents method chaining, which is the main benefit of using `EntityCommands`.
    
    ### Example (before)
    
    ```rust
    struct MyCustomCommand(Entity);
    
    impl Command for MyCustomCommand { ... }
    
    let id = commands.spawn((...)).id();
    commmands.add(MyCustomCommand(id));
    ```
    
    ## Solution
    
    Add the `EntityCommand` trait, which allows directly adding per-entity commands to the `EntityCommands` struct.
    
    ### Example (after)
    
    ```rust
    struct MyCustomCommand;
    
    impl EntityCommand for MyCustomCommand { ... }
    
    commands.spawn((...)).add(MyCustomCommand);
    ```
    ---
    
    ## Changelog
    
    - Added the trait `EntityCommand`. This is a counterpart of `Command` for types that execute code for a single entity.
    
    ## Future Work
    
    If we feel its necessary, we can simplify built-in commands (such as `Despawn`) to use this trait.

[33mcommit 83b602a77c10f9212984cdd00fc1cc7d7955a677[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Sun Dec 25 00:51:14 2022 +0000

    Relax `Sync` bound on anonymous `Command`s (#7014)
    
    # Objective
    
    Any closure with the signature `FnOnce(&mut World)` implicitly implements the trait `Command` due to a blanket implementation. However, this implementation unnecessarily has the `Sync` bound, which limits the types that can be used.
    
    ## Solution
    
    Remove the bound.
    
    ---
    
    ## Changelog
    
    - `Command` closures no longer need to implement the marker trait `std::marker::Sync`.

[33mcommit b3d59060db6bbe7c63b227510fd58460e1790dd9[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Sun Dec 25 00:39:31 2022 +0000

    Fix unsoundness for `propagate_recursive` (#7003)
    
    # Objective
    
    Fix #6983.
    
    ## Solution
    
    Mark the function `propagate_recursive` as unsafe, and specify the safety invariants through doc comments.

[33mcommit 8ad9a7c7c43f4863ddf41d538855f9e35fccc690[m
Author: Aceeri <conmcclusk@gmail.com>
Date:   Sun Dec 25 00:39:30 2022 +0000

    Rename camera "priority" to "order" (#6908)
    
    # Objective
    The documentation for camera priority is very confusing at the moment, it requires a bit of "double negative" kind of thinking.
    
    # Solution
    Flipping the wording on the documentation to reflect more common usecases like having an overlay camera and also renaming it to "order", since priority implies that it will override the other camera rather than have both run.

[33mcommit a0448eca2f10867a8f31a7395b70b6076cef2aa9[m
Author: ickk <git@ickk.io>
Date:   Sun Dec 25 00:39:29 2022 +0000

    enum `Visibility` component (#6320)
    
    Consolidation of all the feedback about #6271 as well as the addition of an "unconditionally visible" mode.
    
    # Objective
    
    The current implementation of the `Visibility` struct simply wraps a boolean.. which seems like an odd pattern when rust has such nice enums that allow for more expression using pattern-matching.
    
    Additionally as it stands Bevy only has two settings for visibility of an entity:
    - "unconditionally hidden" `Visibility { is_visible: false }`,
    - "inherit visibility from parent" `Visibility { is_visible: true }`
       where a root level entity set to "inherit" is visible.
    
    Note that given the behaviour, the current naming of the inner field is a little deceptive or unclear.
    
    Using an enum for `Visibility` opens the door for adding an extra behaviour mode. This PR adds a new "unconditionally visible" mode, which causes an entity to be visible even if its Parent entity is hidden. There should not really be any performance cost to the addition of this new mode.
    
    --
    The recently added `toggle` method is removed in this PR, as its semantics could be confusing with 3 variants.
    
    ## Solution
    
    Change the Visibility component into
    ```rust
    enum Visibility {
      Hidden,    // unconditionally hidden
      Visible,   // unconditionally visible
      Inherited, // inherit visibility from parent
    }
    ```
    
    ---
    
    ## Changelog
    
    ### Changed
    
    `Visibility` is now an enum
    
    ## Migration Guide
    
    - evaluation of the `visibility.is_visible` field should now check for `visibility == Visibility::Inherited`.
    - setting the `visibility.is_visible` field should now directly set the value: `*visibility = Visibility::Inherited`.
    - usage of `Visibility::VISIBLE` or `Visibility::INVISIBLE` should now use `Visibility::Inherited` or `Visibility::Hidden` respectively.
    - `ComputedVisibility::INVISIBLE` and `SpatialBundle::VISIBLE_IDENTITY` have been renamed to `ComputedVisibility::HIDDEN` and `SpatialBundle::INHERITED_IDENTITY` respectively.
    
    
    
    
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 9717204aefa5d3a6e8dcbeb3a9d9c251d3b467f2[m
Author: Aceeri <conmcclusk@gmail.com>
Date:   Sun Dec 25 00:39:27 2022 +0000

    Rework manual event iterator so we can actually name the type (#5735)
    
    # Objective
    - Be able to name the type that `ManualEventReader::iter/iter_with_id` returns and `EventReader::iter/iter_with_id` by proxy.
      Currently for the purpose of https://github.com/bevyengine/bevy/pull/5719
    
    ## Solution
    - Create a custom `Iterator` type.

[33mcommit 965ebeff598f2a9fdb9479aefa8abbab76f6d767[m
Author: Kurt KÃ¼hnert <kurt@kuehnert.dev>
Date:   Sun Dec 25 00:23:15 2022 +0000

    Replace UUID based IDs with a atomic-counted ones (#6988)
    
    # Objective
    
    - alternative to #2895
    - as mentioned in #2535 the uuid based ids in the render module should be replaced with atomic-counted ones
    
    ## Solution
    - instead of generating a random UUID for each render resource, this implementation increases an atomic counter
    - this might be replaced by the ids of wgpu if they expose them directly in the future
    
    - I have not benchmarked this solution yet, but this should be slightly faster in theory.
    - Bevymark does not seem to be affected much by this change, which is to be expected.
    
    - Nothing of our API has changed, other than that the IDs have lost their IMO rather insignificant documentation.
    - Maybe the documentation could be added back into the macro, but this would complicate the code.

[33mcommit d3d635b64fe7042ffda0152c44a526aabb1ee2a5[m
Author: AxiomaticSemantics <axiomaticsemantics@gmail.com>
Date:   Sun Dec 25 00:23:14 2022 +0000

    Constify SpritePipelineKey implementation. (#6976)
    
    # Objective
    
    - Describe the objective or issue this PR addresses.
    SpritePipelineKey could use more constification.
    
    ## Solution
    Constify SpritePipelineKey implementation.
    
    ## Changelog
    
    
    Co-authored-by: AxiomaticSemantics <117950168+AxiomaticSemantics@users.noreply.github.com>

[33mcommit c7791ad9b376c5d5ae276ca5d2e8b52d91fd2ffe[m
Author: Taras Palczynski III <tarasikpalczynski@gmail.com>
Date:   Sun Dec 25 00:23:13 2022 +0000

    Organized scene_viewer into plugins for reuse and organization (#6936)
    
    # Objective
    
    This PR reorganizes majority of the scene viewer example into a module of plugins which then allows reuse of functionality among new or existing examples.  In addition, this enables the scene viewer to be more succinct and showcase the distinct cases of camera control and scene control.
    
    This work is to support future work in organization and future examples.  A more complicated 3D scene example has been requested by the community (#6551) which requests functionality currently included in scene_viewer, but previously inaccessible.  The future example can now just utilize the two plugins created here.  The existing example [animated_fox example] can utilize the scene creation and animation control functionality of `SceneViewerPlugin`.
    
    ## Solution
    
    - Created a `scene_viewer` module inside the `tools` example folder.
    - Created two plugins:  `SceneViewerPlugin` (gltf scene loading, animation control, camera tracking control, light control) and `CameraControllerPlugin` (controllable camera).
    - Original `scene_viewer.rs` moved to `scene_viewer/main.rs` and now utilizes the two plugins.

[33mcommit b39817a27c0ac39bdc718a87f324f60799810c6d[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Sun Dec 25 00:23:12 2022 +0000

    Add `add_child`, `set_parent` and `remove_parent` to `EntityMut` (#6926)
    
    # Objective
    Align the hierarchy API between `EntityCommands` and `EntityMut`.
    
    Added missing methods to `EntityMut`.
    Replaced the duplicate `Command` implementations with the ones on `EntityMut` (e.g. The `AddChild` command is now just `world.entity_mut(..).add_child(..)`)
    
    Fixed `update_old_parents` not sending `ChildAdded` events.
    
    This PR does not add `add_children` to `EntityMut` as I would like to remove it from `EntityCommands` instead in #6942.
    
    ## Changelog
    * Added `add_child`, `set_parent` and `remove_parent` to `EntityMut`
    * Fixed missing `ChildAdded` events
    
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 0d98327ce76f2658e64e50762da8ef027fcc1074[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Sun Dec 25 00:06:23 2022 +0000

    Support `SystemParam` types with const generics (#7001)
    
    # Objective
    
    * Currently, the `SystemParam` derive does not support types with const generic parameters.
      * If you try to use const generics, the error message is cryptic and unhelpful.
    * Continuation of the work started in #6867 and #6957.
    
    ## Solution
    
    Allow const generic parameters to be used with `#[derive(SystemParam)]`.

[33mcommit fa2b5f2b360fb832e98eb84150a9b95860f2ecc5[m
Author: JoJoJet <nanoxmaligno@gmail.com>
Date:   Sun Dec 25 00:06:22 2022 +0000

    Add documentation to `ParamSet` (#6998)
    
    # Objective
    
    Fixes #4729.
    Continuation of #4854.
    
    ## Solution
    
    Add documentation to `ParamSet` and its methods. Includes examples suggested by community members in the original PR.
    
    
    Co-authored-by: Nanox19435 <50684926+Nanox19435@users.noreply.github.com>
    Co-authored-by: JoJoJet <21144246+JoJoJet@users.noreply.github.com>

[33mcommit ca878304507b790cedf4301b879c47f2047788bf[m
Author: Thierry Berger <contact@thierryberger.com>
Date:   Sat Dec 24 23:43:41 2022 +0000

    #4231: panic when App::run() is called from Plugin::build() (#4241)
    
    # Objective
    
    Fixes #4231.
    
    ## Solution
    
    This PR implements the solution suggested by @bjorn3 : Use an internal property within `App` to detect `App::run()` calls from `Plugin::build()`.
    
    ---
    
    ## Changelog
    
    - panic when App::run() is called from Plugin::build()

[33mcommit 1aeaafa7c455163d1f2ef59d9404a24a00c5b138[m
Author: Caio CÃ©sar Oliveira <54439337+oCaioOliveira@users.noreply.github.com>
Date:   Thu Dec 22 19:49:55 2022 +0000

    Add "how to adopt pull requests" section (#6895)
    
    # Objective
    
    - Add "how to adopt pull requests" section.
    - Fixes #5539
    
    ## Solution
    
    - Add "how to adopt pull requests" section in [Contributing.md](https://github.com/bevyengine/bevy/blob/main/CONTRIBUTING.md).
    
    Co-authored-by: Erick <erickmelovidal@gmail.com>

[33mcommit 2938792c7d77ef2777909ac485b0042eb9fe634b[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Wed Dec 21 02:15:53 2022 +0000

    Upgrade to Taffy 0.2 (#6743)
    
    # Objective
    
    Upgrade to Taffy 0.2
    
    ## Solution
    
    Do it
    
    ## Changelog
    
    Upgraded to Taffy 0.2, improving UI layout performance significantly and adding the flexbox `gap` property and `AlignContent::SpaceEvenly`.
    
    ## Notes
    
    `many_buttons` is 8% faster! speed improvements for more highly nested UIs will be much more dramatic. Great work, Team Taffy.

[33mcommit 025996b18c741e81db708c62b89cf5505d2a27dc[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Wed Dec 21 01:54:10 2022 +0000

    Lift the 16-field limit from the `SystemParam` derive (#6867)
    
    # Objective
    
    * The `SystemParam` derive internally uses tuples, which means it is constrained by the 16-field limit on `all_tuples`.
        * The error message if you exceed this limit is abysmal.
    * Supercedes #5965 -- this does the same thing, but is simpler.
    
    ## Solution
    
    If any tuples have more than 16 fields, they are folded into tuples of tuples until they are under the 16-field limit.

[33mcommit 0363e0b32a066590dabc55900bf0bed44d2d1ae2[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Tue Dec 20 23:45:44 2022 +0000

    Support tuple structs with `#[derive(SystemParam)]` (#6957)
    
    # Objective
    
    Currently, only named structs can be used with the `SystemParam` derive macro.
    
    ## Solution
    
    Remove the restriction. Tuple structs and unit structs are now supported.
    
    ---
    
    ## Changelog
    
    + Added support for tuple structs and unit structs to the `SystemParam` derive macro.

[33mcommit cf480d939a50102cf3b12e03621b2135da01e2bc[m
Author: Nick Fagerlund <nick.fagerlund@gmail.com>
Date:   Tue Dec 20 23:45:43 2022 +0000

    Fix suppression of all console logs when `trace_tracy` is enabled (#6955)
    
    # Objective
    
    Fixes #6862 (oh hey good catch @alice-i-cecile)
    
    Bevy was failing to print events from `info!()` and friends to the console if the `trace_tracy` feature was enabled. It shouldn't be doing that.
    
    ## Solution
    
    The problem was this per-layer filter that was added in #4320 to suppress a noisy per-frame event (which Tracy requires in order to properly close out a frame):
    
    - The problem event's target was `"bevy_render::renderer"`, not `"tracy"`. - So, the filter wasn't specifically targeting the noisy event.
    - Without a default, `tracing_subscriber::filter::Targets` will remove _everything_ that doesn't match an explicit target rule. - So, the filter _was_ silencing the noisy event, along with everything else.
    
    This PR changes that filter to do what was probably intended in #4320: suppress ~any events more verbose than `ERROR` from `bevy_render::renderer`~ the one problematically noisy event, but allow anything else that already made it through the top-level filter_layer.
    
    Also, adds a comment to clarify the intent of that filter, since it's otherwise a bit opaque and required some research.
    
    ---
    
    ## Changelog
    
    Fixed a bug that hid console log messages when the `trace_tracy` feature was enabled.

[33mcommit 150a3572bd4cc80f7c0efe5a83949d16676af9a2[m
Author: BenoÃ®t Vermont <redwarp@gmail.com>
Date:   Tue Dec 20 23:32:04 2022 +0000

    Fix UiCameraConfig doc (link to the Camera page) (#6969)
    
    The Camera link in the UiCameraConfig was not rendered properly by the documentation.
    
    # Objective
    
    - In the UiCameraConfig page (https://docs.rs/bevy/latest/bevy/prelude/struct.UiCameraConfig.html), a link to the Camera page (https://docs.rs/bevy/latest/bevy/render/camera/struct.Camera.html) is broken.
    
    ## Solution
    
    - It seems that when using URL fragment specifiers, backtick should not be used. It might be an issue of rust itself. Replacing the URL fragment specifier `[`Camera`]: bevy_render::camera::Camera` with `[Camera]: bevy_render::camera::Camera` solves this.

[33mcommit c38659ddea832dabf65691cdb64f01279acdc411[m
Author: 0xc0001a2040 <git@robbsrv.de>
Date:   Tue Dec 20 23:18:13 2022 +0000

    Add fmt::Pointer impl for bevy_ptr::{Ptr, PtrMut, OwnedPtr} (#6980)
    
    # Objective
    
    - `bevy_ptr::{Ptr, PtrMut, OwnedPtr}` wrap raw pointers and should be printable using pointer formatting.
    
    ## Solution
    
    - Add a `core::fmt::Pointer` impl for `Ptr`, `PtrMut` and `OwnedPtr` based on the wrapped `NonNull` pointer.
    
    ---
    
    ## Changelog
    
    - Added a `core::fmt::Pointer` impl to `Ptr`, `PtrMut` and `OwnedPtr`.
    
    Co-authored-by: MrGunflame <mrgunflame@protonmail.com>

[33mcommit 85455802144232726f7e58746865d4838afaf91b[m
Author: ickshonpe <david.curthoys@googlemail.com>
Date:   Tue Dec 20 16:44:12 2022 +0000

    text aspect ratio bug fix (#6825)
    
    ## Objective
    
    Bevy UI uses a `MeasureFunc` that preserves the aspect ratio of text, not just images. This means that the extent of flex-items containing text may be calculated incorrectly depending on the ratio of the text size compared to the size of its containing node.
    
    Fixes #6748
    Related to #6724
    
    with Bevy 0.9:
    
    ![Capture_cols_0 9](https://user-images.githubusercontent.com/27962798/205435999-386d3400-fe9b-475a-aab1-18e61c4c074f.PNG)
    
    with this PR (accurately matching the behavior of Flexbox):
    
    ![Capture_fixed](https://user-images.githubusercontent.com/27962798/205436005-6bafbcc2-cd87-4eb7-b5c6-9dbcb30fc795.PNG)
    
    ## Solution
    Only perform the aspect ratio calculations if the uinode contains an image.
    
    ## Changelog
    * Added a field `preserve_aspect_ratio` to `CalculatedSize`
    * The `MeasureFunc` only preserves the aspect ratio when `preserve_aspect_ratio` is true.
    * `update_image_calculated_size_system` sets `preserve_aspect_ratio` to true for nodes with images.

[33mcommit a5106c841fdfd922841507ed815eb6fc21dfca72[m
Author: Nicola Papale <nico@nicopap.ch>
Date:   Tue Dec 20 16:17:14 2022 +0000

    Remove needless manual default impl of ButtonBundle (#6970)
    
    # Objective
    
    - Remove a manual impl block for something that can be derived
    - Correct a misleading doc comment.

[33mcommit 15b19b930cc6d5f5a479e165264bc5e1393bd4cc[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Tue Dec 20 16:17:11 2022 +0000

    Move 'startup' Resource `WgpuSettings`  into the `RenderPlugin` (#6946)
    
    # Objective
    The `WgpuSettings` resource is only used during plugin build. Move it into the `RenderPlugin` struct.
    
    Changing these settings requires re-initializing the render context, which is currently not supported.
    If it is supported in the future it should probably be more explicit than changing a field on a resource, maybe something similar to the `CreateWindow` event.
    
    ## Migration Guide
    ```rust
    // Before (0.9)
    App::new()
        .insert_resource(WgpuSettings { .. })
        .add_plugins(DefaultPlugins)
    // After (0.10)
    App::new()
        .add_plugins(DefaultPlugins.set(RenderPlugin {
            wgpu_settings: WgpuSettings { .. },
        }))
    ```
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 0761594dd859ee21877a3b74fe04c345fca9decf[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Tue Dec 20 16:17:07 2022 +0000

    Use `World` helper methods for sending `HierarchyEvent`s  (#6921)
    
    A code-quality PR
    
    Also cleans up the helper methods by just importing the `Event` type
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 1523c38ce831ae952c28cbd774cc21d919119170[m
Author: James Liu <contact@jamessliu.com>
Date:   Tue Dec 20 16:17:05 2022 +0000

    Directly extract joints into SkinnedMeshJoints (#6833)
    
    # Objective
    Following #4402, extract systems run on the render world instead of the main world, and allow retained state operations on it's resources. We're currently extracting to `ExtractedJoints` and then copying it twice during Prepare. Once into `SkinnedMeshJoints` and again into the actual GPU buffer.
    
    This makes #4902 obsolete.
    
    ## Solution
    Cut out the middle copy and directly extract joints into `SkinnedMeshJoints` and remove `ExtractedJoints` entirely.
    
    This also removes the per-frame allocation that is being made to send `ExtractedJoints` into the render world.
    
    ## Performance
    On my local machine, this halves the time for `prepare_skinned _meshes` on `many_foxes` (195.75us -> 93.93us on average).
    
    ![image](https://user-images.githubusercontent.com/3137680/205427455-ab91a8a3-a6b0-4f0a-bd48-e54482c563b2.png)
    
    ---
    
    ## Changelog
    Added: `BufferVec::truncate`
    Added: `BufferVec::extend`
    Changed: `SkinnedMeshJoints::build` now takes a `&mut BufferVec` instead of a `&mut Vec` as a parameter.
    Removed: `ExtractedJoints`.
    
    ## Migration Guide
    `ExtractedJoints` has been removed. Read the bound bones from `SkinnedMeshJoints` instead.

[33mcommit 53a5bbe2d56b5d3f11d93ad383b160289851bab2[m
Author: James Liu <contact@jamessliu.com>
Date:   Tue Dec 20 16:17:02 2022 +0000

    Add thread create/destroy callbacks to TaskPool (#6561)
    
    # Objective
    Fix #1991. Allow users to have a bit more control over the creation and finalization of the threads in `TaskPool`.
    
    ## Solution
    Add new methods to `TaskPoolBuilder` that expose callbacks that are called to initialize and finalize each thread in the `TaskPool`.
    
    Unlike the proposed solution in #1991, the callback is argument-less. If an an identifier is needed, `std::thread::current` should provide that information easily.
    
    Added a unit test to ensure that they're being called correctly.

[33mcommit e8b28547bf27153e323a5f9406a9840c3cedcd7c[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Dec 20 16:16:58 2022 +0000

    Cleanup dynamic scene before building (#6254)
    
    # Objective
    
    - Dynamic scene builder can build scenes without components, if they didn't have any matching the type registry
    - Those entities are not really useful in the final `DynamicScene`
    
    ## Solution
    
    - Add a method `remove_empty_entities` that will remove empty entities. It's not called by default when calling `build`, I'm not sure if that's a good idea or not.

[33mcommit 5b8b7dc08fbacc2fdd868b9d1f138585547562e8[m
Author: James Liu <contact@jamessliu.com>
Date:   Tue Dec 20 15:59:41 2022 +0000

    Add a stress test profile (#6901)
    
    # Objective
    This adds a custom profile for testing against stress tests. Bevy seemingly gets notably faster with LTO turned on. To more accurately depict production level performance, LTO and other rustc-level optimizations should be enabled when performance testing on stress tests.
    
    Also updated the stress test docs to reflect that users should be using it.

[33mcommit bd615cbf8c42fb9880317b20d40ec861587143b7[m
Author: James Liu <contact@jamessliu.com>
Date:   Tue Dec 20 15:40:42 2022 +0000

    Shrink DrawFunctionId (#6944)
    
    # Objective
    This includes one part of #4899. The aim is to improve CPU-side rendering performance by reducing the memory footprint and bandwidth required.
    
    ## Solution
    Shrink `DrawFunctionId` to `u32`. Enforce that `u32 as usize` conversions are always safe by forbidding compilation on 16-bit platforms. This shouldn't be a breaking change since #4736 disabled compilation of `bevy_ecs` on those platforms.
    
    Shrinking `DrawFunctionId` shrinks all of the `PhaseItem` types, which is integral to sort and render phase performance.
    
    Testing against `many_cubes`, the sort phase improved by 22% (174.21us -> 141.76us per frame).
    
    ![image](https://user-images.githubusercontent.com/3137680/207345422-a512b4cf-1680-46e0-9973-ea72494ebdfe.png)
    
    The main opaque pass also imrproved by 9% (5.49ms -> 5.03ms)
    
    ![image](https://user-images.githubusercontent.com/3137680/207346436-cbee7209-6450-4964-b566-0b64cfa4b4ea.png)
    
    Overall frame time improved by 5% (14.85ms -> 14.09ms)
    
    ![image](https://user-images.githubusercontent.com/3137680/207346895-9de8676b-ef37-4cb9-8445-8493f5f90003.png)
    
    There will be a followup PR that likewise shrinks `CachedRenderPipelineId` which should yield similar results on top of these improvements.

[33mcommit f8e4b755ffde634a4f2c27f904a3a78a68d4eaa6[m
Author: Zeenobit <zeenobit.exe@gmail.com>
Date:   Fri Dec 16 20:14:13 2022 +0000

    Add `EntityMap::iter()` (#6935)
    
    # Objective
    
    There is currently no way to iterate over key/value pairs inside an `EntityMap`, which makes the usage of this struct very awkward. I couldn't think of a good reason why the `iter()` function should not be exposed, considering the interface already exposes `keys()` and `values()`, so I made this PR.
    
    ## Solution
    
    Implement `iter()` for `EntityMap` in terms of its inner map type.

[33mcommit 00fa0d8cf2fdb09675b6abbb75a5469ca8d49303[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Fri Dec 16 20:14:11 2022 +0000

    Apply `WindowDescriptor` settings in all modes (#6934)
    
    # Objective
    Some settings were only applied in windowed mode.
    Fix the issue in #6933
    
    # Solution
    Always apply the settings.
    
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 0d606030a23683faa1d3ca8158da2a33465affa2[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Fri Dec 16 19:53:23 2022 +0000

    Remove `EntityCommands::add_children` (#6942)
    
    # Objective
    Remove a method with an unfortunate name and questionable usefulness.
    Added in #4708
    
    It doesn't make sense to me for us to provide a method to work around a limitation of closures when we can simply, *not* use a closure.
    The limitation in this case is not being able to initialize a variable from inside a closure:
    
    ```rust
    let child_id;
    commands.spawn_empty().with_children(|parent| {
        // Error: passing uninitalized variable to a closure.
        child_id = parent.spawn_empty().id();
    });
    
    // Do something with child_id
    ```
    The docs for `add_children` suggest the following:
    ```rust
    let child_id = commands
        .spawn_empty()
        .add_children(|parent| parent.spawn_empty().id());
    ```
    I would instead suggest using the following snippet.
    ```rust
    let parent_id = commands.spawn_empty().id();
    let child_id = commands.spawn_empty().set_parent(parent_id).id();
    
    // To be fair, at the time of #4708 this would have been a bit more cumbersome since `set_parent` did not exist.
    ```
    
    Using `add_children` gets more unwieldy when you also want the `parent_id`.
    ```rust
    let parent_commands = commands.spawn_empty();
    let parent_id = parent_commands.id();
    let child_id = parent_commands.add_children(|parent| parent.spawn_empty().id());
    ```
    ### The name
    I see why `add_children` is named that way, it's the non-builder variant of `with_children` so it kinda makes sense,
    but now the method name situation for `add_child`, `add_children` and `push_children` is *rather* unfortunate.
    
    Removing `add_children` and renaming `push_children` to `add_children` in one go is kinda bleh, but that way we end up with the matching methods `add_child` and `add_children`.
    
    Another reason to rename `push_children` is that it's trying to mimick the `Vec` api naming but fails because `push` is for single elements. I guess it should have been `extend_children_from_slice`, but lets not name it that :)
    
    ### Questions
    ~~Should `push_children` be renamed in this PR? This would make the migration guide easier to deal with.~~
    Let's do that later.
    
    Does anyone know of a way to do a simple text/regex search through all the github repos for usage of `add_children`?
    That way we can have a better idea of how this will affect users. My guess is that usage of `add_children` is quite rare.
    
    ## Migration Guide
    The method `add_children` on `EntityCommands` was removed.
    If you were using `add_children` over `with_children` to return data out of the closure you can use `set_parent` or `add_child` to avoid the closure instead.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit bd3e95562102ba7607ab3ef7339c9418dae79106[m[33m ([m[1;31mmsaa/main[m[33m)[m
Author: Nate Casey <nathanielcasey2552@gmail.com>
Date:   Fri Dec 16 10:52:53 2022 -0500

    Msaa::samples() now inline

[33mcommit 79b0d02e0ab317134066e0875cebe69e380134cf[m
Author: Nate Casey <nathanielcasey2552@gmail.com>
Date:   Thu Dec 15 23:12:06 2022 -0500

    check doc

[33mcommit 37416518bc5d2390b3c199217cde5b7cef484397[m
Author: Nate Casey <nathanielcasey2552@gmail.com>
Date:   Thu Dec 15 22:59:26 2022 -0500

    Changed some code to use .samples()

[33mcommit 5f1f5be560307f3110f7bc503d1cd1d212fb52d0[m
Author: Nate Casey <nathanielcasey2552@gmail.com>
Date:   Thu Dec 15 22:49:47 2022 -0500

    Moved non-exhaustive attribute to MultiSampleLevel

[33mcommit 38d567d2c5d9e5eaf232be8e878bdb78aa819847[m
Author: Jonah Henriksson <33059163+JonahPlusPlus@users.noreply.github.com>
Date:   Fri Dec 16 01:40:15 2022 +0000

    Make `AsBindGroup` unsized (#6937)
    
    # Objective
    
    `AsBindGroup` can't be used as a trait object because of the constraint `Sized` and because of the associated function.
    
    This is a problem for [`bevy_atmosphere`](https://github.com/JonahPlusPlus/bevy_atmosphere) because it needs to use a trait that depends on `AsBindGroup` as a trait object, for switching out different shaders at runtime. The current solution it employs is reimplementing the trait and derive macro into that trait, instead of constraining to `AsBindGroup`.
    
    ## Solution
    
    Remove the `Sized` constraint from `AsBindGroup` and add the constraint `where Self: Sized` to the associated function `bind_group_layout`. Also change `PreparedBindGroup<T: AsBindGroup>` to `PreparedBindGroup<T>` and use it as `PreparedBindGroup<Self::Data>` instead of `PreparedBindGroup<Self>`.
    
    This weakens the constraints, but increases the flexibility of `AsBindGroup`.
    I'm not entirely sure why the `Sized` constraint was there, because it worked fine without it (maybe @cart wasn't aware of use cases for `AsBindGroup` as a trait object or this was just leftover from legacy code?).
    
    ---
    
    ## Changelog
    
    - `AsBindGroup` can be used as a trait object.

[33mcommit ec0478d100d286007a83fe00e3d2fe0d3410b74b[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Thu Dec 15 18:05:15 2022 +0000

    Fix clippy lints and failed test with Rust 1.66 (#6945)
    
    # Objective
    
    [Rust 1.66](https://blog.rust-lang.org/inside-rust/2022/12/12/1.66.0-prerelease.html) is coming in a few days, and bevy doesn't build with it.
    
    Fix that.
    
    ## Solution
    
    Replace output from a trybuild test, and fix a few new instances of `needless_borrow` and `unnecessary_cast` that are now caught.
    
    ## Note
    
    Due to the trybuild test, this can't be merged until 1.66 is released.

[33mcommit c02613b77b8012847c50abc0ddc4438c0e8334bf[m
Author: Nate Casey <nathanielcasey2552@gmail.com>
Date:   Tue Dec 13 23:26:26 2022 -0500

    Changed Msaa to take level rather than int

[33mcommit bad3d57d0c679510013083bfeaef7b73b8852acc[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Dec 13 22:54:27 2022 +0000

    update cargo deny config with latest list of duplicate crates in dependencies (#6947)
    
    # Objective
    
    - Get dependency check to succeed
    
    ## Solution
    
    - Update the list

[33mcommit b7d6ee8c6835bbf66127e24a6f81229ef7eb92bf[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Tue Dec 13 21:00:43 2022 +0000

    Update concurrent-queue to 2.0 (#6538)
    
    
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 79b9231b749150ffead1571e8c19911fe9a9e8be[m
Author: James Liu <contact@jamessliu.com>
Date:   Sun Dec 11 23:04:04 2022 +0000

    Move system_commands spans into apply_buffers (#6900)
    
    # Objective
    A separate `tracing` span for running a system's commands is created, even if the system doesn't have commands. This is adding extra measuring overhead (see #4892) where it's not needed.
    
    ## Solution
    Move the span into `ParallelCommandState` and `CommandQueue`'s `SystemParamState::apply`. To get the right metadata for the span, a additional `&SystemMeta` parameter was added to `SystemParamState::apply`.
    
    ---
    
    ## Changelog
    Added: `SystemMeta::name`
    Changed: Systems without `Commands` and  `ParallelCommands` will no longer show a "system_commands" span when profiling.
    Changed: `SystemParamState::apply` now takes a `&SystemMeta` parameter in addition to the provided `&mut World`.

[33mcommit 4820917af6be06866f10d4bd17191802d6640efb[m
Author: Zoey <alice.i.cecile@gmail.com>
Date:   Sun Dec 11 19:24:19 2022 +0000

    Add `set_if_neq` method to `DetectChanges` trait (Rebased) (#6853)
    
    # Objective
    
    Change detection can be spuriously triggered by setting a field to the same value as before. As a result, a common pattern is to write:
    
    ```rust
    if *foo != value {
      *foo = value;
    }
    ```
    
    This is confusing to read, and heavy on boilerplate.
    
    Adopted from #5373, but untangled and rebased to current `bevy/main`.
    
    ## Solution
    
        1. Add a method to the `DetectChanges` trait that implements this boilerplate when the appropriate trait bounds are met.
    
        2. Document this minor footgun, and point users to it.
    
    
    ## Changelog
    
        * added the `set_if_neq` method to avoid triggering change detection when the new and previous values are equal. This will work on both components and resources.
    
    
    ## Migration Guide
    
    If you are manually checking if a component or resource's value is equal to its new value before setting it to avoid triggering change detection, migrate to the clearer and more convenient `set_if_neq` method.
    ## Context
    
    Related to #2363 as it avoids triggering change detection, but not a complete solution (as it still requires triggering it when real changes are made).
    
    
    
    Co-authored-by: Zoey <Dessix@Dessix.net>

[33mcommit aeb2c4b9173a5dde7123f2d18e601caf2a3b063e[m
Author: Lixou <82600264+DasLixou@users.noreply.github.com>
Date:   Sun Dec 11 19:24:18 2022 +0000

    Update linux_dependencies.md for Arch - Vulkan API not only for Intel GPUs (#6729)
    
    fix note in arch's linux deps.

[33mcommit 68a7127a27e4ceabbf254cccf74459e719825999[m
Author: zxygentoo <zxygentoo@users.noreply.github.com>
Date:   Sun Dec 11 18:46:48 2022 +0000

    Update linux_dependencies.md (#6915)
    
    Add a section about install `vulkan-loader` on Gentoo.
    
    # Objective
    
    - Clarify the dependency about install on Gentoo with NVIDIA GPU and using a proprietary driver.
    
    ## Solution
    
    - Emerge `vulkan-loader` to help Bevy to find the correct ICD.

[33mcommit b1a634cade314e80af614e84b11323636c49ba90[m
Author: Tianlan Zhou <bobby825@126.com>
Date:   Sun Dec 11 18:46:47 2022 +0000

    Fix alpha channel in RGB32F image texture format conversion (#6914)
    
    # Objective
    
    The following code:
    
    ```rs
    use bevy::prelude::Image;
    use image::{ DynamicImage, GenericImage, Rgba };
    
    fn main() {
        let mut dynamic_image = DynamicImage::new_rgb32f(1, 1);
        dynamic_image.put_pixel(0, 0, Rgba([1, 1, 1, 1]));
    
        let image = Image::from_dynamic(dynamic_image, false); // Panic!
        println!("{image:?}");
    }
    ```
    
    Can cause an assertion failed:
    
    ```
    thread 'main' panicked at 'assertion failed: `(left == right)`
      left: `16`,
     right: `14`: Pixel data, size and format have to match', .../bevy_render-0.9.1/src/texture/image.rs:209:9
    stack backtrace:
    ...
       4: core::panicking::assert_failed<usize,usize>
                 at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/core/src/panicking.rs:181
       5: bevy_render::texture::image::Image::new
                 at .../bevy_render-0.9.1/src/texture/image.rs:209
       6: bevy_render::texture::image::Image::from_dynamic
                 at .../bevy_render-0.9.1/src/texture/image_texture_conversion.rs:159
       7: bevy_test::main
                 at ./src/main.rs:8
    ...
    ```
    
    It seems to be cause by a copypasta in `crates/bevy_render/src/texture/image_texture_conversion.rs`. Let's fix it.
    
    ## Solution
    
    ```diff
      // DynamicImage::ImageRgb32F(image) => {
    - let a = u16::max_value();
    + let a = 1f32;
    ```
    
    This will fix the conversion.
    
    ---
    
    ## Changelog
    
    - Fixed the alpha channel of the `image::DynamicImage::ImageRgb32F` to `bevy_render::texture::Image` conversion in `bevy_render::texture::Image::from_dynamic()`.

[33mcommit 544776831d1d8305b135d1520078ee17ba2276ae[m
Author: Hennadii Chernyshchyk <genaloner@gmail.com>
Date:   Sun Dec 11 18:46:46 2022 +0000

    Remove `render` feature group (#6912)
    
    # Objective
    
    The feature doesn't have any use case in libraries or applications and many users use this feature incorrectly. See the issue for details.
    Closes #5753.
    
    ## Solution
    
    Remove it.
    
    ---
    
    ## Changelog
    
    ### Removed
    
    - `render` feature group.
    
    ## Migration Guide
    
    Instead of using `render` feature group use dependencies directly. This group consisted of `bevy_core_pipeline`, `bevy_pbr`, `bevy_gltf`, `bevy_render`, `bevy_sprite`, `bevy_text` and `bevy_ui`. You probably want to check if you need all of them.

[33mcommit 36691769bae00ba04590d5e2e04e012f480e7f09[m
Author: IceSentry <c.giguere42@gmail.com>
Date:   Sun Dec 11 18:46:45 2022 +0000

    Document undocumented features of AsBindGroup derive (#6910)
    
    # Objective
    
    - https://github.com/bevyengine/bevy/pull/5364 Added a few features to the AsBindGroup derive, but if you don't know they exist they aren't documented anywhere.
    
    
    ## Solution
    
    - Document the new arguments in the doc block for the derive.

[33mcommit 87bf0e26643f4d599e2f77690dcff71204fa325f[m
Author: James Liu <contact@jamessliu.com>
Date:   Sun Dec 11 18:46:43 2022 +0000

    Remove unnecessary branching from bundle insertion (#6902)
    
    # Objective
    Speed up bundle insertion and spawning from a bundle.
    
    ## Solution
    Use the same technique used in #6800 to remove the branch on storage type when writing components from a `Bundle` into storage.
    
     - Add a `StorageType` argument to the closure on `Bundle::get_components`.
     - Pass `C::Storage::STORAGE_TYPE` into that argument.
     - Match on that argument instead of reading from a `Vec<StorageType>` in `BundleInfo`.
     - Marked all implementations of `Bundle::get_components` as inline to encourage dead code elimination.
    
    The `Vec<StorageType>` in `BundleInfo` was also removed as it's no longer needed. If users were reliant on this, they can either use the compile time constants or fetch the information from `Components`. Should save a rather negligible amount of memory.
    
    ## Performance
    Microbenchmarks show a slight improvement to inserting components into existing entities, as well as spawning from a bundle. Ranging about 8-16% faster depending on the benchmark.
    
    ```
    group                                          main                                    soft-constant-write-components
    -----                                          ----                                    ------------------------------
    add_remove/sparse_set                          1.08  1019.0Â±80.10Âµs        ? ?/sec     1.00   944.6Â±66.86Âµs        ? ?/sec
    add_remove/table                               1.07  1343.3Â±20.37Âµs        ? ?/sec     1.00  1257.3Â±18.13Âµs        ? ?/sec
    add_remove_big/sparse_set                      1.08  1132.4Â±263.10Âµs        ? ?/sec    1.00  1050.8Â±240.74Âµs        ? ?/sec
    add_remove_big/table                           1.02      2.6Â±0.05ms        ? ?/sec     1.00      2.5Â±0.08ms        ? ?/sec
    get_or_spawn/batched                           1.15   401.4Â±17.76Âµs        ? ?/sec     1.00   349.3Â±11.26Âµs        ? ?/sec
    get_or_spawn/individual                        1.13   732.1Â±43.35Âµs        ? ?/sec     1.00   645.6Â±41.44Âµs        ? ?/sec
    insert_commands/insert                         1.12   623.9Â±37.48Âµs        ? ?/sec     1.00   557.4Â±34.99Âµs        ? ?/sec
    insert_commands/insert_batch                   1.16   401.4Â±17.00Âµs        ? ?/sec     1.00   347.4Â±12.87Âµs        ? ?/sec
    insert_simple/base                             1.08    416.9Â±5.60Âµs        ? ?/sec     1.00    385.2Â±4.14Âµs        ? ?/sec
    insert_simple/unbatched                        1.06   934.5Â±44.58Âµs        ? ?/sec     1.00   881.3Â±47.86Âµs        ? ?/sec
    spawn_commands/2000_entities                   1.09   190.7Â±11.41Âµs        ? ?/sec     1.00    174.7Â±9.15Âµs        ? ?/sec
    spawn_commands/4000_entities                   1.10   386.5Â±25.33Âµs        ? ?/sec     1.00   352.3Â±18.81Âµs        ? ?/sec
    spawn_commands/6000_entities                   1.10   586.2Â±34.42Âµs        ? ?/sec     1.00   535.3Â±27.25Âµs        ? ?/sec
    spawn_commands/8000_entities                   1.08   778.5Â±45.15Âµs        ? ?/sec     1.00   718.0Â±33.66Âµs        ? ?/sec
    spawn_world/10000_entities                     1.04  1026.4Â±195.46Âµs        ? ?/sec    1.00  985.8Â±253.37Âµs        ? ?/sec
    spawn_world/1000_entities                      1.06   103.8Â±20.23Âµs        ? ?/sec     1.00    97.6Â±18.22Âµs        ? ?/sec
    spawn_world/100_entities                       1.15     11.4Â±4.25Âµs        ? ?/sec     1.00      9.9Â±1.87Âµs        ? ?/sec
    spawn_world/10_entities                        1.05  1030.8Â±229.78ns        ? ?/sec    1.00  986.2Â±231.12ns        ? ?/sec
    spawn_world/1_entities                         1.01   105.1Â±23.33ns        ? ?/sec     1.00   104.6Â±31.84ns        ? ?/sec
    ```
    
    ---
    
    ## Changelog
    Changed: `Bundle::get_components` now takes a `FnMut(StorageType, OwningPtr)`. The provided storage type must be correct for the component being fetched.

[33mcommit 26d614591523acdb58682378041b93cc3158d455[m
Author: James Liu <contact@jamessliu.com>
Date:   Sun Dec 11 18:46:42 2022 +0000

    Document remaining members of bevy_utils (#6897)
    
    # Objective
    Partially address #3492.
    
    ## Solution
    Document the remaining undocumented members of `bevy_utils` and set `warn(missing_docs)` on the crate level. Also enabled `clippy::undocumented_unsafe_blocks` as a warning on the crate to keep it in sync with `bevy_ecs`'s warnings.

[33mcommit f4818bcd69ec2153201d44e0f072ef16d9acc751[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sun Dec 11 18:46:41 2022 +0000

    scene viewer: can select a scene from the asset path (#6859)
    
    # Objective
    
    - Fixes #6630, fixes #6679
    - Improve scene viewer in cases where there are more than one scene in a gltf file
    
    ## Solution
    
    - Can select which scene to display using `#SceneN`, defaults to scene 0 if not present
    - Display the number of scenes available if there are more than one

[33mcommit ea8f74692ff8aae5ed1f6b81425a5e953068ca40[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Sun Dec 11 18:34:16 2022 +0000

    Add `with_a` and friends to `Color`  (#6899)
    
    # Objective
    ```rust
    // makes clippy complain about 'taking a mutable reference to a `const` item'
    let color = *Color::RED.set_a(0.5);
    
    // Now you can do
    let color = Color::RED.with_a(0.5);
    ```
    
    ## Changelog
    Added `with_r`, `with_g`, `with_b`, and `with_a` to `Color`.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 75880a0b176e7f55baf8ed07765ef9a2f243e2df[m
Author: Mike <mike.hsu@gmail.com>
Date:   Sun Dec 11 18:34:15 2022 +0000

    run clear trackers on render world (#6878)
    
    # Objective
    
    - Fixes https://github.com/bevyengine/bevy/issues/6417
    
    ## Solution
    
    - clear_trackers was not being called on the render world. This causes the removed components vecs to continuously grow. This PR adds clear trackers to the end of RenderStage::Cleanup
    
    ## Migration Guide
    
    The call to `clear_trackers` in `App` has been moved from the schedule to App::update for the main world and calls to `clear_trackers` have been added for sub_apps in the same function. This was due to needing stronger guarantees. If clear_trackers isn't called on a world it can lead to memory leaks in `RemovedComponents`.

[33mcommit 1af73624fa3ab936384b342212a4c54505491d64[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Sun Dec 11 18:34:14 2022 +0000

    Simplify trait hierarchy for `SystemParam` (#6865)
    
    # Objective
    
    * Implementing a custom `SystemParam` by hand requires implementing three traits -- four if it is read-only.
    * The trait `SystemParamFetch<'w, 's>` is a workaround from before we had generic associated types, and is no longer necessary.
    
    ## Solution
    
    * Combine the trait `SystemParamFetch` with `SystemParamState`.
        * I decided to remove the `Fetch` name and keep the `State` name, since the former was consistently conflated with the latter.
    * Replace the trait `ReadOnlySystemParamFetch` with `ReadOnlySystemParam`, which simplifies trait bounds in generic code.
    
    ---
    
    ## Changelog
    
    - Removed the trait `SystemParamFetch`, moving its functionality to `SystemParamState`.
    - Replaced the trait `ReadOnlySystemParamFetch` with `ReadOnlySystemParam`.
    
    ## Migration Guide
    
    The trait `SystemParamFetch` has been removed, and its functionality has been transferred to `SystemParamState`.
    
    ```rust
    // Before
    impl SystemParamState for MyParamState {
        fn init(world: &mut World, system_meta: &mut SystemMeta) -> Self { ... }
    }
    impl<'w, 's> SystemParamFetch<'w, 's> for MyParamState {
        type Item = MyParam<'w, 's>;
        fn get_param(...) -> Self::Item;
    }
    
    // After
    impl SystemParamState for MyParamState {
        type Item<'w, 's> = MyParam<'w, 's>; // Generic associated types!
        fn init(world: &mut World, system_meta: &mut SystemMeta) -> Self { ... }
        fn get_param<'w, 's>(...) -> Self::Item<'w, 's>;
    }
    ```
    
    The trait `ReadOnlySystemParamFetch` has been replaced with `ReadOnlySystemParam`.
    
    ```rust
    // Before
    unsafe impl ReadOnlySystemParamFetch for MyParamState {}
    
    // After
    unsafe impl<'w, 's> ReadOnlySystemParam for MyParam<'w, 's> {}
    ```

[33mcommit c16791ce6712854f031e79ebc303fb6bb540912b[m
Author: James Liu <contact@jamessliu.com>
Date:   Sun Dec 11 18:34:13 2022 +0000

    Document options for !Sync types for Component and Resources (#6864)
    
    # Objective
    It's not clear to users how to handle `!Sync` types as components and resources in the absence of engine level support for them.
    
    ## Solution
    Added a section to `Component`'s and `Resource`'s type level docs on available options for making a type `Sync` when it holds `!Sync` fields, linking `bevy_utils::synccell::SyncCell` and the currently unstable `std::sync::Exclusive`.
    
    Also added a compile_fail doctest that illustrates how to apply `SyncCell`. These will break when/if #6572 gets merged, at which point these docs should be updated.

[33mcommit ea80aca7ca7ddefe8e2e9795a941bd6bb4c7f4e6[m
Author: Mike <mike.hsu@gmail.com>
Date:   Sun Dec 11 18:22:11 2022 +0000

    unpin miri (#6863)
    
    # Objective
    
    - https://github.com/rust-lang/miri/pull/2713 was merged into miri. See if this fixes miri for bevy.

[33mcommit 95c0d99e45c0fecbd6d15bc334cf561bbffc0430[m
Author: Alejandro Pascual <alejandro.pascual.pozo@gmail.com>
Date:   Sun Dec 11 18:22:10 2022 +0000

    Sprite sheet example: specify animation indices (#6861)
    
    # Objective
    
    - Make running animation fluid skipping 'idle' frame.
    
    ## Solution
    
    - Loop through the specified indices instead of through the whole sprite sheet.
    
    The example is correct, is just the feeling that the animation loop is not seamless.
    
    Based on the solution suggested by @mockersf in #5429.

[33mcommit 0d67c32153d0a81f0fc0d4413e75aafe4906493c[m
Author: James Liu <contact@jamessliu.com>
Date:   Sun Dec 11 18:22:09 2022 +0000

    Avoid triggering change detection for inputs (#6847)
    
    # Objective
    Fix #5292.
    
    ## Solution
    Avoid derefencing when clearing to ensure that change detection is not triggered when there is nothing to clear.

[33mcommit b37a6ca9a2cb0434800df62dad7b9472f8e2131a[m
Author: James Liu <xdotdash@gmail.com>
Date:   Sun Dec 11 18:22:08 2022 +0000

    Add reflection support for VecDeque  (#6831)
    
    # Objective
    This is an adoption of #5792. Fixes #5791.
    
    ## Solution
    Implemented all the required reflection traits for `VecDeque`, taking from `Vec`'s impls.
    
    ---
    
    ## Changelog
    Added: `std::collections::VecDeque` now implements `Reflect` and all relevant traits.
    
    Co-authored-by: james7132 <contact@jamessliu.com>

[33mcommit 6903a9411b0d7e4dec759deecf7cc7986a9f6092[m
Author: Mike <mike.hsu@gmail.com>
Date:   Sun Dec 11 18:22:07 2022 +0000

    get pixel size from wgpu (#6820)
    
    # Objective
    
    - Get rid of giant match statement to get PixelInfo.
    - This will allow for supporting any texture that is uncompressed, instead of people needing to PR in any textures that are supported in wgpu, but not bevy.
    
    ## Solution
    
    - More conservative alternative to https://github.com/bevyengine/bevy/pull/6788, where we don't try to make some of the calculations correct for compressed types.
    - Delete `PixelInfo` and get the pixel_size directly from wgpu. Data from wgpu is here: https://docs.rs/wgpu-types/0.14.0/src/wgpu_types/lib.rs.html#2359
    - Panic if the texture is a compressed type. An integer byte size of a pixel is no longer a valid concept when talking about compressed textures.
    - All internal usages use `pixel_size` and not `pixel_info` and are on uncompressed formats. Most of these usages are on either explicit texture formats or slightly indirectly through `TextureFormat::bevy_default()`. The other uses are in `TextureAtlas` and have other calculations that assumes the texture is uncompressed.
    
    ## Changelog
    
    - remove `PixelInfo` and get `pixel_size` from wgpu
    
    ## Migration Guide
    
    `PixelInfo` has been removed. `PixelInfo::components` is equivalent to `texture_format.describe().components`. `PixelInfo::type_size` can be gotten from `texture_format.describe().block_size/ texture_format.describe().components`. But note this can yield incorrect results for some texture types like Rg11b10Float.

[33mcommit 2e7925d8d01469b5835a36f159ae068668ded511[m
Author: Jay Pavlina <explodingjay@protonmail.com>
Date:   Sun Dec 11 18:22:05 2022 +0000

    Add cylinder shape (#6809)
    
    # Objective
    
    Adds a cylinder shape. Fixes #2282.
    
    ## Solution
    
    - I added a custom cylinder shape, taken from [here](https://github.com/rparrett/typey_birb/blob/main/src/cylinder.rs) with permission from @rparrett.
    - I also added the cylinder shape to the `3d_shapes` example scene.
    
    ---
    
    ## Changelog
    
    - Added cylinder shape
    
    Co-Authored-By: Rob Parrett <robparrett@gmail.com>
    Co-Authored-By: davidhof <7483215+davidhof@users.noreply.github.com>

[33mcommit aea4c5b1a42f613932a00440aa4c917808e059a5[m
Author: Edvin Kjell <edvin.kjell@hotmail.com>
Date:   Sun Dec 11 18:10:03 2022 +0000

    [Fixes #6224] Add logging variants of system piping (#6751)
    
    # Objective
    
    Fixes #6224, add ``dbg``, ``info``, ``warn`` and ``error`` system piping adapter variants to expand #5776, which call the corresponding re-exported [bevy_log macros](https://docs.rs/bevy/latest/bevy/log/macro.info.html) when the result is an error.
    
    ## Solution
    
    * Added ``dbg``, ``info``, ``warn`` and ``error`` system piping adapter variants to ``system_piping.rs``.
    * Modified and added tests for these under examples in ``system_piping.rs``.

[33mcommit 81153a8b0c75381b9f8359549c341938d3401f76[m
Author: dis-da-moe <moe.uraijah@gmail.com>
Date:   Sun Dec 11 18:10:02 2022 +0000

    document file formats for `bytes` field of `AudioSource` (#6619)
    
    # Objective
    
    Fixes #6299
    
    ## Solution
    
    Change one line of documentation.
    
    Co-authored-by: dis-da-moe <84386186+dis-da-moe@users.noreply.github.com>

[33mcommit 07e7fa5a4d1e29d50afbdcf0eb97c7e705bc3477[m
Author: Jerome Humbert <djeedai@gmail.com>
Date:   Sun Dec 11 18:10:01 2022 +0000

    Document `World::clear_trackers()` (#6520)
    
    # Objective
    
    Document `World::clear_trackers()`.
    
    ## Solution
    
    Document the `World::clear_trackers()` method, and briefly how it's related to change detection and `RemovedComponents`.
    
    This is a follow-up from [this discussion](https://discord.com/channels/691052431525675048/749335865876021248/1039628807025479700) on Discord.

[33mcommit 344a65313f21ea6748ae37a6d7cd407ae45f3045[m
Author: harudagondi <giogdeasis@gmail.com>
Date:   Sun Dec 11 18:10:00 2022 +0000

    Make `AudioOutput` a Resource (#6436)
    
    # Objective
    
    - Make `AudioOutput` a `Resource`.
    
    ## Solution
    
    - Do not store `OutputStream` in the struct.
    - `mem::forget` `OutputStream`.
    
    ---
    
    ## Changelog
    
    ### Added
    
    - `AudioOutput` is now a `Resource`.
    
    ## Migration Guide
    
    - Use `Res<AudioOutput<Source>>` instead of `NonSend<AudioOutput<Source>>`. Same for `Mut` variants.

[33mcommit 63f1a9dec822b71e21b55cf5b02e8d7b57435537[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Sun Dec 11 17:52:48 2022 +0000

    bevy_reflect: Add `ReflectFromReflect` (v2) (#6245)
    
    # Objective
    
    Resolves #4597 (based on the work from #6056 and a refresh of #4147)
    
    When using reflection, we may often end up in a scenario where we have a Dynamic representing a certain type. Unfortunately, we can't just call `MyType::from_reflect` as we do not have knowledge of the concrete type (`MyType`) at runtime.
    
    Such scenarios happen when we call `Reflect::clone_value`, use the reflection deserializers, or create the Dynamic type ourselves.
    
    ## Solution
    
    Add a `ReflectFromReflect` type data struct.
    
    This struct allows us to easily convert Dynamic representations of our types into their respective concrete instances.
    
    ```rust
    #[derive(Reflect, FromReflect)]
    #[reflect(FromReflect)] // <- Register `ReflectFromReflect`
    struct MyStruct(String);
    
    let type_id = TypeId::of::<MyStruct>();
    
    // Register our type
    let mut registry = TypeRegistry::default();
    registry.register::<MyStruct>();
    
    // Create a concrete instance
    let my_struct = MyStruct("Hello world".to_string());
    
    // `Reflect::clone_value` will generate a `DynamicTupleStruct` for tuple struct types
    let dynamic_value: Box<dyn Reflect> = my_struct.clone_value();
    assert!(!dynamic_value.is::<MyStruct>());
    
    // Get the `ReflectFromReflect` type data from the registry
    let rfr: &ReflectFromReflect = registry
      .get_type_data::<ReflectFromReflect>(type_id)
      .unwrap();
    
    // Call `FromReflect::from_reflect` on our Dynamic value
    let concrete_value: Box<dyn Reflect> = rfr.from_reflect(&dynamic_value);
    assert!(concrete_value.is::<MyStruct>());
    ```
    
    ### Why this PR?
    
    ###### Why now?
    
    The three main reasons I closed #4147 were that:
    
    1. Registering `ReflectFromReflect` is clunky (deriving `FromReflect` *and* registering `ReflectFromReflect`)
    2. The ecosystem and Bevy itself didn't seem to pay much attention to deriving `FromReflect`
    3. I didn't see a lot of desire from the community for such a feature
    
    However, as time has passed it seems 2 and 3 are not really true anymore. Bevy is internally adding lots more `FromReflect` derives, which should make this feature all the more useful. Additionally, I have seen a growing number of people look for something like `ReflectFromReflect`.
    
    I think 1 is still an issue, but not a horrible one. Plus it could be made much, much better using #6056. And I think splitting this feature out of #6056 could lead to #6056 being adopted sooner (or at least make the need more clear to users).
    
    ###### Why not just re-open #4147?
    
    The main reason is so that this PR can garner more attention than simply re-opening the old one. This helps bring fresh eyes to the PR for potentially more perspectives/reviews.
    
    ---
    
    ## Changelog
    
    * Added `ReflectFromReflect`
    
    Co-authored-by: Gino Valente <49806985+MrGVSV@users.noreply.github.com>

[33mcommit 6308041772fec9ef8273f040f392de3532a661a4[m
Author: James Liu <contact@jamessliu.com>
Date:   Sat Dec 10 09:25:53 2022 +0000

    Fix Sparse Change Detection (#6896)
    
    # Objective
    #6547 accidentally broke change detection for SparseSet components by using `Ticks::from_tick_cells` with the wrong argument order.
    
    ## Solution
    Use the right argument order. Add a regression test.

[33mcommit a5d70b8952aed3616ffb5a58026ea6cb5375fc82[m
Author: TehPers <tehperz@gmail.com>
Date:   Fri Dec 9 01:20:44 2022 +0000

    Derive `Reflect` + `FromReflect` for window event types (#6235)
    
    # Objective
    
    The window event types currently don't support reflection. This PR adds support to them (as requested [here](https://github.com/bevyengine/bevy/issues/6223#issuecomment-1273852329)).
    
    ## Solution
    
    Implement `Reflect` + `FromReflect` for window event types. Relevant traits are also being reflected with `#[reflect(...)]` attributes.
    
    Additionally, this PR derives `Reflect` + `FromReflect` for `WindowDescriptor` and the types it depends on so that `CreateWindow` events can be fully manipulated through reflection.
    
    Finally, this PR adds `FromReflect` for `PathBuf` as a value type, which is needed for `FileDragAndDrop`.
    
    This adds the "glam" feature to the `bevy_reflect` dependency for package `bevy_window`. Since `bevy_window` transitively depends on `glam` already, all this brings in are the reflection `impl`s.
    
    ## Open questions
    
    Should `app.register_type::<PathBuf>();` be moved to `CorePlugin`? I added it to `WindowPlugin` because that's where it's used and `CorePlugin` doesn't seem to register all the missing std types, but it would also make sense in `CorePlugin` I believe since it's a commonly used type.
    
    ---
    
    ## Changelog
    
    Added:
    - Implemented `Reflect` + `FromReflect` for window events and related types. These types are automatically registered when adding the `WindowPlugin`.

[33mcommit b58ca8721a0c9d48dfb8b1d4c5e5af612aec4d16[m
Author: Olivia Crain <olivia@olivia.dev>
Date:   Thu Dec 8 20:05:27 2022 +0000

    ci: Use Ubuntu 22.04 runner for run-examples, run-examples-on-wasm jobs  (#6875)
    
    # Objective
    
    - The `run-examples-on-wasm` job fails on Ubuntu 22.04, when it was previously working on Ubuntu 20.04. Playwright 1.22.1 (the version currently pinned by us) fails trying to install system dependencies that were renamed between Ubuntu 20.04 and 22.04.
    - The `run-examples` job previously failed on Ubuntu 22.04 with errors consistent with those listed in [this upstream mesa bug](https://gitlab.freedesktop.org/mesa/mesa/-/issues/7819).
    - Fixes #6832
    
    ## Solution
    
    - Upgrade `playwright` to the latest [v1.28.1](https://github.com/microsoft/playwright/releases/tag/v1.28.1) release. Ubuntu 22.04 support was [added](https://github.com/microsoft/playwright/pull/14588) in [v1.23.0](https://github.com/microsoft/playwright/releases/tag/v1.23.0). The [test now passes on 22.04](https://github.com/oliviacrain/bevy/actions/runs/3633583112/jobs/6130757397), and the output screenshots are unchanged from previous job outputs.
    - Use `ubuntu-latest` for the `run-examples` job. No other modifications necessary. The [PPA we pull mesa from](https://launchpad.net/~oibaf/+archive/ubuntu/graphics-drivers) rebuilt the package for 22.04 with the [upstream fix](https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/20145/diffs?commit_id=b3d1ae19f2f4d93cf0a5f45a598149ac4e8e05aa).

[33mcommit 8eedc8f69d9a09ba125f7f7fcb1d827d39bfc346[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Dec 7 23:10:27 2022 +0000

    ShaderDefVal: add an `UInt` option (#6881)
    
    # Objective
    
    - Fixes #6841
    - In some case, the number of maximum storage buffers is `u32::MAX` which doesn't fit in a `i32`
    
    ## Solution
    
    - Add an option to have a `u32` in a `ShaderDefVal`

[33mcommit bac0d89059c7be8afa4faf3da8a23f32a8275878[m
Author: Boxy <supbscripter@gmail.com>
Date:   Wed Dec 7 23:10:26 2022 +0000

    remove a `doc(hidden)` on read only version of `derive(WorldQuery)` (#6877)
    
    having `doc(hidden)` on the read only version of a generated mutable world query leads to docs on the readonly item having a dead link. It also makes it annoying to have nice docs for libraries attempting to expose derived `WorldQuery` structs as re-exporting the read only item does not cause it to appear in docs even though it would be intended for users to know about the read only world query and use it.

[33mcommit e08701307b9d5a4beb1e1d908543577e448a23ec[m
Author: Zhell <linus.kall@nodetron.com>
Date:   Wed Dec 7 23:10:25 2022 +0000

    Updated docs for ``List`` Trait in ``bevy_reflect`` (#6872)
    
    # Objective
    
    Fixes #6866.
    
    ## Solution
    
    Docs now should describe what the _front_, _first_, _back_, and _last_ elements are for an implementor of the `bevy::reflect::list::List` Trait. Further, the docs should describe how `bevy::reflect::list::List::push` and `bevy::reflect::list::List::pop` should act on these elements.
    
    
    Co-authored-by: Linus KÃ¤ll <linus.kall.business@gmail.com>

[33mcommit 10898d1dc9aac4f351eae4f846e8c93d93b531a5[m
Author: James Liu <contact@jamessliu.com>
Date:   Wed Dec 7 22:57:27 2022 +0000

    Docs: Show how to compare two different traces in Tracy (#6869)
    
    # Objective
    Fixes #5199.
    
    ## Solution
    Mention how to compare two different saved tracy traces in the profiling section.

[33mcommit 176d7df5db65b78bb8c84bdb880c2f4619f17ec8[m
Author: Olivia Crain <olivia@olivia.dev>
Date:   Wed Dec 7 21:23:20 2022 +0000

    docs: Use correct cargo-flamegraph upstream repo URL (#6873)
    
    # Objective
    
    Links to `cargo-flamegraph`'s repo point to a [fork](https://github.com/killercup/cargo-flamegraph), not the actual upstream repo. We should point to the source of truth instead of a fork that hasn't been updated since 2019.
    
    ## Solution
    
    Change links to point to the upstream repo at  [flamegraph-rs/flamegraph](https://github.com/flamegraph-rs/flamegraph).

[33mcommit 530be10e72aa2b8191fe680e9ffef5c4576ce961[m
Author: James Liu <contact@jamessliu.com>
Date:   Tue Dec 6 01:38:21 2022 +0000

    Newtype ArchetypeRow and TableRow (#4878)
    
    # Objective
    Prevent future unsoundness that was seen in #6623.
    
    ## Solution
    Newtype both indexes in `Archetype` and `Table` as `ArchetypeRow` and `TableRow`. This avoids weird numerical manipulation on the indices, and can be stored and treated opaquely. Also enforces the source and destination of where these indices at a type level.
    
    ---
    
    ## Changelog
    Changed: `Archetype` indices and `Table` rows have been newtyped as `ArchetypeRow` and `TableRow`.

[33mcommit a3f203b504507e1b518e4cc1a0a6a6596c439bee[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon Dec 5 23:56:33 2022 +0000

    Use T::Storage::STORAGE_TYPE to optimize out unused branches (#6800)
    
    # Objective
    `EntityRef::get` and friends all type erase calls to fetch the target components by using passing in the `TypeId` instead of using generics. This is forcing a lookup to `Components` to fetch the storage type. This adds an extra memory lookup and forces a runtime branch instead of allowing the compiler to optimize out the unused branch.
    
    ## Solution
    Leverage `Component::Storage::STORAGE_TYPE` as a constant instead of fetching the metadata from `Components`.
    
    ## Performance
    This has a near 2x speedup for all calls to `World::get`. Microbenchmark results from my local machine. `Query::get_component`, which uses `EntityRef::get` internally also show a slight speed up. This has closed the gap between `World::get` and `Query::get` for the same use case.
    
    ```
    group                                                             entity-ref-generics                     main
    -----                                                             -------------------                     ----
    query_get_component/50000_entities_sparse                         1.00   890.6Â±40.42Âµs        ? ?/sec     1.10   980.6Â±28.22Âµs        ? ?/sec
    query_get_component/50000_entities_table                          1.00   968.5Â±73.73Âµs        ? ?/sec     1.08  1048.8Â±31.76Âµs        ? ?/sec
    query_get_component_simple/system                                 1.00    703.2Â±4.37Âµs        ? ?/sec     1.00    702.1Â±6.13Âµs        ? ?/sec
    query_get_component_simple/unchecked                              1.02    855.8Â±8.98Âµs        ? ?/sec     1.00    843.1Â±8.19Âµs        ? ?/sec
    world_get/50000_entities_sparse                                   1.00    202.3Â±3.15Âµs        ? ?/sec     1.85   374.0Â±20.96Âµs        ? ?/sec
    world_get/50000_entities_table                                    1.00    193.0Â±1.78Âµs        ? ?/sec     2.02   389.2Â±26.55Âµs        ? ?/sec
    world_query_get/50000_entities_sparse                             1.01    162.4Â±2.23Âµs        ? ?/sec     1.00    161.3Â±0.95Âµs        ? ?/sec
    world_query_get/50000_entities_table                              1.00    199.9Â±0.63Âµs        ? ?/sec     1.00    200.2Â±0.74Âµs        ? ?/sec
    ```
    
    This should also, by proxy, speed up the `ReflectComponent` APIs as most of those use `World::get` variants internally.

[33mcommit f9c52f98b9858a685ac08871eade1ab704137a51[m
Author: Elbert Ronnie <elbert.ronniep@gmail.com>
Date:   Mon Dec 5 23:39:44 2022 +0000

    Make proc macros hygienic in bevy_reflect_derive (#6752)
    
    # Objective
    
    - Fixes #3004
    
    ## Solution
    
    - Replaced all the types with their fully quallified names
    - Replaced all trait methods and inherent methods on dyn traits with their fully qualified names
    - Made a new file `fq_std.rs` that contains structs corresponding to commonly used Structs and Traits from `std`. These structs are replaced by their respective fully qualified names when used inside `quote!`

[33mcommit 9f0c41f26d9d254b8aa8fa6ecf6c10a70afa7dd9[m
Author: polygon <polygon@wh2.tu-dresden.de>
Date:   Mon Dec 5 23:39:43 2022 +0000

    Adapt path type of dynamically_load_plugin (#6734)
    
    # Objective
    
    - Fixes #6711
    
    ## Solution
    
    - Change the `path` function parameter of `dynamically_load_plugin` and `DynamicPluginExt::load_plugin` to a generic with `AsRef<OsStr>` bound

[33mcommit f9ad051e6128873761f33898f136f06b47c571d1[m
Author: Griffin <github@dgdigital.net>
Date:   Mon Dec 5 23:39:42 2022 +0000

    Remove unnecessary alternate create_texture path in prepare_asset for Image (#6671)
    
    # Objective
    
    `prepare_asset` for Image has an alternate path for texture creation that is used when the image is not compressed and does not contain mipmaps. This additional code path is unnecessary as `render_device.create_texture_with_data()` will handle both cases correctly.
    
    ## Solution
    
    Use `render_device.create_texture_with_data()` in all cases.
    
    Tested successfully with the following examples:
    - load_gltf
    - render_to_texture
    - texture
    - 3d_shapes
    - sprite
    - sprite_sheet
    - array_texture
    - shader_material_screenspace_texture
    - skybox (though this already would use the `create_texture_with_data()` branch anyway)

[33mcommit e621acd7f2830b6e144db3280d928f63a267e890[m
Author: Jay Pavlina <explodingjay@protonmail.com>
Date:   Mon Dec 5 23:23:16 2022 +0000

    Remove `TextError::ExceedMaxTextAtlases(usize)` variant (#6796)
    
    # Objective
    
    Fixes #6756
    
    ## Solution
    
    Removes the variant wherever it's used
    
    Co-authored-by: Jay Pavlina <jay@enjin.io>

[33mcommit 83e8224694702d1e9aab85811de21bbf4b054f07[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Mon Dec 5 23:23:14 2022 +0000

    Add missing docs to `World::change_tick` and `World::read_change_tick` (#6765)
    
    # Objective
    
    The methods `World::change_tick` and `World::read_change_tick` lack documentation and have confusingly similar behavior.
    
    ## Solution
    
    Add documentation and clarify the distinction between the two functions.

[33mcommit b337ed63adf815748f0fdb2e40106ca42cbaa800[m
Author: Vladyslav Batyrenko <mvlabat@gmail.com>
Date:   Mon Dec 5 23:07:20 2022 +0000

    Borrow instead of consuming in `EventReader::clear` (#6851)
    
    The PR fixes the interface of `EventReader::clear`. Currently, the method consumes the reader, which makes it unusable.
    
    ## Changelog
    
    - `EventReader::clear` now takes a mutable reference instead of consuming the event reader.
    
    ## Migration Guide
    
    `EventReader::clear` now takes a mutable reference instead of consuming the event reader. This means that `clear` now needs explicit mutable access to the reader variable, which previously could have been omitted in some cases:
    
    ```rust
    // Old (0.9)
    fn clear_events(reader: EventReader<SomeEvent>) {
      reader.clear();
    }
    
    // New (0.10)
    fn clear_events(mut reader: EventReader<SomeEvent>) {
      reader.clear();
    }
    ```
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 77c59c22abf6a1f93d254e18684d347d3c53d651[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Mon Dec 5 22:49:06 2022 +0000

    Improve code/comments for `Ray::intersect_plane` and its tests  (#6823)
    
    
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit eff632dac818a61c13ac8d543f07568dc7b1f238[m
Author: MartÃ­n Maita <47983254+mnmaita@users.noreply.github.com>
Date:   Mon Dec 5 22:49:05 2022 +0000

    Replace `World::read_change_ticks` with `World::change_ticks` within `bevy_ecs` crate (#6816)
    
    # Objective
    
    - Fixes #6812.
    
    ## Solution
    
    - Replaced `World::read_change_ticks` with `World::change_ticks` within `bevy_ecs` crate in places where `World` references were mutable.
    
    ---

[33mcommit 17480b2d8905fef51b73966b7e671f7be6a5ff76[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon Dec 5 22:49:04 2022 +0000

    Remove APIs deprecated in 0.9 (#6801)
    
    # Objective
    These functions were deprecated in 0.9. They should be removed in 0.10.
    
    ## Solution
    Remove them.

[33mcommit e8c0df9e1e5248b9a52e85cf2def9c4a73635bf1[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon Dec 5 22:35:02 2022 +0000

    Allow iterating over with EntityRef over the entire World (#6843)
    
    # Objective
    Partially addresses #5504. Allow users to get an `Iterator<Item = EntityRef<'a>>` over all entities in the `World`.
    
    ## Solution
    Change `World::iter_entities` to return an iterator of `EntityRef` instead of `Entity`.
    
    Not sure how to tackle making an `Iterator<Item = EntityMut<'_>>` without being horribly unsound. Might need to wait for `LendingIterator` to stabilize so we can ensure only one of them is valid at a given time.
    
    ---
    
    ## Changelog
    Changed: `World::iter_entities` now returns an iterator of `EntityRef` instead of `Entity`.

[33mcommit 05b498a2245261c42d931ecac4f07bffca1d6d9d[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Mon Dec 5 20:15:03 2022 +0000

    Make the `SystemParam` derive macro more flexible (#6694)
    
    # Objective
    
    Currently, the `SystemParam` derive forces you to declare the lifetime parameters `<'w, 's>`, even if you don't use them.
    If you don't follow this structure, the error message is quite nasty.
    
    ### Example (before):
    
    ```rust
    #[derive(SystemParam)]
    pub struct EventWriter<'w, 's, E: Event> {
        events: ResMut<'w, Events<E>>,
        // The derive forces us to declare the `'s` lifetime even though we don't use it,
        // so we have to add this `PhantomData` to please rustc.
        #[system_param(ignore)]
        _marker: PhantomData<&'s ()>,
    }
    ```
    
    
    ## Solution
    
    * Allow the user to omit either lifetime.
    * Emit a descriptive error if any lifetimes used are invalid.
    
    ### Example (after):
    
    ```rust
    #[derive(SystemParam)]
    pub struct EventWriter<'w, E: Event> {
        events: ResMut<'w, Events<E>>,
    }
    ```
    
    ---
    
    ## Changelog
    
    * The `SystemParam` derive is now more flexible, allowing you to omit unused lifetime parameters.

[33mcommit c55d553606f04a8b9d6b734763e02a4cc18b6caf[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Sun Dec 4 22:30:09 2022 +0000

    Update tracing-chrome requirement from 0.6.0 to 0.7.0 (#6709)
    
    Updates the requirements on [tracing-chrome](https://github.com/thoren-d/tracing-chrome) to permit the latest version.
    <details>
    <summary>Release notes</summary>
    <p><em>Sourced from <a href="https://github.com/thoren-d/tracing-chrome/releases">tracing-chrome's releases</a>.</em></p>
    <blockquote>
    <h2>Release v0.7.0</h2>
    <ul>
    <li>Add <code>start_new</code> to <code>FlushGuard</code>. You can now generate multiple traces in one run!</li>
    <li>Clean up dependencies</li>
    <li>Make events thread-scoped</li>
    </ul>
    </blockquote>
    </details>
    <details>
    <summary>Commits</summary>
    <ul>
    <li><a href="https://github.com/thoren-d/tracing-chrome/commit/8760d81206ba43a16484b1c5f458290a9a6c9a4c"><code>8760d81</code></a> Prepare for 0.7 (<a href="https://github-redirect.dependabot.com/thoren-d/tracing-chrome/issues/16">#16</a>)</li>
    <li><a href="https://github.com/thoren-d/tracing-chrome/commit/a30bfb78d2010c7ef1e9f519e6dc567a731c8021"><code>a30bfb7</code></a> Update documentation (<a href="https://github-redirect.dependabot.com/thoren-d/tracing-chrome/issues/15">#15</a>)</li>
    <li><a href="https://github.com/thoren-d/tracing-chrome/commit/3fe24ff44de9d0d0bf585d5582d6ca9b14800e2d"><code>3fe24ff</code></a> Save thread names for start_new (<a href="https://github-redirect.dependabot.com/thoren-d/tracing-chrome/issues/14">#14</a>)</li>
    <li><a href="https://github.com/thoren-d/tracing-chrome/commit/fa8a0ff8bac7dce14baf1df01092cf3bf883c5cc"><code>fa8a0ff</code></a> Adding &quot;Start New&quot; feature that allows a user to finalize writing to the (<a href="https://github-redirect.dependabot.com/thoren-d/tracing-chrome/issues/11">#11</a>)</li>
    <li><a href="https://github.com/thoren-d/tracing-chrome/commit/d3059d66b356b113246f7dad012509bb9e96c380"><code>d3059d6</code></a> Directly depend on crossbeam_channel (<a href="https://github-redirect.dependabot.com/thoren-d/tracing-chrome/issues/12">#12</a>)</li>
    <li><a href="https://github.com/thoren-d/tracing-chrome/commit/441dba5c212f2ae91d4ffc8ba45ccdfa5f2e9b37"><code>441dba5</code></a> change scope of instant events to thread (<a href="https://github-redirect.dependabot.com/thoren-d/tracing-chrome/issues/13">#13</a>)</li>
    <li>See full diff in <a href="https://github.com/thoren-d/tracing-chrome/compare/v0.6.0...v0.7.0">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit 89451226de439c2aaa91eff3f46f152757f20323[m
Author: Pixelstorm <thepixelstormer@gmail.com>
Date:   Sun Dec 4 19:35:13 2022 +0000

    Intepret glTF colors as linear instead of sRGB (#6828)
    
    # Objective
    
    Fixes #6827
    
    ## Solution
    
    Use the `Color::rgba_linear` function instead of the `Color::rgba` function to correctly interpret colors from glTF files in the linear color space rather than the incorrect sRGB color space

[33mcommit 6ada3566aca363414cb4a117dabbb6727acae4d5[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Sat Dec 3 03:35:45 2022 +0000

    bevy_reflect: Fix misplaced impls (#6829)
    
    # Objective
    
    > Followup to [this](https://github.com/bevyengine/bevy/pull/6755#discussion_r1032671178) comment
    
    Rearrange the impls in the `impls/std.rs` file.
    
    The issue was that I had accidentally misplaced the impl for `Option<T>` and put it between the `Cow<'static, str>` impls. This is just a slight annoyance and readability issue.
    
    ## Solution
    
    Move the `Option<T>` and `&'static Path` impls around to be more readable.

[33mcommit 919188074c9d0009ae84bfa1a69ff04ae8e80774[m
Author: Ptipiak <ptipiak.off@gmail.com>
Date:   Fri Dec 2 18:22:25 2022 +0000

    Mention search filters in CONTRIBUTING.md (#6804)
    
    * Adding a new section concerning the maintainers of the repo
    
    # Objective
    
    - Adding a few helpful links in the CONTRIBUTING.md files
    - Fixes #6221
    
    ## Solution
    
    - Modifying CONTRIBUTING.md
    - Adding a new section dedicated to maintainers  in CONTRIBUTING.md
    
    ---
    
    
    Co-authored-by: Ptipiak <Ptipiak.off@gmail.com>

[33mcommit c7d2cb14d0d33d4c38f49432066dd40df6f862e7[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Fri Dec 2 02:36:44 2022 +0000

    Add methods `intersect_plane` and `get_point` to `Ray` (#6179)
    
    
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 9b72780b82bc6be1ee916712de34dbe4fd761a81[m
Author: Aleksandr Belkin <sQu1rr1c@gmail.com>
Date:   Fri Dec 2 02:21:22 2022 +0000

    Provide public `EntityRef::get_change_ticks_by_id` that takes `ComponentId` (#6683)
    
    # Objective
    
    Fixes #6682
    
    ## Solution
    
    Add `EntityRef::get_change_ticks_by_id`
    Add `EntityMut::get_change_ticks_by_id`
    
    
    Co-authored-by: Aleksandr Belkin <sQu1rr@users.noreply.github.com>

[33mcommit e89b0432106afce78585715f95c6f15c52e3da67[m
Author: ç½æºè <holyfight6@gmail.com>
Date:   Thu Dec 1 15:19:54 2022 +0000

    Fix material alpha_mode in example global_vs_local_translation (#6658)
    
    # Objective
    
    The global_vs_local_translation example tries to use transparency to identify static cubes, but the materials of those cubes aren't transparent.
    
    ## Solution
    
    Change material alpha_mode to  `AlphaMode::Blend` for those cubes.

[33mcommit 8faa12c5d6a2f43dabb061234cb9c85cf785665e[m
Author: Mike <mike.hsu@gmail.com>
Date:   Thu Dec 1 01:30:55 2022 +0000

    pin nightly to 2022-11-28 to fix miri (#6808)
    
    # Objective
    
    - pin nightly to 2022-11-28 to fix miri

[33mcommit 0e9c6dddb21d9cab0f0a42e006e4de8de0db6796[m
Author: Mike <mike.hsu@gmail.com>
Date:   Thu Dec 1 00:27:54 2022 +0000

    try to fix run-examples (#6810)
    
    # Objective
    
    - run examples is failing with `xvfb-run: error: Xvfb failed to start`
    
    ## Solution
    
    - rollback ubuntu version for run-examples to 20.04. latest is 22.04
    
    ## Notes
    
    - this is just a quick fix and someone should probably get it working on 22.04. I'll make an issue for that if this gets merged.

[33mcommit b91356bd63adbc8a1ea236f557e39d121a780612[m
Author: Marco Buono <thecoreh@gmail.com>
Date:   Wed Nov 30 02:44:05 2022 +0000

    Add note about global `.gitignore` to `CONTRIBUTING.md` â Instead of ignoring `.DS_Store` files created by macOS Finder (#6499)
    
    # Objective
    
    Finder in macOS creates hidden `.DS_Store` files containing metadata (for icon positioning, view mode, etc) whenever you browse a directory. There's no point in committing these to git, and they're a common git + macOS nuisance.
    
    ## Solution
    
    - ~~This PR adds `.DS_Store` files to `.gitignore`, improving the developer experience on macOS.~~
    - This PR adds a note to the `CONTRIBUTING.md` file teaching how to use global git ignore.

[33mcommit e954b8573c085a01c62007c4c6232870e0b5c891[m
Author: James Liu <naked@iki.fi>
Date:   Mon Nov 28 20:39:02 2022 +0000

    Lock down access to Entities (#6740)
    
    # Objective
    The soundness of the ECS `World` partially relies on the correctness of the state of `Entities` stored within it. We're currently allowing users to (unsafely) mutate it, as well as readily construct it without using a `World`. While this is not strictly unsound so long as users (including `bevy_render`) safely use the APIs, it's a fairly easy path to unsoundness without much of a guard rail.
    
    Addresses #3362 for `bevy_ecs::entity`. Incorporates the changes from #3985.
    
    ## Solution
    Remove `Entities`'s  `Default` implementation and force access to the type to only be through a properly constructed `World`.
    
    Additional cleanup for other parts of `bevy_ecs::entity`:
    
     - `Entity::index` and `Entity::generation` are no longer `pub(crate)`, opting to force the rest of bevy_ecs to use the public interface to access these values.
     - `EntityMeta` is no longer `pub` and also not `pub(crate)` to attempt to cut down on updating `generation` without going through an `Entities` API. It's currently inaccessible except via the `pub(crate)` Vec on `Entities`, there was no way for an outside user to use it.
     - Added `Entities::set`, an unsafe `pub(crate)` API for setting the location of an Entity (parallel to `Entities::get`) that replaces the internal case where we need to set the location of an entity when it's been spawned, moved, or despawned.
     - `Entities::alloc_at_without_replacement` is only used in `World::get_or_spawn` within the first party crates, and I cannot find a public use of this API in any ecosystem crate that I've checked (via GitHub search).
     - Attempted to document the few remaining undocumented public APIs in the module.
    
    ---
    
    ## Changelog
    Removed: `Entities`'s `Default` implementation.
    Removed: `EntityMeta`
    Removed: `Entities::alloc_at_without_replacement` and `AllocAtWithoutReplacement`.
    
    Co-authored-by: james7132 <contact@jamessliu.com>
    Co-authored-by: James Liu <contact@jamessliu.com>

[33mcommit 9c79b39d736b2398d759e5ba0900032cf118480b[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Nov 28 19:27:04 2022 +0000

    set AVAILABLE_STORAGE_BUFFER_BINDINGS to the actual number of buffers available (#6787)
    
    # Objective
    
    - Since #5900 3d examples fail in wasm
    ```
    ERROR crates/bevy_render/src/render_resource/pipeline_cache.rs:660 failed to process shader: Unknown shader def: 'AVAILABLE_STORAGE_BUFFER_BINDINGS'
    ```
    
    ## Solution
    
    - Fix it by always adding the shaderdef `AVAILABLE_STORAGE_BUFFER_BINDINGS` with the actual value, instead of 3 when 3 or more were available

[33mcommit 0d833a3ebcb777c9bafb292ed9cf0fe2a3cec07d[m
Author: å¼ æä¼ <lewiszlw520@gmail.com>
Date:   Mon Nov 28 14:55:26 2022 +0000

    Register Hash for glam types (#6786)
    
    # Objective
    
    - fixes https://github.com/bevyengine/bevy/issues/6736
    
    ## Solution
    
    - Register `Hash` on all of glam's reflected integer vector types.

[33mcommit 295faa02fc7f8b5e208344bd73caa29119ddeabe[m
Author: Griffin <github@dgdigital.net>
Date:   Mon Nov 28 14:14:08 2022 +0000

    Add support for Rgb9e5Ufloat textures (#6781)
    
    # Objective
    
    - Support textures in `Rgb9e5Ufloat` format.
    
    ## Solution
    
    - Add `TextureFormatPixelInfo` for `Rgb9e5Ufloat`.
    
    Tested this with a `Rgb9e5Ufloat` encoded KTX2 texture.

[33mcommit 7963bb9ab3ad3d385e29add351198e49b3537008[m
Author: KazaniAvali <39241153+R2Boyo25@users.noreply.github.com>
Date:   Mon Nov 28 13:54:15 2022 +0000

    Docs: amdgpu-pro-vulkan on Gentoo. (#6749)
    
    When running Bevy on Gentoo using an AMD Radeon GPU, it panics unless `amdgpu-pro-vulkan` has been installed (and it took quite a bit of experimentation to find this information). This PR adds a mention of this to the linux dependencies documentation.

[33mcommit f119d9df8e23b5074cc153df85b4edbdc5eb0129[m
Author: IceSentry <c.giguere42@gmail.com>
Date:   Mon Nov 28 13:54:13 2022 +0000

    Add DrawFunctionsInternals::id() (#6745)
    
    # Objective
    
    - Every usage of `DrawFunctionsInternals::get_id()` was followed by a `.unwrap()`. which just adds boilerplate.
    
    ## Solution
    
    - Introduce a fallible version of `DrawFunctionsInternals::get_id()` and use it where possible.
    - I also took the opportunity to improve the error message a little in the case where it fails.
    
    ---
    
    ## Changelog
    
    - Added `DrawFunctionsInternals::id()`

[33mcommit d79888bdaec5394b0813db608e12fa35748fd04e[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon Nov 28 13:54:12 2022 +0000

    Document and lock down types in bevy_ecs::archetype (#6742)
    
    # Objective
    Document `bevy_ecs::archetype` and and declutter the public documentation for the module by making types non-`pub`.
    
    Addresses #3362 for `bevy_ecs::archetype`.
    
    ## Solution
     - Add module level documentation.
     - Add type and API level documentation for all public facing types.
     - Make `ArchetypeId`, `ArchetypeGeneration`, and `ArchetypeComponentId` truly opaque IDs that are not publicly constructable.
     - Make `AddBundle` non-pub, make `Edges::get_add_bundle` return a `Option<ArchetypeId>` and fork the existing function into `Edges::get_add_bundle_internal`.
     - Remove `pub(crate)` on fields that have a corresponding pub accessor function.
     - Removed the `Archetypes: Default` impl, opting for a `pub(crate) fn new` alternative instead.
    
    ---
    
    ## Changelog
    Added: `ArchetypeGeneration` now implements `Ord` and `PartialOrd`.
    Removed: `Archetypes`'s `Default` implementation.
    Removed: `Archetype::new` and `Archetype::is_empty`.
    Removed: `ArchetypeId::new` and `ArchetypeId::value`.
    Removed: `ArchetypeGeneration::value`
    Removed: `ArchetypeIdentity`.
    Removed: `ArchetypeComponentId::new` and `ArchetypeComponentId::value`.
    Removed: `AddBundle`. `Edges::get_add_bundle` now returns `Option<ArchetypeId>`

[33mcommit bbb652a438b8696e3636fa184f8f1170ebb876b6[m
Author: mareq <mareq@balint.eu>
Date:   Mon Nov 28 13:40:31 2022 +0000

    Fix documentation on spawining an entity (#6775)
    
    # Objective
    
    - The documentation describing different ways to spawn an Entity is missing reference to "method" for "Spawn an entity with components".
    
    ## Solution
    
    - Update the documentation to add the reference to `World::spawn`.

[33mcommit 161583453675c2651b0445df5d3ced639f5903f1[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Mon Nov 28 13:40:26 2022 +0000

    Fix an incorrect safety comment in `World::get_resource` (#6764)
    
    # Objective
    
    * Fix #6307
    
    ## Solution
    
    * Rewrite the safety comment to reflect the actual invariants being asserted.

[33mcommit 70d7f8056404efe76feed12b6e64dfa75fad4a72[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Mon Nov 28 13:40:14 2022 +0000

    Make adding children idempotent (#6763)
    
    # Objective
    
    * Fix #6668
    * There is no need to panic when a parenting operation is redundant, as no invalid state is entered.
    
    ## Solution
    
    Make `push_children` idempotent.

[33mcommit 416a33e6133064a557b88e75652584da260ad292[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Mon Nov 28 13:40:10 2022 +0000

    Add const `Entity::PLACEHOLDER` (#6761)
    
    # Objective
    
    One of the use-cases for the function `Entity::from_raw` is creating placeholder entity ids, which are meant to be overwritten later. If we use a constant for this instead of `from_raw`, it is more ergonomic and self-documenting.
    
    ## Solution
    
    Add a constant that returns an entity ID with an index of `u32::MAX` and a generation of zero. Users are instructed to overwrite this value before using it.

[33mcommit 2364a305c06cd5b77c9ff3f595d0cbcdea52c13a[m
Author: SpecificProtagonist <vincentjunge@posteo.net>
Date:   Mon Nov 28 13:39:47 2022 +0000

    Clarify duplicate logger error (#6757)
    
    # Objective
    
    When a global tracing subscriber has already been set, `LogPlugin` panics with an error message explaining this. However, if a global logger has already been set, it simply panics on an unwrap.
    
    #6426 mentiones the panic and has been fixed by unique plugins, but the panic can still occur if a logger has been set through different means or multiple apps are created, as in  #4934. The solution to that specific case isn't clear; this PR only fixes the missing error message.
    
    ## Solution
    
    - ~add error message to panic~
    - turn into warning

[33mcommit 64642fbd3cd196ee64280cbba2ba5e8f0bb01202[m
Author: IceSentry <c.giguere42@gmail.com>
Date:   Mon Nov 28 13:15:03 2022 +0000

    Remove unnecessary struct in Material AsBindGroup example (#6701)
    
    # Objective
    
    - Reduce confusion around uniform bindings in materials. I've seen multiple people on discord get confused by it because it uses a struct that is named the same in the rust code and the wgsl code, but doesn't contain the same data. Also, the only reason this works is mostly by chance because the memory happens to align correctly.
    
    ## Solution
    
    - Remove the confusing parts of the doc
    
    ## Notes
    
    It's not super clear in the diff why this causes confusion, but essentially, the rust code defines a `CustomMaterial` struct with a color and a texture, but in the wgsl code the struct with the same name only contains the color. People are confused by it because the struct in wgsl doesn't need to be there.
    
    You _can_ have complex structs on each side and the macro will even combine it for you if you reuse a binding index, but as it is now, this example seems to confuse more than help people.

[33mcommit 523072902cecad440b5d2109077e437fcb7580b6[m
Author: Hennadii Chernyshchyk <genaloner@gmail.com>
Date:   Sun Nov 27 17:28:06 2022 +0000

    Fix reflection for PathBuf and OsString (#6776)
    
    # Objective
    
    - `PathBuf` and `OsString` not reflected correctly.
    
    ## Solution
    
    - Add missing registrations.
    - Add FromReflect impls.
    - Always implement `Reflect` for `OsString` just skip `Serialize` and `Deserialize` for unsupported platforms.
    
    ---
    
    ## Changelog
    
    ## Fixed
    
    - Fix reflection for `PathBuf` and `OsString`.

[33mcommit ca74271d07f5dae1f26bb6e96df93d3728940205[m
Author: Mitchell Henry <mitchell.henry334@gmail.com>
Date:   Sun Nov 27 01:28:17 2022 +0000

    Fix docs typo (#6771)
    
    # Objective
    
    - Fix a small typo
    
    ## Solution
    
    - Type them correctly :D

[33mcommit 17b7025a78fe7a6867167707da7633a1af3322e5[m
Author: IceSentry <c.giguere42@gmail.com>
Date:   Sat Nov 26 13:10:11 2022 +0000

    Fix set_cursor_grab_mode to try an alternative mode before giving an error (#6599)
    
    # Objective
    
    - Closes https://github.com/bevyengine/bevy/issues/6590
    - The grab mode is platform dependent, this is problematic for bevy users since we can't easily use the recommended way to detect if the feature works like the winit docs recommend https://docs.rs/winit/0.27.5/winit/window/struct.Window.html#method.set_cursor_grab
    
    ## Solution
    
    Try to use the grab mode that was requested, if it fails use the other one. Only then log an error if it fails after this step.

[33mcommit 03bde74766307d881838095e257c0ef38d947142[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Fri Nov 25 23:49:26 2022 +0000

    impl `Reflect` for `&'static Path` (#6755)
    
    # Objective
    
    Fixes #6739
    
    ## Solution
    
    Implement the required traits. They cannot be implemented for `Path` directly, since it is a dynamically-sized type.

[33mcommit d1528dfbf80ec1cff29f8a8ce2004808156031a4[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Fri Nov 25 23:49:25 2022 +0000

    Warn instead of erroring when max_font_atlases is exceeded (#6673)
    
    # Objective
    
    Fixes #6642
    
    In a way that doesn't create any breaking changes, as a possible way to fix the above in a patch release.
    
    ## Solution
    
    Don't actually remove font atlases when `max_font_atlases` is exceeded. Add a warning instead.
    
    Keep `TextError::ExceedMaxTextAtlases` and `TextSettings` as-is so we don't break anything.
    
    This is a bit of a cop-out, but the problems revealed by #6642 seem very challenging to fix properly.
    
    Maybe follow up later with something more like https://github.com/rparrett/bevy/commits/remove-max-font-atlases later, if this is the direction we want to go.
    
    ## Note
    
    See previous attempt at a "simple fix" that only solved some of the issues: #6666

[33mcommit c8c6aba80e31d799f104e70e24d1e6490d559a24[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Fri Nov 25 23:30:21 2022 +0000

    bevy_reflect: Remove `ReflectSerialize` and `ReflectDeserialize` registrations from most glam types (#6580)
    
    # Objective
    
    > Part of #6573
    
    When serializing a `DynamicScene` we end up treating almost all non-value types as though their type data doesn't exist. This is because when creating the `DynamicScene` we call `Reflect::clone_value` on the components, which generates a Dynamic type for all non-value types.
    
    What this means is that the `glam` types are treated as though their `ReflectSerialize` registrations don't exist. However, the deserializer _does_ pick up the registration and attempts to use that instead. This results in the deserializer trying to operate on "malformed" data, causing this error:
    
    ```
    WARN bevy_asset::asset_server: encountered an error while loading an asset: Expected float
    ```
    
    ## Solution
    
    Ideally, we should better handle the serialization of possibly-Dynamic types. However, this runs into issues where the `ReflectSerialize` expects the concrete type and not a Dynamic representation, resulting in a panic:
    
    https://github.com/bevyengine/bevy/blob/0aa4147af6d583c707863484d6a8ad50ed0ed984/crates/bevy_reflect/src/type_registry.rs#L402-L413
    
    Since glam types are so heavily used in Bevy (specifically in `Transform` and `GlobalTransform`), it makes sense to just a quick fix in that enables them to be used properly in scenes while a proper solution is found.
    
    This PR simply removes all `ReflectSerialize` and `ReflectDeserialize` registrations from the glam types that are reflected as structs.
    
    ---
    
    ## Changelog
    
    - Remove `ReflectSerialize` and `ReflectDeserialize` registrations from most glam types
    
    ## Migration Guide
    
    This PR removes `ReflectSerialize` and `ReflectDeserialize` registrations from most glam types. This means any code relying on either of those type data existing for those glam types will need to not do that.
    
    This also means that some serialized glam types will need to be updated. For example, here is `Affine3A`:
    
    ```rust
    // BEFORE
    (
      "glam::f32::affine3a::Affine3A": (1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0),
    
    // AFTER
      "glam::f32::affine3a::Affine3A": (
        matrix3: (
          x_axis: (
            x: 1.0,
            y: 0.0,
            z: 0.0,
          ),
          y_axis: (
            x: 0.0,
            y: 1.0,
            z: 0.0,
          ),
          z_axis: (
            x: 0.0,
            y: 0.0,
            z: 1.0,
          ),
        ),
        translation: (
          x: 0.0,
          y: 0.0,
          z: 0.0,
        ),
      )
    )
    ```

[33mcommit 056272413f0ab33c71343d8a9d5c7a714027b939[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Nov 25 23:02:56 2022 +0000

    Move Android example to its own package (#6759)
    
    # Objective
    
    - Fix CI issue with updated `cargo-app`
    
    ## Solution
    
    - Move the Android example to its own package. It's not necessary for the CI fix, but it's cleaner, mimic the iOS example, and easier to reuse for someone wanting to setup android support in their project
    - Build the package in CI instead of the example
    
    
    The Android example is still working on my android device with this change ð

[33mcommit 3827316100845a00eba90c3623709f06c8de27ad[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Wed Nov 23 00:41:21 2022 +0000

    bevy_reflect: Register missing reflected types for `bevy_render` (#6725)
    
    # Objective
    
    Many types in `bevy_render` implemented `Reflect` but were not registered.
    
    ## Solution
    
    Register all types in `bevy_render` that impl `Reflect`.
    
    This also registers additional dependent types (i.e. field types).
    
    > Note: Adding these dependent types would not be needed using something like #5781 ð
    
    ---
    
    ## Changelog
    
    - Register missing `bevy_render` types in the `TypeRegistry`:
      - `camera::RenderTarget`
      - `globals::GlobalsUniform`
      - `texture::Image`
      - `view::ComputedVisibility`
      - `view::Visibility`
      - `view::VisibleEntities`
    - Register additional dependent types:
      - `view::ComputedVisibilityFlags`
      - `Vec<Entity>`

[33mcommit 8eb8ad5c4a85aeaca3a2022a1b11a4a4b6a4d19c[m
Author: Mike <mike.hsu@gmail.com>
Date:   Wed Nov 23 00:41:19 2022 +0000

    await tasks to cancel (#6696)
    
    # Objective
    
    - Fixes https://github.com/bevyengine/bevy/issues/6603
    
    ## Solution
    
    - `Task`s will cancel when dropped, but wait until they return Pending before they actually get canceled. That means that if a task panics, it's possible for that error to get propagated to the scope and the scope gets dropped, while scoped tasks in other threads are still running. This is a big problem since scoped task can hold life-timed values that are dropped as the scope is dropped leading to UB.
    
    ---
    
    ## Changelog
    
    - changed `Scope` to use `FallibleTask` and await the cancellation of all remaining tasks when it's dropped.

[33mcommit 3433a7bd68f8f59ce194430d10e66792997a2a95[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Wed Nov 23 00:27:29 2022 +0000

    Remove warning about missed events due to false positives (#6730)
    
    # Objective
    
    - Reverts #5730.
    - Fixes #6173, fixes #6596.
    
    ## Solution
    
    Remove the warning entirely.
    
    ## Changelog
    
    You will no longer be spammed about
    
    > Missed 31 `bevy_input::mouse::MouseMotion` events. Consider
    reading from the `EventReader` more often (generally the best
    solution) or calling Events::update() less frequently
    (normally this is called once per frame). This problem is most
    likely due to run criteria/fixed timesteps or consuming events
    conditionally. See the Events documentation for
    more information.
    
    when you miss events. These warnings were often (but not always) a false positive. You can still check this manually by using `ManualEventReader::missed_events`

[33mcommit 7d57d7ac0c967a4ee6a11eb984fe06f09391f554[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Wed Nov 23 00:27:28 2022 +0000

    Remove `BuildWorldChildren` impl from `WorldChildBuilder` (#6727)
    
    # Objective
    Remove an obscure and inconsistent bit of API.
    Simplify the `WorldChildBuilder` code.
    
    No idea why this even exists.
    
    An example of the removed API:
    ```rust
    world.spawn_empty().with_children(|parent| {
        parent.spawn_empty();
        parent.push_children(&[some_entity]); // Does *not* add children to the parent.
        // It's actually identical to:
        parent.spawn_empty().push_children(&[some_entity]);
    });
    
    world.spawn_empty().with_children(|parent| {
        // This just panics.
        parent.push_children(&[some_entity]);
    });
    ```
    This exists only on `WorldChildBuilder`; `ChildBuilder` does not have this API.
    
    Yeet.
    
    ## Migration Guide
    Hierarchy editing methods such as `with_children` and `push_children` have been removed from `WorldChildBuilder`.
    You can edit the hierarchy via `EntityMut` instead.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 4e2374334fe68e57834a7069b3f098e175736155[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Wed Nov 23 00:01:36 2022 +0000

    bevy_reflect: Fix binary deserialization not working for unit structs (#6722)
    
    # Objective
    
    Fixes #6713
    
    Binary deserialization is failing for unit structs as well as structs with all ignored/skipped fields.
    
    ## Solution
    
    Add a check for the number of possible fields in a struct before deserializing. If empty, don't attempt to deserialize any fields (as there will be none).
    
    Note: ~~This does not apply to enums as they do not properly handle skipped fields (see #6721).~~ Enums still do not properly handle skipped fields, but I decided to include the logic for it anyways to account for `#[reflect(ignore)]`'d fields in the meantime.
    
    ---
    
    ## Changelog
    
    - Fix bug where deserializing unit structs would fail for non-self-describing formats

[33mcommit a1607b8065f4c8a97f763093d2204d5e9dde9e93[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Tue Nov 22 20:38:35 2022 +0000

    Rename `EntityId` to `EntityIndex` (#6732)
    
    Continuation of #6107
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit c069c544a769a5e983b027de06b4810c57650271[m
Author: Aevyrie <aevyrie@gmail.com>
Date:   Tue Nov 22 15:55:50 2022 +0000

    Fix missing sRGB conversion for dithering non-HDR pipelines (#6707)
    
    # Objective
    
    - Fixes #6706
    
    Zoom in on the shadow in the following images:
    
    ## Current bevy/main
    
    ### HDR On - correct
    ![current-hdron](https://user-images.githubusercontent.com/2632925/202943151-ecad3cbe-a76e-46df-bac9-9e590a31a9f3.png)
    
    ### HDR Off - incorrect
    ![current-hdroff](https://user-images.githubusercontent.com/2632925/202943154-34e3f527-a00e-4546-931d-0691204cc6a4.png)
    
    ## This PR
    
    ### HDR On - correct
    ![new-hdron](https://user-images.githubusercontent.com/2632925/202943383-081990de-9a14-45bd-ac52-febcc4289079.png)
    
    ### HDR Off - corrected
    ![new-hdroff](https://user-images.githubusercontent.com/2632925/202943388-a3b05d79-a0f3-4b1e-b114-0a9f03efe351.png)
    
    ## Close-up comparison
    
    ### New
    ![Screenshot from 2022-11-20 17-46-46](https://user-images.githubusercontent.com/2632925/202943552-d45c3a48-841e-47a6-981f-776c5a9563f6.png)
    
    ### Old
    ![Screenshot from 2022-11-20 17-46-41](https://user-images.githubusercontent.com/2632925/202943562-555cb5a2-2b20-45f9-b250-89f2bc87af5f.png)
    
    ## Solution
    
    - It turns out there was an outright missing sRGB conversion for dithering non-HDR cameras.
    - I also tried using a precise sRGB conversion, but it had no apparent effect on the final image.
    
    ---
    
    ## Changelog
    
    - Fix deband dithering intensity for non-HDR pipelines.

[33mcommit cf46dd2e7ed2085bbd60d25cafca8219d62ef2ec[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Tue Nov 22 15:31:18 2022 +0000

    fix mutable aliases for a very short time if `WorldCell` is already borrowed (#6639)
    
    # Objective
    
    Consider the test
    ```rust
    let cell = world.cell();
    let _value_a = cell.resource_mut::<A>();
    let _value_b = cell.resource_mut::<A>();
    ```
    
    Currently, this will roughly execute
    
    ```rust
    // first call
    let value = unsafe {
        self.world
        .get_non_send_unchecked_mut_with_id(component_id)?
    };
    return Some(WorldBorrowMut::new(value, archetype_component_id, self.access)))
    
    // second call
    let value = unsafe {
        self.world
        .get_non_send_unchecked_mut_with_id(component_id)?
    };
    return Some(WorldBorrowMut::new(value, archetype_component_id, self.access)))
    ```
    where `WorldBorrowMut::new` will panic if the resource is already borrowed.
    
    This means, that `_value_a` will be created, the access checked (OK), then `value_b` will be created, and the access checked (`panic`).
    For a moment, both `_value_a` and `_value_b` existed as `&mut T` to the same location, which is insta-UB as far as I understand it.
    
    ## Solution
    Flip the order so that `WorldBorrowMut::new` first checks the access, _then_ fetches creates the value. To do that, we pass a `impl FnOnce() -> Mut<T>` instead of the `Mut<T>` directly:
    
    ```rust
    let get_value = || unsafe {
        self.world
        .get_non_send_unchecked_mut_with_id(component_id)?
    };
    return Some(WorldBorrowMut::new(get_value, archetype_component_id, self.access)))
    ```

[33mcommit d44e86507f66d2cbe2472557d2a2abb9c4f80a83[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Nov 21 22:38:29 2022 +0000

    Shader defs can now have a value (#5900)
    
    # Objective
    
    - shaders defs can now have a `bool` or `int` value
    - `#if SHADER_DEF <operator> 3`
      - ok if `SHADER_DEF` is defined, has the correct type and pass the comparison
      - `==`, `!=`, `>=`, `>`, `<`, `<=` supported
    - `#SHADER_DEF` or `#{SHADER_DEF}`
      - will be replaced by the value in the shader code
    ---
    
    ## Migration Guide
    
    - replace `shader_defs.push(String::from("NAME"));` by `shader_defs.push("NAME".into());`
    - if you used shader def `NO_STORAGE_BUFFERS_SUPPORT`, check how `AVAILABLE_STORAGE_BUFFER_BINDINGS` is now used in Bevy default shaders

[33mcommit daa57fe489fe708b18c7805531903d0681e3c957[m
Author: Torstein Grindvik <torstein.grindvik@nordicsemi.no>
Date:   Mon Nov 21 21:58:39 2022 +0000

    Add try_* to add_slot_edge, add_node_edge (#6720)
    
    # Objective
    
    `add_node_edge` and `add_slot_edge` are fallible methods, but are always used with `.unwrap()`.
    `input_node` is often unwrapped as well.
    This points to having an infallible behaviour as default, with an alternative fallible variant if needed.
    
    Improves readability and ergonomics.
    
    ## Solution
    
    - Change `add_node_edge` and `add_slot_edge` to panic on error.
    - Change `input_node` to panic on `None`.
    - Add `try_add_node_edge` and `try_add_slot_edge` in case fallible methods are needed.
    - Add `get_input_node` to still be able to get an `Option`.
    ---
    
    ## Changelog
    
    ### Added
    
    - `try_add_node_edge`
    - `try_add_slot_edge`
    - `get_input_node`
    
    ### Changed
    
    - `add_node_edge` is now infallible (panics on error)
    - `add_slot_edge` is now infallible (panics on error)
    - `input_node` now panics on `None`
    
    ## Migration Guide
    
    Remove `.unwrap()` from `add_node_edge` and `add_slot_edge`.
    For cases where the error was handled, use `try_add_node_edge` and `try_add_slot_edge` instead.
    
    Remove `.unwrap()` from `input_node`.
    For cases where the option was handled, use `get_input_node` instead.
    
    
    Co-authored-by: Torstein Grindvik <52322338+torsteingrindvik@users.noreply.github.com>

[33mcommit e2d1d9dff84455f650a591e39d603ce36cfafd83[m
Author: Chris Juchem <chrisjuchem15@gmail.com>
Date:   Mon Nov 21 20:12:31 2022 +0000

    Update dead links in DefaultPlugins docs (#6695)
    
    # Objective
    
    - Fix dead links on this docs page: https://docs.rs/bevy/0.9.0/bevy/struct.DefaultPlugins.html
    
    ## Solution
    
    - Point links to the imported versions instead of the versions in external crates.

[33mcommit eaeba0866db25fd10eb3bbc2718eab8256e1f19f[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon Nov 21 18:18:38 2022 +0000

    Parallelized transform propagation (#4775)
    
    # Objective
    Fixes #4697. Hierarchical propagation of properties, currently only Transform -> GlobalTransform, can be a very expensive operation. Transform propagation is a strict dependency for anything positioned in world-space. In large worlds, this can take quite a bit of time, so limiting it to a single thread can result in poor CPU utilization as it bottlenecks the rest of the frame's systems.
    
    ## Solution
    
     - Move transforms without a parent or a child (free-floating (Global)Transform) entities into a separate parallel system.
     - Chunk the hierarchy based on the root entities and process it in parallel with `Query::par_for_each_mut`.
     - Utilize the hierarchy's specific properties introduced in #4717 to allow for safe use of `Query::get_unchecked` on multiple threads. Assuming each child is unique in the hierarchy, it is impossible to have an aliased `&mut GlobalTransform` so long as we verify that the parent for a child is the same one propagated from.
    
    ---
    
    ## Changelog
    Removed: `transform_propagate_system` is no longer `pub`.

[33mcommit 585dac058226b205d586873965c8dcb747ba53e1[m
Author: Chia-Hsiang Cheng <s940046@hotmail.com>
Date:   Mon Nov 21 14:38:35 2022 +0000

    Remove auto-margin properties from the examples (#6535)
    
    # Objective
    
    Fixes #6498.
    
    ## Solution
    
    Adding a parent node with properties AlignItems::Center and JustifyContent::Center to centered child nodes and removing their auto-margin properties.

[33mcommit 96e09f004b24d257781ba0aa715c2904def5d56a[m
Author: Ida Iyes <identry@protonmail.com>
Date:   Mon Nov 21 14:23:21 2022 +0000

    Fix PipeSystem panicking with exclusive systems (#6698)
    
    Without this fix, piped systems containing exclusive systems fail to run, giving a runtime panic.
    With this PR, running piped systems that contain exclusive systems now works.
    
    ## Explanation of the bug
    
    This is because, unless overridden, the default implementation of `run` from the `System` trait simply calls `run_unsafe`. That is not valid for exclusive systems. They must always be called via `run`, as `run_unsafe` takes `&World` instead of `&mut World`.
    
    Trivial reproduction example:
    ```rust
    fn main() {
        App::new()
            .add_plugins(DefaultPlugins)
            .add_system(exclusive.pipe(another))
            .run();
    }
    
    fn exclusive(_world: &mut World) {}
    fn another() {}
    ```
    If you run this, you will get a panic 'Cannot run exclusive systems with a shared World reference' and the backtrace shows how bevy (correctly) tries to call the `run` method (because the system is exclusive), but it is the implementation from the `System` trait (because `PipeSystem` does not have its own), which calls `run_unsafe` (incorrect):
     - 3: <bevy_ecs::system::system_piping::PipeSystem<SystemA,SystemB> as bevy_ecs::system::system::System>::run_unsafe
     - 4: bevy_ecs::system::system::System::run

[33mcommit 174819be83611bc1b238b5bf2b131db2da16d8cf[m
Author: Torstein Grindvik <torstein.grindvik@nordicsemi.no>
Date:   Mon Nov 21 13:19:44 2022 +0000

    ExtractComponent output optional associated type (#6699)
    
    # Objective
    
    Allow more use cases where the user may benefit from both `ExtractComponentPlugin` _and_ `UniformComponentPlugin`.
    
    ## Solution
    
    Add an associated type to `ExtractComponent` in order to allow specifying the output component (or bundle).
    
    Make `extract_component` return an `Option<_>` such that components can be extracted only when needed.
    
    What problem does this solve?
    
    `ExtractComponentPlugin` allows extracting components, but currently the output type is the same as the input.
    This means that use cases such as having a settings struct which turns into a uniform is awkward.
    
    For example we might have:
    
    ```rust
    struct MyStruct {
        enabled: bool,
        val: f32
    }
    
    struct MyStructUniform {
        val: f32
    }
    ```
    
    With the new approach, we can extract `MyStruct` only when it is enabled, and turn it into its related uniform.
    
    This chains well with `UniformComponentPlugin`.
    
    The user may then:
    
    ```rust
    app.add_plugin(ExtractComponentPlugin::<MyStruct>::default());
    app.add_plugin(UniformComponentPlugin::<MyStructUniform>::default());
    ```
    
    This then saves the user a fair amount of boilerplate.
    
    
    ## Changelog
    
    ### Changed
    
    - `ExtractComponent` can specify output type, and outputting is optional.
    
    
    
    Co-authored-by: Torstein Grindvik <52322338+torsteingrindvik@users.noreply.github.com>

[33mcommit 30070a926ff70d6576a403e20c24447e5b4996fa[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Mon Nov 21 13:19:43 2022 +0000

    Add `Transform::look_to` (#6692)
    
    Add a method to rotate a transform to point towards a direction.
    
    Also updated the docs to link to `forward` and `up` instead of mentioning local negative `Z` and local `Y`.
    
    Unfortunately, links to methods don't work in rust-analyzer :(
    
    Co-authored-by: Devil Ira <justthecooldude@gmail.com>

[33mcommit ed2ea0d417d3e3e7c3a486869f069385f0604579[m
Author: phuocthanhdo <phuocthanhdo@yahoo.com>
Date:   Mon Nov 21 13:19:41 2022 +0000

    The `update_frame_count` system should be placed in CorePlugin (#6676)
    
    # Objective
    
    Latest Release, "bevy 0.9" move the FrameCount updater into RenderPlugin, it leads to user who only run app with Core/Minimal Plugin cannot get the right number of FrameCount, it always return 0.
    
    As for use cases like a server app, we don't want to add render dependencies to the app.
    
    More detail in #6656
    
    ## Solution
    
    - Move the `update_frame_count` into CorePlugin

[33mcommit bdd5cee92a3ad3968f4fd7dfcf04a59fbb6e1b12[m
Author: Robin KAY <komadori@gekkou.co.uk>
Date:   Mon Nov 21 13:19:40 2022 +0000

    Add Box::from_corners method (#6672)
    
    # Objective
    
    This add a ctor to `Box` to aid the creation of non-centred boxes. The PR adopts @rezural's work on PR #3322, taking into account the feedback on that PR from @james7132.
    
    ## Solution
    
    `Box::from_corners()` creates a `Box` from two opposing corners and automatically determines the min and max extents to ensure that the `Box` is well-formed.
    
    Co-authored-by: rezural <rezural@protonmail.com>

[33mcommit b3e45b75d67602a464108a14297a7ace91a1bd89[m
Author: Jer <alphastrata@gmail.com>
Date:   Mon Nov 21 12:59:10 2022 +0000

    Expose set_cursor_hittest() from winit (#6664)
    
    # Objective
    
    - Bevy should be usable to create 'overlay' type apps, where the input is not captured by Bevy, but passed down/into a target app, or to allow passive displays/widgets etc.
    
    ## Solution
    
    - the `winit::window::Window` already has a `set_cursor_hittest()` which basically does this for mouse input events, so I've exposed it (trying to copy the style laid out in the existing wrappings, and added a simple demo.
    
    ---
    
    ## Changelog
    
    - Added `hittest` to `WindowAttributes`
    - Added the `hittest`'s setters/getters
    - Modified the `WindowBuilder`
    - Modifed the `WindowDescriptor`'s `Default` impl.
    - Added an example `cargo run --example fallthrough`

[33mcommit 55ca7fc88ebec86f6112174aaaa2b77f235b83a0[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon Nov 21 12:59:09 2022 +0000

    Split Component Ticks (#6547)
    
    # Objective
    Fixes #4884. `ComponentTicks` stores both added and changed ticks contiguously in the same 8 bytes. This is convenient when passing around both together, but causes half the bytes fetched from memory for the purposes of change detection to effectively go unused. This is inefficient when most queries (no filter, mutating *something*) only write out to the changed ticks.
    
    ## Solution
    Split the storage for change detection ticks into two separate `Vec`s inside `Column`. Fetch only what is needed during iteration.
    
    This also potentially also removes one blocker from autovectorization of dense queries.
    
    EDIT: This is confirmed to enable autovectorization of dense queries in `for_each` and `par_for_each`  where possible.  Unfortunately `iter` has other blockers that prevent it.
    
    ### TODO
    
     - [x] Microbenchmark
     - [x] Check if this allows query iteration to autovectorize simple loops.
     - [x] Clean up all of the spurious tuples now littered throughout the API
    
    ### Open Questions
    
     - ~~Is `Mut::is_added` absolutely necessary? Can we not just use `Added` or `ChangeTrackers`?~~ It's optimized out if unused.
     - ~~Does the fetch of the added ticks get optimized out if not used?~~ Yes it is.
    
    ---
    
    ## Changelog
    Added: `Tick`, a wrapper around a single change detection tick.
    Added: `Column::get_added_ticks`
    Added: `Column::get_column_ticks`
    Added: `SparseSet::get_added_ticks`
    Added: `SparseSet::get_column_ticks`
    Changed: `Column` now stores added and changed ticks separately internally.
    Changed: Most APIs returning `&UnsafeCell<ComponentTicks>` now returns `TickCells` instead, which contains two separate `&UnsafeCell<Tick>` for either component ticks.
    Changed: `Query::for_each(_mut)`, `Query::par_for_each(_mut)` will now leverage autovectorization to speed up query iteration where possible.
    
    ## Migration Guide
    TODO

[33mcommit 210979f6315388dbc2b6e67217311e6056aecb36[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon Nov 21 12:59:08 2022 +0000

    Fix panicking on another scope (#6524)
    
    # Objective
    Fix #6453.
    
    ## Solution
    Use the solution mentioned in the issue by catching the unwind and dropping the error. Wrap the `executor.try_tick` calls with `std::catch::unwind`.
    
    Ideally this would be moved outside of the hot loop, but the mut ref to the `spawned` future is not `UnwindSafe`.
    
    This PR only addresses the bug, we can address the perf issues (should there be any) later.

[33mcommit 15ea93a348a42a264c42be578fd2e2ee3b9b8738[m
Author: Nicola Papale <nico@nicopap.ch>
Date:   Mon Nov 21 12:37:31 2022 +0000

    Fix size_hint for partially consumed QueryIter and QueryCombinationIter (#5214)
    
    # Objective
    
    Fix #5149
    
    ## Solution
    
    Instead of returning the **total count** of elements in the `QueryIter` in
    `size_hint`, we return the **count of remaining elements**. This
    Fixes #5149 even when #5148 gets merged.
    
    - https://github.com/bevyengine/bevy/issues/5149
    - https://github.com/bevyengine/bevy/pull/5148
    
    ---
    
    ## Changelog
    
    - Fix partially consumed `QueryIter` and `QueryCombinationIter` having invalid `size_hint`
    
    
    Co-authored-by: Nicola Papale <nicopap@users.noreply.github.com>

[33mcommit e0c3c6d16693c86843159007b4688f1408064275[m
Author: ç ç©¶ç¤¾äº¤ <cryscan@umich.edu>
Date:   Fri Nov 18 22:16:55 2022 +0000

    Make Core Pipeline Graph Nodes Public (#6605)
    
    # Objective
    
    Make core pipeline graphic nodes, including `BloomNode`, `FxaaNode`, `TonemappingNode` and `UpscalingNode` public.
    This will allow users to construct their own render graphs with these build-in nodes.
    
    ## Solution
    
    Make them public.
    Also put node names into bevy's core namespace (`core_2d::graph::node`, `core_3d::graph::node`) which makes them consistent.

[33mcommit cb8fe5b7fd31e02d077e0cefa660c4e9ed7e84cd[m
Author: Patrick Towles <james.towles@gmail.com>
Date:   Fri Nov 18 22:16:54 2022 +0000

    Removed Mobile Touch event y-axis flip (#6597)
    
    # Objective
    
    Fix android touch events being flipped.  Only removed test for android, don't have ios device to test with.  Tested with emulator and physical device.
    
    ## Solution
    
    Remove check, no longer needed with coordinate change in 0.9

[33mcommit 2cd0bd757594083e5ebb78fed22078e51c9bcc8b[m
Author: robtfm <50659922+robtfm@users.noreply.github.com>
Date:   Fri Nov 18 22:04:23 2022 +0000

    improve compile time by type-erasing wgpu structs (#5950)
    
    # Objective
    
    structs containing wgpu types take a long time to compile. this is particularly bad for generics containing the wgpu structs (like the depth pipeline builder with `#[derive(SystemParam)]` i've been working on).
    
    we can avoid that by boxing and type-erasing in the bevy `render_resource` wrappers.
    
    type system magic is not a strength of mine so i guess there will be a cleaner way to achieve this, happy to take feedback or for it to be taken as a proof of concept if someone else wants to do a better job.
    
    ## Solution
    
    - add macros to box and type-erase in debug mode
    - leave current impl for release mode
    
    timings:
    
    
    <html xmlns:v="urn:schemas-microsoft-com:vml"
    xmlns:o="urn:schemas-microsoft-com:office:office"
    xmlns:x="urn:schemas-microsoft-com:office:excel"
    xmlns="http://www.w3.org/TR/REC-html40">
    
    <head>
    
    <meta name=ProgId content=Excel.Sheet>
    <meta name=Generator content="Microsoft Excel 15">
    <link id=Main-File rel=Main-File
    href="file:///C:/Users/robfm/AppData/Local/Temp/msohtmlclip1/01/clip.htm">
    <link rel=File-List
    href="file:///C:/Users/robfm/AppData/Local/Temp/msohtmlclip1/01/clip_filelist.xml">
    <!--table
            {mso-displayed-decimal-separator:"\.";
            mso-displayed-thousand-separator:"\,";}
    @page
            {margin:.75in .7in .75in .7in;
            mso-header-margin:.3in;
            mso-footer-margin:.3in;}
    tr
            {mso-height-source:auto;}
    col
            {mso-width-source:auto;}
    br
            {mso-data-placement:same-cell;}
    td
            {padding-top:1px;
            padding-right:1px;
            padding-left:1px;
            mso-ignore:padding;
            color:black;
            font-size:11.0pt;
            font-weight:400;
            font-style:normal;
            text-decoration:none;
            font-family:Calibri, sans-serif;
            mso-font-charset:0;
            mso-number-format:General;
            text-align:general;
            vertical-align:bottom;
            border:none;
            mso-background-source:auto;
            mso-pattern:auto;
            mso-protection:locked visible;
            white-space:nowrap;
            mso-rotate:0;}
    .xl65
            {mso-number-format:0%;}
    .xl66
            {vertical-align:middle;
            white-space:normal;}
    .xl67
            {vertical-align:middle;}
    -->
    </head>
    
    <body link="#0563C1" vlink="#954F72">
    
    
    
    current | Â  | Â  | Â 
    -- | -- | -- | --
    Â  | Total time: | 64.9s | Â 
    Â  | bevy_pbr v0.9.0-dev | 19.2s | Â 
    Â  | bevy_render v0.9.0-dev | 17.0s | Â 
    Â  | bevy_sprite v0.9.0-dev | 15.1s | Â 
    Â  | DepthPipelineBuilder | 18.7s | Â 
    Â  | Â  | Â  | Â 
    with type-erasing | Â  | Â  | diff
    Â  | Total time: | 49.0s | -24%
    Â  | bevy_render v0.9.0-dev | 12.0s | -38%
    Â  | bevy_pbr v0.9.0-dev | 8.7s | -49%
    Â  | bevy_sprite v0.9.0-dev | 6.1s | -60%
    Â  | DepthPipelineBuilder | 1.2s | -94%
    
    
    
    </body>
    
    </html>
    
    the depth pipeline builder is a binary with body:
    ```rust
    use std::{marker::PhantomData, hash::Hash};
    use bevy::{prelude::*, ecs::system::SystemParam, pbr::{RenderMaterials, MaterialPipeline, ShadowPipeline}, render::{renderer::RenderDevice, render_resource::{SpecializedMeshPipelines, PipelineCache}, render_asset::RenderAssets}};
    
    fn main() {
        println!("Hello, world p!\n");
    }
    
    #[derive(SystemParam)]
    pub struct DepthPipelineBuilder<'w, 's, M: Material>
    where M::Data: Eq + Hash + Clone,
    {
        render_device: Res<'w, RenderDevice>,
        material_pipeline: Res<'w, MaterialPipeline<M>>,
        material_pipelines: ResMut<'w, SpecializedMeshPipelines<MaterialPipeline<M>>>,
        shadow_pipeline: Res<'w, ShadowPipeline>,
        pipeline_cache: ResMut<'w, PipelineCache>,
        render_meshes: Res<'w, RenderAssets<Mesh>>,
        render_materials: Res<'w, RenderMaterials<M>>,
        msaa: Res<'w, Msaa>,
        #[system_param(ignore)]
        _p: PhantomData<&'s M>,
    }
    ```

[33mcommit 5972879deceb297a720a8da1217d37c7675f1638[m
Author: ickshonpe <david.curthoys@googlemail.com>
Date:   Fri Nov 18 21:16:32 2022 +0000

    Remove ImageMode (#6674)
    
    # Objective
    
    Delete `ImageMode`. It doesn't do anything except mislead people into thinking it controls the aspect ratio of images somehow.
    
    Fixes #3933 and #6637
    
    ## Solution
    
    Delete `ImageMode`
    
    ## Changelog
    
    Removes the `ImageMode` enum.
    Removes the `image_mode` field from `ImageBundle`
    Removes the `With<ImageMode>` query filter from `image_node_system`
    Renames `image_node_system` to` update_image_calculated_size_system`

[33mcommit 4209fcaeda382624950d8704a9046b052b6daca9[m
Author: Lixou <einlixou@gmail.com>
Date:   Fri Nov 18 21:16:31 2022 +0000

    Make spawn_dynamic return InstanceId (#6663)
    
    # Objective
    
    Fixes #6661
    
    ## Solution
    
    Make `SceneSpawner::spawn_dynamic` return `InstanceId` like other functions there.
    
    ---
    
    ## Changelog
    
    Make `SceneSpawner::spawn_dynamic` return `InstanceId` instead of `()`.

[33mcommit 0a853f1ca64371ed734eb98f7f84c46273c6076d[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Nov 18 21:02:56 2022 +0000

    wasm: pad globals uniform also in 2d (#6643)
    
    # Objective
    
    - Fix a panic in wasm when using globals in a shader
    
    ## Solution
    
    - Similar to #6460

[33mcommit 63c0cca0d77fabf7a9891aadada24fb9b6621235[m
Author: Edgar Soares da Silva <70528288+edgarssilva@users.noreply.github.com>
Date:   Fri Nov 18 20:42:33 2022 +0000

    Update old docs from Timer (#6646)
    
    When I was upgrading to 0.9 noticed there were some changes to the timer, mainly the `TimerMode`.  When switching from the old `is_repeating()`  and `set_repeating()` to the new `mode()` and `set_mode()` noticed the docs still had the old description.

[33mcommit a02e44c0dbea5d343a27eef614c803a3daf2c2f5[m
Author: Doru <dorminsama@gmail.com>
Date:   Fri Nov 18 11:24:07 2022 +0000

    Don't kill contributors on window squish (#6675)
    
    # Objective
    
    - The `contributors` example panics when attempting to generate an empty range if the window height is smaller than the sprites
    - Don't do that
    
    ## Solution
    
    - Clamp the bounce height to be 0 minimum, and generate an inclusive range when passing it to `rng.gen_range`

[33mcommit 9f51651eacddc2267f88a3b1a44af1ef58ec5d73[m
Author: James Liu <contact@jamessliu.com>
Date:   Wed Nov 16 20:57:43 2022 +0000

    Replace BlobVec's swap_scratch with a swap_nonoverlapping (#4853)
    
    # Objective
    BlobVec currently relies on a scratch piece of memory allocated at initialization to make a temporary copy of a component when using `swap_remove_and_{forget/drop}`. This is potentially suboptimal as it writes to a, well-known, but random part of memory instead of using the stack.
    
    ## Solution
    As the `FIXME` in the file states, replace `swap_scratch` with a call to `swap_nonoverlapping::<u8>`. The swapped last entry is returned as a `OwnedPtr`.
    
    In theory, this should be faster as the temporary swap is allocated on the stack, `swap_nonoverlapping` allows for easier vectorization for bigger types, and the same memory is used between the swap and the returned `OwnedPtr`.

[33mcommit 00684d95f7a58eb282f29ce0416aaad889552956[m
Author: Nicola Papale <nico@nicopap.ch>
Date:   Wed Nov 16 11:05:48 2022 +0000

    Fix FilteredAccessSet get_conflicts inconsistency (#5105)
    
    # Objective
    
    * Enable `Res` and `Query` parameter mutual exclusion
    * Required for https://github.com/bevyengine/bevy/pull/5080
    
    The `FilteredAccessSet::get_conflicts` methods didn't work properly with
    `Res` and `ResMut` parameters. Because those added their access by using
    the `combined_access_mut` method and directly modifying the global
    access state of the FilteredAccessSet. This caused an inconsistency,
    because get_conflicts assumes that ALL added access have a corresponding
    `FilteredAccess` added to the `filtered_accesses` field.
    
    In practice, that means that SystemParam that adds their access through
    the `Access` returned by `combined_access_mut` and the ones that add
    their access using the `add` method lived in two different universes. As
    a result, they could never be mutually exclusive.
    
    ## Solution
    
    This commit fixes it by removing the `combined_access_mut` method. This
    ensures that the `combined_access` field of FilteredAccessSet is always
    updated consistently with the addition of a filter. When checking for
    filtered access, it is now possible to account for `Res` and `ResMut`
    invalid access. This is currently not needed, but might be in the
    future.
    
    We add the `add_unfiltered_{read,write}` methods to replace previous
    usages of `combined_access_mut`.
    
    We also add improved Debug implementations on FixedBitSet so that their
    meaning is much clearer in debug output.
    
    
    ---
    
    ## Changelog
    
    * Fix `Res` and `Query` parameter never being mutually exclusive.
    
    ## Migration Guide
    
    Note: this mostly changes ECS internals, but since the API is public, it is technically breaking:
    * Removed `FilteredAccessSet::combined_access_mut`
      * Replace _immutable_ usage of those by `combined_access`
      * For _mutable_ usages, use the new `add_unfiltered_{read,write}` methods instead of `combined_access_mut` followed by `add_{read,write}`

[33mcommit 6763b31479246afddecbe4e717e138d4e9653dca[m
Author: James Liu <contact@jamessliu.com>
Date:   Tue Nov 15 22:21:19 2022 +0000

    Immutable sparse sets for metadata storage (#4928)
    
    # Objective
    Make core types in ECS smaller. The column sparse set in Tables is never updated after creation.
    
    ## Solution
    Create `ImmutableSparseSet` which removes the capacity fields in the backing vec's and the APIs for inserting or removing elements. Drops the size of the sparse set by 3 usizes (24 bytes on 64-bit systems)
    
    ## Followup
    ~~After #4809, Archetype's component SparseSet should be replaced with it.~~ This has been done.
    
    ---
    
    ## Changelog
    Removed: `Table::component_capacity`
    
    ## Migration Guide
    `Table::component_capacity()` has been removed as Tables do not support adding/removing columns after construction.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 11c544c29afcee66defab7aa6b13bf77b8ffe6ae[m
Author: James Liu <contact@jamessliu.com>
Date:   Tue Nov 15 21:39:21 2022 +0000

    Remove redundant table and sparse set component IDs from Archetype (#4927)
    
    # Objective
    Archetype is a deceptively large type in memory. It stores metadata about which components are in which storage in multiple locations, which is only used when creating new Archetypes while moving entities.
    
    ## Solution
    Remove the redundant `Box<[ComponentId]>`s and iterate over the sparse set of component metadata instead. Reduces Archetype's size by 4 usizes (32 bytes on 64-bit systems), as well as the additional allocations for holding these slices.
    
    It'd seem like there's a downside that the origin archetype has it's component metadata iterated over twice when creating a new archetype, but this change also removes the extra `Vec<ArchetypeComponentId>` allocations when creating a new archetype which may amortize out to a net gain here. This change likely negatively impacts creating new archetypes with a large number of components, but that's a cost mitigated by the fact that these archetypal relationships are cached in Edges and is incurred only once for each edge created.
    
    ## Additional Context
    There are several other in-flight PRs that shrink Archetype:
    
     - #4800 merges the entities and rows Vecs together (shaves off 24 bytes per archetype)
     - #4809 removes unique_components and moves it to it's own dedicated storage (shaves off 72 bytes per archetype)
    
    ---
    
    ## Changelog
    Changed: `Archetype::table_components` and `Archetype::sparse_set_components` return iterators instead of slices. `Archetype::new` requires iterators instead of parallel slices/vecs.
    
    ## Migration Guide
    Do I still need to do this? I really hope people were not relying on the public facing APIs changed here.

[33mcommit 51aab032edcb2e97befe19ea985d35758c5e7e6d[m
Author: James Liu <contact@jamessliu.com>
Date:   Tue Nov 15 20:31:17 2022 +0000

    Bump gilrs version to 0.10 (#6558)
    
    # Objective
    Fix #6555.
    
    ## Solution
    Bump `gilrs` version to 0.10.

[33mcommit 688f13cd838efb1c0c44f2aa20ed844b45d6115f[m
Author: James Liu <contact@jamessliu.com>
Date:   Tue Nov 15 00:19:11 2022 +0000

    Fix get_unchecked_manual using archetype index instead of table row. (#6625)
    
    # Objective
    Fix #6623.
    
    ## Solution
    Use the right table row instead of the `EntityLocation` archetype index.

[33mcommit 342f69e304d2df5a41ba5a77020a10de8f7d900a[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon Nov 14 23:34:52 2022 +0000

    Shrink ComputedVisibility (#6305)
    
    # Objective
    `ComputedVisibility` could afford to be smaller/faster. Optimizing the size and performance of operations on the component will positively benefit almost all extraction systems.
    
    This was listed as one of the potential pieces of future work for #5310.
    
    ## Solution
    Merge both internal booleans into a single `u8` bitflag field. Rely on bitmasks to evaluate local, hierarchical, and general visibility.
    
    Pros:
    
     - `ComputedVisibility::is_visible` should be a single bitmask test instead of two.
     - `ComputedVisibility` is now only 1 byte. Should be able to fit 100% more per cache line when using dense iteration.
    
    Cons:
    
     - Harder to read.
     - Setting individual values inside `ComputedVisiblity` require bitmask mutations.
    
    This should be a non-breaking change. No public API was changed. The only publicly visible effect is that `ComputedVisibility` is now 1 byte instead of 2.

[33mcommit 8ebd4d909ce905b33e71a0678ae601afb509085c[m
Author: Mike <mike.hsu@gmail.com>
Date:   Mon Nov 14 23:08:31 2022 +0000

    add span to winit event handler (#6612)
    
    # Objective
    
    - Add a span for the winit event handler. I've found this useful in my PR for pipelined rendering and I've seen it come up in a few other contexts now.
    
    ![image](https://user-images.githubusercontent.com/2180432/201588888-5dc02063-2c41-471b-8937-a71aeaf174b4.png)

[33mcommit eaa35cf99fac8df2ad1b0b682fb37db04feb028a[m
Author: Hsiang-Cheng Yang <rick68@users.noreply.github.com>
Date:   Mon Nov 14 23:08:30 2022 +0000

    use `Mul<f32>` to double the value of `Vec3` (#6607)
    
    improve the example code

[33mcommit 6993f3cfe392e00437ba9f9798031f44e9b5a2b5[m
Author: DaniÃ©l Kerkmann <daniel@kerkmann.dev>
Date:   Mon Nov 14 23:08:29 2022 +0000

    Make function `Size::new` const for `bevy_ui` `widgets` (#6602)
    
    # Objective
    
    Fixes #6594
    
    ## Solution
    
    - `New` function for `Size` is now a `const` function :)
    
    ## Changelog
    
    - `New` function for `Size` is now a `const` function
    
    ## Migration Guide
    
    - Nothing has been changed

[33mcommit 13abb1fc16b1d968db0b7b8ea70b8e096623fc06[m
Author: Alessandro Salvatore Nicosia <super.salvatore00@gmail.com>
Date:   Mon Nov 14 23:08:28 2022 +0000

    derived Debug on EventReader (#6600)
    
    # Objective
    Fixes #6588
    
    ## Solution
    
    Added Debug to the derived traits of EventReader.

[33mcommit b2090e3a8db94e68693bb00a2486d160bd35df7f[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Mon Nov 14 23:08:27 2022 +0000

    add `Resources::iter` to iterate over all resource IDs (#6592)
    
    # Objective
    
    In bevy 0.8 you could list all resources using `world.archetypes().resource().components()`. As far as I can tell the resource archetype has been replaced with the `Resources` storage, and it would be nice if it could be used to iterate over all resource component IDs as well.
    
    ## Solution
    
    - add `fn Resources::iter(&self) -> impl Iterator<Item = (ComponentId, &ResourceData)>`

[33mcommit 69011b7e268433e4a1b7eeefc595f93ec3da51a7[m
Author: Johan Klokkhammer Helsing <johanhelsing@gmail.com>
Date:   Mon Nov 14 23:08:26 2022 +0000

    Derive clone and debug for `AssetPlugin` (#6583)
    
    # Objective
    
    - Derive Clone and Debug for `AssetPlugin`
    - Make it possible to log asset server settings
    - And get an owned instance if wrapping `AssetPlugin` in another plugin. See: https://github.com/johanhelsing/bevy_web_asset/blob/129224ef72a609ce54088f01183f6962fed8780e/src/web_asset_plugin.rs#L45

[33mcommit 8f9556050ad51748146572aeb477e1842f755761[m
Author: å¼ æä¼ <lewiszlw520@gmail.com>
Date:   Mon Nov 14 23:08:24 2022 +0000

    Make WindowId::primary() const (#6582)
    
    # Objective
    
    - fixes https://github.com/bevyengine/bevy/issues/6577
    
    ## Solution
    
    - simply add `const` to `primary()`.

[33mcommit 1f8cc9dd678e9655f1a02617a858af001b8e2969[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Mon Nov 14 23:08:23 2022 +0000

    bevy_scene: Add missing registration for `SmallVec<[Entity; 8]>` (#6578)
    
    # Objective
    
    > Part of #6573
    
    `Children` was not being properly deserialized in scenes. This was due to a missing registration on `SmallVec<[Entity; 8]>`, which is used by `Children`.
    
    ## Solution
    
    Register `SmallVec<[Entity; 8]>`.
    
    ---
    
    ## Changelog
    
    - Registered `SmallVec<[Entity; 8]>`

[33mcommit af2a1992549f9ea0a529c80cbf069c40e362b08a[m
Author: Zhell <linus.kall@nodetron.com>
Date:   Mon Nov 14 23:08:22 2022 +0000

    [Fixes #6030] Bevy scene optional serde (#6076)
    
    # Objective
    
    Fixes #6030, making ``serde`` optional.
    
    ## Solution
    
    This was solved by making a ``serialize`` feature that can activate ``serde``, which is now optional.
    
    When ``serialize`` is deactivated, the ``Plugin`` implementation for ``ScenePlugin`` does nothing.
    
    
    Co-authored-by: Linus KÃ¤ll <linus.kall.business@gmail.com>

[33mcommit f2f8f9097f13081389e1377a151d5ab10606e78d[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Mon Nov 14 22:53:50 2022 +0000

    Add safe constructors for untyped pointers `Ptr` and `PtrMut` (#6539)
    
    # Objective
    
    Currently, `Ptr` and `PtrMut` can only be constructed via unsafe code. This means that downgrading a reference to an untyped pointer is very cumbersome, despite being a very simple operation.
    
    ## Solution
    
    Define conversions for easily and safely constructing untyped pointers. This is the non-owned counterpart to `OwningPtr::make`.
    
    Before:
    
    ```rust
    let ptr = unsafe { PtrMut::new(NonNull::from(&mut value).cast()) };
    ```
    
    After:
    
    ```rust
    let ptr = PtrMut::from(&mut value);
    ```
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 635320f1726cca24bf6058b60ada1e01f05c9ca4[m
Author: laundmo <laurinschmidt2001@gmail.com>
Date:   Mon Nov 14 22:34:29 2022 +0000

    Expose winit always_on_top (#6527)
    
    # Objective
    
    I needed a window which is always on top, to create a overlay app.
    
    ## Solution
    
    expose the `always_on_top` property of winit in bevy's `WindowDescriptor` as a boolean flag
    
    ---
    
    ## Changelog
    
    ### Added
    - add `WindowDescriptor.always_on_top` which configures a window to stay on top.

[33mcommit b765682c6e02407a0005c78dde1b14f83c1cc6d7[m
Author: Lixou <einlixou@gmail.com>
Date:   Mon Nov 14 22:34:28 2022 +0000

    Add AutoMax next to ScalingMode::AutoMin (#6496)
    
    # Objective
    
    `ScalingMode::Auto` for cameras only targets min_height and min_width, or as the docs say it `Use minimal possible viewport size while keeping the aspect ratio.`
    
    But there is no ScalingMode that targets max_height and Max_width or `Use maximal possible viewport size while keeping the aspect ratio.`
    
    ## Solution
    
    Added `ScalingMode::AutoMax` that does the exact opposite of `ScalingMode::Auto`
    
    ---
    
    ## Changelog
    
    Renamed `ScalingMode::Auto` to `ScalingMode::AutoMin`.
    
    ## Migration Guide
    
    just rename `ScalingMode::Auto` to `ScalingMode::AutoMin` if you are using it.
    
    
    Co-authored-by: Lixou <82600264+DasLixou@users.noreply.github.com>

[33mcommit db0d7698e27959eb25d135310f565af6ec8ddf6e[m
Author: 2ne1ugly <chattermin@gmail.com>
Date:   Mon Nov 14 22:34:27 2022 +0000

    Change `From<Icosphere>` to `TryFrom<Icosphere>` (#6484)
    
    # Objective
    
    - Fixes  #6476
    
    ## Solution
    
    - Return error instead of panic through `TryFrom`
    - ~~Add `.except()` in examples~~
    - Add `.unwrap()` in examples

[33mcommit 4de4e54755a975fbc3d7bd544466cc9a1acb042a[m
Author: Jakub Arnold <darthdeus@gmail.com>
Date:   Mon Nov 14 22:34:26 2022 +0000

    Update post_processing example to not render UI with first pass camera (#6469)
    
    # Objective
    
    Make sure the post processing example won't render UI twice.
    
    ## Solution
    
    Disable UI on the first pass camera with `UiCameraConfig`

[33mcommit dc09ee36e26737489ac7f4cf0c95778036cb1cde[m
Author: Yyee <ongyernyee@gmail.com>
Date:   Mon Nov 14 22:15:46 2022 +0000

    Add pixelated Bevy to assets and an example (#6408)
    
    # Objective
    Fixes #2279
    
    ## Solution
    Added pixelated Bevy to assets folder and used in a `pixel_perfect` example.

[33mcommit 308e092153afbfedc73d92370c6df9f8581d4da4[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Mon Nov 14 21:59:18 2022 +0000

    Add `Windows::get_focused(_mut)` (#6571)
    
    Add a method to get the focused window.
    
    Use this instead of `WindowFocused` events in `close_on_esc`.
    Seems that the OS/window manager might not always send focused events on application startup.
    
    Sadly, not a fix for #5646.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 5f1261110fdd8f382084125a3592159948571497[m
Author: ickshonpe <david.curthoys@googlemail.com>
Date:   Mon Nov 14 21:59:17 2022 +0000

    Flip UI image (#6292)
    
    # Objective
    Fixes  #3225, Allow for flippable UI Images
    
    ## Solution
    Add flip_x and flip_y fields to UiImage, and swap the UV coordinates accordingly in ui_prepare_nodes.
    
    ## Changelog
    * Changes UiImage to a struct with texture, flip_x, and flip_y fields.
    * Adds flip_x and flip_y fields to ExtractedUiNode.
    * Changes extract_uinodes to extract the flip_x and flip_y values from UiImage.
    * Changes prepare_uinodes to swap the UV coordinates as required.
    * Changes UiImage derefs to texture field accesses.

[33mcommit 3ac06b57e90404f7655fab80ed1e81ca1deb86f4[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Mon Nov 14 21:16:53 2022 +0000

    Respect alignment for zero-sized types stored in the world (#6618)
    
    # Objective
    
    Fixes #6615.
    
    `BlobVec` does not respect alignment for zero-sized types, which results in UB whenever a ZST with alignment other than 1 is used in the world.
    
    ## Solution
    
    Add the fn `bevy_ptr::dangling_with_align`.
    
    ---
    
    ## Changelog
    
    + Added the function `dangling_with_align` to `bevy_ptr`, which creates a well-aligned dangling pointer to a type whose alignment is not known at compile time.

[33mcommit 9498bfffcbb67b0933289c776dc63c3c391db4a5[m
Author: radiish <cb.setho@gmail.com>
Date:   Mon Nov 14 21:03:39 2022 +0000

    Add `remove` method to `Map` reflection trait. (#6564)
    
    # Objective
    
    - Implements removal of entries from a `dyn Map`
    - Fixes #6563
    
    ## Solution
    
    - Adds a `remove` method to the `Map` trait which takes in a `&dyn Reflect` key and returns the value removed if it was present.
    
    ---
    
    ## Changelog
    
    - Added `Map::remove`
    
    ## Migration Guide
    
    - Implementors of `Map` will need to implement the `remove` method.
    
    
    Co-authored-by: radiish <thesethskigamer@gmail.com>

[33mcommit 1967c3ddefb56260b243f8cbf7265f4d86729aec[m
Author: Nicola Papale <nico@nicopap.ch>
Date:   Mon Nov 14 14:01:16 2022 +0000

    Fix Entity hygiene in WorldQuery (#6614)
    
    # Objective
    
    Fix #6593
    
    ## Solution
    
    Fully qualify `Entity` in the `WorldQuery` macro

[33mcommit 7231e00507502662c59cc24e06b19f013e45a6cb[m
Author: Tymon <plochockitymon@gmail.com>
Date:   Mon Nov 14 13:44:29 2022 +0000

    Note about flex in `Style` docs (#6616)
    
    # Objective
    
    - Fixes #6606
    
    ## Solution
    
    - Deleted the note Bevy's UI being upside down since it's no longer true as of version 0.9.0

[33mcommit e48c05c73474a5f6a212257cecda7ceaf2465cf3[m
Author: Lixou <82600264+DasLixou@users.noreply.github.com>
Date:   Sun Nov 13 15:35:48 2022 +0000

    Fix Link in valid_parent_check_plugin.rs (#6584)
    
    # Objective
    
    Link doesn't get to right segment
    
    ## Solution
    
    Fix link

[33mcommit f7c8eb7d86fbfccb633d27ad9db76efe5eeedef8[m
Author: Sol Toder <soldevlintoder@gmail.com>
Date:   Sat Nov 12 22:59:49 2022 +0000

    Correct docs for ButtonSettingsError to read 0.0..=1.0 (#6570)
    
    # Objective
    
    The [documentation for `ButtonSettingsError`](https://docs.rs/bevy/0.9.0/bevy/input/gamepad/enum.ButtonSettingsError.html) incorrectly describes the valid range of values as `0.0..=2.0`, probably because it was copied from `AxisSettingsError`. The actual range, as seen in the functions that return it and in its own `thiserror` description, is `0.0..=1.0`.
    
    ## Solution
    
    Update the doc comments to reflect the correct range.
    
    
    Co-authored-by: Sol Toder <ajaxgb@gmail.com>

[33mcommit 920543c824735dc1df6f4a59e7036e653dd5a553[m[33m ([m[1;33mtag: v0.9.0[m[33m)[m
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Sat Nov 12 20:01:29 2022 +0000

    Release 0.9.0 (#6568)
    
    Preparing next release
    This PR has been auto-generated

[33mcommit d0fe37609aed5fa4c977d5f2f624e4acdffe625d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Nov 12 19:45:30 2022 +0000

    Add 0.9.0 changelog (#6567)

[33mcommit 2179a3ebf460a3f35da8c9b403248442b2f54a34[m
Author: James Liu <contact@jamessliu.com>
Date:   Sat Nov 12 16:15:04 2022 +0000

    Make Entity::to_bits const (#6559)
    
    # Objective
    Fix #6548. Most of these methods were already made `const` in #5688. `Entity::to_bits` is the only one that remained.
    
    ## Solution
    Make it const.

[33mcommit c3c4088317f0ea09de8d96e22fa5beb28e486c30[m
Author: Aevyrie <aevyrie@gmail.com>
Date:   Sat Nov 12 09:31:03 2022 +0000

    Fix instancing example for hdr (#6554)
    
    # Objective
    
    - Using the instancing example as reference, I found it was breaking when enabling HDR on the camera. I found that this was because, unlike in internal code, this was not updating the specialization key with `view.hdr`.
    
    ## Solution
    
    - Add the missing HDR bit.

[33mcommit ffa489a846346af427f6b09642bd8b2cfb016de6[m
Author: Nicola Papale <nico@nicopap.ch>
Date:   Sat Nov 12 08:06:56 2022 +0000

    Ignore `Timeout` errors on Linux AMD & Intel (#5957)
    
    # Objective
    
    - Fix #3606
    - Fix #4579
    - Fix #3380
    
    ## Solution
    
    When running on a Linux machine with some AMD or Intel device, when calling
    `surface.get_current_texture()`, ignore `wgpu::SurfaceError::Timeout` errors.
    
    
    ## Alternative
    
    An alternative solution found in the `wgpu` examples is:
    
    ```rust
    let frame = surface
        .get_current_texture()
        .or_else(|_| {
            render_device.configure_surface(surface, &swap_chain_descriptor);
            surface.get_current_texture()
        })
        .expect("Error reconfiguring surface");
    window.swap_chain_texture = Some(TextureView::from(frame));
    ```
    
    See: <https://github.com/gfx-rs/wgpu/blob/94ce76391b560a66e36df1300bd684321e57511a/wgpu/examples/framework.rs#L362-L370>
    
    Veloren [handles the Timeout error the way this PR proposes to handle it](https://github.com/gfx-rs/wgpu/issues/1218#issuecomment-1092056971).
    
    The reason I went with this PR's solution is that `configure_surface` seems to be quite an expensive operation, and it would run every frame with the wgpu framework solution, despite the fact it works perfectly fine without `configure_surface`.
    
    I know this looks super hacky with the linux-specific line and the AMD check, but my understanding is that the `Timeout` occurrence is specific to a quirk of some AMD drivers on linux, and if otherwise met should be considered a bug.
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 7ced5336e6b779880029e00074dfeab34bf8169e[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Sat Nov 12 01:28:31 2022 +0000

    Fix panic when the primary window is closed (#6545)
    
    Issue introduced by #6533.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 4ef192b91a569d18c807d56be5791490529634ac[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Nov 11 23:46:45 2022 +0000

    Better bloom default settings (#6546)
    
    # Objective
    
    - Use better defaults for bloom
    
    ## Solution
    
    - Divide the intensity by 3. It's still noticeable
    - Change the mip level? (not sure about that change, it's from a discussion with @superdump)
    
    
    ### bloom example
    main:
    <img width="1392" alt="Screenshot 2022-11-11 at 01 09 26" src="https://user-images.githubusercontent.com/8672791/201232996-20d6cf65-2511-41bc-979b-f2c193e4e4e6.png">
    this pr:
    <img width="1392" alt="Screenshot 2022-11-11 at 01 08 00" src="https://user-images.githubusercontent.com/8672791/201232987-b1ebad2a-4ebf-4296-a91b-aab898544a9d.png">
    
    
    ### bistro scene
    main:
    <img width="1392" alt="Screenshot 2022-11-11 at 01 16 42" src="https://user-images.githubusercontent.com/8672791/201233028-526999a3-0060-44f7-b0dd-f78666b06c1d.png">
    this pr:
    <img width="1392" alt="Screenshot 2022-11-11 at 01 15 12" src="https://user-images.githubusercontent.com/8672791/201233044-50201034-e881-40e1-8455-76cabc621a9b.png">

[33mcommit 72fbcc7633248703d58f2dbf1b47cdfde945325a[m
Author: Aevyrie <aevyrie@gmail.com>
Date:   Fri Nov 11 19:43:45 2022 +0000

    Fix color banding by dithering image before quantization (#5264)
    
    # Objective
    
    - Closes #5262
    - Fix color banding caused by quantization.
    
    ## Solution
    
    - Adds dithering to the tonemapping node from #3425.
    - This is inspired by Godot's default "debanding" shader: https://gist.github.com/belzecue/
    - Unlike Godot:
      - debanding happens after tonemapping. My understanding is that this is preferred, because we are running the debanding at the last moment before quantization (`[f32, f32, f32, f32]` -> `f32`). This ensures we aren't biasing the dithering strength by applying it in a different (linear) color space.
      - This code instead uses and reference the origin source, Valve at GDC 2015
    
    ![Screenshot from 2022-11-10 13-44-46](https://user-images.githubusercontent.com/2632925/201218880-70f4cdab-a1ed-44de-a88c-8759e77197f1.png)
    ![Screenshot from 2022-11-10 13-41-11](https://user-images.githubusercontent.com/2632925/201218883-72393352-b162-41da-88bb-6e54a1e26853.png)
    
    
    ## Additional Notes
    
    Real time rendering to standard dynamic range outputs is limited to 8 bits of depth per color channel. Internally we keep everything in full 32-bit precision (`vec4<f32>`) inside passes and 16-bit between passes until the image is ready to be displayed, at which point the GPU implicitly converts our `vec4<f32>` into a single 32bit value per pixel, with each channel (rgba) getting 8 of those 32 bits.
    
    ### The Problem
    
    8 bits of color depth is simply not enough precision to make each step invisible - we only have 256 values per channel! Human vision can perceive steps in luma to about 14 bits of precision. When drawing a very slight gradient, the transition between steps become visible because with a gradient, neighboring pixels will all jump to the next "step" of precision at the same time.
    
    ### The Solution
    
    One solution is to simply output in HDR - more bits of color data means the transition between bands will become smaller. However, not everyone has hardware that supports 10+ bit color depth. Additionally, 10 bit color doesn't even fully solve the issue, banding will result in coherent bands on shallow gradients, but the steps will be harder to perceive.
    
    The solution in this PR adds noise to the signal before it is "quantized" or resampled from 32 to 8 bits. Done naively, it's easy to add unneeded noise to the image. To ensure dithering is correct and absolutely minimal, noise is adding *within* one step of the output color depth. When converting from the 32bit to 8bit signal, the value is rounded to the nearest 8 bit value (0 - 255). Banding occurs around the transition from one value to the next, let's say from 50-51. Dithering will never add more than +/-0.5 bits of noise, so the pixels near this transition might round to 50 instead of 51 but will never round more than one step. This means that the output image won't have excess variance:
      - in a gradient from 49 to 51, there will be a step between each band at 49, 50, and 51.
      - Done correctly, the modified image of this gradient will never have a adjacent pixels more than one step (0-255) from each other.
      - I.e. when scanning across the gradient you should expect to see:
    ```
                      |-band-| |-band-| |-band-|
    Baseline:         49 49 49 50 50 50 51 51 51
    Dithered:         49 50 49 50 50 51 50 51 51
    Dithered (wrong): 49 50 51 49 50 51 49 51 50
    ```
    
    ![Screenshot from 2022-11-10 14-12-36](https://user-images.githubusercontent.com/2632925/201219075-ab3f46be-d4e9-4869-b66b-a92e1706f49e.png)
    ![Screenshot from 2022-11-10 14-11-48](https://user-images.githubusercontent.com/2632925/201219079-ec5d2add-817d-487a-8fc1-84569c9cda73.png)
    
    
    
    
    You can see from above how correct dithering "fuzzes" the transition between bands to reduce distinct steps in color, without adding excess noise.
    
    ### HDR
    
    The previous section (and this PR) assumes the final output is to an 8-bit texture, however this is not always the case. When Bevy adds HDR support, the dithering code will need to take the per-channel depth into account instead of assuming it to be 0-255. Edit: I talked with Rob about this and it seems like the current solution is okay. We may need to revisit once we have actual HDR final image output.
    
    ---
    
    ## Changelog
    
    ### Added
    
    - All pipelines now support deband dithering. This is enabled by default in 3D, and can be toggled in the `Tonemapping` component in camera bundles. Banding is a graphical artifact created when the rendered image is crunched from high precision (f32 per color channel) down to the final output (u8 per channel in SDR). This results in subtle gradients becoming blocky due to the reduced color precision. Deband dithering applies a small amount of noise to the signal before it is "crunched", which breaks up the hard edges of blocks (bands) of color. Note that this does not add excess noise to the image, as the amount of noise is less than a single step of a color channel - just enough to break up the transition between color blocks in a gradient.
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit c4e791d62890cc02773564bad7592345d2b8f05c[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Fri Nov 11 03:31:57 2022 +0000

    bevy_pbr: Normalize skinned normals (#6543)
    
    # Objective
    
    - Make the many foxes not unnecessarily bright. Broken since #5666.
    - Fixes #6528
    
    ## Solution
    
    - In #5666 normalisation of normals was moved from the fragment stage to the vertex stage. However, it was not added to the vertex stage for skinned normals. The many foxes are skinned and their skinned normals were not unit normals. which made them brighter. Normalising the skinned normals fixes this.
    
    ---
    
    ## Changelog
    
    - Fixed: Non-unit length skinned normals are now normalized.

[33mcommit 99c815fd00334ac0b1a18e6eff8d103352f918cd[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Thu Nov 10 20:10:51 2022 +0000

    Move the cursor's origin back to the bottom-left (#6533)
    
    This reverts commit 8429b6d6ca8a3de0ba2774b294861fad4916e268 as discussed in #6522.
    
    I tested that the game_menu example works as it should.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 9b56b549ad866ee200b890216b2d6dd39cfa34ad[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Thu Nov 10 16:55:53 2022 +0000

    Reuse `ndc_to_world` matrix in `Camera::viewport_to_world` (#6532)
    
    # Objective
    
    Solve #6531.
    
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 1914a3f288a812667f735ee9e7806cf1560dacc0[m
Author: dataphract <dataphract@gmail.com>
Date:   Mon Nov 7 21:43:07 2022 +0000

    fix: explicitly specify required version of async-task (#6509)
    
    # Objective
    
    Attempting to build `bevy_tasks` produces the following error:
    
    ```
    error[E0599]: no method named `is_finished` found for struct `async_executor::Task` in the current scope
      --> /[...]]/bevy/crates/bevy_tasks/src/task.rs:51:16
       |
    51 |         self.0.is_finished()
       |                ^^^^^^^^^^^ method not found in `async_executor::Task<T>`
    
    ```
    
    It looks like this was introduced along with `Task::is_finished`, which delegates to `async_task::Task::is_finished`. However, the latter was only introduced in `async-task` 4.2.0; `bevy_tasks` does not explicitly depend on `async-task` but on `async-executor` ^1.3.0, which in turn depends on `async-task` ^4.0.0.
    
    ## Solution
    
    Add an explicit dependency on `async-task` ^4.2.0.

[33mcommit d688ba5f29151db701425d854fc25dfbad6ad5c4[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Mon Nov 7 21:25:31 2022 +0000

    Add `send_event` and friends to `WorldCell` (#6515)
    
    # Objective
    
    Copy `send_event` and friends from `World` to `WorldCell`.
    
    Clean up `bevy_winit` using `WorldCell::send_event`.
    
    ## Changelog
    
    Added `send_event`, `send_event_default`, and `send_event_batch` to `WorldCell`.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 4ad621fe0f8883a64f330654747cb539511c2d7c[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Mon Nov 7 19:44:17 2022 +0000

    `Reflect` for `Tonemapping` and `ClusterConfig` (#6488)
    
    # Objective
    
    - it would be useful to inspect these structs using reflection
    
    ## Solution
    
    - derive and register reflect
    - Note that `#[reflect(Component)]` requires `Default` (or `FromWorld`) until #6060, so I implemented `Default` for `Tonemapping` with `is_enabled: false`

[33mcommit 0aa17d0acaa6d1c6fe0594ca0bc106e7991ba299[m
Author: ç ç©¶ç¤¾äº¤ <cryscan@umich.edu>
Date:   Mon Nov 7 19:44:15 2022 +0000

    Macro for Loading Internal Binary Assets (#6478)
    
    # Objective
    
    The `load_internal_asset` macro is helpful when creating rendering plugins, but it doesn't support load binary assets (like those compiled as spir-v).
    
    ## Solution
    
    Add a `load_internal_binary_asset` macro that use `include_bytes!`.

[33mcommit 1170b307850e3546793978a246a4c33363c5019c[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Mon Nov 7 19:44:14 2022 +0000

    Fix panic when using globals uniform in wasm builds (#6460)
    
    # Objective
    
    Fixes #5393
    
    ## Solution
    
    - Add padding to `GlobalsUniform` / `Globals` to make it 16-byte aligned.
    
    Still not super clear on whether this is a `naga` thing or an `encase` thing or what. But now that we're offering `globals` up to users and #5393 is not just breaking an example, maybe we should do this sort of workaround?

[33mcommit 0aab699a849929fc800978f052a148ee0f1335a7[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Nov 7 19:44:13 2022 +0000

    Update glam 0.22, hexasphere 8.0, encase 0.4 (#6427)
    
    # Objective
    
    - Update glam to 0.22, hexasphere to 8.0, encase to 0.4
    
    ## Solution
    
    - Update glam to 0.22, hexasphere to 8.0, encase to 0.4
    - ~~waiting on https://github.com/teoxoy/encase/pull/17 and https://github.com/OptimisticPeach/hexasphere/pull/13~~

[33mcommit 944b311c6707f2f73dbe8dacd82d9fe3b8b3cbbc[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Mon Nov 7 19:23:34 2022 +0000

    Improve logging consistency for entity despawning (#6501)
    
     * Move the despawn debug log from `World::despawn` to `EntityMut::despawn`.
     * Move the despawn non-existent warning log from `Commands::despawn` to `World::despawn`.
    
    This should make logging consistent regardless of which of the three `despawn` methods is used.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 02fbf16c8096e49ced66db571373128ea9508b9f[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Mon Nov 7 02:11:16 2022 +0000

    bevy_reflect: Add `Reflect::into_reflect` (#6502)
    
    # Objective
    
    Using `Reflect` we can easily switch between a specific reflection trait object, such as a `dyn Struct`, to a `dyn Reflect` object via `Reflect::as_reflect` or `Reflect::as_reflect_mut`.
    
    ```rust
    fn do_something(value: &dyn Reflect) {/* ... */}
    
    let foo: Box<dyn Struct> = Box::new(Foo::default());
    do_something(foo.as_reflect());
    ```
    
    However, there is no way to convert a _boxed_ reflection trait object to a `Box<dyn Reflect>`.
    
    ## Solution
    
    Add a `Reflect::into_reflect` method which allows converting a boxed reflection trait object back into a boxed `Reflect` trait object.
    
    ```rust
    fn do_something(value: Box<dyn Reflect>) {/* ... */}
    
    let foo: Box<dyn Struct> = Box::new(Foo::default());
    do_something(foo.into_reflect());
    ```
    
    ---
    
    ## Changelog
    
    - Added `Reflect::into_reflect`

[33mcommit 33299f0badf823380231436b6cb5c68c6b59335c[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sun Nov 6 22:43:52 2022 +0000

    update allowed duplicate dependencies (#6500)
    
    # Objective
    
    - Fix deny issues
    
    ## Solution
    
    - Allow new duplicated dependencies

[33mcommit efc111c7f2cdb90d1e7584848e1aa0f6ccd74022[m
Author: Hennadii Chernyshchyk <genaloner@gmail.com>
Date:   Sun Nov 6 17:14:10 2022 +0000

    Add CameraRenderGraph::set (#6470)
    
    # Objective
    
    Some render plugins, like [bevy-hikari](https://github.com/cryscan/bevy-hikari) require to set `CameraRenderGraph`. In order to switch between render graphs I need to insert a new `CameraRenderGraph` component. It's not very ergonomic.
    
    ## Solution
    
    Add `CameraRenderGraph::set` like in [Name](https://docs.rs/bevy/latest/bevy/core/struct.Name.html).
    
    ---
    
    ## Changelog
    
    ### Added
    
    - `CameraRenderGraph::set`.

[33mcommit feebbc5ea917a292fbecf259470094d359631fa4[m
Author: Hennadii Chernyshchyk <genaloner@gmail.com>
Date:   Sun Nov 6 16:58:38 2022 +0000

    Add reflect_owned (#6494)
    
    # Objective
    
    There is no way to gen an owned value of `Reflect`.
    
    ## Solution
    
    Add it! This was originally a part of #6421, but @MrGVSV asked me to create a separate for it to implement reflect diffing.
    
    ---
    
    ## Changelog
    
    ### Added
    
    - `Reflect::reflect_owned` to get an owned version of `Reflect`.

[33mcommit 694c980c821c758f3d272e77a0dc7a75107d7ade[m
Author: TimJentzsch <tim-jentzsch@gmx.de>
Date:   Sun Nov 6 01:42:15 2022 +0000

    Fix `clippy::iter_with_drain` (#6485)
    
    # Objective
    
    Fixes #6483.
    
    - Fix the [`clippy::iter_with_drain`](https://rust-lang.github.io/rust-clippy/master/index.html#iter_with_drain) warnings
    - From the docs: "`.into_iter()` is simpler with better performance"
    
    ## Solution
    
    - Replace `.drain(..)` for `Vec` with `.into_iter()`

[33mcommit 66f495c44ee9a460f54727e38a13d60f1b60e915[m
Author: Brian Merchant <bhmerchant@gmail.com>
Date:   Sat Nov 5 20:48:15 2022 +0000

    Cleaning up NodeBundle, and some slight UI module re-organization (#6473)
    
    # Objective
    
    `NodeBundle` contains an `image` field, which can be misleading, because if you do supply an image there, nothing will be shown to screen. You need to use an `ImageBundle` instead.
    
    ## Solution
    
    * `image` (`UiImage`) field is removed from `NodeBundle`,
    * extraction stage queries now make an optional query for `UiImage`, if one is not found, use the image handle that is used as a default by `UiImage`: https://github.com/bevyengine/bevy/blob/c019a60b39c5683656025bc9d24a02744aa59dea/crates/bevy_ui/src/ui_node.rs#L464
    * touching up docs for `NodeBundle` to help guide what `NodeBundle` should be used for
    * renamed `entity.rs` to `node_bundle.rs` as that gives more of a hint regarding the module's purpose
    * separating `camera_config` stuff from the pre-made UI node bundles so that `node_bundle.rs` makes more sense as a module name.

[33mcommit 5ae94750a199693983c833838729d036fab4f95c[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Sat Nov 5 16:43:15 2022 +0000

    make `register` on `TypeRegistry` idempotent (#6487)
    
    # Objective
    
    - adding a new `.register` should not overwrite old type data
    - separate crates should both be able to register the same type
    
    I ran into this while debugging why `register::<Handle<T>>` removed the `ReflectHandle` type data from a prior `register_asset_reflect`.
    
    
    ## Solution
    
    - make `register` do nothing if called again for the same type
    - I also removed some unnecessary duplicate registrations

[33mcommit 3d64acd0c30c1267f7f18a7fff2aca02fec98dec[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Sat Nov 5 16:30:13 2022 +0000

    Add more info to texture loading error in texture_atlas example (#6456)
    
    # Objective
    
    - Fix an awkwardly phrased/typoed error message
    - Actually tell users which file caused the error
    - IMO we don't need to panic
    
    ## Solution
    
    - Add a warning including the involved asset path when a non-image is found by `load_folder`
    - Note: uses `let else` which is stable now
    
    ```
    2022-11-03T14:17:59.006861Z  WARN texture_atlas: Some(AssetPath { path: "textures/rpg/tiles/whatisthisdoinghere.ogg", label: None }) did not resolve to an `Image` asset.
    ```

[33mcommit 0e41b79a35be98552a0b330dbc657fc22422357e[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Sat Nov 5 16:15:08 2022 +0000

    `debug_checked_unwrap` should track its caller (#6452)
    
    # Objective
    
    When an error causes `debug_checked_unreachable` to be called, the panic message unhelpfully points to the function definition instead of the place that caused the error.
    
    ## Solution
    
    Add the `#[track_caller]` attribute in debug mode.

[33mcommit 96c9c60f806906c85b52183d60c2f78a743cb925[m
Author: targrub <targrub@gmail.com>
Date:   Sat Nov 5 14:12:04 2022 +0000

    Use `cbrt()` instead of `powf(1./3.)` (#6481)
    
    # Objective
    
    - Use cube root library function instead of handrolling.
    
    ## Solution
    
    - Instead of `powf(1./3.)` use `cbrt()`.

[33mcommit 40ea5b4ef60d7f32e7bb8c37a177fb69baaa40e6[m
Author: xtr3m3nerd <xtr3m3nerd@gmail.com>
Date:   Sat Nov 5 13:51:12 2022 +0000

    UI scaling fix (#6479)
    
    # Objective
    
    Fixes: https://github.com/bevyengine/bevy/issues/6466
    Summary: The UI Scaling example dynamically scales the UI which will dynamically allocate fonts to the font atlas surpassing the protective limit, throwing a panic.
    
    ## Solution
    
    - Set TextSettings.allow_dynamic_font_size = true for the UI Scaling example. This is the ideal solution since the dynamic changes to the UI are not continuous yet still discrete.
    - Update the panic text to reflect ui scaling as a potential cause

[33mcommit ea4aeff9ec8e204b8d4bc8cbb10c28e90fe271ff[m
Author: James Liu <contact@jamessliu.com>
Date:   Sat Nov 5 01:52:30 2022 +0000

    Remove LTO (#6472)
    
    # Objective
    #6461 introduced `lto = true` as a profile setting for release builds. This is causing the  `run-examples` CI task to timeout.
    
    ## Solution
    Remove it.

[33mcommit c019a60b39c5683656025bc9d24a02744aa59dea[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Nov 4 22:19:02 2022 +0000

    Add "end of main pass post processing" render graph node (#6468)
    
    # Objective
    
    Bevy UI (and third party plugins) currently have no good way to position themselves after all post processing effects. They currently use the tonemapping node, but this is not adequate if there is anything after tonemapping (such as FXAA).
    
    ## Solution
    
    Add a logical `END_MAIN_PASS_POST_PROCESSING` RenderGraph node that main pass post processing effects position themselves before, and things like UIs can position themselves after.

[33mcommit e5905379de5ba8c6018947da8b0665d4b17f9de3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Nov 4 21:32:09 2022 +0000

    Use new let-else syntax where possible (#6463)
    
    # Objective
    
    Let-else syntax is now stable!
    
    ## Solution
    
    Use it where possible!

[33mcommit 1bd3d8576941d09fc43fef901e1bbbf45b24c544[m
Author: Marco Buono <thecoreh@gmail.com>
Date:   Fri Nov 4 20:12:26 2022 +0000

    Take DirectionalLight's GlobalTransform into account when calculating shadow map volume (not just direction) (#6384)
    
    # Objective
    
    This PR fixes #5789, by enabling movable (and scalable) directional light shadow volumes.
    
    ## Solution
    
    This PR changes `ExtractedDirectionalLight` to hold a copy of the `DirectionalLight` entity's `GlobalTransform`, instead of just a `direction` vector. This allows the shadow map volume (as defined by the light's `shadow_projection` field) to be transformed honoring translation _and_ scale transforms, and not just rotation.
    
    It also augments the texel size calculation (used to determine the `shadow_normal_bias`) so that it now takes into account the upper bound of the x/y/z scale of the `GlobalTransform`.
    
    This change makes the directional light extraction code more consistent with point and spot lights (that already use `transform`), and allows easily moving and scaling the shadow volume along with a player entity based on camera distance/angle, immediately enabling more real world use cases until we have a more sophisticated adaptive implementation, such as the one described in #3629.
    
    **Note:** While it was previously possible to update the projection achieving a similar effect, depending on the light direction and distance to the origin, the fact that the shadow map camera was always positioned at the origin with a hardcoded `Vec3::Y` up value meant you would get sub-optimal or inconsistent/incorrect results.
    
    ---
    
    ## Changelog
    
    ### Changed
    
    - `DirectionalLight` shadow volumes now honor translation and scale transforms
    
    ## Migration Guide
    
    - If your directional lights were positioned at the origin and not scaled (the default, most common scenario) no changes are needed on your part; it just works as before;
    - If you previously had a system for dynamically updating directional light shadow projections, you might now be able to simplify your code by updating the directional light entity's transform instead;
    - In the unlikely scenario that a scene with directional lights that previously rendered shadows correctly has missing shadows, make sure your directional lights are positioned at (0, 0, 0) and are not scaled to a size that's too large or too small.

[33mcommit 1fe3589a1ada6d8583f3385126a31a8d286510ac[m
Author: JMS55 <jakob.hellermann@protonmail.com>
Date:   Fri Nov 4 17:53:55 2022 +0000

    Improve BloomSettings docs (#6465)
    
    
    
    Co-authored-by: JMS55 <47158642+JMS55@users.noreply.github.com>
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>
    Co-authored-by: DGriffin91 <github@dgdigital.net>

[33mcommit 9dd019bf862fcfc9ef0afea8028f2390f10a4891[m
Author: Thierry Berger <contact@thierryberger.com>
Date:   Fri Nov 4 17:53:54 2022 +0000

    Change Detection Benchmarks (#4972)
    
    # Objective
    
    Fixes #4883.
    
    ## Solution
    
    - Add benchmarks for Changed and Added
    
    Disclaimer: I'm not that much familiar with benchmarking.

[33mcommit b0bd8722f33f2b31f281358c8f4d9cfa4056ed77[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Fri Nov 4 17:30:40 2022 +0000

    Fix unsound `EntityMut::remove_children`. Add `EntityMut::world_scope` (#6464)
    
    `EntityMut::remove_children` does not call `self.update_location()` which is unsound.
    Verified by adding the following assertion, which fails when running the tests.
    ```rust
    let before = self.location();
    self.update_location();
    assert_eq!(before, self.location());
    ```
    
    I also removed incorrect messages like "parent entity is not modified" and the unhelpful "Inserting a bundle in the children entities may change the parent entity's location if they were of the same archetype" which might lead people to think that's the *only* thing that can change the entity's location.
    
    # Changelog
    Added `EntityMut::world_scope`.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 3a14ae40eea1d430c56ae6cdd3b9bdc1037656a6[m
Author: Charles <c.giguere42@gmail.com>
Date:   Fri Nov 4 11:42:23 2022 +0000

    Remove Camera2d in bloom example (#6462)
    
    # Objective
    
    The bloom example has a 2d camera for the UI. This is an artifact of an older version of bevy. All cameras can render the UI now.
    
    ## Solution
    
    Remove the 2d camera

[33mcommit ec8c8fbc8a960acdfc4894cd56b3c13147c32fdb[m
Author: James Liu <contact@jamessliu.com>
Date:   Fri Nov 4 06:04:55 2022 +0000

    Remove unnecesary branches/panics from Query accesses (#6461)
    
    # Objective
    Supercedes #6452. Upon inspection of the [generated assembly](https://gist.github.com/james7132/c2740c6941b80d7912f1e8888e223cbb#file-original-s) of a [simple Bevy binary](https://gist.github.com/james7132/c2740c6941b80d7912f1e8888e223cbb#file-source-rs) compiled with `cargo rustc --release -- --emit asm`, it's apparent that there are multiple unnecessary branches in the generated assembly:
    
    ```assembly
    .LBB5_5:
            cmpq    %r10, %r11
            je      .LBB5_15
            movq    (%r11), %rcx
            movq    328(%r15), %rdx
            cmpq    %rdx, %rcx
            jae     .LBB5_14
            movq    312(%r15), %rdi
            leaq    (%rcx,%rcx,2), %rcx
            shlq    $5, %rcx
            movq    336(%r12), %rdx
            movq    64(%rdi,%rcx), %rax
            cmpq    %rdx, %rax
            jbe     .LBB5_4
            leaq    (%rdi,%rcx), %rsi
            movq    48(%rsi), %rbp
            shlq    $4, %rdx
            cmpq    $0, (%rbp,%rdx)
            je      .LBB5_4
            movq    344(%r12), %rbx
            cmpq    %rbx, %rax
            jbe     .LBB5_4
            shlq    $4, %rbx
            cmpq    $0, (%rbp,%rbx)
            je      .LBB5_4
            addq    $8, %r11
            movq    88(%rdi,%rcx), %rcx
            testq   %rcx, %rcx
            je      .LBB5_5
            movq    (%rsi), %rax
            movq    8(%rbp,%rdx), %rdx
            leaq    (%rdx,%rdx,4), %rdi
            shlq    $4, %rdi
            movq    32(%rax,%rdi), %rdx
            movq    56(%rax,%rdi), %r8
            movq    8(%rbp,%rbx), %rbp
            leaq    (%rbp,%rbp,4), %rbp
            shlq    $4, %rbp
            movq    32(%rax,%rbp), %r9
            xorl    %ebp, %ebp
            jmp     .LBB5_13
            .p2align        4, 0x90
    ```
    
    Almost every one of the instructions starting with `j` is a potential branch, which can significantly slow down accesses. Of these, two labels are both common and never used:
    
    ```asm
    .LBB5_14:
            leaq    __unnamed_2(%rip), %r8
            callq   _ZN4core9panicking18panic_bounds_check17h70367088e72af65aE
            ud2
    .LBB5_4:
            callq   _ZN8bevy_ecs5query25debug_checked_unreachable17h0855ff520ceaea77E
            ud2
            .seh_endproc
    ```
    
    These correpsond to subprocedure calls to panicking due to out of bounds from indexing `Tables` and `debug_checked_unreadable`. Both of which should be inlined and optimized out, but are not.
    
    ## Solution
    Make `debug_checked_unreachable` a macro to forcibly inline either `unreachable!()` in debug builds, and `std::hint::unreachable_unchecked()` in release mode. Replace the `Tables` and `Archetype` index access with `get(id).unwrap_or_else(|| debug_checked_unreachable!())` to assume that the table or archetype provided exists.
    
    This has no external breaking change of any kind.
    
    The equivalent section of code with these changes removes most of the conditional jump instructions:
    
    ```asm
    .LBB5_5:
            movss   (%rbx,%rbp,4), %xmm0
            movl    %r14d, 4(%r8,%rbp,8)
            addss   (%rdi,%rbp,4), %xmm0
            movss   %xmm0, (%rdi,%rbp,4)
            incq    %rbp
    .LBB5_1:
            cmpq    %rdx, %rbp
            jne     .LBB5_5
            .p2align        4, 0x90
    .LBB5_2:
            cmpq    %rcx, %rax
            je      .LBB5_6
            movq    (%rax), %rdx
            addq    $8, %rax
            movq    312(%rsi), %rbp
            leaq    (%rdx,%rdx,2), %rbx
            shlq    $5, %rbx
            movq    88(%rbp,%rbx), %rdx
            testq   %rdx, %rdx
            je      .LBB5_2
            leaq    (%rbx,%rbp), %r8
            movq    336(%r15), %rdi
            movq    344(%r15), %r9
            movq    48(%rbp,%rbx), %r10
            shlq    $4, %rdi
            movq    (%r8), %rbx
            movq    8(%r10,%rdi), %rdi
            leaq    (%rdi,%rdi,4), %rbp
            shlq    $4, %rbp
            movq    32(%rbx,%rbp), %rdi
            movq    56(%rbx,%rbp), %r8
            shlq    $4, %r9
            movq    8(%r10,%r9), %rbp
            leaq    (%rbp,%rbp,4), %rbp
            shlq    $4, %rbp
            movq    32(%rbx,%rbp), %rbx
            xorl    %ebp, %ebp
            jmp     .LBB5_5
    .LBB5_6:
            addq    $40, %rsp
            popq    %rbx
            popq    %rbp
            popq    %rdi
            popq    %rsi
            popq    %r14
            popq    %r15
            retq
            .seh_endproc
    
    ```
    
    ## Performance
    
    Microbenchmarks results:
    
    <details>
    
    ```
    group                                                    main                                     no-panic-query
    -----                                                    ----                                     --------------
    busy_systems/01x_entities_03_systems                     1.20     42.4Â±2.66Âµs        ? ?/sec      1.00     35.3Â±1.68Âµs        ? ?/sec
    busy_systems/01x_entities_06_systems                     1.32     83.8Â±3.50Âµs        ? ?/sec      1.00     63.6Â±1.72Âµs        ? ?/sec
    busy_systems/01x_entities_09_systems                     1.15    113.3Â±8.90Âµs        ? ?/sec      1.00     98.2Â±6.15Âµs        ? ?/sec
    busy_systems/01x_entities_12_systems                     1.27   160.8Â±32.44Âµs        ? ?/sec      1.00    126.6Â±4.70Âµs        ? ?/sec
    busy_systems/01x_entities_15_systems                     1.12    179.6Â±3.71Âµs        ? ?/sec      1.00   160.3Â±11.03Âµs        ? ?/sec
    busy_systems/02x_entities_03_systems                     1.18     76.8Â±3.14Âµs        ? ?/sec      1.00     65.2Â±3.17Âµs        ? ?/sec
    busy_systems/02x_entities_06_systems                     1.16    144.6Â±6.10Âµs        ? ?/sec      1.00    124.5Â±5.14Âµs        ? ?/sec
    busy_systems/02x_entities_09_systems                     1.19    215.3Â±9.18Âµs        ? ?/sec      1.00    181.5Â±5.67Âµs        ? ?/sec
    busy_systems/02x_entities_12_systems                     1.20    266.7Â±8.33Âµs        ? ?/sec      1.00    222.0Â±9.53Âµs        ? ?/sec
    busy_systems/02x_entities_15_systems                     1.23   338.8Â±10.53Âµs        ? ?/sec      1.00    276.3Â±6.94Âµs        ? ?/sec
    busy_systems/03x_entities_03_systems                     1.43    113.5Â±5.06Âµs        ? ?/sec      1.00     79.6Â±1.49Âµs        ? ?/sec
    busy_systems/03x_entities_06_systems                     1.38   217.3Â±12.67Âµs        ? ?/sec      1.00    157.5Â±3.07Âµs        ? ?/sec
    busy_systems/03x_entities_09_systems                     1.23   308.8Â±24.75Âµs        ? ?/sec      1.00    251.6Â±8.93Âµs        ? ?/sec
    busy_systems/03x_entities_12_systems                     1.05   347.7Â±12.43Âµs        ? ?/sec      1.00   330.6Â±11.43Âµs        ? ?/sec
    busy_systems/03x_entities_15_systems                     1.13   455.5Â±13.88Âµs        ? ?/sec      1.00   401.7Â±17.29Âµs        ? ?/sec
    busy_systems/04x_entities_03_systems                     1.24    144.7Â±5.89Âµs        ? ?/sec      1.00    116.9Â±6.29Âµs        ? ?/sec
    busy_systems/04x_entities_06_systems                     1.24   282.8Â±21.40Âµs        ? ?/sec      1.00   228.6Â±21.31Âµs        ? ?/sec
    busy_systems/04x_entities_09_systems                     1.35   431.8Â±14.10Âµs        ? ?/sec      1.00    319.6Â±9.83Âµs        ? ?/sec
    busy_systems/04x_entities_12_systems                     1.16   493.8Â±22.87Âµs        ? ?/sec      1.00   424.9Â±15.24Âµs        ? ?/sec
    busy_systems/04x_entities_15_systems                     1.10   587.5Â±23.25Âµs        ? ?/sec      1.00   531.7Â±16.32Âµs        ? ?/sec
    busy_systems/05x_entities_03_systems                     1.14    148.2Â±9.61Âµs        ? ?/sec      1.00    129.5Â±4.32Âµs        ? ?/sec
    busy_systems/05x_entities_06_systems                     1.31   359.7Â±17.46Âµs        ? ?/sec      1.00   273.6Â±10.55Âµs        ? ?/sec
    busy_systems/05x_entities_09_systems                     1.22   473.5Â±23.11Âµs        ? ?/sec      1.00   389.3Â±13.62Âµs        ? ?/sec
    busy_systems/05x_entities_12_systems                     1.05   562.9Â±20.76Âµs        ? ?/sec      1.00   536.5Â±24.35Âµs        ? ?/sec
    busy_systems/05x_entities_15_systems                     1.23   818.5Â±28.70Âµs        ? ?/sec      1.00   666.6Â±45.87Âµs        ? ?/sec
    contrived/01x_entities_03_systems                        1.27     27.5Â±0.49Âµs        ? ?/sec      1.00     21.6Â±1.71Âµs        ? ?/sec
    contrived/01x_entities_06_systems                        1.22     49.9Â±1.18Âµs        ? ?/sec      1.00     40.7Â±2.62Âµs        ? ?/sec
    contrived/01x_entities_09_systems                        1.30     72.3Â±2.39Âµs        ? ?/sec      1.00     55.4Â±2.60Âµs        ? ?/sec
    contrived/01x_entities_12_systems                        1.28     94.3Â±9.44Âµs        ? ?/sec      1.00     73.7Â±3.62Âµs        ? ?/sec
    contrived/01x_entities_15_systems                        1.25    118.0Â±2.43Âµs        ? ?/sec      1.00     94.1Â±3.99Âµs        ? ?/sec
    contrived/02x_entities_03_systems                        1.23     41.6Â±1.71Âµs        ? ?/sec      1.00     33.7Â±2.30Âµs        ? ?/sec
    contrived/02x_entities_06_systems                        1.19     78.6Â±2.63Âµs        ? ?/sec      1.00     65.9Â±2.35Âµs        ? ?/sec
    contrived/02x_entities_09_systems                        1.28    113.6Â±3.60Âµs        ? ?/sec      1.00     88.6Â±3.60Âµs        ? ?/sec
    contrived/02x_entities_12_systems                        1.20    146.4Â±5.75Âµs        ? ?/sec      1.00    121.7Â±3.35Âµs        ? ?/sec
    contrived/02x_entities_15_systems                        1.23    178.5Â±4.86Âµs        ? ?/sec      1.00    145.7Â±4.00Âµs        ? ?/sec
    contrived/03x_entities_03_systems                        1.42     58.3Â±2.77Âµs        ? ?/sec      1.00     41.1Â±1.54Âµs        ? ?/sec
    contrived/03x_entities_06_systems                        1.32    108.5Â±7.30Âµs        ? ?/sec      1.00     82.4Â±4.86Âµs        ? ?/sec
    contrived/03x_entities_09_systems                        1.23    153.7Â±4.61Âµs        ? ?/sec      1.00    125.0Â±4.76Âµs        ? ?/sec
    contrived/03x_entities_12_systems                        1.18    197.5Â±5.12Âµs        ? ?/sec      1.00    166.8Â±8.14Âµs        ? ?/sec
    contrived/03x_entities_15_systems                        1.23    238.8Â±6.38Âµs        ? ?/sec      1.00    194.6Â±4.55Âµs        ? ?/sec
    contrived/04x_entities_03_systems                        1.34     66.4Â±3.42Âµs        ? ?/sec      1.00     49.5Â±1.98Âµs        ? ?/sec
    contrived/04x_entities_06_systems                        1.27    134.3Â±4.86Âµs        ? ?/sec      1.00    105.8Â±3.58Âµs        ? ?/sec
    contrived/04x_entities_09_systems                        1.26    193.2Â±3.83Âµs        ? ?/sec      1.00    153.0Â±5.60Âµs        ? ?/sec
    contrived/04x_entities_12_systems                        1.16    237.1Â±5.78Âµs        ? ?/sec      1.00   204.9Â±18.77Âµs        ? ?/sec
    contrived/04x_entities_15_systems                        1.17    289.2Â±4.76Âµs        ? ?/sec      1.00    246.3Â±8.57Âµs        ? ?/sec
    contrived/05x_entities_03_systems                        1.26     80.4Â±2.90Âµs        ? ?/sec      1.00     63.7Â±3.07Âµs        ? ?/sec
    contrived/05x_entities_06_systems                        1.27   161.6Â±13.47Âµs        ? ?/sec      1.00    127.2Â±5.59Âµs        ? ?/sec
    contrived/05x_entities_09_systems                        1.22    228.0Â±7.76Âµs        ? ?/sec      1.00    186.2Â±7.68Âµs        ? ?/sec
    contrived/05x_entities_12_systems                        1.20    289.5Â±6.21Âµs        ? ?/sec      1.00    241.8Â±7.52Âµs        ? ?/sec
    contrived/05x_entities_15_systems                        1.18   357.3Â±11.24Âµs        ? ?/sec      1.00    302.7Â±7.21Âµs        ? ?/sec
    heavy_compute/base                                       1.01    302.4Â±3.52Âµs        ? ?/sec      1.00    300.2Â±3.40Âµs        ? ?/sec
    iter_fragmented/base                                     1.00    348.1Â±7.51ns        ? ?/sec      1.01    351.9Â±8.32ns        ? ?/sec
    iter_fragmented/foreach                                  1.03   239.8Â±23.78ns        ? ?/sec      1.00   233.8Â±18.12ns        ? ?/sec
    iter_fragmented/foreach_wide                             1.00      3.9Â±0.13Âµs        ? ?/sec      1.02      4.0Â±0.22Âµs        ? ?/sec
    iter_fragmented/wide                                     1.18      4.6Â±0.15Âµs        ? ?/sec      1.00      3.9Â±0.10Âµs        ? ?/sec
    iter_fragmented_sparse/base                              1.02      8.1Â±0.15ns        ? ?/sec      1.00      7.9Â±0.56ns        ? ?/sec
    iter_fragmented_sparse/foreach                           1.00      7.8Â±0.22ns        ? ?/sec      1.01      7.9Â±0.62ns        ? ?/sec
    iter_fragmented_sparse/foreach_wide                      1.00     37.2Â±1.17ns        ? ?/sec      1.10     40.9Â±0.95ns        ? ?/sec
    iter_fragmented_sparse/wide                              1.09     48.4Â±2.13ns        ? ?/sec      1.00    44.5Â±18.34ns        ? ?/sec
    iter_simple/base                                         1.02      8.4Â±0.10Âµs        ? ?/sec      1.00      8.2Â±0.14Âµs        ? ?/sec
    iter_simple/foreach                                      1.01      8.3Â±0.07Âµs        ? ?/sec      1.00      8.2Â±0.09Âµs        ? ?/sec
    iter_simple/foreach_sparse_set                           1.00     25.3Â±0.32Âµs        ? ?/sec      1.02     25.7Â±0.42Âµs        ? ?/sec
    iter_simple/foreach_wide                                 1.03     41.1Â±0.94Âµs        ? ?/sec      1.00     39.9Â±0.41Âµs        ? ?/sec
    iter_simple/foreach_wide_sparse_set                      1.05    123.6Â±2.05Âµs        ? ?/sec      1.00    118.1Â±2.78Âµs        ? ?/sec
    iter_simple/sparse_set                                   1.14     30.5Â±1.40Âµs        ? ?/sec      1.00     26.9Â±0.64Âµs        ? ?/sec
    iter_simple/system                                       1.01      8.4Â±0.25Âµs        ? ?/sec      1.00      8.4Â±0.11Âµs        ? ?/sec
    iter_simple/wide                                         1.18     48.2Â±0.62Âµs        ? ?/sec      1.00     40.7Â±0.38Âµs        ? ?/sec
    iter_simple/wide_sparse_set                              1.12   140.8Â±21.56Âµs        ? ?/sec      1.00    126.0Â±2.30Âµs        ? ?/sec
    query_get/50000_entities_sparse                          1.17    378.6Â±7.60Âµs        ? ?/sec      1.00   324.1Â±23.17Âµs        ? ?/sec
    query_get/50000_entities_table                           1.08   330.9Â±10.90Âµs        ? ?/sec      1.00    306.8Â±4.98Âµs        ? ?/sec
    query_get_component/50000_entities_sparse                1.00   976.7Â±19.55Âµs        ? ?/sec      1.00   979.8Â±35.87Âµs        ? ?/sec
    query_get_component/50000_entities_table                 1.00  1029.0Â±15.11Âµs        ? ?/sec      1.05  1080.0Â±59.18Âµs        ? ?/sec
    query_get_component_simple/system                        1.13   839.7Â±14.18Âµs        ? ?/sec      1.00   742.8Â±10.72Âµs        ? ?/sec
    query_get_component_simple/unchecked                     1.01   909.0Â±15.17Âµs        ? ?/sec      1.00   898.0Â±13.56Âµs        ? ?/sec
    query_get_many_10/50000_calls_sparse                     1.04      5.5Â±0.54ms        ? ?/sec      1.00      5.3Â±0.67ms        ? ?/sec
    query_get_many_10/50000_calls_table                      1.01      4.9Â±0.49ms        ? ?/sec      1.00      4.8Â±0.45ms        ? ?/sec
    query_get_many_2/50000_calls_sparse                      1.28  848.4Â±210.89Âµs        ? ?/sec      1.00   664.8Â±47.69Âµs        ? ?/sec
    query_get_many_2/50000_calls_table                       1.05   779.0Â±73.85Âµs        ? ?/sec      1.00   739.2Â±83.02Âµs        ? ?/sec
    query_get_many_5/50000_calls_sparse                      1.05      2.4Â±0.37ms        ? ?/sec      1.00      2.3Â±0.33ms        ? ?/sec
    query_get_many_5/50000_calls_table                       1.00  1939.9Â±75.22Âµs        ? ?/sec      1.04      2.0Â±0.19ms        ? ?/sec
    run_criteria/yes_using_query/001_systems                 1.00      3.7Â±0.38Âµs        ? ?/sec      1.30      4.9Â±0.14Âµs        ? ?/sec
    run_criteria/yes_using_query/006_systems                 1.00      8.9Â±0.40Âµs        ? ?/sec      1.17     10.3Â±0.57Âµs        ? ?/sec
    run_criteria/yes_using_query/011_systems                 1.00     13.9Â±0.49Âµs        ? ?/sec      1.08     15.0Â±0.89Âµs        ? ?/sec
    run_criteria/yes_using_query/016_systems                 1.00     18.8Â±0.74Âµs        ? ?/sec      1.00     18.8Â±1.43Âµs        ? ?/sec
    run_criteria/yes_using_query/021_systems                 1.07     24.1Â±0.87Âµs        ? ?/sec      1.00     22.6Â±1.58Âµs        ? ?/sec
    run_criteria/yes_using_query/026_systems                 1.04     27.9Â±0.62Âµs        ? ?/sec      1.00     26.8Â±1.71Âµs        ? ?/sec
    run_criteria/yes_using_query/031_systems                 1.09     33.3Â±1.03Âµs        ? ?/sec      1.00     30.5Â±2.18Âµs        ? ?/sec
    run_criteria/yes_using_query/036_systems                 1.14     38.7Â±0.80Âµs        ? ?/sec      1.00     33.9Â±1.75Âµs        ? ?/sec
    run_criteria/yes_using_query/041_systems                 1.18     43.7Â±1.07Âµs        ? ?/sec      1.00     37.0Â±2.39Âµs        ? ?/sec
    run_criteria/yes_using_query/046_systems                 1.14     47.6Â±1.16Âµs        ? ?/sec      1.00     41.9Â±2.09Âµs        ? ?/sec
    run_criteria/yes_using_query/051_systems                 1.17     52.9Â±2.04Âµs        ? ?/sec      1.00     45.3Â±1.75Âµs        ? ?/sec
    run_criteria/yes_using_query/056_systems                 1.25     59.2Â±2.38Âµs        ? ?/sec      1.00     47.2Â±2.01Âµs        ? ?/sec
    run_criteria/yes_using_query/061_systems                 1.28    66.1Â±15.84Âµs        ? ?/sec      1.00     51.5Â±2.47Âµs        ? ?/sec
    run_criteria/yes_using_query/066_systems                 1.28     70.2Â±2.57Âµs        ? ?/sec      1.00     54.7Â±2.58Âµs        ? ?/sec
    run_criteria/yes_using_query/071_systems                 1.30     75.5Â±2.27Âµs        ? ?/sec      1.00     58.2Â±3.31Âµs        ? ?/sec
    run_criteria/yes_using_query/076_systems                 1.26     81.5Â±2.66Âµs        ? ?/sec      1.00     64.5Â±3.13Âµs        ? ?/sec
    run_criteria/yes_using_query/081_systems                 1.29     89.7Â±2.58Âµs        ? ?/sec      1.00     69.3Â±3.47Âµs        ? ?/sec
    run_criteria/yes_using_query/086_systems                 1.33     95.6Â±3.39Âµs        ? ?/sec      1.00     71.8Â±3.48Âµs        ? ?/sec
    run_criteria/yes_using_query/091_systems                 1.25    102.0Â±3.67Âµs        ? ?/sec      1.00     81.4Â±4.82Âµs        ? ?/sec
    run_criteria/yes_using_query/096_systems                 1.33    111.7Â±3.29Âµs        ? ?/sec      1.00     83.8Â±4.15Âµs        ? ?/sec
    run_criteria/yes_using_query/101_systems                 1.29   113.2Â±12.04Âµs        ? ?/sec      1.00     87.7Â±5.15Âµs        ? ?/sec
    world_query_for_each/50000_entities_sparse               1.00     47.4Â±0.51Âµs        ? ?/sec      1.00     47.3Â±0.33Âµs        ? ?/sec
    world_query_for_each/50000_entities_table                1.00     27.2Â±0.50Âµs        ? ?/sec      1.00     27.2Â±0.17Âµs        ? ?/sec
    world_query_get/50000_entities_sparse_wide               1.09    210.5Â±1.78Âµs        ? ?/sec      1.00    192.5Â±2.61Âµs        ? ?/sec
    world_query_get/50000_entities_table                     1.00    127.7Â±2.09Âµs        ? ?/sec      1.07    136.2Â±5.95Âµs        ? ?/sec
    world_query_get/50000_entities_table_wide                1.00    209.8Â±2.37Âµs        ? ?/sec      1.15    240.6Â±2.04Âµs        ? ?/sec
    world_query_iter/50000_entities_sparse                   1.00     54.2Â±0.36Âµs        ? ?/sec      1.01     54.7Â±0.61Âµs        ? ?/sec
    world_query_iter/50000_entities_table                    1.00     27.2Â±0.31Âµs        ? ?/sec      1.00     27.3Â±0.64Âµs        ? ?/sec
    ```
    </details>
    
    NOTE: This PR includes a change to enable LTO on our benchmarks to get a "fully optimized" baseline for our benchmarks. Both the main and the current PR's results were with LTO enabled.

[33mcommit 2c5d072e76638fd40ef798064c42ab368d1405ff[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Fri Nov 4 03:45:17 2022 +0000

    Allow passing `glam` vector types as vertex attributes (#6442)
    
    Allow passing `Vec`s of glam vector types as vertex attributes.
    Alternative to #4548 and #2719
    
    Also used some macros to cut down on all the repetition.
    
    # Migration Guide
    Implementations of `From<Vec<[u16; 4]>>` and `From<Vec<[u8; 4]>>` for `VertexAttributeValues` have been removed.
    I you're passing either `Vec<[u16; 4]>` or `Vec<[u8; 4]>` into `Mesh::insert_attribute` it will now require wrapping it with right the `VertexAttributeValues` enum variant.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 97f7a1a99c4d51d18e215995f0f1018290f79c1d[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Fri Nov 4 02:22:54 2022 +0000

    bevy_reflect: Binary formats (#6140)
    
    # Objective
    
    Closes #5934
    
    Currently it is not possible to de/serialize data to non-self-describing formats using reflection.
    
    ## Solution
    
    Add support for non-self-describing de/serialization using reflection.
    
    This allows us to use binary formatters, like [`postcard`](https://crates.io/crates/postcard):
    
    ```rust
    #[derive(Reflect, FromReflect, Debug, PartialEq)]
    struct Foo {
      data: String
    }
    
    let mut registry = TypeRegistry::new();
    registry.register::<Foo>();
    
    let input = Foo {
      data: "Hello world!".to_string()
    };
    
    // === Serialize! === //
    let serializer = ReflectSerializer::new(&input, &registry);
    let bytes: Vec<u8> = postcard::to_allocvec(&serializer).unwrap();
    
    println!("{:?}", bytes); // Output: [129, 217, 61, 98, ...]
    
    // === Deserialize! === //
    let deserializer = UntypedReflectDeserializer::new(&registry);
    
    let dynamic_output = deserializer
      .deserialize(&mut postcard::Deserializer::from_bytes(&bytes))
      .unwrap();
    
    let output = <Foo as FromReflect>::from_reflect(dynamic_output.as_ref()).unwrap();
    
    assert_eq!(expected, output); // OK!
    ```
    
    #### Crates Tested
    
    - ~~[`rmp-serde`](https://crates.io/crates/rmp-serde)~~ Apparently, this _is_ self-describing
    - ~~[`bincode` v2.0.0-rc.1](https://crates.io/crates/bincode/2.0.0-rc.1) (using [this PR](https://github.com/bincode-org/bincode/pull/586))~~ This actually works for the latest release (v1.3.3) of [`bincode`](https://crates.io/crates/bincode) as well. You just need to be sure to use fixed-int encoding.
    - [`postcard`](https://crates.io/crates/postcard)
    
    ## Future Work
    
    Ideally, we would refactor the `serde` module, but I don't think I'll do that in this PR so as to keep the diff relatively small (and to avoid any painful rebases). This should probably be done once this is merged, though.
    
    Some areas we could improve with a refactor:
    
    * Split deserialization logic across multiple files
    * Consolidate helper functions/structs
    * Make the logic more DRY
    
    ---
    
    ## Changelog
    
    - Add support for non-self-describing de/serialization using reflection.
    
    
    Co-authored-by: Gino Valente <49806985+MrGVSV@users.noreply.github.com>

[33mcommit 4c4f47697c087930ea831c7a5c39b12f0405dd60[m
Author: JMS55 <jakob.hellermann@protonmail.com>
Date:   Fri Nov 4 01:34:12 2022 +0000

    Bloom (#6397)
    
    # Objective
    
    - Adds a bloom pass for HDR-enabled Camera3ds.
    - Supersedes (and all credit due to!) https://github.com/bevyengine/bevy/pull/3430 and https://github.com/bevyengine/bevy/pull/2876
    
    ![image](https://user-images.githubusercontent.com/47158642/198698783-228edc00-20b5-4218-a613-331ccd474f38.png)
    
    ## Solution
    
    - A threshold is applied to isolate emissive samples, and then a series of downscale and upscaling passes are applied and composited together.
    - Bloom is applied to 2d or 3d Cameras with hdr: true and a BloomSettings component.
    
    ---
    
    ## Changelog
    
    - Added a `core_pipeline::bloom::BloomSettings` component.
    - Added `BloomNode` that runs between the main pass and tonemapping.
    - Added a `BloomPlugin` that is loaded as part of CorePipelinePlugin.
    - Added a bloom example project.
    
    Co-authored-by: JMS55 <47158642+JMS55@users.noreply.github.com>
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>
    Co-authored-by: DGriffin91 <github@dgdigital.net>

[33mcommit 2e653e5774a6ddb0f4b789a27ff51f8927b20439[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Nov 3 22:50:41 2022 +0000

    Fix spawning empty bundles (#6425)
    
    # Objective
    
    Alternative to #6424
    Fixes #6226
    
    Fixes spawning empty bundles
    
    ## Solution
    
    Add `BundleComponentStatus` trait and implement it for `AddBundle` and a new `SpawnBundleStatus` type (which always returns an Added status). `write_components` is now generic on `BundleComponentStatus` instead of taking `AddBundle` directly. This means BundleSpawner can now avoid needing AddBundle from the Empty archetype, which means BundleSpawner no longer needs a reference to the original archetype.
    
    In theory this cuts down on the work done in `write_components` when spawning, but I'm seeing no change in the spawn benchmarks.

[33mcommit e6a016458768312e72ad669e49cd082a389272a3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Nov 3 21:14:03 2022 +0000

    Specialize UI pipeline on "hdr-ness" (#6459)
    
    # Objective
    
    The UI pass in HDR breaks currently because the color attachment format does not match the HDR ViewTarget.
    
    ## Solution
    
    Specialize the UI pipeline on "hdr-ness" and select the appropriate format (like we do in the other built in pipelines).

[33mcommit fc56c686af20f5a91aae436511a634b758d31643[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Thu Nov 3 20:37:32 2022 +0000

    bevy_pbr: Fix incorrect and unnecessary normal-mapping code (#5766)
    
    # Objective
    
    - Fixes #4019
    - Fix lighting of double-sided materials when using a negative scale
    - The FlightHelmet.gltf model's hose uses a double-sided material. Loading the model with a uniform scale of -1.0, and comparing against Blender, it was identified that negating the world-space tangent, bitangent, and interpolated normal produces incorrect lighting. Discussion with Morten Mikkelsen clarified that this is both incorrect and unnecessary.
    
    ## Solution
    
    - Remove the code that negates the T, B, and N vectors (the interpolated world-space tangent, calculated world-space bitangent, and interpolated world-space normal) when seeing the back face of a double-sided material with negative scale.
    - Negate the world normal for a double-sided back face only when not using normal mapping
    
    ### Before, on `main`, flipping T, B, and N
    
    <img width="932" alt="Screenshot 2022-08-22 at 15 11 53" src="https://user-images.githubusercontent.com/302146/185965366-f776ff2c-cfa1-46d1-9c84-fdcb399c273c.png">
    
    ### After, on this PR
    
    <img width="932" alt="Screenshot 2022-08-22 at 15 12 11" src="https://user-images.githubusercontent.com/302146/185965420-8be493e2-3b1a-4188-bd13-fd6b17a76fe7.png">
    
    ### Double-sided material without normal maps
    
    https://user-images.githubusercontent.com/302146/185988113-44a384e7-0b55-4946-9b99-20f8c803ab7e.mp4
    
    ---
    
    ## Changelog
    
    - Fixed: Lighting of normal-mapped, double-sided materials applied to models with negative scale
    - Fixed: Lighting and shadowing of back faces with no normal-mapping and a double-sided material
    
    ## Migration Guide
    
    `prepare_normal` from the `bevy_pbr::pbr_functions` shader import has been reworked.
    
    Before:
    ```rust
        pbr_input.world_normal = in.world_normal;
    
        pbr_input.N = prepare_normal(
            pbr_input.material.flags,
            in.world_normal,
    #ifdef VERTEX_TANGENTS
    #ifdef STANDARDMATERIAL_NORMAL_MAP
            in.world_tangent,
    #endif
    #endif
            in.uv,
            in.is_front,
        );
    ```
    
    After:
    ```rust
        pbr_input.world_normal = prepare_world_normal(
            in.world_normal,
            (material.flags & STANDARD_MATERIAL_FLAGS_DOUBLE_SIDED_BIT) != 0u,
            in.is_front,
        );
    
        pbr_input.N = apply_normal_mapping(
            pbr_input.material.flags,
            pbr_input.world_normal,
    #ifdef VERTEX_TANGENTS
    #ifdef STANDARDMATERIAL_NORMAL_MAP
            in.world_tangent,
    #endif
    #endif
            in.uv,
        );
    ```

[33mcommit 30e35764a127da382e300cd2eb390079322c5ece[m
Author: Boxy <supbscripter@gmail.com>
Date:   Thu Nov 3 16:33:05 2022 +0000

    Replace `WorldQueryGats` trait with actual gats (#6319)
    
    # Objective
    
    Replace `WorldQueryGats` trait with actual gats
    
    ## Solution
    
    Replace `WorldQueryGats` trait with actual gats
    
    ---
    
    ## Changelog
    
    - Replaced `WorldQueryGats` trait with actual gats
    
    ## Migration Guide
    
    - Replace usage of `WorldQueryGats` assoc types with the actual gats on `WorldQuery` trait

[33mcommit 157f2c1584a7b535b07fdb43871cab7fed643ad1[m
Author: Yasha Borevich <jkbo@funexpected.org>
Date:   Thu Nov 3 15:33:41 2022 +0000

    Respect mipmap_filter when create ImageDescriptor with linear()/nearest() (#6349)
    
    Respect mipmap_filter when create ImageDescriptor with linear()/nearest()
    
    # Objective
    
    Fixes #6348
    
    ## Migration Guide
    
    This PR changes default `ImageSettings` and may lead to unexpected behaviour for existing projects with mipmapped textures. Users should provide custom `ImageSettings` resource with `mipmap_filter=FilterMode::Nearest` if they want to  keep old behaviour.
    
    Co-authored-by: Yakov Borevich <j.borevich@gmail.com>

[33mcommit aa742395d3d0f4459b1fe74fbb248c2e68819450[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Thu Nov 3 15:09:27 2022 +0000

    Fix trybuild tests broken by rust 1.65 (#6457)
    
    # Objective
    
    - Fix tests that now fail in rust 1.65
    
    ## Solution
    
    - Update `.stderr` files with new output

[33mcommit 262b3fc40d7c4171dd585f7127cfb54573edb170[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Thu Nov 3 12:38:47 2022 +0000

    Fix `mesh.wgsl` error for meshes without normals (#6439)
    
    # Objective
    Split `model` assignment out of `#ifdef VERTEX_NORMALS`.
    Remove outdated code/comments talking about required mesh attributes.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 701ed8c59fa2ee2660ce7e8fb6c07d9df030f6a9[m
Author: Kurt KÃ¼hnert <kurt@kuehnert.dev>
Date:   Thu Nov 3 07:09:51 2022 +0000

    Increase the `MAX_DIRECTIONAL_LIGHTS` from 1 to 10 (#6066)
    
    # Objective
    
    Currently we are limiting the amount of direction lights in a scene to one.
    
    ## Solution
    
    Increase the amount of direction lights from 1 to 10.
    This still is not a perfect solution, but should unblock many use cases.
    We could probably just store the directional lights similar to the point lights in an storage buffer, allowing for an variable amount of directional lights.
    
    
    Co-authored-by: Kurt KÃ¼hnert <51823519+Ku95@users.noreply.github.com>

[33mcommit 54a1e51623152172142497424c53f3dccb8b7eb7[m
Author: James Liu <contact@jamessliu.com>
Date:   Wed Nov 2 23:40:08 2022 +0000

    TaskPool Panic Handling (#6443)
    
    # Objective
    Right now, the `TaskPool` implementation allows panics to permanently kill worker threads upon panicking. This is currently non-recoverable without using a `std::panic::catch_unwind` in every scheduled task. This is poor ergonomics and even poorer developer experience. This is exacerbated by #2250 as these threads are global and cannot be replaced after initialization.
    
    Removes the need for temporary fixes like #4998. Fixes #4996. Fixes #6081. Fixes #5285. Fixes #5054. Supersedes #2307.
    
    ## Solution
    
    The current solution is to wrap `Executor::run` in `TaskPool` with a `catch_unwind`, and discarding the potential panic. This was taken straight from [smol](https://github.com/smol-rs/smol/blob/404c7bcc0aea59b82d7347058043b8de7133241c/src/spawn.rs#L44)'s current implementation. ~~However, this is not entirely ideal as:~~
    
     - ~~the signaled to the awaiting task. We would need to change `Task<T>` to use `async_task::FallibleTask` internally, and even then it doesn't signal *why* it panicked, just that it did.~~ (See below).
     - ~~no error is logged of any kind~~ (See below)
     - ~~it's unclear if it drops other tasks in the executor~~ (it does not)
     - ~~This allows the ECS parallel executor to keep chugging even though a system's task has been dropped. This inevitably leads to deadlock in the executor.~~ Assuming we don't catch the unwind in ParallelExecutor, this will naturally kill the main thread.
    
    ### Alternatives
    A final solution likely will incorporate elements of any or all of the following.
    
    #### ~~Log and Ignore~~
    ~~Log the panic, drop the task, keep chugging. This only addresses the discoverability of the panic. The process will continue to run, probably deadlocking the executor. tokio's detatched tasks operate in this fashion.~~
    
    Panics already do this by default, even when caught by `catch_unwind`.
    
    #### ~~`catch_unwind` in `ParallelExecutor`~~
    ~~Add another layer catching system-level panics into the `ParallelExecutor`. How the executor continues when a core dependency of many systems fails to run is up for debate.~~
    
    `async_task::Task`  bubbles up panics already, this will transitively push panics all the way to the main thread.
    
    #### ~~Emulate/Copy `tokio::JoinHandle` with `Task<T>`~~
    ~~`tokio::JoinHandle<T>` bubbles up the panic from the underlying task when awaited. This can be transitively applied across other APIs that also use `Task<T>` like `Query::par_for_each` and `TaskPool::scope`, bubbling up the panic until it's either caught or it reaches the main thread.~~
    
    `async_task::Task`  bubbles up panics already, this will transitively push panics all the way to the main thread.
    
    #### Abort on Panic
    The nuclear option. Log the error, abort the entire process on any thread in the task pool panicking. Definitely avoids any additional infrastructure for passing the panic around, and might actually lead to more efficient code as any unwinding is optimized out. However gives the developer zero options for dealing with the issue, a seemingly poor choice for debuggability, and prevents graceful shutdown of the process. Potentially an option for handling very low-level task management (a la #4740). Roughly takes the shape of:
    
    ```rust
    struct AbortOnPanic;
    
    impl Drop for AbortOnPanic {
       fn drop(&mut self) {
         abort!();
       }
    }
    
    let guard = AbortOnPanic;
    // Run task
    std::mem::forget(AbortOnPanic);
    ```
    
    ---
    
    ## Changelog
    
    Changed: `bevy_tasks::TaskPool`'s threads  will no longer terminate permanently when a task scheduled onto them panics.
    Changed: `bevy_tasks::Task` and`bevy_tasks::Scope` will propagate panics in the spawned tasks/scopes to the parent thread.

[33mcommit 4b5a33d970c50b5e1af3d31bebd26809988ca444[m
Author: Gabriel Bourgeois <gabriel.bourgeoisv4si@gmail.com>
Date:   Wed Nov 2 22:06:04 2022 +0000

    Add z-index support with a predictable UI stack (#5877)
    
    # Objective
    
    Add consistent UI rendering and interaction where deep nodes inside two different hierarchies will never render on top of one-another by default and offer an escape hatch (z-index) for nodes to change their depth.
    
    ## The problem with current implementation
    
    The current implementation of UI rendering is broken in that regard, mainly because [it sets the Z value of the `Transform` component based on a "global Z" space](https://github.com/bevyengine/bevy/blob/main/crates/bevy_ui/src/update.rs#L43) shared by all nodes in the UI. This doesn't account for the fact that each node's final `GlobalTransform` value will be relative to its parent. This effectively makes the depth unpredictable when two deep trees are rendered on top of one-another.
    
    At the moment, it's also up to each part of the UI code to sort all of the UI nodes. The solution that's offered here does the full sorting of UI node entities once and offers the result through a resource so that all systems can use it.
    
    ## Solution
    
    ### New ZIndex component
    This adds a new optional `ZIndex` enum component for nodes which offers two mechanism:
    - `ZIndex::Local(i32)`: Overrides the depth of the node relative to its siblings.
    - `ZIndex::Global(i32)`: Overrides the depth of the node relative to the UI root. This basically allows any node in the tree to "escape" the parent and be ordered relative to the entire UI.
    
    Note that in the current implementation, omitting `ZIndex` on a node has the same result as adding `ZIndex::Local(0)`. Additionally, the "global" stacking context is essentially a way to add your node to the root stacking context, so using `ZIndex::Local(n)` on a root node (one without parent) will share that space with all nodes using `Index::Global(n)`.
    
    ### New UiStack resource
    This adds a new `UiStack` resource which is calculated from both hierarchy and `ZIndex` during UI update and contains a vector of all node entities in the UI, ordered by depth (from farthest from camera to closest). This is exposed publicly by the bevy_ui crate with the hope that it can be used for consistent ordering and to reduce the amount of sorting that needs to be done by UI systems (i.e. instead of sorting everything by `global_transform.z` in every system, this array can be iterated over).
    
    ### New z_index example
    This also adds a new z_index example that showcases the new `ZIndex` component. It's also a good general demo of the new UI stack system, because making this kind of UI was very broken with the old system (e.g. nodes would render on top of each other, not respecting hierarchy or insert order at all).
    
    ![image](https://user-images.githubusercontent.com/1060971/189015985-8ea8f989-0e9d-4601-a7e0-4a27a43a53f9.png)
    
    ---
    
    ## Changelog
    
    - Added the `ZIndex` component to bevy_ui.
    - Added the `UiStack` resource to bevy_ui, and added implementation in a new `stack.rs` module.
    - Removed the previous Z updating system from bevy_ui, because it was replaced with the above.
    - Changed bevy_ui rendering to use UiStack instead of z ordering.
    - Changed bevy_ui focus/interaction system to use UiStack instead of z ordering.
    - Added a new z_index example.
    
    ## ZIndex demo
    Here's a demo I wrote to test these features
    https://user-images.githubusercontent.com/1060971/188329295-d7beebd6-9aee-43ab-821e-d437df5dbe8a.mp4
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 334e09892b4434ab40c76222c919d2f168544ce8[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Wed Nov 2 20:40:45 2022 +0000

    Revert "Show prelude re-exports in docs (#6448)" (#6449)
    
    This reverts commit 53d387f34039c5d369159a681b279793d71dbd6b.
    
    # Objective
    
    Reverts #6448. This didn't have the intended effect: we're now getting bevy::prelude shown in the docs again.
    
    Co-authored-by: Alejandro Pascual <alejandro.pascual.pozo@gmail.com>

[33mcommit 53d387f34039c5d369159a681b279793d71dbd6b[m
Author: Alejandro Pascual <alejandro.pascual.pozo@gmail.com>
Date:   Wed Nov 2 19:35:06 2022 +0000

    Show prelude re-exports in docs (#6448)
    
    # Objective
    
    - Right now re-exports are completely hidden in prelude docs.
    - Fixes #6433
    
    ## Solution
    
    - We could show the re-exports without inlining their documentation.

[33mcommit b672465047148b753aca369f8cf82299f4fa33ea[m
Author: targrub <targrub@gmail.com>
Date:   Wed Nov 2 16:47:40 2022 +0000

    Fix doctest warnings (#6447)
    
    # Objective
    
    - Fixes doctest warnings from upcoming Rust release.
    
    ` cargo doc --workspace --all-features --no-deps --document-private-items` using `beta-x86_64-pc-windows-msvc (default)
    rustc 1.66.0-beta.1 (e080cc5a6 2022-11-01)` was giving warnings on a few comments.
    
    ## Solution
    
    - Quoted the Rust code parts.

[33mcommit a8a62fcf3daf23241920ddd4e11f2f154a67a0e3[m
Author: Edvin Kjell <edvin.kjell@hotmail.com>
Date:   Wed Nov 2 15:19:50 2022 +0000

    [Fixes #6059] ``Entity``'s âIDâ should be named âindexâ instead (#6107)
    
    # Objective
    
    Fixes #6059, changing all incorrect occurrences of ``id`` in the ``entity`` module to ``index``:
    
    * struct level documentation,
    * ``id`` struct field,
    * ``id`` method and its documentation.
    
    ## Solution
    
    Renaming and verifying using CI.
    
    
    Co-authored-by: Edvin Kjell <43633999+Edwox@users.noreply.github.com>

[33mcommit ed3ecda91d9df58fb782800f8867dc257ccf1a61[m
Author: BeastLe9enD <beastle9end@outlook.de>
Date:   Wed Nov 2 12:27:22 2022 +0000

    Add `is_finished` to `Task<T>` (#6444)
    
    # Objective
    
    In some scenarios it can be useful to check if a task has been finished without polling it. I added a function called `is_finished` to check if a task has been finished.
    
    ## Solution
    
    Since `async_task` supports it out of the box, it is just a simple wrapper function.
    
    ---

[33mcommit 5640ec855e3e932a4addaa5e5f3d0dd4800f44f8[m
Author: Griffin <github@dgdigital.net>
Date:   Wed Nov 2 06:51:28 2022 +0000

    Add FXAA postprocessing (#6393)
    
    # Objective
    
    - Add post processing passes for FXAA (Fast Approximate Anti-Aliasing)
    - Add example comparing MSAA and FXAA
    
    ## Solution
    
    When the FXAA plugin is added, passes for FXAA are inserted between the main pass and the tonemapping pass. Supports using either HDR or LDR output from the main pass.
    
    ---
    
    ## Changelog
    
    - Add a new FXAANode that runs after the main pass when the FXAA plugin is added.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 1f22d544891adbeb717f5a8dac3e814b8e521a14[m
Author: CGMossa <cgmossa@gmail.com>
Date:   Tue Nov 1 23:44:55 2022 +0000

    Fixed docs for `derive(WorldQuery)`. (#5283)
    
    For `derive(WorldQuery)`, there are three structs generated, `Item`, `Fetch` and `State`.
    These inherit the visibility of the derived structure, thus `#![warn(missing_docs)]` would
    warn about missing documentation for these structures.
    
    - [ ] I'd like some advice on what to write here, as I personally don't really understand `Fetch` nor `State`.

[33mcommit 0cfdbddf2e6350b11bd9dce2d4fe89ac9c99aec9[m
Author: Ida Iyes <identry@protonmail.com>
Date:   Tue Nov 1 11:35:44 2022 +0000

    bevy_dynamic_plugin: make it possible to handle loading errors (#6437)
    
    # Objective
    
    Currently, `bevy_dynamic_plugin` simply panics on error. This makes it impossible to handle failures in applications that use this feature.
    
    For example, I'd like to build an optional expansion for my game, that may not be distributed to all users. I want to use `bevy_dynamic_plugin` for loading it. I want my game to try to load it on startup, but continue without it if it cannot be loaded.
    
    ## Solution
    
     - Make the `dynamically_load_plugin` function return a `Result`, so it can gracefully return loading errors.
     - Create an error enum type, to provide useful information about the kind of error. This adds `thiserror` to the dependencies of `bevy_dynamic_plugin`, but that dependency is already used in other parts of bevy (such as `bevy_asset`), so not a big deal.
    
     I chose not to change the behavior of the builder method in the App extension trait. I kept it as panicking. There is no clean way (that I'm aware of) to make a builder-style API that has fallible methods. So it is either a panic or a warning. I feel the panic is more appropriate.
    
    ---
    
    ## Changelog
    
    ### Changed
     - `bevy_dynamic_plugin::dynamically_load_plugin` now returns `Result` instead of panicking, to allow for error handling

[33mcommit 3d6706f86d91d8c8df2f88f4b3dd6344580fc037[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Tue Nov 1 03:51:41 2022 +0000

    Speed up `Query::get_many` and add benchmarks (#6400)
    
    # Objective
    
    * Add benchmarks for `Query::get_many`.
    * Speed up `Query::get_many`.
    
    ## Solution
    
    Previously, `get_many` and `get_many_mut` used the method `array::map`, which tends to optimize very poorly. This PR replaces uses of that method with loops.
    
    ## Benchmarks
    
    | Benchmark name                       | Execution time | Change from this PR |
    |--------------------------------------|----------------|---------------------|
    | query_get_many_2/50000_calls_table   | 1.3732 ms      | -24.967%            |
    | query_get_many_2/50000_calls_sparse  | 1.3826 ms      | -24.572%            |
    | query_get_many_5/50000_calls_table   | 2.6833 ms      | -30.681%            |
    | query_get_many_5/50000_calls_sparse  | 2.9936 ms      | -30.672%            |
    | query_get_many_10/50000_calls_table  | 5.7771 ms      | -36.950%            |
    | query_get_many_10/50000_calls_sparse | 7.4345 ms      | -36.987%            |

[33mcommit e7719bf245249fe51d2897dd54bb93986096d230[m
Author: Lucas JenÃ <public@x3ro.de>
Date:   Tue Nov 1 03:15:34 2022 +0000

    Mention world_query(ignore) attribute for WorldQuery derivation (#6309)
    
    # Objective
    
    Add documentation `#[world_query(ignore)]`. Fixes #6283.
    
    ---
    
    I've only described it's behavior so far (which appears to be the same as with `system_param`). Is there another use-case for this besides with `PhantomData`? I could only find a single usage of this construct on GitHub, which is [here](https://github.com/tqwewe/bevy-editor-2/blob/ffcb816927a1bbdcf1cb0136ce47864e5040f9fb/bevy/examples/ecs/custom_query_param.rs#L102).
    
    I was also wondering if it would make sense to add a usage example to the `custom_query_example`? ð¤ That's why it's currently still in there.
    
    
    
    
    Co-authored-by: Lucas JenÃ <243719+x3ro@users.noreply.github.com>

[33mcommit 87d4c6380da909f399f5d988f8d9554e518f4cb4[m
Author: Hennadii Chernyshchyk <genaloner@gmail.com>
Date:   Mon Oct 31 21:20:57 2022 +0000

    Add `serialize` feature to `bevy_core` (#6423)
    
    # Objective
    
    `bevy_core` is missing a feature corresponding to the `serialize` feature on the `bevy` crate. Similar to #6378 and https://github.com/bevyengine/bevy/pull/6379 to serialize `Name` easily.
    
    ## Solution
    
    Add this feature and hand-written serialization for `Name` (to avoid storing `hash` field).
    
    ---
    
    ## Changelog
    
    ### Added
    
    * `Serialize` and `Deserialize` derives for `Name` under `serialize` feature.

[33mcommit b6e46a73cda4946ade06f346b16da68b42faa367[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Oct 31 20:22:18 2022 +0000

    Rework ViewTarget to better support post processing (#6415)
    
    # Objective
    
    Post processing effects cannot read and write to the same texture. Currently they must own their own intermediate texture and redundantly copy from that back to the main texture. This is very inefficient.
    
    Additionally, working with ViewTarget is more complicated than it needs to be, especially when working with HDR textures.
    
    ## Solution
    
    `ViewTarget` now stores two copies of the "main texture". It uses an atomic value to track which is currently the "main texture" (this interior mutability is necessary to accommodate read-only RenderGraph execution).
    
    `ViewTarget` now has a `post_process_write` method, which will return a source and destination texture. Each call to this method will flip between the two copies of the "main texture".
    
    ```rust
    let post_process = render_target.post_process_write();
    let source_texture = post_process.source;
    let destination_texture = post_process.destination;
    ```
    The caller _must_ read from the source texture and write to the destination texture, as it is assumed that the destination texture will become the new "main texture".
    
    
    For simplicity / understandability `ViewTarget` is now a flat type. "hdr-ness" is a property of the `TextureFormat`. The internals are fully private in the interest of providing simple / consistent apis. Developers can now easily access the main texture by calling `view_target.main_texture()`.
    
    HDR ViewTargets no longer have an "ldr texture" with `TextureFormat::bevy_default`. They _only_ have their two "hdr" textures. This simplifies the mental model.  All we have is the "currently active hdr texture" and the "other hdr texture", which we flip between for post processing effects.
    
    The tonemapping node has been rephrased to use this "post processing pattern". The blit pass has been removed, and it now only runs a pass when HDR is enabled. Notably, both the input and output texture are assumed to be HDR. This means that tonemapping behaves just like any other "post processing effect". It could theoretically be moved anywhere in the "effect chain" and continue to work.
    
    In general, I think these changes will make the lives of people making post processing effects much easier. And they better position us to start building higher level / more structured  "post processing effect stacks".
    
    ---
    
    ## Changelog
    
    - `ViewTarget` now stores two copies of the "main texture". Calling `ViewTarget::post_process_write` will flip between copies of the main texture.

[33mcommit 89b3422f62f49f9ec519165bf1feb750c4e603ba[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Oct 31 17:36:23 2022 +0000

    migrate away from actions-rs actions to dtolnay/rust-toolchain (#6432)
    
    # Objective
    
    - actions from actions-rs are outdated and use deprecated function
    - They haven't been updated for the last two years (https://github.com/actions-rs/toolchain)
    
    ## Solution
    
    - use the newer and up-to-date https://github.com/dtolnay/rust-toolchain

[33mcommit 55b3cb01834d66b322aba4844253039561578c64[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Mon Oct 31 16:35:22 2022 +0000

    add `ReflectDefault` to std types (#6429)
    
    # Objective
    
    - `ReflectDefault` can be used to create default values for reflected types
    - `std` primitives that are `Default`-constructable should register `ReflectDefault`
    
    ## Solution
    
    - register `ReflectDefault`

[33mcommit 558859691ec505a32d84252fac4bc3267bd66659[m
Author: Niklas Eicker <git@nikl.me>
Date:   Mon Oct 31 16:35:20 2022 +0000

    Fix return_after_run example (#6420)
    
    # Objective
    
    - Fixes  #6311
    - Make it clearer what should be done in the example (close the Bevy app window)
    
    ## Solution
    
    - Remove the second windowed Bevy App [since winit does not support this](https://github.com/rust-windowing/winit/blob/v0.27.4/src/event_loop.rs#L82-L83)
    - Add title to the Bevy window asking the user to close it
    
    This is more of a quick fix to have a working example. It would be nicer if we had a small real usecase for this functionality.
    Another alternativ that I tried out: If we want to showcase a second Bevy app as it was before, we could still do this as long as one of them does not have a window. But I don't see how this is helpful in the context of the example, so I stuck with only one Bevy app and a simple print afterwards.

[33mcommit bb968f41bc1a0ec9a4ee0449cf272ff77e504646[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Mon Oct 31 16:35:18 2022 +0000

    bevy_scene: Serialize entities to map (#6416)
    
    # Objective
    
    Entities are unique, however, this is not reflected in the scene format. Currently, entities are stored in a list where a user could inadvertently create a duplicate of the same entity.
    
    ## Solution
    
    Switch from the list representation to a map representation for entities.
    
    ---
    
    ## Changelog
    
    * The `entities` field in the scene format is now a map of entity ID to entity data
    
    ## Migration Guide
    
    The scene format now stores its collection of entities in a map rather than a list:
    
    ```rust
    // OLD
    (
      entities: [
        (
          entity: 12,
          components: {
            "bevy_transform::components::transform::Transform": (
              translation: (
                x: 0.0,
                y: 0.0,
                z: 0.0
              ),
              rotation: (0.0, 0.0, 0.0, 1.0),
              scale: (
                x: 1.0,
                y: 1.0,
                z: 1.0
              ),
            ),
          },
        ),
      ],
    )
    
    // NEW
    (
      entities: {
        12: (
          components: {
            "bevy_transform::components::transform::Transform": (
              translation: (
                x: 0.0,
                y: 0.0,
                z: 0.0
              ),
              rotation: (0.0, 0.0, 0.0, 1.0),
              scale: (
                x: 1.0,
                y: 1.0,
                z: 1.0
              ),
            ),
          },
        ),
      },
    )
    ```

[33mcommit 8cdd977a12053d141ed232d9f0bd289c13b55708[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Oct 31 16:12:19 2022 +0000

    Unique plugin (#6411)
    
    # Objective
    
    - Make it impossible to add a plugin twice
    - This is going to be more a risk for plugins with configurations, to avoid things like `App::new().add_plugins(DefaultPlugins).add_plugin(ImagePlugin::default_nearest())`
    
    ## Solution
    
    - Panic when a plugin is added twice
    - It's still possible to mark a plugin as not unique by overriding `is_unique`
    - ~~Simpler version of~~ #3988 (not simpler anymore because of how `PluginGroupBuilder` implements `PluginGroup`)

[33mcommit ca82fa883beacd973cb86a8141c11a36f6256573[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Oct 31 16:12:18 2022 +0000

    do not set cursor grab on window creation if not asked for (#6381)
    
    # Objective
    
    - Bevy main crashs on Safari mobile
    - On Safari mobile, calling winit_window.set_cursor_grab(true) fails as the API is not implemented (as there is no cursor on Safari mobile, the api doesn't make sense there). I don't know about other mobile browsers
    
    ## Solution
    
    - Do not call the api to release cursor grab on window creation, as the cursor is not grabbed anyway at this point
    - This is #3617 which was lost in #6218

[33mcommit bf6c457553bf97df58977e3bb1c01572b0927e6d[m
Author: amiani <amianijohns@gmail.com>
Date:   Mon Oct 31 16:12:15 2022 +0000

    add serialize feature to bevy_transform (#6379)
    
    # Objective
    Fixes #6378
    `bevy_transform` is missing a feature corresponding to the `serialize` feature on the `bevy` crate.
    
    ## Solution
    
    Adds a `serialize` feature to `bevy_transform`.
    Derives `serde::Serialize` and `Deserialize` when feature is enabled.

[33mcommit 599ca782e3159b95db3808af22f9abac9bbbe005[m
Author: Lena MilizÃ© <me@lvmn.org>
Date:   Mon Oct 31 15:57:51 2022 +0000

    Add a way to toggle `AudioSink` (#6321)
    
    # Objective
    
    Currently toggling an `AudioSink` (for example from a game menu) requires writing
    
    ```rs
    if sink.is_paused() {
        sink.play();
    } else {
        sink.pause();
    }
    ```
    
    It would be nicer if we could reduce this down to a single line
    
    ```rs
    sink.toggle();
    ```
    
    ## Solution
    
    Add an `AudioSink::toggle` method which does exactly that.
    
    ---
    
    ## Changelog
    
    - Added `AudioSink::toggle` which can be used to toggle state of a sink.

[33mcommit 13da481bea13236dc96afee60cd593d842e0e54c[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Mon Oct 31 15:57:50 2022 +0000

    Add methods to `Query<&Children>` and `Query<&Parent>` to iterate over descendants and ancestors (#6185)
    
    # Objective
    Add methods to `Query<&Children>` and `Query<&Parent>` to iterate over descendants and ancestors, respectively.
    
    ## Changelog
    
    * Added extension trait for `Query` in `bevy_hierarchy`, `HierarchyQueryExt`
    * Added method `iter_descendants` to `Query<&Children>` via `HierarchyQueryExt` for iterating over the descendants of an entity.
    * Added method `iter_ancestors` to `Query<&Parent>` via `HierarchyQueryExt` for iterating over the ancestors of an entity.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 8b9aa2cceb34f166854201d7727730ac7aba5357[m
Author: Yoh Deadfall <yoh.deadfall@hotmail.com>
Date:   Mon Oct 31 15:36:08 2022 +0000

    Freeing memory held by visible entities vector (#3009)
    
    - Freeing unused memory held by visible entities
    - Fixed comment style
    
    # Objective
    
    With Rust 1.56 it's possible to shrink vectors to a specified capacity. Visibility system had a comment before asking for that feature to free unused memory by a vector if its capacity is two times larger than the length.
    
    ## Solution
    
    Shrinking the vector of visible entities to the nearest power of 2 elements next to `len()`, if capacity exceeds it more than two times.

[33mcommit 75403289b2e875b3af21a8617d44c039bdbbb40b[m
Author: Hennadii Chernyshchyk <genaloner@gmail.com>
Date:   Sun Oct 30 16:02:31 2022 +0000

    Add FromReflect for Timer (#6422)
    
    # Objective
    
    - Time have `Reflect`, but doesn't have `FromReflect`.
    
    ## Solution
    
    - Add it for `Timer`, `Stopwatch` and `TimerMode`.
    
    ---
    
    ## Changelog
    
    ### Added
    
    * `FromReflect` derive for `Timer`, `Stopwatch` and `TimerMode`.

[33mcommit aa8c74591bf539aa23778914b45e1231b0bc6426[m
Author: Patrick Towles <james.towles@gmail.com>
Date:   Sun Oct 30 00:00:47 2022 +0000

    Removed web-sys from bevy_window, never used (#6414)
    
    # Objective
    
    Noticed bevy_window doesn't ever use web-sys.
    That logic resides to bevy_winit and winit.
    
    ## Solution
    
    Remove web-sys dependency

[33mcommit cca0ca5025973677c159ee62a0c903c6b96e340e[m
Author: Hennadii Chernyshchyk <genaloner@gmail.com>
Date:   Sat Oct 29 22:32:47 2022 +0000

    Add FromReflect for Visibility (#6410)
    
    # Objective
    
    - `Visibility` don't have `FromReflect` derive.
    
    ## Solution
    
    - Add it.
    
    ---
    
    ## Changelog
    
    ### Added
    
    - `FromReflect` for `Visibility`.

[33mcommit 336049da68b7eb9284915b0ae66a6e80832489df[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Sat Oct 29 18:15:28 2022 +0000

    Remove outdated uses of single-tuple bundles (#6406)
    
    # Objective
    
    Bevy still has many instances of using single-tuples `(T,)` to create a bundle. Due to #2975, this is no longer necessary.
    
    ## Solution
    
    Search for regex `\(.+\s*,\)`. This should have found every instance.

[33mcommit dfb80ee74fe00c5d3794ba08e6aefc2fe4981f7d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Oct 29 04:13:54 2022 +0000

    Fix query.to_readonly().get_component_mut() soundness bug (#6401)
    
    # Objective
    
    Fix the soundness issue outlined in #5866. In short the problem is that `query.to_readonly().get_component_mut::<T>()` can provide unsound mutable access to the component. This PR is an alternative to just removing the offending api. Given that `to_readonly` is a useful tool, I think this approach is a preferable short term solution. Long term I think theres a better solution out there, but we can find that on its own time.
    
    ## Solution
    
    Add what amounts to a "dirty flag" that marks Queries that have been converted to their read-only variant via `to_readonly` as dirty. When this flag is set to true, `get_component_mut` will fail with an error, preventing the unsound access.

[33mcommit dd7ff887604ff3c101161476776740ef6bca9173[m
Author: Zhixing Zhang <account@neoto.xin>
Date:   Fri Oct 28 22:43:16 2022 +0000

    Add multi draw indirect draw calls (#6392)
    
    # Objective
    
    - Allows bevy users to dispatch `multi_draw_indirect`, `multi_draw_indexed_indirect`,  `multi_draw_indirect_count`, `multi_draw_indexed_indirect_count` draw calls.
    - Fixes #6216
    
    ## Solution
    
    - Added the corresponding wrapper methods to `TrackedRenderPass`
    
    ---
    
    ## Changelog
    
    > Added  `multi_draw_*` draw calls to `TrackedRenderPass`
    
    
    Co-authored-by: Zhixing Zhang <me@neoto.xin>

[33mcommit 306c1ac6177d8ff55c07410b8aaac5ff4cf84020[m
Author: Mark Nokalt <marknokalt@live.com>
Date:   Fri Oct 28 22:43:14 2022 +0000

    Rename Handle::as_weak() to cast_weak() (#5321)
    
    # Objective
    
    Following discussion on #3536 and #3522, `Handle::as_weak()` takes a type `U`, reinterpreting the handle as of another asset type while keeping the same ID. This is mainly used today in font atlas code. This PR does two things:
    
    - Rename the method to `cast_weak()` to make its intent more clear
    - Actually change the type uuid in the handle if it's not an asset path variant.
    
    ## Migration Guide
    
    - Rename `Handle::as_weak` uses to `Handle::cast_weak`
    
        The method now properly sets the associated type uuid if the handle is a direct reference (e.g. not a reference to an `AssetPath`), so adjust you code accordingly if you relied on the previous behavior.

[33mcommit 71f8b4a92f48b24a9c268fc08e747390bcb43f41[m
Author: Hennadii Chernyshchyk <genaloner@gmail.com>
Date:   Fri Oct 28 22:21:30 2022 +0000

    Use default serde impls for Entity (#6194)
    
    # Objective
    
    Currently for entities we serialize only `id`. But this is not very expected behavior. For example, in networking, when the server sends its state, it contains entities and components. On the client, I create new objects and map them (using `EntityMap`) to those received from the server (to know which one matches which). And if `generation` field is missing, this mapping can be broken. Example:
    
    1. Server sends an entity `Entity{ id: 2, generation: 1}` with components.
    2. Client puts the received entity in a map and create a new entity that maps to this received entity. The new entity have different `id` and `generation`. Let's call it `Entity{ id: 12, generation: 4}`.
    3. Client sends a command for `Entity{ id: 12, generation: 4}`. To do so, it maps local entity to the one from server. But `generation` field is 0 because it was omitted for serialization on the server. So it maps to `Entity{ id: 2, generation: 0}`.
    4. Server receives `Entity{ id: 2, generation: 0}` which is invalid.
    
    In my game I worked around it by [writing custom serialization](https://github.com/dollisgame/dollis/blob/master/src/core/network/entity_serde.rs) and using `serde(with = "...")`. But it feels like a bad default to me.
    
    Using `Entity` over a custom `NetworkId` also have the following advantages:
    
    1. Re-use `MapEntities` trait to map `Entity`s in replicated components.
    2. Instead of server `Entity <-> NetworkId ` and `Entity <-> NetworkId`, we map entities only on client.
    3. No need to handling uniqueness. It's a rare case, but makes things simpler. For example, I don't need to query for a resource to create an unique ID.
    
    Closes #6143.
    
    ## Solution
    
    Use default serde impls. If anyone want to avoid wasting memory on `generation`, they can create a new type that holds `u32`. This is what Bevy do for [DynamicEntity](https://docs.rs/bevy/latest/bevy/scene/struct.DynamicEntity.html) to serialize scenes. And I don't see any use case to serialize an entity id expect this one.
    
    ---
    
    ## Changelog
    
    ### Changed
    
    - Entity now serializes / deserializes `generation` field.
    
    ## Migration Guide
    
    - Entity now fully serialized. If you want to serialze only `id`, as it was before, you can create a new type that wraps `u32`.

[33mcommit d8bf5f82249da10e88a28856e00444276b14f048[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Oct 28 21:51:38 2022 +0000

    Update tracing-chrome to 0.6.0 (#6398)
    
    Alternative to #4799
    
    Tested and this works as expected

[33mcommit e71c4d280294aba2ad494443170790dfba67ba03[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Fri Oct 28 21:03:01 2022 +0000

    fix nightly clippy warnings (#6395)
    
    # Objective
    
    - fix new clippy lints before they get stable and break CI
    
    ## Solution
    
    - run `clippy --fix` to auto-fix machine-applicable lints
    - silence `clippy::should_implement_trait` for `fn HandleId::default<T: Asset>`
    
    ## Changes
    - always prefer `format!("{inline}")` over `format!("{}", not_inline)`
    - prefer `Box::default` (or `Box::<T>::default` if necessary) over `Box::new(T::default())`

[33mcommit c27186c1d611c2a7d6a790adb6acf3b652cbd930[m
Author: Waffle Maybe <waffle.lapkin@gmail.com>
Date:   Fri Oct 28 21:03:00 2022 +0000

    Fix "previous release tag" link in the changelog (#6394)
    
    Simply fix an outdated tag in `CHANGELOG.md`.

[33mcommit f867319336541acb8ed80743c723effeb4be8896[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Fri Oct 28 20:42:33 2022 +0000

    add `ReflectAsset` and `ReflectHandle` (#5923)
    
    # Objective
    ![image](https://user-images.githubusercontent.com/22177966/189350194-639a0211-e984-4f73-ae62-0ede44891eb9.png)
    
    ^ enable this
    
    Concretely, I need to
    - list all handle ids for an asset type
    - fetch the asset as `dyn Reflect`, given a `HandleUntyped`
    - when encountering a `Handle<T>`, find out what asset type that handle refers to (`T`'s type id) and turn the handle into a `HandleUntyped`
    
    ## Solution
    
    - add `ReflectAsset` type containing function pointers for working with assets
    ```rust
    pub struct ReflectAsset {
        type_uuid: Uuid,
        assets_resource_type_id: TypeId, // TypeId of the `Assets<T>` resource
    
        get: fn(&World, HandleUntyped) -> Option<&dyn Reflect>,
        get_mut: fn(&mut World, HandleUntyped) -> Option<&mut dyn Reflect>,
        get_unchecked_mut: unsafe fn(&World, HandleUntyped) -> Option<&mut dyn Reflect>,
        add: fn(&mut World, &dyn Reflect) -> HandleUntyped,
        set: fn(&mut World, HandleUntyped, &dyn Reflect) -> HandleUntyped,
        len: fn(&World) -> usize,
        ids: for<'w> fn(&'w World) -> Box<dyn Iterator<Item = HandleId> + 'w>,
        remove: fn(&mut World, HandleUntyped) -> Option<Box<dyn Reflect>>,
    }
    ```
    - add `ReflectHandle` type relating the handle back to the asset type and providing a way to create a `HandleUntyped`
    ```rust
    pub struct ReflectHandle {
        type_uuid: Uuid,
        asset_type_id: TypeId,
        downcast_handle_untyped: fn(&dyn Any) -> Option<HandleUntyped>,
    }
    ```
    - add the corresponding `FromType` impls
    - add a function `app.register_asset_reflect` which is supposed to be called after `.add_asset` and registers `ReflectAsset` and `ReflectHandle` in the type registry
    ---
    
    ## Changelog
    
    - add `ReflectAsset` and `ReflectHandle` types, which allow code to use reflection to manipulate arbitrary assets without knowing their types at compile time

[33mcommit 0401f04ba971f49cba92d0c7da93cc8dc9f9a3de[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Fri Oct 28 19:56:31 2022 +0000

    update camera projection if viewport changed (#5945)
    
    fixes https://github.com/bevyengine/bevy/issues/5944
    
    Uses the second solution:
    > 2. keep track of the old viewport in the computed_state, and if camera.viewport != camera.computed_state.old_viewport, then update the projection. This is more reliable, but needs to store two UVec2s more in the camera (probably not a big deal).

[33mcommit fe7ebd432675e2fb155028a7bda43482e0c90a52[m
Author: James Liu <contact@jamessliu.com>
Date:   Fri Oct 28 09:25:50 2022 +0000

    Clean up Fetch code (#4800)
    
    # Objective
    Clean up code surrounding fetch by pulling out the common parts into the iteration code.
    
    ## Solution
    Merge `Fetch::table_fetch` and `Fetch::archetype_fetch` into a single API: `Fetch::fetch(&mut self, entity: &Entity, table_row: &usize)`. This provides everything any fetch requires to internally decide which storage to read from and get the underlying data. All of these functions are marked as `#[inline(always)]` and the arguments are passed as references to attempt to optimize out the argument that isn't being used.
    
    External to `Fetch`, Query iteration has been changed to keep track of the table row and entity outside of fetch, which moves a lot of the expensive bookkeeping `Fetch` structs had previously done internally into the outer loop.
    
    ~~TODO: Benchmark, docs~~ Done.
    
    ---
    
    ## Changelog
    Changed: `Fetch::table_fetch` and `Fetch::archetype_fetch` have been merged into a single `Fetch::fetch` function.
    
    ## Migration Guide
    TODO
    
    Co-authored-by: Brian Merchant <bhmerchang@gmail.com>
    Co-authored-by: Saverio Miroddi <saverio.pub2@gmail.com>

[33mcommit 284b1f13020527f2858c2de66a5cc7e3a97bc211[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Thu Oct 27 23:38:03 2022 +0000

    bevy_scene: Stabilize entity order in `DynamicSceneBuilder` (#6382)
    
    # Objective
    
    Currently, `DynamicSceneBuilder` keeps track of entities via a `HashMap`. This has an unintended side-effect in that, when building the full `DynamicScene`, we aren't guaranteed any particular order.
    
    In other words, inserting Entity A then Entity B can result in either `[A, B]` or `[B, A]`. This can be rather annoying when running tests on scenes generated via the builder as it will work sometimes but not other times. There's also the potential that this might unnecessarily clutter up VCS diffs for scene files (assuming they had an intentional order).
    
    ## Solution
    
    Store `DynamicSceneBuilder`'s entities in a `Vec` rather than a `HashMap`.
    
    ---
    
    ## Changelog
    
    * Stablized entity order in `DynamicSceneBuilder` (0.9.0-dev)

[33mcommit 4bcf49b2ea6fb5f42388b0e15d204020053ee5c7[m
Author: Hans Meine <hans_meine@gmx.net>
Date:   Thu Oct 27 15:48:29 2022 +0000

    elaborate on Timer docs (#6385)
    
    These tiny changes answer question I had when using the Timer class.

[33mcommit 456971381c1c51edc6df46bbcbfccd5a7392aca7[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Thu Oct 27 12:56:03 2022 +0000

    Resolve most remaining execution-order ambiguities (#6341)
    
    # Objective
    
    Bevy's internal plugins have lots of execution-order ambiguities, which makes the ambiguity detection tool very noisy for our users.
    
    ## Solution
    
    Silence every last ambiguity that can currently be resolved.
    Each time an ambiguity is silenced, it is accompanied by a comment describing why it is correct. This description should be based on the public API of the respective systems. Thus, I have added documentation to some systems describing how they use some resources.
    
    # Future work
    
    Some ambiguities remain, due to issues out of scope for this PR.
    
    * The ambiguity checker does not respect `Without<>` filters, leading to false positives.
    * Ambiguities between `bevy_ui` and `bevy_animation` cannot be resolved, since neither crate knows that the other exists. We will need a general solution to this problem.

[33mcommit 0934abc6bbd83c9dfdf019d73b4566c1848af5ae[m
Author: Elbert Ronnie <elbert.ronniep@gmail.com>
Date:   Thu Oct 27 12:34:38 2022 +0000

    Expose rodio's Source and Sample traits in bevy_audio (#6374)
    
    # Objective
    
    - Fixes #5876 .
    
    ## Solution
    
    - added pub use statements to re-export the following traits in bevy_audio: rodio::source::Source, rodio::Sample, rodio::cpal::Sample.
    - rodio::cpal::Sample was re-exported as CpalSample to avoid naming conflict with rodio::Sample.

[33mcommit 894334b51e8fcab57a4c58fe3a45018c21c0a887[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Thu Oct 27 01:46:33 2022 +0000

    bevy_scene: Use map for scene `components` (#6345)
    
    # Objective
    
    Currently scenes define components using a list:
    
    ```rust
    [
      (
        entity: 0,
        components: [
          {
            "bevy_transform::components::transform::Transform": (
              translation: (
                x: 0.0,
                y: 0.0,
                z: 0.0
              ),
              rotation: (0.0, 0.0, 0.0, 1.0),
              scale: (
                x: 1.0,
                y: 1.0,
                z: 1.0
              ),
            ),
          },
          {
            "my_crate::Foo": (
              text: "Hello World",
            ),
          },
          {
            "my_crate::Bar": (
              baz: 123,
            ),
          },
        ],
      ),
    ]
    ```
    
    However, this representation has some drawbacks (as pointed out by @Metadorius in [this](https://github.com/bevyengine/bevy/pull/4561#issuecomment-1202215565) comment):
    
    1. Increased nesting and more characters (minor effect on overall size)
    2. More importantly, by definition, entities cannot have more than one instance of any given component. Therefore, such data is best stored as a mapâ where all values are meant to have unique keys.
    
    
    ## Solution
    
    Change `components` to store a map of components rather than a list:
    
    ```rust
    [
      (
        entity: 0,
        components: {
          "bevy_transform::components::transform::Transform": (
            translation: (
              x: 0.0,
              y: 0.0,
              z: 0.0
            ),
            rotation: (0.0, 0.0, 0.0, 1.0),
            scale: (
              x: 1.0,
              y: 1.0,
              z: 1.0
            ),
          ),
          "my_crate::Foo": (
            text: "Hello World",
          ),
          "my_crate::Bar": (
            baz: 123
          ),
        },
      ),
    ]
    ```
    
    #### Code Representation
    
    This change only affects the scene format itself. `DynamicEntity` still stores its components as a list. The reason for this is that storing such data as a map is not really needed since:
    1. The "key" of each value is easily found by just calling `Reflect::type_name` on it
    2. We should be generating such structs using the `World` itself which upholds the one-component-per-entity rule
    
    One could in theory create manually create a `DynamicEntity` with duplicate components, but this isn't something I think we should focus on in this PR. `DynamicEntity` can be broken in other ways (i.e. storing a non-component in the components list), and resolving its issues can be done in a separate PR.
    
    ---
    
    ## Changelog
    
    * The scene format now uses a map to represent the collection of components rather than a list
    
    ## Migration Guide
    
    The scene format now uses a map to represent the collection of components. Scene files will need to update from the old list format.
    
    <details>
    <summary>Example Code</summary>
    
    ```rust
    // OLD
    [
      (
        entity: 0,
        components: [
          {
            "bevy_transform::components::transform::Transform": (
              translation: (
                x: 0.0,
                y: 0.0,
                z: 0.0
              ),
              rotation: (0.0, 0.0, 0.0, 1.0),
              scale: (
                x: 1.0,
                y: 1.0,
                z: 1.0
              ),
            ),
          },
          {
            "my_crate::Foo": (
              text: "Hello World",
            ),
          },
          {
            "my_crate::Bar": (
              baz: 123,
            ),
          },
        ],
      ),
    ]
    
    // NEW
    [
      (
        entity: 0,
        components: {
          "bevy_transform::components::transform::Transform": (
            translation: (
              x: 0.0,
              y: 0.0,
              z: 0.0
            ),
            rotation: (0.0, 0.0, 0.0, 1.0),
            scale: (
              x: 1.0,
              y: 1.0,
              z: 1.0
            ),
          ),
          "my_crate::Foo": (
            text: "Hello World",
          ),
          "my_crate::Bar": (
            baz: 123
          ),
        },
      ),
    ]
    ```
    
    </details>

[33mcommit 4d3d3c869e94580ca0b12ba9a412ccbd3c6f517f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Oct 26 23:12:12 2022 +0000

    Support arbitrary RenderTarget texture formats (#6380)
    
    # Objective
    
    Currently, Bevy only supports rendering to the current "surface texture format". This means that "render to texture" scenarios must use the exact format the primary window's surface uses, or Bevy will crash. This is even harder than it used to be now that we detect preferred surface formats at runtime instead of using hard coded BevyDefault values.
    
    ## Solution
    
    1. Look up and store each window surface's texture format alongside other extracted window information
    2. Specialize the upscaling pass on the current `RenderTarget`'s texture format, now that we can cheaply correlate render targets to their current texture format
    3. Remove the old `SurfaceTextureFormat` and `AvailableTextureFormats`: these are now redundant with the information stored on each extracted window, and probably should not have been globals in the first place (as in theory each surface could have a different format).
    
    This means you can now use any texture format you want when rendering to a texture! For example, changing the `render_to_texture` example to use `R16Float` now doesn't crash / properly only stores the red component:
    ![image](https://user-images.githubusercontent.com/2694663/198140125-c606dd0e-6fdf-4544-b93d-dbbd10dbadd2.png)

[33mcommit 838b318863a4d9374e16c8b46dce8be53519c88f[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Wed Oct 26 20:13:59 2022 +0000

    separate tonemapping and upscaling passes (#3425)
    
    Attempt to make features like bloom https://github.com/bevyengine/bevy/pull/2876 easier to implement.
    
    **This PR:**
    - Moves the tonemapping from `pbr.wgsl` into a separate pass
    - also add a separate upscaling pass after the tonemapping which writes to the swap chain (enables resolution-independant rendering and post-processing after tonemapping)
    - adds a `hdr` bool to the camera which controls whether the pbr and sprite shaders render into a `Rgba16Float` texture
    
    **Open questions:**
    - ~should the 2d graph work the same as the 3d one?~ it is the same now
    - ~The current solution is a bit inflexible because while you can add a post processing pass that writes to e.g. the `hdr_texture`, you can't write to a separate `user_postprocess_texture` while reading the `hdr_texture` and tell the tone mapping pass to read from the `user_postprocess_texture` instead. If the tonemapping and upscaling render graph nodes were to take in a `TextureView` instead of the view entity this would almost work, but the bind groups for their respective input textures are already created in the `Queue` render stage in the hardcoded order.~ solved by creating bind groups in render node
    
    **New render graph:**
    
    ![render_graph](https://user-images.githubusercontent.com/22177966/147767249-57dd4229-cfab-4ec5-9bf3-dc76dccf8e8b.png)
    <details>
    <summary>Before</summary>
    
    ![render_graph_old](https://user-images.githubusercontent.com/22177966/147284579-c895fdbd-4028-41cf-914c-e1ffef60e44e.png)
    </details>
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 2023ce63c7362385372f1d231e72f00747cb3187[m
Author: TehPers <tehperz@gmail.com>
Date:   Wed Oct 26 19:52:20 2022 +0000

    Derive `Reflect` + `FromReflect` for input types (#6232)
    
    # Objective
    
    Adds support for reflecting many more of the input types. This allows those types to be used via scripting, `bevy-inspector-egui`, etc. These types are registered by the `InputPlugin` so that they're automatically available to anyone who wants to use them
    
    Closes #6223
    
    ## Solution
    
    Many types now have `#[derive(Reflect, FromReflect)]` added to them in `bevy_input`. Additionally, `#[reflect(traits...)]` has been added for applicable traits to the types.
    
    This PR does not add reflection support for types which have private fields. Notably, `Touch` and `Touches` don't implement `Reflect`/`FromReflect`.
    
    This adds the "glam" feature to the `bevy_reflect` dependency for package `bevy_input`. Since `bevy_input` transitively depends on `glam` already, all this brings in are the reflection `impl`s.
    
    ## Migration Guide
    
    - `Input<T>` now implements `Reflect` via `#[reflect]` instead of `#[reflect_value]`. This means it now exposes its private fields via the `Reflect` trait rather than being treated as a value type. For code that relies on the `Input<T>` struct being treated as a value type by reflection, it is still possible to wrap the `Input<T>` type with a wrapper struct and apply `#[reflect_value]` to it.
      - As a reminder, private fields exposed via reflection are not subject to any stability guarantees.
    ---
    
    ## Changelog
    
    Added
    - Implemented `Reflect` + `FromReflect` for many input-related types. These types are automatically registered when adding the `InputPlugin`.

[33mcommit c18b1a839b70ad32ce9ca924bf7bf9dd8bd3ad57[m
Author: targrub <targrub@gmail.com>
Date:   Wed Oct 26 19:15:15 2022 +0000

    Prepare for upcoming rustlang by fixing upcoming clippy warnings (#6376)
    
    # Objective
    
    - Proactive changing of code to comply with warnings generated by beta of rustlang version of cargo clippy.
    
    ## Solution
    
    - Code changed as recommended by `rustup update`, `rustup default beta`, `cargo run -p ci -- clippy`.
    - Tested using `beta` and `stable`.  No clippy warnings in either after changes made.
    
    ---
    
    ## Changelog
    
    - Warnings fixed were: `clippy::explicit-auto-deref` (present in 11 files), `clippy::needless-borrow` (present in 2 files), and `clippy::only-used-in-recursion` (only 1 file).

[33mcommit a083882cb2b250a6b0375b02d980ff7c97cd3d24[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Oct 26 18:57:23 2022 +0000

    ignore nanosec precision tests on apple m1 (#6377)
    
    # Objective
    
    - Some tests are very flaky on a m1
    - m1 currently have a 41 ns precision
    
    ## Solution
    
    - Do not run tests that compare a `Duration` or a `f64` on a m1 (and m2)

[33mcommit 7671ddea72f7ecdcaa8b808e3f2fdf74452a8f07[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Oct 26 17:52:16 2022 +0000

    can get the settings of a plugin from the app (#6372)
    
    # Objective
    
    - Make the settings of plugins readable during app building
    
    ## Solution
    
    - Added a vector of added plugins to the app. Their settings can be accessed as read only

[33mcommit 54cf45c5b3c8879966c90e1a8bf718d27f571c67[m
Author: Boxy <supbscripter@gmail.com>
Date:   Wed Oct 26 13:16:25 2022 +0000

    Avoid making `Fetch`s `Clone` (#5593)
    
    # Objective
    
    - Do not implement `Copy` or `Clone` for `Fetch` types as this is kind of sus soundness wise (it feels like cloning an `IterMut` in safe code to me). Cloning a fetch seems important to think about soundness wise when doing it so I prefer this over adding a `Clone` bound to the assoc type definition (i.e. `type Fetch: Clone`) even though that would also solve the other listed things here.
    - Remove a bunch of `QueryFetch<'w, Q>: Clone` bounds from our API as now all fetches can be "cloned" for use in `iter_combinations`. This should also help avoid the type inference regression ptrification introduced where `for<'a> QueryFetch<'a, Q>: Trait` bounds misbehave since we no longer need any of those kind of higher ranked bounds (although in practice we had none anyway).
    - Stop being able to "forget" to implement clone for fetches, we've had a lot of issues where either `derive(Clone)` was used instead of a manual impl (so we ended up with too tight bounds on the impl) or flat out forgot to implement Clone at all. With this change all fetches are able to be cloned for `iter_combinations` so this will no longer be possible to mess up.
    
    On an unrelated note, while making this PR I realised we probably want safety invariants on `archetype/table_fetch` that nothing aliases the table_row/archetype_index according to the access we set.
    
    ---
    
    ## Changelog
    
    `Clone` and `Copy` were removed from all `Fetch` types.
    
    ## Migration Guide
    
    - Call `WorldQuery::clone_fetch` instead of `fetch.clone()`. Make sure to add safety comments :)

[33mcommit 5622d56be1262fce8a2d458f2b78abf1cab3ab50[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Oct 25 22:19:34 2022 +0000

    Use plugin setup for resource only used at setup time (#6360)
    
    # Objective
    
    - Build on #6336 for more plugin configurations
    
    ## Solution
    
    - `LogSettings`, `ImageSettings` and `DefaultTaskPoolOptions` are now plugins settings rather than resources
    
    ---
    
    ## Changelog
    
    - `LogSettings` plugin settings have been move to `LogPlugin`, `ImageSettings` to `ImagePlugin` and `DefaultTaskPoolOptions` to `CorePlugin`
    
    ## Migration Guide
    
    The `LogSettings` settings have been moved from a resource to `LogPlugin` configuration:
    
    ```rust
    // Old (Bevy 0.8)
    app
      .insert_resource(LogSettings {
        level: Level::DEBUG,
        filter: "wgpu=error,bevy_render=info,bevy_ecs=trace".to_string(),
      })
      .add_plugins(DefaultPlugins)
    
    // New (Bevy 0.9)
    app.add_plugins(DefaultPlugins.set(LogPlugin {
        level: Level::DEBUG,
        filter: "wgpu=error,bevy_render=info,bevy_ecs=trace".to_string(),
    }))
    ```
    
    
    The `ImageSettings` settings have been moved from a resource to `ImagePlugin` configuration:
    
    ```rust
    // Old (Bevy 0.8)
    app
      .insert_resource(ImageSettings::default_nearest())
      .add_plugins(DefaultPlugins)
    
    // New (Bevy 0.9)
    app.add_plugins(DefaultPlugins.set(ImagePlugin::default_nearest()))
    ```
    
    
    The `DefaultTaskPoolOptions` settings have been moved from a resource to `CorePlugin::task_pool_options`:
    
    ```rust
    // Old (Bevy 0.8)
    app
      .insert_resource(DefaultTaskPoolOptions::with_num_threads(4))
      .add_plugins(DefaultPlugins)
    
    // New (Bevy 0.9)
    app.add_plugins(DefaultPlugins.set(CorePlugin {
      task_pool_options: TaskPoolOptions::with_num_threads(4),
    }))
    ```

[33mcommit a6f6a8f6e2023a53e39fd7c125077756eba40477[m
Author: dataphract <dataphract@gmail.com>
Date:   Tue Oct 25 10:21:31 2022 +0000

    fix: specify required trybuild patch version (#6333)
    
    # Objective
    
    This is a follow-up to #6317, which makes use of a feature of the newest `trybuild` version, `1.0.71`, but does not specify the new patch version in `bevy_ecs_compile_fail_tests/Cargo.toml`.
    
    The PR passed CI because CI downloaded the latest `trybuild` version satisfying the dependency specification. However, Cargo will not know an update is required if a user already has a `^1.0` version of `trybuild` cached locally, which causes the new `$N` syntax to fail the tests.
    
    ## Solution
    
    Updated the `trybuild` requirement to `1.0.71`.

[33mcommit c245b1774328ef5a8ade9b423fcd937f720a1fe1[m
Author: Larry Du <larrydu88@gmail.com>
Date:   Tue Oct 25 09:55:31 2022 +0000

    Revert thiserror version requirement to match version for all crates. (#6365)
    
    # Objective
    
    - Reverts unnecessary version increase for `thiserror` caused by the following PR. https://github.com/bevyengine/bevy/commit/9066d514208671d8c62031465dea5eb977c51e25
    - The aforementioned PR should have increased `thiserrror` version uniformly across all bevy crates. As far as I can tell it was unneccessary to bump versions
    
    ## Solution
    
    - Revert versions to the matching version used by other bevy "crates"
    
    ```
    MBP-Larry-Du.local:~/Code/bevy:$ git grep thiserror
    CHANGELOG.md:- [Derive thiserror::Error for HexColorError][2740]
    crates/bevy_asset/Cargo.toml:thiserror = "1.0"
    crates/bevy_asset/src/asset_server.rs:use thiserror::Error;
    crates/bevy_asset/src/io/mod.rs:use thiserror::Error;
    crates/bevy_gltf/Cargo.toml:thiserror = "1.0"
    crates/bevy_gltf/src/loader.rs:use thiserror::Error;
    crates/bevy_input/Cargo.toml:thiserror = "1.0"
    crates/bevy_input/src/gamepad.rs:use thiserror::Error;
    crates/bevy_reflect/Cargo.toml:thiserror = "1.0"
    crates/bevy_reflect/src/path.rs:use thiserror::Error;
    crates/bevy_render/Cargo.toml:thiserror = "1.0"
    ```
    ---
    
    ## Changelog
    
    > This section is optional. If this was a trivial fix, or has no externally-visible impact, you can delete this section.
    
    - What changed as a result of this PR? Fixed dependency conflict for building projects.
    Current build of StarRust runs successfully with the `thiserror` reversion: https://github.com/LarsDu/StarRust
    But will run into dependency conflicts if `thiserror` is version 1.037
    
    
    Co-authored-by: Larry Du <larry.du@freenome.com>

[33mcommit c6f27eb0547ce909fa01ff063ec9a3e531c14564[m
Author: Carter Weinberg <weinbergcarter@gmail.com>
Date:   Tue Oct 25 00:19:23 2022 +0000

    Add More Description to the Iter Combinations Documentation (#6260)
    
    # Objective
    
    I was trying to implement a collision system for my game, and believed that the iter_combinations method might be what I need. But I couldn't find a simple explanation of what a combination was in Bevy and thought it could use some more explanation.
    
    ## Solution
    
    I added some description to the documentation that can hopefully further elaborate on what a combination is.
    
    I also changed up the docs for the method because a combination is a different thing than a permutation but the Bevy docs seemed to use them interchangeably.

[33mcommit 45e5eb1db3c54e725bdef31bbc172b3febfddb98[m
Author: Theo Ottah <theo@ottah.dev>
Date:   Mon Oct 24 23:03:15 2022 +0000

    Remove ExactSizeIterator from QueryCombinationIter (#5895)
    
    # Objective
    
    - `QueryCombinationIter` can have sizes greater than `usize::MAX`.
    - Fixes #5846
    
    ## Solution
    
    - Only the implementation of `ExactSizeIterator` has been removed. Instead of using `query_combination.len()`, you can use `query_combination.size_hint().0` to get the same value as before.
    
    ---
    
    ## Migration Guide
    
    - Switch to using other methods of getting the length.

[33mcommit ecb6f8fab37d3eba05a56c7307b2e953c7df2fbc[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Oct 24 21:48:07 2022 +0000

    Update deny configuration (#6359)
    
    # Objective
    
    - update deny config
    
    ## Solution
    
    - update nix duplicate version to ignore
    - update security advisories

[33mcommit 1bb751cb8d5a49395466f45b189e6fbec82bce7a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Oct 24 21:20:33 2022 +0000

    Plugins own their settings. Rework PluginGroup trait. (#6336)
    
    # Objective
    
    Fixes #5884 #2879
    Alternative to #2988 #5885 #2886
    
    "Immutable" Plugin settings are currently represented as normal ECS resources, which are read as part of plugin init. This presents a number of problems:
    
    1. If a user inserts the plugin settings resource after the plugin is initialized, it will be silently ignored (and use the defaults instead)
    2. Users can modify the plugin settings resource after the plugin has been initialized. This creates a false sense of control over settings that can no longer be changed.
    
    (1) and (2) are especially problematic and confusing for the `WindowDescriptor` resource, but this is a general problem.
    
    ## Solution
    
    Immutable Plugin settings now live on each Plugin struct (ex: `WindowPlugin`). PluginGroups have been reworked to support overriding plugin values. This also removes the need for the `add_plugins_with` api, as the `add_plugins` api can use the builder pattern directly. Settings that can be used at runtime continue to be represented as ECS resources.
    
    Plugins are now configured like this:
    
    ```rust
    app.add_plugin(AssetPlugin {
      watch_for_changes: true,
      ..default()
    })
    ```
    
    PluginGroups are now configured like this:
    
    ```rust
    app.add_plugins(DefaultPlugins
      .set(AssetPlugin {
        watch_for_changes: true,
        ..default()
      })
    )
    ```
    
    This is an alternative to #2988, which is similar. But I personally prefer this solution for a couple of reasons:
    * ~~#2988 doesn't solve (1)~~ #2988 does solve (1) and will panic in that case. I was wrong!
    * This PR directly ties plugin settings to Plugin types in a 1:1 relationship, rather than a loose "setup resource" <-> plugin coupling (where the setup resource is consumed by the first plugin that uses it).
    * I'm not a huge fan of overloading the ECS resource concept and implementation for something that has very different use cases and constraints.
    
    ## Changelog
    
    - PluginGroups can now be configured directly using the builder pattern. Individual plugin values can be overridden by using `plugin_group.set(SomePlugin {})`, which enables overriding default plugin values.
    - `WindowDescriptor` plugin settings have been moved to `WindowPlugin` and `AssetServerSettings` have been moved to `AssetPlugin`
    - `app.add_plugins_with` has been replaced by using `add_plugins` with the builder pattern.
    
    ## Migration Guide
    
    The `WindowDescriptor` settings have been moved from a resource to `WindowPlugin::window`:
    
    ```rust
    // Old (Bevy 0.8)
    app
      .insert_resource(WindowDescriptor {
        width: 400.0,
        ..default()
      })
      .add_plugins(DefaultPlugins)
    
    // New (Bevy 0.9)
    app.add_plugins(DefaultPlugins.set(WindowPlugin {
      window: WindowDescriptor {
        width: 400.0,
        ..default()
      },
      ..default()
    }))
    ```
    
    
    The `AssetServerSettings` resource has been removed in favor of direct `AssetPlugin` configuration:
    
    ```rust
    // Old (Bevy 0.8)
    app
      .insert_resource(AssetServerSettings {
        watch_for_changes: true,
        ..default()
      })
      .add_plugins(DefaultPlugins)
    
    // New (Bevy 0.9)
    app.add_plugins(DefaultPlugins.set(AssetPlugin {
      watch_for_changes: true,
      ..default()
    }))
    ```
    
    `add_plugins_with` has been replaced by `add_plugins` in combination with the builder pattern:
    
    ```rust
    // Old (Bevy 0.8)
    app.add_plugins_with(DefaultPlugins, |group| group.disable::<AssetPlugin>());
    
    // New (Bevy 0.9)
    app.add_plugins(DefaultPlugins.build().disable::<AssetPlugin>());
    ```

[33mcommit beab0bdc63d5956322875bb5f5529c99d42da126[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Mon Oct 24 21:01:11 2022 +0000

    bevy_scene: Replace root list with struct (#6354)
    
    # Objective
    
    Scenes are currently represented as a list of entities. This is all we need currently, but we may want to add more data to this format in the future (metadata, asset lists, etc.).
    
    It would be nice to update the format in preparation of possible future changes. Doing so now (i.e., before 0.9) could mean reduced[^1] breakage for things added in 0.10.
    
    [^1]: Obviously, adding features runs the risk of breaking things regardless. But if all features added are for whatever reason optional or well-contained, then users should at least have an easier time updating.
    
    ## Solution
    
    Made the scene root a struct rather than a list.
    
    ```rust
    (
      entities: [
        // Entity data here...
      ]
    )
    ```
    
    ---
    
    ## Changelog
    
    * The scene format now puts the entity list in a newly added `entities` field, rather than having it be the root object
    
    ## Migration Guide
    
    The scene file format now uses a struct as the root object rather than a list of entities. The list of entities is now found in the `entities` field of this struct.
    
    ```rust
    // OLD
    [
      (
        entity: 0,
        components: [
          // Components...
        ]
      ),
    ]
    
    // NEW
    (
      entities: [
        (
          entity: 0,
          components: [
            // Components...
          ]
        ),
      ]
    )
    ```
    
    
    Co-authored-by: Gino Valente <49806985+MrGVSV@users.noreply.github.com>

[33mcommit f6b03aa27c3906ccb7963f0967d41cdb31ddc6b1[m
Author: Andre Popovitch <andre@popovit.ch>
Date:   Mon Oct 24 21:01:09 2022 +0000

    Rename `play` to `start` and add new `play` method that won't overwrite the existing animation if it's already playing (#6350)
    
    # Objective
    
    - You usually want to say that a given animation *should* be playing, doing nothing if it's already playing.
    
    ## Solution
    
    - Rename play to start and add new play method that won't overwrite the existing animation if it's already playing #6350
    
    ---
    
    ## Changelog
    
    ### Changed
    
    `AnimationPlayer::play` will now not restart the animation if it's already playing
    
    ### Added
    
    An `AnimationPlayer ::start` method, which has the old behavior of `play`
    
    ## Migration guide
    
    - If you were using `play` to restart an animation that was already playing, that functionality has been moved to `start`. Now, `play` won't have any effect if the requested animation is already playing.

[33mcommit b291223e341c3a57c97d6f80b13e61e31d430a12[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Mon Oct 24 21:01:08 2022 +0000

    Implement IntoIterator for ECS wrapper types. (#5096)
    
    # Objective
    
    Improve ergonomics by passing on the `IntoIterator` impl of the underlying type to wrapper types.
    
    ## Solution
    
    Implement `IntoIterator` for ECS wrapper types (Mut, Local, Res, etc.).
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 6aa2dce0d1fb4257a5df49459484d39037a6da8f[m
Author: Lucidus115 <minecrafter141542@gmail.com>
Date:   Mon Oct 24 20:42:13 2022 +0000

    Re-add local bool `has_received_time` in `time_system` (#6357)
    
    # Objective
    
    - Fixes #6355
    
    ## Solution
    
    - Add the removed local bool from #6159

[33mcommit 3c13c75036108eec91beba58621e32e50c1be11d[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Mon Oct 24 19:24:49 2022 +0000

    Optimize rendering slow-down at high entity counts (#5509)
    
    # Objective
    
    - Improve #3953
    
    ## Solution
    
    - The very specific circumstances under which the render world is reset meant that the flush_as_invalid function could be replaced with one that had a noop as its init method.
    - This removes a double-writing issue leading to greatly increased performance.
    
    Running the reproduction code in the linked issue, this change nearly doubles the framerate.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 3689d5d086f0742ca3688c7f8acbc40cfb150c16[m
Author: Matthias Deiml <matthias@deiml.net>
Date:   Mon Oct 24 15:38:51 2022 +0000

    Avoid creating `SurfaceConfiguration` in `prepare_windows` (#6255)
    
    # Objective
    
    - Avoids creating a `SurfaceConfiguration` for every window in every frame for the `prepare_windows` system
    - As such also avoid calling `get_supported_formats` for every window in every frame
    
    ## Solution
    
    - Construct `SurfaceConfiguration` lazyly in `prepare_windows`
    
    ---
    
    This also changes the error message for failed initial surface configuration from "Failed to acquire next swapchain texture" to "Error configuring surface".

[33mcommit 0cbd1bbe43cccd60ce1f13bd779694a35f58f8a1[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Oct 24 14:53:19 2022 +0000

    expose window alpha mode (#6331)
    
    # Objective
    
    - Being able to set the `CompositeAlphaMode`
    
    ## Solution
    
    - Expose it on `WindowDescriptor`, in the same way as `PresentMode` is exposed

[33mcommit c9888a969c28928e244ac8c0ec0c587a922d9f49[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Mon Oct 24 14:53:18 2022 +0000

    Fix outdated and badly formatted docs for `WindowDescriptor::transparent` (#6329)
    
    # Objective
    
    See title
    
    ## Before / After
    
    <img width="988" alt="Screen Shot 2022-10-21 at 10 51 12 AM" src="https://user-images.githubusercontent.com/200550/197258517-29fec3e0-e272-4ab1-9f4c-c646b04876f2.png">
    <img width="988" alt="Screen Shot 2022-10-21 at 10 51 24 AM" src="https://user-images.githubusercontent.com/200550/197258519-7fbaf058-fc2c-469e-ae34-5531f02a632f.png">
    
    ## Open questions
    
    ~~The old docs previously linked to a winit but that was preventing transparency for working on Windows 11. The recent winit upgrade should have fixed this.~~
    
    ~~I'm unable to test on Windows 11 though, so someone should verify that we no longer need to call this out as being broken.~~
    
    edit: Seems like we're good on Windows 11, thanks.

[33mcommit b2f223b98f34d2fe437b9eea2e7e834200f731b7[m
Author: Lena MilizÃ© <me@lvmn.org>
Date:   Mon Oct 24 14:53:16 2022 +0000

    document insert_non_send_resource panics (#6328)
    
    Signed-off-by: Lena MilizÃ© <me@lvmn.org>
    
    # Objective
    
    Fixes #6277.
    
    ## Solution
    
    Adds `# Panics` section to [`fn insert_non_send_resource`](http://dev-docs.bevyengine.org/bevy/ecs/world/struct.World.html#method.insert_non_send_resource) documentation, which explains that it panics when called from thread other than main thread.

[33mcommit e8368a076164f6cd05582c44597d19590453ebf9[m
Author: dataphract <dataphract@gmail.com>
Date:   Mon Oct 24 14:53:14 2022 +0000

    doc: document `PerspectiveProjection` (#6310)
    
    # Objective
    
    Fixes #6279.
    
    ## Solution
    
    Added documentation explaining the meanings and default values of `PerspectiveProjection`'s fields.
    
    
    Co-authored-by: dataphract <86984145+dataphract@users.noreply.github.com>

[33mcommit 19fc1f1ed2ddd8b9cbd0c79f1fa6b82c075dafb8[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Mon Oct 24 14:53:12 2022 +0000

    bevy_reflect: Fix `DynamicScene` not respecting component registrations during serialization (#6288)
    
    # Objective
    
    When running the scene example, you might notice we end up printing out the following:
    ```ron
    // ...
    {
      "scene::ComponentB": (
        value: "hello",
        _time_since_startup: (
          secs: 0,
          nanos: 0,
        ),
      ),
    },
    // ...
    ```
    
    We should not be printing out `_time_since_startup` as the field is marked with `#[reflect(skip_serializing)]`:
    
    ```rust
    #[derive(Component, Reflect)]
    #[reflect(Component)]
    struct ComponentB {
      pub value: String,
      #[reflect(skip_serializing)]
      pub _time_since_startup: Duration,
    }
    ```
    
    This is because when we create the `DynamicScene`, we end up calling `Reflect::clone_value`:
    
    https://github.com/bevyengine/bevy/blob/82126697ee4f635cf6b22e0b9f25e5aca95fda4a/crates/bevy_scene/src/dynamic_scene_builder.rs#L114-L114
    
    This results in non-Value types being cloned into Dynamic types, which means the `TypeId` returned from `reflected_value.type_id()` is not the same as the original component's.
    
    And this meant we were not able to locate the correct `TypeRegistration`.
    
    ## Solution
    
    Use `TypeInfo::type_id()` instead of calling `Any::type_id()` on the value directly.
    
    ---
    
    ## Changelog
    
    * Fix a bug introduced in `0.9.0-dev` where scenes disregarded component's type registrations

[33mcommit a3ca184128c1574cccd7866863a03f2a80368751[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Oct 24 14:33:51 2022 +0000

    Fix clipping in UI (#6351)
    
    # Objective
    
    - Clipping (visible in the UI example with text scrolling) is funky
    - Fixes #6287
    
    ## Solution
    
    - Fix UV calculation:
      - correct order for values (issue introduced in #6000)
    
      - add the `y` values instead of subtracting them now that vertical order is reversed
      - take scale factor into account (bug already present before reversing the order)
    - While around clipping, I changed clip to only mutate when changed
    
    No more funkiness! ð
    
    <img width="696" alt="Screenshot 2022-10-23 at 22 44 18" src="https://user-images.githubusercontent.com/8672791/197417721-30ad4150-5264-427f-ac82-e5265c1fb3a9.png">

[33mcommit bcc33f6757523a9a7aca4a73388b0bb633b0d77a[m
Author: dataphract <dataphract@gmail.com>
Date:   Mon Oct 24 14:33:50 2022 +0000

    feat: add GamepadInfo, expose gamepad names (#6342)
    
    # Objective
    
    Fixes #6339.
    
    ## Solution
    
    This PR adds a new type, `GamepadInfo`, which holds metadata associated with a particular `Gamepad`. The `Gamepads` resource now holds a `HashMap<Gamepad, GamepadInfo>`. The `GamepadInfo` is created when the gamepad backend (by default `bevy_gilrs`) emits a "gamepad connected" event.
    
    The `gamepad_viewer` example has been updated to showcase the new functionality.
    
    Before:
    
    ![bevy-gamepad-old](https://user-images.githubusercontent.com/86984145/197359427-2130a3c0-bd8a-4683-ae24-2a9eaa98b586.png)
    
    After:
    
    ![bevy-gamepad-new](https://user-images.githubusercontent.com/86984145/197359429-f7963163-df26-4906-af7f-6186fe3bd338.png)
    
    
    ---
    
    ## Changelog
    
    ### Added
    
    - Added `GamepadInfo`.
    - Added `Gamepads::name()`, which returns the name of the specified gamepad if it exists.
    
    ### Changed
    
    - `GamepadEventType::Connected` is now a tuple variant with a single field of type `GamepadInfo`.
    - Since `GamepadInfo` is not `Copy`, `GamepadEventType` is no longer `Copy`. The same is true of `GamepadEvent` and `GamepadEventRaw`.
    
    ## Migration Guide
    
    - Pattern matches on `GamepadEventType::Connected` will need to be updated, as the form of the variant has changed.
    - Code that requires `GamepadEvent`, `GamepadEventRaw` or `GamepadEventType` to be `Copy` will need to be updated.

[33mcommit c9ec5c771a2a5af318b672a5cddf8831b6c8b7c9[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Mon Oct 24 14:33:49 2022 +0000

    Add `set_parent` and `remove_parent` to `EntityCommands` (#6189)
    
    I found myself doing
    ```rust
    let child = commands.spawn(..).id();
    commands.entity(parent).add_child(child);
    ```
    When that could just be
    ```rust
    commands.spawn(..).set_parent(parent);
    ```
    
    Adding `set_parent` was trivial as it's just an `AddChild` command. Most of the changes are for `remove_parent`.
    Also updated some outdated docs.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit f7d3fbc7d52078354430704e585885688118dcf7[m
Author: Lucidus115 <minecrafter141542@gmail.com>
Date:   Mon Oct 24 14:33:47 2022 +0000

    Add `TimeUpdateStrategy` resource for manual `Time` updating (#6159)
    
    # Objective
    
    - Addresses #6146 by allowing manual `Time` updating
    
    ## Solution
    - Create `TimeUpdateStrategy` config resource
    - Allow users to specify a manual `Instant/Duration` or leave as default (automatic)
    - Get resource in `bevy_time::time_system`and update time with desired value
    ---
    
    ## Changelog
    
    - Add `TimeUpdateStrategy` resource
    - Update `bevy_time::time_system` to use optional manual values
    
    Co-authored-by: BuildTools <unconfigured@null.spigotmc.org>
    Co-authored-by: Lucidus115 <92978847+Lucidus115@users.noreply.github.com>

[33mcommit 9066d514208671d8c62031465dea5eb977c51e25[m
Author: Dawid Piotrowski <dawidekpe@gmail.com>
Date:   Mon Oct 24 14:33:46 2022 +0000

    Utility methods for Val (#6134)
    
    # Objective
    
    Adds a better interface for performing mathematical operations with UI unit `Val`. Fixes #6080.
    
    ## Solution
    
    - Added `try_add` and `try_sub` methods to Val.
    - Removed the `Add` and `AddAssign` impls for `Val` that introduced unintuitive and bug-prone behaviour.
    - As a consequence of the prior,  ~~changed the `Add` and `Sub` impls for the `Size` struct to take a `(Val, Val)` instead of `Vec2`~~ deleted the `Add` and `Sub` impls for the `Size` struct
    - Added a `From<(Val, Val)>` impl for the `Size` struct
    - Added `evaluate(size: f32)` method that converts from `Val::Percent` to `Val::Px`.
    - Added `try_add_with_size` and `try_sub_with_size` methods to `Val`, which evaluate `Val::Percent` values into `Val::Px` values before adding.
    
    ---
    
    ## Migration Guide
    
    Instead of using the + and - operators, perform calculations on `Val`s using the new `try_add` and `try_sub` methods. Multiplication and division remained unchanged. Also, when adding or subtracting from `Size`, ~~use a `Val` tuple instead of `Vec2`~~ perform the addition on `width` and `height` separately.
    
    
    Co-authored-by: Dawid Piotrowski <41804418+Pietrek14@users.noreply.github.com>

[33mcommit 7a41efa227de1285e9011c908e7f31f1abae9b38[m
Author: Marc-Stefan Cassola <maccesch@synphonyte.com>
Date:   Mon Oct 24 14:33:45 2022 +0000

    implemented #[bundle(ignore)] (#6123)
    
    # Objective
    
    Fixes #5559
    
    Replaces #5628
    
    ## Solution
    
    Because the generated method from_components() creates an instance of Self my implementation requires any field type that is marked to be ignored to implement Default.
    
    ---
    
    ## Changelog
    
    Added the possibility to ignore fields in a bundle with `#[bundle(ignore)]`. Typically used when `PhantomData` needs to be added to a `Bundle`.

[33mcommit 1d22634cfbef189ba7355f6114f418885b06da9b[m
Author: Cameron <51241057+maniwani@users.noreply.github.com>
Date:   Mon Oct 24 14:14:25 2022 +0000

    better wording for time scaling docs (#6340)
    
    Quick follow-up to #5752. I think this is a slightly better wording.

[33mcommit c226fee70793515257c938cbebbd3ddf7d142f0f[m
Author: Yyee <ongyernyee@gmail.com>
Date:   Mon Oct 24 14:14:24 2022 +0000

    Add From<String> for AssetPath<'a> (#6337)
    
    # Objective
    Fixes #6291
    
    ## Solution
    Implement `From<String>` for `AssetPath<'a>`

[33mcommit 0f3f628c48814c9fce49f518e5809eb500fb7a4e[m
Author: Mike <mike.hsu@gmail.com>
Date:   Mon Oct 24 13:46:40 2022 +0000

    tick local executor (#6121)
    
    # Objective
    
    - #4466 broke local tasks running.
    - Fixes https://github.com/bevyengine/bevy/issues/6120
    
    ## Solution
    
    - Add system for ticking local executors on main thread into bevy_core where the tasks pools are initialized.
    - Add ticking local executors into thread executors
    
    ## Changelog
    
    - tick all thread local executors in task pool.
    
    ## Notes
    
    - ~~Not 100% sure about this PR. Ticking the local executor for the main thread in scope feels a little kludgy as it requires users of bevy_tasks to be calling scope periodically for those tasks to make progress.~~ took this out in favor of a system that ticks the local executors.

[33mcommit 64a8485a112156d296b4e8c89a5cd95dd8f45463[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Oct 24 13:46:39 2022 +0000

    Disabling default features support in bevy_ecs, bevy_reflect and bevy (#5993)
    
    # Objective
    
    - Fix disabling features in bevy_ecs (broken by #5630)
    - Add tests in CI for bevy_ecs, bevy_reflect and bevy as those crates could be use standalone

[33mcommit e4af823b451a52ec7a70bc16d151c4beea8c6725[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Mon Oct 24 13:46:38 2022 +0000

    Clarify the behaviour of `iter_many` in the docs (#5973)
    
    Add the following message:
    ```
    Items are returned in the order of the list of entities.
    Entities that don't match the query are skipped.
    ```
    
    Additionally, the docs in `iter.rs` and `state.rs` were updated to match those in `query.rs`.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit c19aa5939d0c9b7e8c0557933475bf7df273b1e3[m
Author: Christopher Durham <cad97@cad97.com>
Date:   Mon Oct 24 13:46:37 2022 +0000

    Add Exponential Moving Average into diagnostics (#4992)
    
    # Objective
    
    - Add Time-Adjusted Rolling EMA-based smoothing to diagnostics.
    - Closes #4983; see that issue for more more information.
    
    ## Terms
    
    - EMA - [Exponential Moving Average](https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average)
    - SMA - [Simple Moving Average](https://en.wikipedia.org/wiki/Moving_average#Simple_moving_average)
    
    ## Solution
    
    - We use a fairly standard approximation of a true EMA where $EMA_{\text{frame}} = EMA_{\text{previous}} + \alpha \left( x_{\text{frame}} - EMA_{\text{previous}} \right)$ where $\alpha = \Delta t / \tau$ and $\tau$ is an arbitrary smoothness factor. (See #4983 for more discussion of the math.)
    - The smoothness factor is here defaulted to $2 / 21$; this was chosen fairly arbitrarily as supposedly related to the existing 20-bucket SMA.
    - The smoothness factor can be set on a per-diagnostic basis via `Diagnostic::with_smoothing_factor`.
    
    ---
    
    ## Changelog
    
    ### Added
    
    - `Diagnostic::smoothed` - provides an exponentially smoothed view of a recorded diagnostic, to e.g. reduce jitter in frametime readings.
    
    ### Changed
    - `LogDiagnosticsPlugin` now records the smoothed value rather than the raw value.
      - For diagnostics recorded less often than every 0.1 seconds, this change to defaults will have no visible effect.
      - For discrete diagnostics where this smoothing is not desirable, set a smoothing factor of 0 to disable smoothing.
      - The average of the recent history is still shown when available.

[33mcommit 2b9653094762f0be2ef46b5cfbc7f68f2516114c[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon Oct 24 13:46:36 2022 +0000

    Extract Resources into their own dedicated storage (#4809)
    
    # Objective
    At least partially addresses #6282.
    
    Resources are currently stored as a dedicated Resource archetype (ID 1). This allows for easy code reusability, but unnecessarily adds 72 bytes (on 64-bit systems) to the struct that is only used for that one archetype. It also requires several fields to be `pub(crate)` which isn't ideal.
    
    This should also remove one sparse-set lookup from fetching, inserting, and removing resources from a `World`.
    
    ## Solution
    
    - Add `Resources` parallel to `Tables` and `SparseSets` and extract the functionality used by `Archetype` in it.
    - Remove `unique_components` from `Archetype`
    - Remove the `pub(crate)` on `Archetype::components`.
    - Remove `ArchetypeId::RESOURCE`
    - Remove `Archetypes::resource` and `Archetypes::resource_mut`
    
    ---
    
    ## Changelog
    Added: `Resources` type to store resources.
    Added: `Storages::resource`
    Removed: `ArchetypeId::RESOURCE`
    Removed: `Archetypes::resource` and `Archetypes::resources`
    Removed: `Archetype::unique_components` and `Archetypes::unique_components_mut`
    
    ## Migration Guide
    Resources have been moved to `Resources` under `Storages` in `World`. All code dependent on `Archetype::unique_components(_mut)` should access it via `world.storages().resources()` instead.
    
    All APIs accessing the raw data of individual resources (mutable *and* read-only) have been removed as these APIs allowed for unsound unsafe code. All usages of these APIs should be changed to use `World::{get, insert, remove}_resource`.

[33mcommit b508b5c7c7f460452077e7372448532f05d40e60[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon Oct 24 13:22:05 2022 +0000

    Skip empty archetypes and tables when iterating over queries (#4724)
    
    # Objective
    Speed up queries that are fragmented over many empty archetypes and tables.
    
    ## Solution
    Add a early-out to check if the table or archetype is empty before iterating over it. This adds an extra branch for every archetype matched, but skips setting the archetype/table to the underlying state and any iteration over it.
    
    This may not be worth it for the default `Query::iter` and maybe even the `Query::for_each` implementations, but this definitely avoids scheduling unnecessary tasks in the `Query::par_for_each` case.
    
    Ideally, `matched_archetypes` should only contain archetypes where there's actually work to do, but this would add a `O(n)` flat cost to every call to `update_archetypes` that scales with the number of matched archetypes.
    
    TODO: Benchmark

[33mcommit 7989cb2650cb84b67eba7c0343b48e8e3b318ba1[m
Author: Cameron <51241057+maniwani@users.noreply.github.com>
Date:   Sat Oct 22 18:52:29 2022 +0000

    Add global time scaling (#5752)
    
    # Objective
    
    - Make `Time` API more consistent.
    - Support time accel/decel/pause.
    
    ## Solution
    
    This is just the `Time` half of #3002. I was told that part isn't controversial.
    
    - Give the "delta time" and "total elapsed time" methods `f32`, `f64`, and `Duration` variants with consistent naming.
    - Implement accelerating / decelerating the passage of time.
    - Implement stopping time.
    
    ---
    
    ## Changelog
    
    - Changed `time_since_startup` to `elapsed` because `time.time_*` is just silly.
    - Added `relative_speed` and `set_relative_speed` methods.
    - Added `is_paused`, `pause`, `unpause` , and methods. (I'd prefer `resume`, but `unpause` matches `Timer` API.)
    - Added `raw_*` variants of the "delta time" and "total elapsed time" methods.
    - Added `first_update` method because there's a non-zero duration between startup and the first update.
    
    ## Migration Guide
    
    - `time.time_since_startup()` -> `time.elapsed()`
    - `time.seconds_since_startup()` -> `time.elapsed_seconds_f64()`
    - `time.seconds_since_startup_wrapped_f32()` -> `time.elapsed_seconds_wrapped()`
    
    If you aren't sure which to use, most systems should continue to use "scaled" time (e.g. `time.delta_seconds()`). The realtime "unscaled" time measurements (e.g. `time.raw_delta_seconds()`) are mostly for debugging and profiling.

[33mcommit cb5e2d84beb7f36427eeec13729f6dd52e04fbc0[m
Author: Torstein Grindvik <torstein.grindvik@nordicsemi.no>
Date:   Sat Oct 22 08:37:51 2022 +0000

    Use wgsl saturate (#6318)
    
    # Objective
    
    Use saturate wgsl function now implemented in naga (version 0.10.0). There is now no need for one in utils.wgsl.
    
    naga's version allows usage for not only scalars but vectors as well.
    
    ## Solution
    
    Remove the utils.wgsl saturate function.
    
    ## Changelog
    
    Remove saturate function from utils.wgsl in favor of saturate in naga v0.10.0.

[33mcommit 543465b721048355e34eb6078923645747c1d44b[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Fri Oct 21 11:15:06 2022 +0000

    Fix tests breaking when new WorldQuery impls are added (#6317)
    
    # Objective
    
    I recently wanted to look at the possibility of adding `Mutated` and `Unchanged` query filters and was confronted with some seemingly unrelated broken tests.
    
    These tests were written in such a way that changing the number of WorldQuery impls in the project would break them.
    
    Fortunately, a [very recent release of trybuild](https://github.com/dtolnay/trybuild/releases/tag/1.0.70) has made this unnecessary.
    
    ## Solution
    
    Replace hardcoded numbers in test output with `$N` placeholders.

[33mcommit 48e9dc19640ae5f6c8cee31e6f36bb1ac71860af[m
Author: Mike <robparrett@gmail.com>
Date:   Thu Oct 20 20:23:57 2022 +0000

    fix failing doc test and clear up docs (#6314)
    
    # Objective
    
    Fixes https://github.com/bevyengine/bevy/issues/6306
    
    ## Solution
     Change the failing assert and expand example to explain when ordering is deterministic or not.
    
    Co-authored-by: Mike Hsu <mike.hsu@gmail.com>

[33mcommit abbc0cf3397246f9b6713c767ed2328afc6594ef[m
Author: Sludge <96552222+SludgePhD@users.noreply.github.com>
Date:   Wed Oct 19 21:48:19 2022 +0000

    Register `RenderLayers` type in `CameraPlugin` (#6308)
    
    # Objective
    
    The `RenderLayers` type is never registered, making it unavailable for reflection.
    
    ## Solution
    
    Register it in `CameraPlugin`, the same plugin that registers the related `Visibility*` types.

[33mcommit 7db9b08b5f3aa55c039cd6490484f42cec3fadf8[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Wed Oct 19 18:54:37 2022 +0000

    Update clap requirement from 3.2 to 4.0 (#6303)
    
    # Objective
    
    Alternative to #6150
    
    Dependabot's PR doesn't seem to break anything, but there are some deprecations that we might as well fix up.
    
    ## Solution
    
    https://github.com/clap-rs/clap/blob/master/CHANGELOG.md#migrating
    
    Update clap in `build-wasm-example` and `span-cmp`. Other tools don't use clap.
    
    Remove references to `value_parser`. It's the default now.
    
    Change `#[clap()]` to `#[arg()]`.
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

[33mcommit c313e21d65e036ca6aea3d3467fed8dd2493ae83[m
Author: VitalyR <vitalyankh@gmail.com>
Date:   Wed Oct 19 17:40:23 2022 +0000

    Update `wgpu` to 0.14.0, `naga` to `0.10.0`, `winit` to 0.27.4, `raw-window-handle` to 0.5.0, `ndk` to 0.7 (#6218)
    
    # Objective
    
    - Update `wgpu` to 0.14.0, `naga` to `0.10.0`, `winit` to 0.27.4, `raw-window-handle` to 0.5.0, `ndk` to 0.7.
    
    ## Solution
    
    ---
    
    ## Changelog
    
    ### Changed
    
    - Changed `RawWindowHandleWrapper` to `RawHandleWrapper` which wraps both `RawWindowHandle` and `RawDisplayHandle`, which satisfies the `impl HasRawWindowHandle and HasRawDisplayHandle` that `wgpu` 0.14.0 requires.
    
    - Changed `bevy_window::WindowDescriptor`'s `cursor_locked` to `cursor_grab_mode`, change its type from `bool` to `bevy_window::CursorGrabMode`.
    
    ## Migration Guide
    
    - Adjust usage of `bevy_window::WindowDescriptor`'s `cursor_locked` to `cursor_grab_mode`, and adjust its type from `bool` to `bevy_window::CursorGrabMode`.

[33mcommit b2ca3fb8b586a6b949979cf66527c878d305233a[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Wed Oct 19 15:05:12 2022 +0000

    Fix camera ambiguity warning in IOS example (#6300)
    
    # Objective
    
    Fix a camera ambiguity warning in the IOS example
    
    ## Solution
    
    I'm assuming that this was accidentally added when UI cameras stopped being a thing. So just delete the extra camera.

[33mcommit c7fe4027a1cc4ced0171abf64623939ecb2ddf47[m
Author: å¼ æä¼ <lewiszlw520@gmail.com>
Date:   Wed Oct 19 11:36:26 2022 +0000

    Rename example file scaling.rs to ui_scaling.rs (#6296)
    
    # Objective
    
    To be consistent like other examples, it's better to keep file name and example name same, so we don't need to find correct example name in Cargo.toml.
    
    ## Solution
    
    Rename example file scaling.rs to ui_scaling.rs.

[33mcommit a658bfef19992c3b0e7bbbfde24bc88cbb098e27[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Tue Oct 18 13:49:57 2022 +0000

    bevy_reflect: Reflect doc comments (#6234)
    
    # Objective
    
    Resolves #6197
    
    Make it so that doc comments can be retrieved via reflection.
    
    ## Solution
    
    Adds the new `documentation` feature to `bevy_reflect` (disabled by default).
    
    When enabled, documentation can be found using `TypeInfo::doc` for reflected types:
    
    ```rust
    /// Some struct.
    ///
    /// # Example
    ///
    /// ```ignore
    /// let some_struct = SomeStruct;
    /// ```
    #[derive(Reflect)]
    struct SomeStruct;
    
    let info = <SomeStruct as Typed>::type_info();
    assert_eq!(
        Some(" Some struct.\n\n # Example\n\n ```ignore\n let some_struct = SomeStruct;\n ```"),
        info.docs()
    );
    ```
    
    ### Notes for Reviewers
    
    The bulk of the files simply added the same 16 lines of code (with slightly different documentation). Most of the real changes occur in the `bevy_reflect_derive` files as well as in the added tests.
    
    ---
    
    ## Changelog
    
    * Added `documentation` feature to `bevy_reflect`
    * Added `TypeInfo::docs` method (and similar methods for all info types)

[33mcommit 4407cdb423ddb82a1992f2b84015fd3fdab65abe[m
Author: Michel van der Hulst <michel@voorkanter.com>
Date:   Tue Oct 18 13:28:35 2022 +0000

    Fixes scroll example after inverting UI Y axis (#6290)

[33mcommit 0981789ec7e6e515048c45f57d4494060bc031df[m
Author: Michel van der Hulst <michel@voorkanter.com>
Date:   Tue Oct 18 13:28:34 2022 +0000

    Fixes incorrect glyph positioning for text2d (#6273)
    
    # Objective
    Fixes #6272
    
    ## Solution
    Revert to old way of positioning text for Text2D rendered text.
    
    
    Co-authored-by: Michel van der Hulst <hulstmichel@gmail.com>

[33mcommit c6e0da4bcb2b6f60450fff300f05fcf6ad18136a[m
Author: thebluefish <sean.kaufman92@gmail.com>
Date:   Mon Oct 17 16:42:34 2022 +0000

    Fix end-of-animation index OOB (#6210)
    
    # Objective
    
    Fixes #6204
    
    ## Solution
    
    Added another branch to handle end-of-animation special case

[33mcommit b09b2c10566fcfc1aa399504bf255746f309c4a1[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Oct 17 16:25:12 2022 +0000

    Create a scene from a dynamic scene (#6229)
    
    # Objective
    
    - Add a method to create a `Scene` from a `DynamicScene`

[33mcommit 88700f35955cb400d411974e5bbdd84fd223149d[m
Author: James Sully <sullyj3@gmail.com>
Date:   Mon Oct 17 15:42:43 2022 +0000

    Add mutating `toggle` method to `Visibility` component (#6268)
    
    # Objective
    
    Make toggling the visibility of an entity slightly more convenient.
    
    ## Solution
    
    Add a mutating `toggle` method to the `Visibility` component
    
    ```rust
    fn my_system(mut query: Query<&mut Visibility, With<SomeMarker>>) {
        let mut visibility = query.single_mut();
        // before:
        visibility.is_visible = !visibility.is_visible;
        // after:
        visibility.toggle();
    }
    ```
    
    ## Changelog
    
    ### Added
    - Added a mutating `toggle` method to the `Visibility` component

[33mcommit b840ba3eafa52950c2a19c6cc13b1e3ff69e88cb[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Mon Oct 17 15:26:39 2022 +0000

    Tidy up surface creation in RenderPlugin (#6276)
    
    # Objective
    
    Tidy up a bit

[33mcommit 708535536b9e97684c2dbdc9eba41752da9e863e[m
Author: JMS55 <47158642+JMS55@users.noreply.github.com>
Date:   Mon Oct 17 14:38:58 2022 +0000

    Document EntityCommands/EntityMut insert() (#6270)
    
    Fixes #6258.

[33mcommit bfbcd47725e1557e35549e63badaa0e5464b77b3[m
Author: Swords <33922797+SleepySwords@users.noreply.github.com>
Date:   Mon Oct 17 14:38:57 2022 +0000

    Add default implementation of Serialize and Deserialize to Timer and Stopwatch (#6248)
    
    # Objective
    
    Fixes #6244
    
    ## Solution
    
    Uses derive to implement `Serialize` and `Deserialize` for `Timer` and `Stopwatch`
    
    ### Things to consider
    - Should fields such as `finished` and `times_finished_this_tick` in `Timer` be serialized?
    - Does `Countdown` and `PrintOnCompletionTimer` need to be serialized and deserialized?
    
    ## Changelog
    
    Added `Serialize` and `Deserialize` implementations to `Timer` and `Stopwatch`, `Countdown`.

[33mcommit 132e8fb3821cde83e327cc3b18e0a7b748ea19c9[m
Author: TehPers <tehperz@gmail.com>
Date:   Mon Oct 17 14:38:56 2022 +0000

    Support multiple `#[reflect]`/`#[reflect_value]` + improve error messages (#6237)
    
    # Objective
    
    Currently, surprising behavior happens when specifying `#[reflect(...)]` or `#[reflect_value(...)]` multiple times. Rather than merging the traits lists from all attributes, only the trait list from the last attribute is used. For example, in the following code, only the `Debug` and `Hash` traits are reflected and not `Default` or `PartialEq`:
    
    ```rs
    #[derive(Debug, PartialEq, Hash, Default, Reflect)]
    #[reflect(PartialEq, Default)]
    #[reflect(Debug, Hash)]
    struct Foo;
    ```
    
    This is especially important when some traits should only be reflected under certain circumstances. For example, this previously had surprisingly behavior when the "serialize" feature is enabled:
    
    ```rs
    #[derive(Debug, Hash, Reflect)]
    #[reflect(Debug, Hash)]
    #[cfg_attr(
        feature = "serialize",
        derive(Serialize, Deserialize),
        reflect(Serialize, Deserialize)
    ]
    struct Foo;
    ```
    
    In addition, compile error messages generated from using the derive macro often point to the `#[derive(Reflect)]` rather than to the source of the error. It would be a lot more helpful if the compiler errors pointed to what specifically caused the error rather than just to the derive macro itself.
    
    ## Solution
    
    Merge the trait lists in all `#[reflect(...)]` and `#[reflect_value(...)]` attributes. Additionally, make `#[reflect]` and `#[reflect_value]` mutually exclusive.
    
    Additionally, span information is carried throughout some parts of the code now to ensure that error messages point to more useful places and better indicate what caused those errors. For example, `#[reflect(Hash, Hash)]` points to the second `Hash` as the source of an error. Also, in the following example, the compiler error now points to the `Hash` in `#[reflect(Hash)]` rather than to the derive macro:
    
    ```rs
    #[derive(Reflect)]
    #[reflect(Hash)] // <-- compiler error points to `Hash` for lack of a `Hash` implementation
    struct Foo;
    ```
    
    ---
    
    ## Changelog
    
    Changed
    - Using multiple `#[reflect(...)]` or `#[reflect_value(...)]` attributes now merges the trait lists. For example, `#[reflect(Debug, Hash)] #[reflect(PartialEq, Default)]` is equivalent to `#[reflect(Debug, Hash, PartialEq, Default)]`.
      - Multiple `#[reflect(...)]` and `#[reflect_value(...)]` attributes were previously accepted, but only the last attribute was respected.
      - Using both `#[reflect(...)]` and `#[reflect_value(...)]` was previously accepted, but had surprising behavior. This is no longer accepted.
    - Improved error messages for `#[derive(Reflect)]` by propagating useful span information. Many errors should now point to the source of those errors rather than to the derive macro.

[33mcommit c11fbfb3e1f8a9aeb7dc0c214ac355ca69973bee[m
Author: targrub <targrub@gmail.com>
Date:   Mon Oct 17 14:38:55 2022 +0000

    Add getters and setters for `InputAxis` and `ButtonSettings` (#6088)
    
    # Objective
    Fixes https://github.com/bevyengine/bevy/issues/3418
    
    ## Solution
    
    Originally a rebase of https://github.com/bevyengine/bevy/pull/3446.  Work was originally done by mfdorst, who should receive considerable credit.  Then the error types were extensively reworked by targrub.
    
    ## Migration Guide
    
    `AxisSettings` now has a `new()`, which may return an `AxisSettingsError`.
    `AxisSettings` fields made private; now must be accessed through getters and setters.  There's a dead zone, from `.deadzone_upperbound()` to `.deadzone_lowerbound()`, and a live zone, from `.deadzone_upperbound()` to `.livezone_upperbound()` and from `.deadzone_lowerbound()` to `.livezone_lowerbound()`.
    `AxisSettings` setters no longer panic.
    `ButtonSettings` fields made private; now must be accessed through getters and setters.
    `ButtonSettings` now has a `new()`, which may return a `ButtonSettingsError`.
    
    Co-authored-by: targrub <62773321+targrub@users.noreply.github.com>

[33mcommit 964b047466f5dda68d71688b4e9a79526aa858b9[m
Author: targrub <targrub@gmail.com>
Date:   Mon Oct 17 14:19:24 2022 +0000

    Make `raw_window_handle` field in `Window` and `ExtractedWindow` an `Option`. (#6114)
    
    # Objective
    
    - Trying to make it possible to do write tests that don't require a raw window handle.
    - Fixes https://github.com/bevyengine/bevy/issues/6106.
    
    ## Solution
    
    - Make the interface and type changes.  Avoid accessing `None`.
    ---
    
    ## Changelog
    
    - Converted `raw_window_handle` field in both `Window` and `ExtractedWindow` to `Option<RawWindowHandleWrapper>`.
    - Revised accessor function `Window::raw_window_handle()` to return `Option<RawWindowHandleWrapper>`.
    - Skip conditions in loops that would require a raw window handle (to create a `Surface`, for example).
    
    ## Migration Guide
    
    `Window::raw_window_handle()` now returns `Option<RawWindowHandleWrapper>`.
    
    
    Co-authored-by: targrub <62773321+targrub@users.noreply.github.com>

[33mcommit bfd6285c3b47a1b2a19a14db46d3aed215c5bcf1[m
Author: Marlon <marlon.klaus@icloud.com>
Date:   Mon Oct 17 14:01:53 2022 +0000

    Add Eq & PartialEq to AssetPath (#6274)
    
    Adds `Eq` and `ArtialEq` to `AssetPath` to make `AssetPath` usable inside HashMaps.

[33mcommit 5878a62c3ff7e54405bd0f42ad6d64af70e1a878[m
Author: Lena MilizÃ© <me@lvmn.org>
Date:   Mon Oct 17 14:01:52 2022 +0000

    Link to `linux_dependencies.md` in the panic message when failing to detect a GPU (#6261)
    
    As suggested in #6104, it would be nice to link directly to `linux_dependencies.md` file in the panic message when running on Linux. And when not compiling for Linux, we fall back to the old message.
    
    Signed-off-by: Lena MilizÃ© <me@lvmn.org>
    
    # Objective
    
    Resolves #6104.
    
    ## Solution
    
    Add link to `linux_dependencies.md` when compiling for Linux, and fall back to the old one when not.

[33mcommit f9c56b321d5ebe424c8cd6d58fc500147fcfc04b[m
Author: Zicklag <zicklag@katharostech.com>
Date:   Mon Oct 17 14:01:50 2022 +0000

    Enable Constructing ReflectComponent/Resource (#6257)
    
    # Objective
    
    - Fixes #6206
    
    ## Solution
    
    - Create a constructor for creating `ReflectComponent` and `ReflectResource`
    
    ---
    
    ## Changelog
    
    > This section is optional. If this was a trivial fix, or has no externally-visible impact, you can delete this section.
    
    ### Added
    
    - Created constructors for `ReflectComponent` and `ReflectResource`, allowing for advanced scripting use-cases.

[33mcommit 89c4b77bddfc5e62983050316d2e8cd454310df8[m
Author: JoJoJet <21144246+JoJoJet@users.noreply.github.com>
Date:   Mon Oct 17 13:47:02 2022 +0000

    Add a method for accessing the width of a `Table` (#6249)
    
    # Objective
    
    There is currently no good way of getting the width (# of components) of a table outside of `bevy_ecs`.
    
    # Solution
    
    Added the methods `Table::{component_count, component_capacity}`
    For consistency and clarity, renamed `Table::{len, capacity}` to `entity_count` and `entity_capacity`.
    
    ## Changelog
    
    - Added the methods `Table::component_count` and `Table::component_capacity`
    - Renamed `Table::len` and `Table::capacity` to `entity_count` and `entity_capacity`
    
    ## Migration Guide
    
    Any use of `Table::len` should now be `Table::entity_count`. Any use of `Table::capacity` should now be `Table::entity_capacity`.

[33mcommit 73605f43b664cab6a330e0b3ca1856ffafaceee8[m
Author: Lena MilizÃ© <me@lvmn.org>
Date:   Mon Oct 17 13:47:01 2022 +0000

    Replace the `bool` argument of `Timer` with `TimerMode` (#6247)
    
    As mentioned in #2926, it's better to have an explicit type that clearly communicates the intent of the timer mode rather than an opaque boolean, which can be only understood when knowing the signature or having to look up the documentation.
    
    This also opens up a way to merge different timers, such as `Stopwatch`, and possibly future ones, such as `DiscreteStopwatch` and `DiscreteTimer` from #2683, into one struct.
    
    Signed-off-by: Lena MilizÃ© <me@lvmn.org>
    
    # Objective
    
    Fixes #2926.
    
    ## Solution
    
    Introduce `TimerMode` which replaces the `bool` argument of `Timer` constructors. A `Default` value for `TimerMode` is `Once`.
    
    ---
    
    ## Changelog
    
    ### Added
    
    - `TimerMode` enum, along with variants `TimerMode::Once` and `TimerMode::Repeating`
    
    ### Changed
    
    - Replace `bool` argument of `Timer::new` and `Timer::from_seconds` with `TimerMode`
    - Change `repeating: bool` field of `Timer` with `mode: TimerMode`
    
    ## Migration Guide
    
    - Replace `Timer::new(duration, false)` with `Timer::new(duration, TimerMode::Once)`.
    - Replace `Timer::new(duration, true)` with `Timer::new(duration, TimerMode::Repeating)`.
    - Replace `Timer::from_seconds(seconds, false)` with `Timer::from_seconds(seconds, TimerMode::Once)`.
    - Replace `Timer::from_seconds(seconds, true)` with `Timer::from_seconds(seconds, TimerMode::Repeating)`.
    - Change `timer.repeating()` to `timer.mode() == TimerMode::Repeating`.

[33mcommit a0f14681086bad5fa184d380bbc8dbc9db9ab34e[m
Author: mike <ramirezmike2@gmail.com>
Date:   Mon Oct 17 13:47:00 2022 +0000

    Add iter_entities to World #6228 (#6242)
    
    # Objective
    
    - Add a way to iterate over all entities from &World
    
    ## Solution
    
    - Added a function `iter_entities` on World which returns an iterator of `Entity` derived from the entities in the `World`'s `archetypes`
    
    ---
    
    ## Changelog
    
    - Added a function `iter_entities` on World, allowing iterating over all entities in contexts where you only have read-only access to the World.

[33mcommit 05c7babba2f5e26503276875d0021bfafcfb3004[m
Author: Sergi-Ferrez <61662926+Sergi-Ferrez@users.noreply.github.com>
Date:   Mon Oct 17 13:27:24 2022 +0000

    Clarify `bevy::ui::Node` field and documentation (#5995)
    
    # Objective
    Fixes #5820
    
    ## Solution
    
    Change field name and documentation from `bevy::ui::Node` struct
    
    ---
    
    ## Changelog
    
    `bevy::ui::Node` `size` field has renamed to `calculated_size`
    
    ## Migration Guide
    
    All references to the old `size` name has been changed, to access `bevy::ui::Node` `size` field use `calculated_size`

[33mcommit 92ba6224b9b66eb779683603e7022e421511dfe5[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Thu Oct 13 12:53:18 2022 +0000

    Use `SpatialBundle`/`TransformBundle` in examples (#6002)
    
    Does what it do
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 000e6e2874b0e520015e67e05107a7b172d88386[m
Author: Martin Svanberg <martin@martinsvanberg.com>
Date:   Wed Oct 12 20:18:20 2022 +0000

    Fix documentation for looking_at/look_at (#4696)
    
    Bevy's coordinate system is right-handed Y up, so +Z points towards my nose and I'm looking in the -Z direction. Therefore, `Transform::looking_at/look_at` must be pointing towards -Z. Or am I wrong here?

[33mcommit ccf7c65a78780eaeec18396581ff3267cd3acbcd[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Oct 12 01:48:16 2022 +0000

    dynamic scene builder (#6227)
    
    # Objective
    
    - make it easier to build dynamic scenes
    
    ## Solution
    
    - add a builder to create a dynamic scene from a world. it can extract an entity or an iterator of entities
    - alternative to #6013, leaving the "hierarchy iteration" part to #6185 which does it better
    - alternative to #6004
    - using a builder makes it easier to chain several extractions

[33mcommit c0a93aa7a4d612cb3cdc3ef63c089ed032bed513[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Tue Oct 11 15:21:12 2022 +0000

    Rename system chaining to system piping (#6230)
    
    # Objective
    
    > System chaining is a confusing name: it implies the ability to construct non-linear graphs, and suggests a sense of system ordering that is only incidentally true. Instead, it actually works by passing data from one system to the next, much like the pipe operator.
    
    > In the accepted [stageless RFC](https://github.com/bevyengine/rfcs/blob/main/rfcs/45-stageless.md), this concept is renamed to piping, and "system chaining" is used to construct groups of systems with ordering dependencies between them.
    
    Fixes #6225.
    
    ## Changelog
    
    System chaining has been renamed to system piping to improve clarity (and free up the name for new ordering APIs).
    
    ## Migration Guide
    
    The `.chain(handler_system)` method on systems is now `.pipe(handler_system)`.
    The `IntoChainSystem` trait is now `IntoPipeSystem`, and the `ChainSystem` struct is now `PipeSystem`.

[33mcommit 6ce7ce208e717a0b0afe647599fe47565efcb428[m
Author: Michel van der Hulst <michel@voorkanter.com>
Date:   Tue Oct 11 12:51:44 2022 +0000

    Change UI coordinate system to have origin at top left corner (#6000)
    
    # Objective
    Fixes #5572
    
    ## Solution
    
    Approach is to invert the Y-axis of the UI Camera by changing the UI projection matrix to render the UI upside down.
    
    After that I'm trying to fix all issues, that pop up:
    - interaction expected the "old" position
    - images and text were displayed upside-down
    - baseline of text was based on the top of the glyph instead of bottom
    
    ... probably a lot more.
    
    ---
    
    Result when running examples:
    <details>
        <summary>Button example</summary>
    
    main branch:
    ![button main](https://user-images.githubusercontent.com/4232644/190856087-61dd1d98-42b5-4238-bd97-149744ddfeba.png)
    this pr:
    ![button pr](https://user-images.githubusercontent.com/4232644/190856097-3f4bc97a-ed15-4e97-b7f1-2b2dd6bb8b14.png)
    
    </details>
    
    <details>
        <summary>Text example</summary>
    
    m
    ![text main](https://user-images.githubusercontent.com/4232644/192142831-4cf19aa1-f49a-485e-af7b-374d6f5c396c.png)
    ain branch:
    
    
    this pr:
    ![text pr fixed](https://user-images.githubusercontent.com/4232644/192142829-c433db3b-32e1-4ee8-b493-0b4a4d9c8e70.png)
    
    
    </details>
    
    <details>
        <summary>Text debug example</summary>
    
    main branch:
    ![text_debug main](https://user-images.githubusercontent.com/4232644/192142822-940aefa6-e502-410b-8da4-5570f77b5df2.png)
    
    this pr:
    ![text_debug pr fixed](https://user-images.githubusercontent.com/4232644/194547010-8c968f5c-5a71-4ffc-871d-790c06d48016.png)
    
    </details>
    
    <details>
        <summary>Transparency UI example</summary>
    
    main branch:
    ![transparency_ui main](https://user-images.githubusercontent.com/4232644/190856172-328c60fe-3622-4598-97d5-2f1595db13b3.png)
    
    
    this pr:
    ![transperency_ui pr](https://user-images.githubusercontent.com/4232644/190856179-a2dafb99-41ea-45a9-9dd6-400fa3ef24b9.png)
    
    </details>
    
    <details>
        <summary>UI example</summary>
    
    **ui example**
    main branch:
    ![ui main](https://user-images.githubusercontent.com/4232644/192142812-e20ba31a-6841-46d9-a785-4198cf22dc99.png)
    
    this pr:
    ![ui pr fixed](https://user-images.githubusercontent.com/4232644/192142788-cc0b74e0-7710-4faa-b5a2-60270a5da77c.png)
    
    </details>
    
    ## Changelog
    UI coordinate system and cursor position was changed from bottom left origin, y+ up to top left origin, y+ down.
    
    ## Migration Guide
    All flex layout should be inverted (ColumnReverse => Column, FlexStart => FlexEnd, WrapReverse => Wrap)
    System where dealing with cursor position should be changed to account for cursor position being based on the top left instead of bottom left

[33mcommit 13dcdba05f6b080a947a0be5598b200662cc4e8e[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Oct 11 12:32:03 2022 +0000

    use bevy default texture format if the surface is not yet available (#6233)
    
    # Objective
    
    - Fix #6231
    
    ## Solution
    
    - In case no supported format is found, try to use Bevy default instead of panicking

[33mcommit 7673db731e7de0039dd97aa9c1b4ddf675ef9d60[m
Author: Emerson MX <emersonmx@gmail.com>
Date:   Mon Oct 10 23:59:27 2022 +0000

    Make TouchInput and ForceTouch serializable (#6191)
    
    Closes #6021

[33mcommit 1ca1c8c39e8254cf5408198fa9d112400af55240[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Mon Oct 10 23:40:32 2022 +0000

    Fix `RemoveChildren` command  (#6192)
    
    # Objective
    
    `RemoveChildren` could remove the `Parent` component from children belonging to a different parent, which breaks the hierarchy.
    
    This change looks a little funny because I'm reusing the events to avoid needing to clone the parent's `Children`.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit b4accebe1032fee62537903b71a9e2334cfc4b0e[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Oct 10 23:09:08 2022 +0000

    scenes: simplify return type of iter_instance_entities (#5994)
    
    # Objective
    
    - Taking the API improvement out of #5431
    - `iter_instance_entities` used to return an option of iterator, now it just returns an iterator
    
    ---
    
    ## Changelog
    
    - If you use `SceneSpawner::iter_instance_entities`, it no longer returns an `Option`. The iterator will be empty if the return value used to be `None`

[33mcommit 9a597b758e5b2b2cc4355185a3fcba9564bfb104[m
Author: targrub <targrub@gmail.com>
Date:   Mon Oct 10 20:59:38 2022 +0000

    Adding Debug implementations for App, Stage, Schedule, Query, QueryState, etc. (#6214)
    
    # Objective
    
    - Adding Debug implementations for App, Stage, Schedule, Query, QueryState.
    - Fixes #1130.
    
    ## Solution
    
    - Implemented std::fmt::Debug for a number of structures.
    
    ---
    
    ## Changelog
    
    Also added Debug implementations for ParallelSystemExecutor, SingleThreadedExecutor, various RunCriteria structures, SystemContainer, and SystemDescriptor.
    
    Opinions are sure to differ as to what information to provide in a Debug implementation.  Best guess was taken for this initial version for these structures.
    
    
    Co-authored-by: targrub <62773321+targrub@users.noreply.github.com>

[33mcommit 55d126cab9506dd24d9eeb87b3f31a56fb035c49[m
Author: Torstein Grindvik <torstein.grindvik@nordicsemi.no>
Date:   Mon Oct 10 19:23:43 2022 +0000

    Add globals struct to mesh2d (#6222)
    
    See commit message.
    I noticed I couldn't use `globals.time` when using `Material2d`.
    
    I copied the solution from 807336203903e516a8705a13316c2c2c20c0f5bb , and now `Material2d` works for me.
    
    Perhaps some of these struct definitions could be shared in the future, but for now I've just copy pasted it (it looked like the `View` struct was done that way).
    
    Ping @IceSentry , I saw a comment on the linked commit that you intended to do this work at some point in the future.

[33mcommit 740ae9a37f3a5d4d8f019021760f805d55d98a01[m
Author: Charles <c.giguere42@gmail.com>
Date:   Mon Oct 10 17:58:15 2022 +0000

    remove mandatory mesh attributes (#6127)
    
    # Objective
    
    - It's possible to create a mesh without positions or normals, but currently bevy forces these attributes to be present on any mesh.
    
    ## Solution
    
    - Don't assume these attributes are present and add a shader defs for each attributes
    - I updated 2d and 3d meshes to use the same logic.
    
    ---
    
    ## Changelog
    
    - Meshes don't require any attributes
    
    # Notes
    I didn't update the pbr.wgsl shader because I'm not sure how to handle it. It doesn't really make sense to use it without positions or normals.

[33mcommit aebd7607114a4932d7596a3be5f82b3f2b52f156[m
Author: Light Ning <lightning1141@gmail.com>
Date:   Mon Oct 10 17:43:10 2022 +0000

    bevy_input: Fix process touch event (#4352)
    
    # Objective
    
    - `process_touch_event` in `bevy_input` don't update position info. `TouchPhase::Ended` and `TouchPhase::Cancelled` should use the position info from `pressed`. Otherwise, it'll not update. The position info is updated from `TouchPhase::Moved`.
    
    ## Solution
    
    - Use updated touch info.
    
    ---
    
    ## Changelog
    
    > This section is optional. If this was a trivial fix, or has no externally-visible impact, feel free to skip this section.
    
    - Fixed: bevy_input, fix process touch event, update touch info

[33mcommit 2cff2278cac1cd8da2b68ee6dbf5b68e4a02300d[m
Author: JoJoJet <joe102000@gmail.com>
Date:   Mon Oct 10 17:06:31 2022 +0000

    Add a method for mapping `Mut<T>` -> `Mut<U>` (#6199)
    
    # Objective
    
    When designing an API, you may wish to provide access only to a specific field of a component or resource. The current options for doing this in safe code are
    
    * `*Mut::into_inner`, which flags a change no matter what.
    * `*Mut::bypass_change_detection`, which misses all changes.
    
    ## Solution
    
    Add the method `map_unchanged`.
    
    ### Example
    
    ```rust
    // When run, zeroes the translation of every entity.
    fn reset_all(mut transforms: Query<&mut Transform>) {
        for transform in &mut transforms {
            // We pinky promise not to modify `t` within the closure.
            let translation = transform.map_unchanged(|t| &mut t.translation);
            // Only reset the translation if it isn't already zero.
            translation.set_if_not_equal(Vec2::ZERO);
        }
    }
    ```
    
    ---
    
    ## Changelog
    
    + Added the method `map_unchanged` to types `Mut<T>`, `ResMut<T>`, and `NonSendMut<T>`.

[33mcommit eb0a9e15866c167d209ae8465f30509a0d5451b6[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Mon Oct 10 16:50:18 2022 +0000

    Remove `Transform::apply_non_uniform_scale` (#6133)
    
    This is a holdover from back when `Transform` was backed by a private `Mat4` two years ago.
    Not particularly useful anymore :)
    
    ## Migration Guide
    `Transform::apply_non_uniform_scale` has been removed.
    It can be replaced with the following snippet:
    ```rust
    transform.scale *= scale_factor;
    ```
    
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 9423cb6a8d0c140e11364eb23c8feb7e576baa8c[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Mon Oct 10 16:50:17 2022 +0000

    Rename `Transform::mul_vec3` to `transform_point` and improve docs (#6132)
    
    The docs ended up quite verbose :v
    
    Also added a missing `#[inline]` to `GlobalTransform::mul_transform`.
    
    I'd say this resolves #5500
    
    # Migration Guide
    `Transform::mul_vec3` has been renamed to `transform_point`.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 2cde4c73ed61e2cf2d9fc7f058f9f8abf44b059f[m
Author: cathalogue <77889270+leath-dub@users.noreply.github.com>
Date:   Mon Oct 10 16:34:24 2022 +0000

    Update linux_dependencies.md (#6205)
    
    for nix build, pkgconfig has been renamed to pkg-config. Very small fix :>
    
    # Objective
    
    - Describe the objective or issue this PR addresses.
    - If you're fixing a specific issue, say "Fixes #X".
    
    ## Solution
    
    - Describe the solution used to achieve the objective above.
    
    ---
    
    ## Changelog
    
    > This section is optional. If this was a trivial fix, or has no externally-visible impact, you can delete this section.
    
    - What changed as a result of this PR?
    - If applicable, organize changes under "Added", "Changed", or "Fixed" sub-headings
    - Stick to one or two sentences. If more detail is needed for a particular change, consider adding it to the "Solution" section
      - If you can't summarize the work, your change may be unreasonably large / unrelated. Consider splitting your PR to make it easier to review and merge!
    
    ## Migration Guide
    
    > This section is optional. If there are no breaking changes, you can delete this section.
    
    - If this PR is a breaking change (relative to the last release of Bevy), describe how a user might need to migrate their code to support these changes
    - Simply adding new functionality is not a breaking change.
    - Fixing behavior that was definitely a bug, rather than a questionable design choice is not a breaking change.

[33mcommit a18e2b1a7f823da05d525137ae758200b852149b[m
Author: Zicklag <zicklag@katharostech.com>
Date:   Mon Oct 10 16:34:23 2022 +0000

    Reflect Default for GlobalTransform (#6200)
    
    # Objective
    
    Make `GlobalTransform` constructible from scripts, in the same vein as #6187.
    
    ## Solution
    
    - Use the derive macro to reflect default
    
    ---
    
    ## Changelog
    
    > This section is optional. If this was a trivial fix, or has no externally-visible impact, you can delete this section.
    
    - `GlobalTransform` now reflects the `Default` trait.

[33mcommit 6ae46f6403d115784d51a5d96b6b0619a9b3c93f[m
Author: Noah <noah@noahshomette.com>
Date:   Mon Oct 10 16:34:22 2022 +0000

    Fixes Camera not being serializable due to missing registrations in core functionality.  (#6170)
    
    â¦
    
    # Objective
    
    - Fixes Camera not being serializable due to missing registrations in core functionality.
    - Fixes #6169
    
    ## Solution
    
    - Updated Bevy_Render CameraPlugin with registrations for Option<Viewport> and then Bevy_Core CorePlugin with registrations for ReflectSerialize and ReflectDeserialize for type data Range<f32> respectively according to the solution in #6169
    
    
    
    Co-authored-by: Noah <noahshomette@gmail.com>

[33mcommit 3321d68a753905003a0253391b07436d705a66b4[m
Author: JoJoJet <joe102000@gmail.com>
Date:   Mon Oct 10 16:34:21 2022 +0000

    Add methods for silencing system-order ambiguity warnings (#6158)
    
    # Background
    
    Incremental implementation of #4299. The code is heavily borrowed from that PR.
    
    # Objective
    
    The execution order ambiguity checker often emits false positives, since bevy is not aware of invariants upheld by the user.
    
    ## Solution
    
    Title
    
    ---
    
    ## Changelog
    
    + Added methods `SystemDescriptor::ignore_all_ambiguities` and `::ambiguous_with`. These allow you to silence warnings for specific system-order ambiguities.
    
    ## Migration Guide
    
    ***Note for maintainers**: This should replace the migration guide for #5916*
    
    Ambiguity sets have been replaced with a simpler API.
    
    ```rust
    // These systems technically conflict, but we don't care which order they run in.
    fn jump_on_click(mouse: Res<Input<MouseButton>>, mut transforms: Query<&mut Transform>) { ... }
    fn jump_on_spacebar(keys: Res<Input<KeyCode>>, mut transforms: Query<&mut Transform>) { ... }
    
    //
    // Before
    
    #[derive(AmbiguitySetLabel)]
    struct JumpSystems;
    
    app
      .add_system(jump_on_click.in_ambiguity_set(JumpSystems))
      .add_system(jump_on_spacebar.in_ambiguity_set(JumpSystems));
    
    //
    // After
    
    app
      .add_system(jump_on_click.ambiguous_with(jump_on_spacebar))
      .add_system(jump_on_spacebar);
    
    ```

[33mcommit f5322cd7570b6398e0f9e69c1b75a63cb10f6d88[m
Author: VitalyR <vitalyankh@gmail.com>
Date:   Mon Oct 10 16:10:05 2022 +0000

    get proper texture format after the renderer is initialized, fix #3897 (#5413)
    
    # Objective
    There is no Srgb support on some GPU and display protocols with `winit` (for example, Nvidia's GPUs with Wayland). Thus `TextureFormat::bevy_default()` which returns `Rgba8UnormSrgb` or `Bgra8UnormSrgb` will cause panics on such platforms. This patch will resolve this problem. Fix https://github.com/bevyengine/bevy/issues/3897.
    
    ## Solution
    
    Make `initialize_renderer` expose `wgpu::Adapter` and `first_available_texture_format`, use the `first_available_texture_format` by default.
    
    ## Changelog
    
    * Fixed https://github.com/bevyengine/bevy/issues/3897.

[33mcommit 173852790283ffead8dba92f8ce667b9ee29064b[m
Author: TimJentzsch <tim-jentzsch@gmx.de>
Date:   Sun Oct 9 21:03:05 2022 +0000

    Make the default background color of `NodeBundle` transparent (#6211)
    
    # Objective
    
    Closes #6202.
    
    The default background color for `NodeBundle` is currently white.
    However, it's very rare that you actually want a white background color.
    Instead, you often want a background color specific to the style of your game or a transparent background (e.g. for UI layout nodes).
    
    ## Solution
    
    `Default` is not derived for `NodeBundle` anymore, but explicitly specified.
    The default background color is now transparent (`Color::NONE.into()`) as this is the most common use-case, is familiar from the web and makes specifying a layout for your UI less tedious.
    
    ---
    
    ## Changelog
    
    - Changed the default `NodeBundle.background_color` to be transparent (`Color::NONE.into()`).
    
    ## Migration Guide
    
    If you want a `NodeBundle` with a white background color, you must explicitly specify it:
    
    Before:
    
    ```rust
    let node = NodeBundle {
        ..default()
    }
    ```
    
    After:
    
    ```rust
    let node = NodeBundle {
        background_color: Color::WHITE.into(),
        ..default()
    }
    ```

[33mcommit 5e71d7f833a74cc3796d83ffb40be8ed5f102de4[m
Author: CatThingy <andyc.andychen@gmail.com>
Date:   Sun Oct 9 16:21:42 2022 +0000

    Call `mesh2d_tangent_local_to_world` with the right arguments (#6209)
    
    # Objective
    
    Allow `Mesh2d` shaders to work with meshes that have vertex tangents
    ## Solution
    
    Correctly pass `mesh.model` into `mesh2d_tangent_local_to_world`

[33mcommit ca3e6e6797fab3e057cd4fb0f16c9708b3bc17e8[m
Author: Hennadii Chernyshchyk <genaloner@gmail.com>
Date:   Sat Oct 8 17:02:21 2022 +0000

    Impl Reflect for PathBuf and OsString (#6193)
    
    # Objective
    
    `Reflect` impl is missing for `PathBuf` and `OsString`. Closes #6166.
    
    ## Solution
    
    Add implementations.
    
    ---
    
    ## Changelog
    
    ### Added
    
    `Reflect` impls for `PathBuf` and `OsString`.

[33mcommit cf86f275a9e5e9ad7f0912a1879148a8aad6a86d[m
Author: Dan Kov <contact@jiftoo.dev>
Date:   Sat Oct 8 14:51:21 2022 +0000

    Fix doc for Timer::percent_left (#6198)
    
    # Objective
    
    - Fix a mistake in documentation.

[33mcommit 6b75589e2c91429eb6c35574840d47d39b2379b9[m
Author: Gabriel Bourgeois <gabriel.bourgeoisv4si@gmail.com>
Date:   Thu Oct 6 21:39:34 2022 +0000

    Fix inconsistent children removal behavior (#6017)
    
    # Objective
    
    Fixes #6010
    
    ## Solution
    
    As discussed in #6010, this makes it so the `Children` component is removed from the entity whenever all of its children are removed. The behavior is now consistent between all of the commands that may remove children from a parent, and this is tested via two new test functions (one for world functions and one for commands).
    
    Documentation was also added to `insert_children`, `push_children`, `add_child` and `remove_children` commands to make this behavior clearer for users.
    
    ## Changelog
    
    - Fixed `Children` component not getting removed from entity when all its children are moved to a new parent.
    
    ## Migration Guide
    
    - Queries with `Changed<Children>` will no longer match entities that had all of their children removed using `remove_children`.
    - `RemovedComponents<Children>` will now contain entities that had all of their children remove using `remove_children`.

[33mcommit cfba7312ef98d2166b511fce3c56f81599a56885[m
Author: Zicklag <zicklag@katharostech.com>
Date:   Thu Oct 6 19:31:47 2022 +0000

    Reflect Default for `ComputedVisibility` and `Handle<T>` (#6187)
    
    # Objective
    
    - Reflecting `Default` is required for scripts to create `Reflect` types at runtime with no static type information.
    - Reflecting `Default` on `Handle<T>` and `ComputedVisibility` should allow scripts from `bevy_mod_js_scripting` to actually spawn sprites from scratch, without needing any hand-holding from the host-game.
    
    ## Solution
    
    - Derive `ReflectDefault` for `Handle<T>` and `ComputedVisiblity`.
    
    ---
    
    ## Changelog
    
    > This section is optional. If this was a trivial fix, or has no externally-visible impact, you can delete this section.
    
    - The `Default` trait is now reflected for `Handle<T>` and `ComputedVisibility`

[33mcommit f00212fd48e7aa681e0c8e9238a8f07da469d591[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Oct 6 13:33:30 2022 +0000

    make Handle::<T> field id private, and replace with a getter (#6176)
    
    # Objective
    
    - Field `id` of `Handle<T>` is public: https://docs.rs/bevy/latest/bevy/asset/struct.Handle.html#structfield.id
    - Changing the value of this field doesn't make sense as it could mean changing the previous handle without dropping it, breaking asset cleanup detection for the old handle and the new one
    
    ## Solution
    
    - Make the field private, and add a public getter
    
    
    Opened after discussion in #6171. Pinging @zicklag
    
    ---
    
    ## Migration Guide
    
    - If you were accessing the value `handle.id`, you can now do so with `handle.id()`

[33mcommit f2106bb3ce4e1a451aa49d3dd658a94f27486c66[m
Author: Alvin Philips <polarvoid@protonmail.ch>
Date:   Thu Oct 6 13:33:29 2022 +0000

    Reduced code duplication in gamepad_viewer example (#6175)
    
    # Objective
    
    - Reduce code duplication in the `gamepad_viewer` example.
    - Fixes #6164
    
    ## Solution
    
    - Added a custom Bundle called `GamepadButtonBundle` to avoid repeating similar code throughout the example.
    - Created a `new()` method on `GamepadButtonBundle`.
    
    
    
    Co-authored-by: Alvin Philips <alvinphilips257@gmail.com>

[33mcommit 087f1c66aaf652614c61fc912867f2225f07fe9f[m
Author: Emerson MX <emersonmx@gmail.com>
Date:   Thu Oct 6 13:14:23 2022 +0000

    Make bevy_window and bevy_input events serializable (#6180)
    
    Closes #6021

[33mcommit 37860a09de897218e6698eaf16dcc7836525a9fb[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Wed Oct 5 22:16:26 2022 +0000

    Add `Camera::viewport_to_world` (#6126)
    
    # Objective
    
    Add a method for getting a world space ray from a viewport position.
    
    Opted to add a `Ray` type to `bevy_math` instead of returning a tuple of `Vec3`'s as this is clearer and easier to document
    The docs on `viewport_to_world` are okay, but I'm not super happy with them.
    
    ## Changelog
    * Add `Camera::viewport_to_world`
    * Add `Camera::ndc_to_world`
    * Add `Ray` to `bevy_math`
    * Some doc tweaks
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 2362cebcae937173a6340fc0084ec0eb7499da5e[m
Author: Fanda Vacek <fanda.vacek@gmail.com>
Date:   Wed Oct 5 21:22:11 2022 +0000

    More explicit help how to cycle the cameras (#6162)
    
    # Objective
    
    Scene viewer example has switch camera keys defined, but only one camera was instantiated on the scene.
    
    ## Solution
    
    More explicit help how to cycle the cameras, explaining that more cameras must be present in loaded scene.
    
    
    
    
    
    Co-authored-by: Fanda Vacek <fvacek@elektroline.cz>

[33mcommit 720b67396f249f870cdfa68162bafee15eca3b40[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Oct 5 16:34:55 2022 +0000

    flaky test: put panicking system in a single threaded stage (#6172)
    
    # Objective
    
    - Fix #5285
    
    ## Solution
    
    - Put the panicking system in a single threaded stage during the test
    - This way only the main thread will panic, which is handled by `cargo test`

[33mcommit 26c299bd2a139da797e335b52640a0e40addf17c[m
Author: Noah <noah@noahshomette.com>
Date:   Wed Oct 5 13:51:32 2022 +0000

    Update window.rs PresentMode docs to clarify which PresentMode will panic and which will fallback (#6160)
    
    # Objective
    
    - Fixes contradictory docs in Window::PresentMode partaining to PresentMode fallback behavior. Fix based on commit history showing the most recent update didn't remove old references to the gracefal fallback for Immediate and Mailbox.
    - Fixes #5831
    
    ## Solution
    
    - Updated the docs for Window::PresentMode itself and for each individual enum variant to clarify which will fallback and which will panic.
    
    
    Co-authored-by: Noah <noahshomette@gmail.com>

[33mcommit 2a6b544a0aa3471b0abb185a367cb25b98042912[m
Author: Kewei Huang <xgbwei@gmail.com>
Date:   Wed Oct 5 12:21:09 2022 +0000

    Document `EntityMut::remove()` (#6168)
    
    # Objective
    
    - Fixes #5990
    
    ## Solution
    
    - Add docs for `EntityMut::remove()` explaining its return value.

[33mcommit 29098b7a113323a8bec5c48e79e1586f61e37d8d[m
Author: robtfm <50659922+robtfm@users.noreply.github.com>
Date:   Wed Oct 5 12:00:07 2022 +0000

    fix spot dir nan bug (#6167)
    
    # Objective
    
    fix error with pbr shader's spotlight direction calculation when direction.y ~= 0
    
    ## Solution
    
    in pbr_lighting.wgsl, clamp `1-x^2-z^2` to `>= 0` so that we can safely `sqrt` it

[33mcommit 8a268129f9efbe0b35a53622e5ff59053ace457f[m
Author: JoJoJet <joe102000@gmail.com>
Date:   Mon Oct 3 16:57:31 2022 +0000

    Deduplicate ambiguity reporting code (#6149)
    
    # Objective
    
    Now that #6083 has been merged, we can clean up some ugly ambiguity detection code.
    
    # Solution
    
    Deduplicate code.

[33mcommit ac364e9e28a20a14b82c5b17fde5e262dc2c705c[m
Author: Sludge <96552222+SludgePhD@users.noreply.github.com>
Date:   Mon Oct 3 16:37:03 2022 +0000

    Register `Wireframe` type (#6152)
    
    # Objective
    
    The `Wireframe` type implements `Reflect`, but is never registered, making its reflection inaccessible.
    
    ## Solution
    
    Call `App::register_type::<Wireframe>()` in the `Plugin::build` implementation of `WireframePlugin`.
    
    ---
    
    ## Changelog
    
    Fixed `Wireframe` type reflection not getting registered.

[33mcommit 3aaf746675c150982322553e847275bc6a9d66bb[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Fri Sep 30 13:25:27 2022 +0000

    Example cleanup (#6131)
    
    
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 6929d95f7f848294aeb4dba8ff144dbe673f793c[m
Author: Cameron <51241057+maniwani@users.noreply.github.com>
Date:   Fri Sep 30 11:37:33 2022 +0000

    Replace fixed timestep in `alien_cake_addict` example with timer (#5760)
    
    # Objective
    
    Examples should use the correct tools for the job.
    
    ## Solution
    
    A fixed timestep, by design, can step multiple times consecutively in a single update.
    
    That property used to crash the `alien_cake_addict` example (#2525), which was "fixed" in #3411 (by just not panicking). The proper fix is to use a timer instead, since the system is supposed to spawn a cake every 5 seconds.
    
    ---
    
    A timer guarantees a minimum duration. A fixed timestep guarantees a fixed number of steps per second.
    Each one works by essentially sacrificing the other's guarantee.
    
    You can use them together, but no other systems are timestep-based in this example, so the timer is enough.

[33mcommit 6b8cc2652a0063c31a24df9b2aefcd33ca0a95bd[m
Author: Nicola Papale <nico@nicopap.ch>
Date:   Wed Sep 28 21:20:29 2022 +0000

    Document all StandardMaterial fields (#5921)
    
    # Objective
    
    Add more documentation on `StandardMaterial` and improve
    consistency on existing doc.
    
    Co-authored-by: Nicola Papale <nicopap@users.noreply.github.com>

[33mcommit e8e541e4b735bd5c95ae2905a671110bb6621b42[m
Author: Lucidus115 <minecrafter141542@gmail.com>
Date:   Wed Sep 28 21:02:26 2022 +0000

    fix #6062 incorrect links for render module docs (#6099)
    
    # Objective
    
    - Fixes #6062
    
    ## Solution
    
    - Change path to `(crate::render::renderer)` from `(bevy_render::renderer)` in `crates/bevy_internal/src/lib.rs`
    
    ---

[33mcommit 4e5b165fa0689f6e4bd76a9bf10c348d482f3376[m
Author: Nicola Papale <nicopap@users.noreply.github.com>
Date:   Wed Sep 28 20:38:43 2022 +0000

    Add details about intel linux vulkan driver (#6103)
    
    # Objective
    
    Fixes #6073
    
    # Solution
    
    Add a paragraph about `vulkan-intel` to the archlinux section.

[33mcommit 0bf7f3153d94543078ef518b2a699b1f24b08dd5[m
Author: Dawid Piotrowski <dawidekpe@gmail.com>
Date:   Wed Sep 28 17:53:58 2022 +0000

    Allow access to non-send resource through `World::resource_scope` (#6113)
    
    # Objective
    
    Relaxes the trait bound for `World::resource_scope` to allow non-send resources. Fixes #6037.
    
    ## Solution
    
    No big changes in code had to be made. Added a check so that the non-send resources won't be accessed from a different thread.
    
    ---
    
    ## Changelog
     - `World::resource_scope` accepts non-send resources now
     - `World::resource_scope` verifies non-send access if the resource is non-send
     - Two new tests are added, one for valid use of `World::resource_scope` with a non-send resource, and one for invalid use (calling it from a different thread, resulting in panic)
    
    Co-authored-by: Dawid Piotrowski <41804418+Pietrek14@users.noreply.github.com>

[33mcommit 59f872647d37cba0b085a74a2e0ad283292f598e[m
Author: rustui <90625190+rustui@users.noreply.github.com>
Date:   Wed Sep 28 17:39:36 2022 +0000

    StreamReceiver does not need to be mutable (#6119)
    
    ResMut -> Res

[33mcommit aa32a77fdde16a34084fa7030329b526b9c129b6[m
Author: Federico Rinaldi <gisquerin@gmail.com>
Date:   Wed Sep 28 14:09:39 2022 +0000

    Update API docs for `Commands::get_or_spawn` to inform the user about invalid returned values (#6117)
    
    # Objective
    
    As explained by #5960, `Commands::get_or_spawn` may return a dangling `EntityCommands` that references a non-existing entities. As explained in [this comment], it may be undesirable to make the method return an `Option`.
    
    - Addresses #5960
    - Alternative to #5961
    
    ## Solution
    
    This PR adds a doc comment to the method to inform the user that the returned `EntityCommands` is not guaranteed to be valid. It also adds panic doc comments on appropriate `EntityCommands` methods.
    
    [this comment]: https://github.com/bevyengine/bevy/pull/5961#issuecomment-1259870849

[33mcommit 197392a2cd2fbec4aab2dd521e22bbbe318a999c[m
Author: Charles <c.giguere42@gmail.com>
Date:   Wed Sep 28 05:54:11 2022 +0000

    use alpha mask even when unlit (#6047)
    
    # Objective
    
    - Alpha mask was previously ignored when using an unlit material.
    - Fixes https://github.com/bevyengine/bevy/issues/4479
    
    ## Solution
    
    - Extract the alpha discard to a separate function and use it when unlit is true
    
    ## Notes
    I tried calling `alpha_discard()` before the `if` in pbr.wgsl, but I had errors related to having a `discard` at the beginning before doing the texture sampling. I'm not sure if there's a way to fix that instead of having the function being called in 2 places.

[33mcommit 807336203903e516a8705a13316c2c2c20c0f5bb[m
Author: Charles <c.giguere42@gmail.com>
Date:   Wed Sep 28 04:20:27 2022 +0000

    add globals to mesh view bind group (#5409)
    
    # Objective
    
    - It's often really useful to have access to the time when writing shaders.
    
    ## Solution
    
    - Add a UnifformBuffer in the mesh view bind group
    - This buffer contains the time, delta time and a wrapping frame count
    
    https://user-images.githubusercontent.com/8348954/180130314-97948c2a-2d11-423d-a9c4-fb5c9d1892c7.mp4
    
    ---
    
    ## Changelog
    
    - Added a `GlobalsUniform` at position 9 of the mesh view bind group
    
    ## Notes
    
    The implementation is currently split between bevy_render and bevy_pbr because I was basing my implementation on the `ViewPlugin`. I'm not sure if that's the right way to structure it.
    
    I named this `globals` instead of just time because we could potentially add more things to it.
    
    ## References in other engines
    
    - Godot: <https://docs.godotengine.org/en/stable/tutorials/shaders/shader_reference/canvas_item_shader.html#global-built-ins>
        - Global time since startup, in seconds, by default resets to 0 after 3600 seconds
        - Doesn't seem to have anything else
    - Unreal: <https://docs.unrealengine.com/4.26/en-US/RenderingAndGraphics/Materials/ExpressionReference/Constant/>
        - Generic time value that updates every frame. Can be paused or scaled.
        - Frame count node, doesn't seem to be an equivalent for shaders: <https://docs.unrealengine.com/4.26/en-US/BlueprintAPI/Utilities/GetFrameCount/>
    - Unity: <https://docs.unity3d.com/Manual/SL-UnityShaderVariables.html>
        - time since startup in seconds. No mention of time wrapping. Stored as a `vec4(t/20, t, t*2, t*3)` where `t` is the value in seconds
        - Also has delta time, sin time and cos time
    - ShaderToy: <https://www.shadertoy.com/howto>
        - iTime is the time since startup in seconds.
        - iFrameRate
        - iTimeDelta
        - iFrame frame counter
    
    Co-authored-by: Charles <IceSentry@users.noreply.github.com>

[33mcommit 018509c3a1b238fe4e2569357267de428ca2ad06[m
Author: Charles <c.giguere42@gmail.com>
Date:   Wed Sep 28 04:04:55 2022 +0000

    log pipeline cache errors earlier (#6115)
    
    # Objective
    
    - Currently, errors aren't logged as soon as they are found, they are logged only on the next frame. This means your shader could have an unreported error that could have been reported on the first frame.
    
    ## Solution
    
    - Log the error as soon as they are found, don't wait until next frame
    
    ## Notes
    
    I discovered this issue because I was simply unwrapping the `Result` from `PipelinCache::get_render_pipeline()` which caused it to fail without any explanations. Admittedly, this was a bit of a user error, I shouldn't have unwrapped that, but it seems a bit strange to wait until the next time the pipeline is processed to log the error instead of just logging it as soon as possible since we already have all the info necessary.

[33mcommit d22d310ad58ce1467b9e62db16f4fd95c33cc639[m
Author: Mike <mike.hsu@gmail.com>
Date:   Wed Sep 28 01:59:10 2022 +0000

    Nested spawns on scope (#4466)
    
    # Objective
    
    - Add ability to create nested spawns. This is needed for stageless. The current executor spawns tasks for each system early and runs the system by communicating through a channel. In stageless we want to spawn the task late, so that archetypes can be updated right before the task is run. The executor is run on a separate task, so this enables the scope to be passed to the spawned executor.
    - Fixes #4301
    
    ## Solution
    
    - Instantiate a single threaded executor on the scope and use that instead of the LocalExecutor. This allows the scope to be Send, but still able to spawn tasks onto the main thread the scope is run on. This works because while systems can access nonsend data. The systems themselves are Send. Because of this change we lose the ability to spawn nonsend tasks on the scope, but I don't think this is being used anywhere. Users would still be able to use spawn_local on TaskPools.
    - Steals the lifetime tricks the `std::thread::scope` uses to allow nested spawns, but disallow scope to be passed to tasks or threads not associated with the scope.
    - Change the storage for the tasks to a `ConcurrentQueue`. This is to allow a &Scope to be passed for spawning instead of a &mut Scope. `ConcurrentQueue` was chosen because it was already in our dependency tree because `async_executor` depends on it.
    - removed the optimizations for 0 and 1 spawned tasks. It did improve those cases, but made the cases of more than 1 task slower.
    ---
    
    ## Changelog
    
    Add ability to nest spawns
    
    ```rust
    fn main() {
        let pool = TaskPool::new();
        pool.scope(|scope| {
            scope.spawn(async move {
                // calling scope.spawn from an spawn task was not possible before
                scope.spawn(async move {
                    // do something
                });
            });
        })
    }
    ```
    
    ## Migration Guide
    
    If you were using explicit lifetimes and Passing Scope you'll need to specify two lifetimes now.
    
    ```rust
    fn scoped_function<'scope>(scope: &mut Scope<'scope, ()>) {}
    // should become
    fn scoped_function<'scope>(scope: &Scope<'_, 'scope, ()>) {}
    ```
    
    `scope.spawn_local` changed to `scope.spawn_on_scope` this should cover cases where you needed to run tasks on the local thread, but does not cover spawning Nonsend Futures.
    
    ## TODO
    * [x] think real hard about all the lifetimes
    * [x] add doc about what 'env and 'scope mean.
    * [x] manually check that the single threaded task pool still works
    * [x] Get updated perf numbers
    * [x] check and make sure all the transmutes are necessary
    * [x] move commented out test into a compile fail test
    * [x] look through the tests for scope on std and see if I should add any more tests
    
    Co-authored-by: Michael Hsu <myhsu@benjaminelectric.com>
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 92c90a9bade54ecc5b26cad72d30683d7aebd654[m
Author: Boxy <supbscripter@gmail.com>
Date:   Tue Sep 27 18:48:25 2022 +0000

    add `Res::clone` (#4109)
    
    # Objective
    Make `Res` cloneable
    ## Solution
    Add an associated fn `clone(self: &Self) -. Self` instead of `Copy + Clone` trait impls to avoid `res.clone()` failing to clone out the underlying `T`

[33mcommit 263ab9424d741e20624c5ed92210ae263de1d2d0[m
Author: Demiu <miazgapow@gmail.com>
Date:   Tue Sep 27 18:34:33 2022 +0000

    Remove Sync bound from Command (#5871)
    
    Unless I'm mistaken it is unnecessary, Commands are never accessed from two threads simultaneously. It unnecessarily restricts Command structs

[33mcommit 128c169503a254b373a400e246c409bd51053d29[m
Author: SpecificProtagonist <vincentjunge@posteo.net>
Date:   Tue Sep 27 18:11:40 2022 +0000

    remove copyless (#6100)
    
    # Objective
    Remove copyless
    copyless apparently isn't needed anymore to prevent extraneous memcopies and therefore got deprecated: https://github.com/kvark/copyless/issues/22

[33mcommit 5875ea7db03e3f64d60b305de7f58ffb245f6b32[m
Author: Peter Hebden <peterhebden6@gmail.com>
Date:   Tue Sep 27 18:11:39 2022 +0000

    Add additional constructors for `UiRect` to specify values for specific fields (#5988)
    
    # Objective
    
    Often one wants to create a `UiRect` with a value only specifying a single field. These ways are already available, but not the most ergonomic:
    
    ```rust
    UiRect::new(Val::Undefined, Val::Undefined, Val::Percent(25.0), Val::Undefined)
    ```
    ```rust
    UiRect {
        top: Val::Percent(25.0),
        ..default()
    }
    ```
    
    ## Solution
    
    Introduce 6 new constructors:
    
    - `horizontal`
    - `vertical`
    - `left`
    - `right`
    - `top`
    - `bottom`
    
    So the above code can be written instead as:
    
    ```rust
    UiRect::top(Val::Percent(25.0))
    ```
    
    This solution is similar to the style fields `margin-left`, `padding-top`, etc. that you would see in CSS, from which bevy's UI has other inspiration. Therefore, it should still feel intuitive to users coming from CSS.
    
    ---
    
    ## Changelog
    
    ### Added
    
    - Additional constructors for `UiRect` to specify values for specific fields

[33mcommit 5b00af01d756cc9f03f6058f2634ebd56c2a7296[m
Author: Mark Schmale <masch@masch.it>
Date:   Tue Sep 27 18:11:38 2022 +0000

    Make arrays behave like lists in reflection (#5987)
    
    # Objective
    
    Currently, arrays cannot indexed using the reflection path API.
    This change makes them behave like lists so `x.get_path("list[0]")` will behave the same way, whether x.list is a "List" (e.g. a Vec) or an array.
    
    ## Solution
    
    When syntax is encounterd `[ <idx> ]` we check if the referenced type is either a `ReflectRef::List` or `ReflectRef::Array`   (or `ReflectMut` for the mutable case). Since both provide the identical API for accessing entries, we do the same for both, although it requires code duplication as far as I can tell.
    
    
    This was born from working on #5764, but since this seems to be an easier fix (and I am not sure if I can actually solve #5812) I figured it might be worth to split this out.

[33mcommit 180c94cc13bf0d6c9635104edfe1005d160fa217[m
Author: Martin Lysell <martande@gmail.com>
Date:   Tue Sep 27 17:51:12 2022 +0000

    Fix some outdated file reference comments in bevy_pbr (#6111)
    
    # Objective
    
    Simple docs/comments only PR that just fixes some outdated file references left over from the render rewrite.
    
    ## Solution
    
    - Change the references to point to the correct files

[33mcommit deb07fe9574e3261ad7c3e9174006e6eac8f824e[m
Author: Charles <c.giguere42@gmail.com>
Date:   Tue Sep 27 01:30:40 2022 +0000

    add support for .comp glsl shaders (#6084)
    
    # Objective
    
    - Support `.comp` extension for glsl compute shaders
    
    ## Solution
    
    - Add `.comp` to the shader asset loader

[33mcommit dc3f801239d25287dc11d7cda35b00d6e3d3dbcf[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Sep 26 23:57:07 2022 +0000

    Exclusive Systems Now Implement `System`. Flexible Exclusive System Params (#6083)
    
    # Objective
    
    The [Stageless RFC](https://github.com/bevyengine/rfcs/pull/45) involves allowing exclusive systems to be referenced and ordered relative to parallel systems. We've agreed that unifying systems under `System` is the right move.
    
    This is an alternative to #4166 (see rationale in the comments I left there). Note that this builds on the learnings established there (and borrows some patterns).
    
    ## Solution
    
    This unifies parallel and exclusive systems under the shared `System` trait, removing the old `ExclusiveSystem` trait / impls. This is accomplished by adding a new `ExclusiveFunctionSystem` impl similar to `FunctionSystem`. It is backed by `ExclusiveSystemParam`, which is similar to `SystemParam`. There is a new flattened out SystemContainer api (which cuts out a lot of trait and type complexity).
    
    This means you can remove all cases of `exclusive_system()`:
    
    ```rust
    // before
    commands.add_system(some_system.exclusive_system());
    // after
    commands.add_system(some_system);
    ```
    
    I've also implemented `ExclusiveSystemParam` for `&mut QueryState` and `&mut SystemState`, which makes this possible in exclusive systems:
    
    ```rust
    fn some_exclusive_system(
        world: &mut World,
        transforms: &mut QueryState<&Transform>,
        state: &mut SystemState<(Res<Time>, Query<&Player>)>,
    ) {
        for transform in transforms.iter(world) {
            println!("{transform:?}");
        }
        let (time, players) = state.get(world);
        for player in players.iter() {
            println!("{player:?}");
        }
    }
    ```
    
    Note that "exclusive function systems" assume `&mut World` is present (and the first param). I think this is a fair assumption, given that the presence of `&mut World` is what defines the need for an exclusive system.
    
    I added some targeted SystemParam `static` constraints, which removed the need for this:
    ``` rust
    fn some_exclusive_system(state: &mut SystemState<(Res<'static, Time>, Query<&'static Player>)>) {}
    ```
    
    ## Related
    
    - #2923
    - #3001
    - #3946
    
    ## Changelog
    
    - `ExclusiveSystem` trait (and implementations) has been removed in favor of sharing the `System` trait.
    - `ExclusiveFunctionSystem` and `ExclusiveSystemParam` were added, enabling flexible exclusive function systems
    - `&mut SystemState` and `&mut QueryState` now implement `ExclusiveSystemParam`
    - Exclusive and parallel System configuration is now done via a unified `SystemDescriptor`, `IntoSystemDescriptor`, and `SystemContainer` api.
    
    ## Migration Guide
    
    Calling `.exclusive_system()` is no longer required (or supported) for converting exclusive system functions to exclusive systems:
    
    ```rust
    // Old (0.8)
    app.add_system(some_exclusive_system.exclusive_system());
    // New (0.9)
    app.add_system(some_exclusive_system);
    ```
    
    Converting "normal" parallel systems to exclusive systems is done by calling the exclusive ordering apis:
    
    ```rust
    // Old (0.8)
    app.add_system(some_system.exclusive_system().at_end());
    // New (0.9)
    app.add_system(some_system.at_end());
    ```
    
    Query state in exclusive systems can now be cached via ExclusiveSystemParams, which should be preferred for clarity and performance reasons:
    ```rust
    // Old (0.8)
    fn some_system(world: &mut World) {
      let mut transforms = world.query::<&Transform>();
      for transform in transforms.iter(world) {
      }
    }
    // New (0.9)
    fn some_system(world: &mut World, transforms: &mut QueryState<&Transform>) {
      for transform in transforms.iter(world) {
      }
    }
    ```

[33mcommit 92e78a4bc5b817ca0d5e70442e949c184132a497[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Mon Sep 26 21:47:31 2022 +0000

    Fix some grammatical errors in the docs (#6109)
    
    
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 39467e30fdb967cb57ac41bc116a090e748ded3a[m
Author: Carter Weinberg <weinbergcarter@gmail.com>
Date:   Mon Sep 26 01:31:22 2022 +0000

    Don't use the UIBundle's Transform Fields (#6095)
    
    # Objective
    
    I was working with the TextBundle component bundle because I wanted to change the position of the text that the bundle was holding. I used the transform field on the TextBundle at first because that is normally what controls the position of sprites in Bevy and that's what I was used to working with.
    
    But the actual way to change the position of text inside of a TextBundle is to use the Style's position field, not the TextBundle's transform field.
    
    Anecdotally, it was mentioned on the discord that other users have had this issue too.
    
    ## Solution
    
    I added a small doc comment to the TextBundle's transform telling users not to use it to set the position of text. And since this issue applies to the other UI bundles, I added comments there as well!

[33mcommit 750ec41c86dc309f1e746deb7ef34d95fe1c16cd[m
Author: Carlrs <restart@gmx.us>
Date:   Sun Sep 25 18:03:53 2022 +0000

    Don't bundle extra transform with camera in many sprites examples (#6079)
    
    Fixes #6077
    # Objective
    
    - Make many_sprites and many_animated_sprites work again
    
    ## Solution
    
    - Removed the extra transform from the camera bundle - not sure why it was necessary, since `Camera2dBundle::default()` already contains a transform with the same parameters.
    
    ---

[33mcommit 847c26b8dc194d6acbd75b03c756dd0b52d0c9ba[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Sun Sep 25 00:57:07 2022 +0000

    Rename shapes examples for consistency (#6082)
    
    # Objective
    
    I was about to submit a PR to add these two examples to `bevy-website` and re-discovered the inconsistency.
    
    Although it's not a major issue on the website where only the filenames are shown, this would help to visually distinguish the two examples in the list  because the names are very prominent.
    
    This also helps out when fuzzy-searching the codebase for these files.
    
    ## Solution
    
    Rename `shapes` to `2d_shapes`. Now the filename matches the example name, and the naming structure matches the 3d example.
    
    ## Notes
    
    @Nilirad proposed this in https://github.com/bevyengine/bevy/pull/4613#discussion_r862455631 but it had slipped away from my brain at that time.

[33mcommit 481eec2c922fc212a730575b031b332a8101e6d9[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Sun Sep 25 00:39:17 2022 +0000

    Rename `UiColor`  to `BackgroundColor` (#6087)
    
    # Objective
    
    Fixes #6078. The `UiColor` component is unhelpfully named: it is unclear, ambiguous with border color and
    
    ## Solution
    
    Rename the `UiColor` component (and associated fields) to `BackgroundColor` / `background_colorl`.
    
    ## Migration Guide
    
    `UiColor` has been renamed to `BackgroundColor`. This change affects `NodeBundle`, `ButtonBundle` and `ImageBundle`. In addition, the corresponding field on `ExtractedUiNode` has been renamed to `background_color` for consistency.

[33mcommit e7cd9c1b8629d0d851f74d4d129ec8832457e8f5[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Sat Sep 24 13:21:01 2022 +0000

    Add a Gamepad Viewer tool to examples (#6074)
    
    # Objective
    
    Give folks an easy way to test their gamepad with bevy.
    
    ~~This is a lot of very boring code for an example. Maybe it belongs in the "tools" directory?~~
    
    ## Solution
    
    https://user-images.githubusercontent.com/200550/191884342-ace213c0-b423-449a-9295-530cbceaa19e.mp4
    
    ## Notes
    
    This has brought to light (to me, anyway) some fairly major issues with gamepads on the web. See:
    
    [WASM mappings (gilrs issue 107)](https://gitlab.com/gilrs-project/gilrs/-/issues/107)
    [Inaccurate value for trigger button of Xbox gamepad with WASM (gilrs issue 121)](https://gitlab.com/gilrs-project/gilrs/-/issues/121)

[33mcommit b91945b54ddf9664d1ed89a33a872ab2700626c2[m
Author: Boutillier <boris.boutillier@gmail.com>
Date:   Sat Sep 24 12:58:06 2022 +0000

    Merge TextureAtlas::from_grid_with_padding into TextureAtlas::from_grid through option arguments (#6057)
    
    This is an adoption of #3775
    This merges `TextureAtlas` `from_grid_with_padding` into `from_grid` , adding optional padding and optional offset.
    Since the orignal PR, the offset had already been added to from_grid_with_padding through #4836
    
    ## Changelog
    
    - Added `padding` and `offset` arguments to  `TextureAtlas::from_grid`
    - Removed `TextureAtlas::from_grid_with_padding`
    
    ## Migration Guide
    
    `TextureAtlas::from_grid_with_padding` was merged into `from_grid` which takes two additional parameters for padding and an offset.
    ```
    // 0.8
    TextureAtlas::from_grid(texture_handle, Vec2::new(24.0, 24.0), 7, 1);
    // 0.9
    TextureAtlas::from_grid(texture_handle, Vec2::new(24.0, 24.0), 7, 1, None, None)
    
    // 0.8
    TextureAtlas::from_grid_with_padding(texture_handle, Vec2::new(24.0, 24.0), 7, 1, Vec2::new(4.0, 4.0));
    // 0.9
    TextureAtlas::from_grid(texture_handle, Vec2::new(24.0, 24.0), 7, 1, Some(Vec2::new(4.0, 4.0)), None)
    ```
    
    Co-authored-by: olefish <88390729+oledfish@users.noreply.github.com>

[33mcommit c4d1ae0a4744ebed8366ff6d4ea5bd77af878744[m
Author: Charles <c.giguere42@gmail.com>
Date:   Fri Sep 23 20:15:57 2022 +0000

     add time wrapping to Time (#5982)
    
    # Objective
    
    - Sometimes, like when using shaders, you can only use a time value in `f32`. Unfortunately this suffers from floating precision issues pretty quickly. The standard approach to this problem is to wrap the time after a given period
    - This is necessary for https://github.com/bevyengine/bevy/pull/5409
    
    ## Solution
    
    - Add a `seconds_since_last_wrapping_period` method on `Time` that returns a `f32` that is the `seconds_since_startup` modulo the `max_wrapping_period`
    
    ---
    
    ## Changelog
    
    Added `seconds_since_last_wrapping_period` to `Time`
    
    ## Additional info
    
    I'm very opened to hearing better names. I don't really like the current naming, I just went with something descriptive.
    
    Co-authored-by: Charles <IceSentry@users.noreply.github.com>

[33mcommit 01aedc8431cb218226cee866262e0ccfca00b3b3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Sep 23 19:55:54 2022 +0000

    Spawn now takes a Bundle (#6054)
    
    # Objective
    
    Now that we can consolidate Bundles and Components under a single insert (thanks to #2975 and #6039), almost 100% of world spawns now look like `world.spawn().insert((Some, Tuple, Here))`. Spawning an entity without any components is an extremely uncommon pattern, so it makes sense to give spawn the "first class" ergonomic api. This consolidated api should be made consistent across all spawn apis (such as World and Commands).
    
    ## Solution
    
    All `spawn` apis (`World::spawn`, `Commands:;spawn`, `ChildBuilder::spawn`, and `WorldChildBuilder::spawn`) now accept a bundle as input:
    
    ```rust
    // before:
    commands
      .spawn()
      .insert((A, B, C));
    world
      .spawn()
      .insert((A, B, C);
    
    // after
    commands.spawn((A, B, C));
    world.spawn((A, B, C));
    ```
    
    All existing instances of `spawn_bundle` have been deprecated in favor of the new `spawn` api. A new `spawn_empty` has been added, replacing the old `spawn` api.
    
    By allowing `world.spawn(some_bundle)` to replace `world.spawn().insert(some_bundle)`, this opened the door to removing the initial entity allocation in the "empty" archetype / table done in `spawn()` (and subsequent move to the actual archetype in `.insert(some_bundle)`).
    
    This improves spawn performance by over 10%:
    ![image](https://user-images.githubusercontent.com/2694663/191627587-4ab2f949-4ccd-4231-80eb-80dd4d9ad6b9.png)
    
    To take this measurement, I added a new `world_spawn` benchmark.
    
    Unfortunately, optimizing `Commands::spawn` is slightly less trivial, as Commands expose the Entity id of spawned entities prior to actually spawning. Doing the optimization would (naively) require assurances that the `spawn(some_bundle)` command is applied before all other commands involving the entity (which would not necessarily be true, if memory serves). Optimizing `Commands::spawn` this way does feel possible, but it will require careful thought (and maybe some additional checks), which deserves its own PR. For now, it has the same performance characteristics of the current `Commands::spawn_bundle` on main.
    
    **Note that 99% of this PR is simple renames and refactors. The only code that needs careful scrutiny is the new `World::spawn()` impl, which is relatively straightforward, but it has some new unsafe code (which re-uses battle tested BundlerSpawner code path).**
    
    ---
    
    ## Changelog
    
    - All `spawn` apis (`World::spawn`, `Commands:;spawn`, `ChildBuilder::spawn`, and `WorldChildBuilder::spawn`) now accept a bundle as input
    - All instances of `spawn_bundle` have been deprecated in favor of the new `spawn` api
    - World and Commands now have `spawn_empty()`, which is equivalent to the old `spawn()` behavior.
    
    ## Migration Guide
    
    ```rust
    // Old (0.8):
    commands
      .spawn()
      .insert_bundle((A, B, C));
    // New (0.9)
    commands.spawn((A, B, C));
    
    // Old (0.8):
    commands.spawn_bundle((A, B, C));
    // New (0.9)
    commands.spawn((A, B, C));
    
    // Old (0.8):
    let entity = commands.spawn().id();
    // New (0.9)
    let entity = commands.spawn_empty().id();
    
    // Old (0.8)
    let entity = world.spawn().id();
    // New (0.9)
    let entity = world.spawn_empty();
    ```

[33mcommit fb74ca3d4644cf31afefe62ecd5e566794211290[m
Author: JoJoJet <joe102000@gmail.com>
Date:   Thu Sep 22 20:01:54 2022 +0000

    Add ambiguity detection tests (#6053)
    
    # Objective
    
    - Add unit tests for ambiguity detection reporting.
    - Incremental implementation of #4299.
    
    ## Solution
    
    - Refactor ambiguity detection internals to make it testable. As a bonus, this should make it easier to extend in the future.
    
    ## Notes
    
    * This code was copy-pasted from #4299 and modified. Credit goes to @alice-i-cecile and @afonsolage, though I'm not sure who wrote what at this point.

[33mcommit e668b472776cd475abba569b5aeffd23be8cf1e5[m
Author: pcone <losc00@gmail.com>
Date:   Thu Sep 22 17:44:24 2022 +0000

    Clarify index order in TextureAtlas::from_grid (#6058)
    
    # Objective
    
    Docs on from_grid/from_grid_with_padding aren't clear on indexing order.
    
    ## Solution
    
    Make the docs better!

[33mcommit 527dce9a691946c4b31a0c32e0acf7119efea295[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Thu Sep 22 17:21:16 2022 +0000

    Mark `Task` as `#[must_use]` (#6068)
    
    The `async_executor::Task` that it wraps is also `#[must_use]` with the same message.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit a09dd034a2695dec504fbe45c4441cc459c9b08d[m
Author: targrub <targrub@gmail.com>
Date:   Thu Sep 22 16:56:43 2022 +0000

    Fix CI issues arising from use of Rust 1.64 (#6067)
    
    ## Objective
    
    Fixes https://github.com/bevyengine/bevy/issues/6063
    
    ## Solution
    
    - Use `then_some(x)` instead of `then( || x)`.
    - Updated error logs from `bevy_ecs_compile_fail_tests`.
    
    ## Migration Guide
    
    From Rust 1.63 to 1.64, a new Clippy error was added; now one should use `then_some(x)` instead of `then( || x)`.

[33mcommit dc5836f5b73e10a65285cb92d4e2c688138211df[m
Author: Afonso Lage <lage.afonso@gmail.com>
Date:   Thu Sep 22 00:12:09 2022 +0000

    Derive `FromReflect` for `Transform` and `GlobalTransform` (#6015)
    
    # Objective
    
    Both components already derives `Reflect` and it would be nice to have `FromReflect` in order to ser/de between those types without relaying on `downcast`, since it can fail between different platforms, like WebAssembly.
    
    ## Solution
    
    Derive `FromReflect` for `Transform` and `GlobalTransform`.
    
    I thought if I should also derive `FromReflect` for `GlobalTransform`, since it's a computed component, but there may be some use cases where a `GlobalTransform` is needed to be sent over the wire, so I decided to do it.

[33mcommit 69d08c5ef491cd2fb43486d254cc4745faa997ba[m
Author: Okko Hakola <okkohakola@gmail.com>
Date:   Wed Sep 21 22:35:15 2022 +0000

    Reconfigure surface on present mode change (#6049)
    
    # Objective
    
    - Reconfigure surface after present mode changes. It seems that this is not done currently at runtime. It's pretty common for games to change such graphical settings at runtime.
    - Fixes present mode issue in #5111
    
    ## Solution
    
    - Exactly like resolution change gets tracked when extracting window, do the same for present mode.
    
    Additionally, I added present mode (vsync) toggling to window settings example.

[33mcommit cd15f0f5be040b95da84f99391afbb2214fea4b8[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Sep 21 21:47:53 2022 +0000

    Accept Bundles for insert and remove. Deprecate insert/remove_bundle (#6039)
    
    # Objective
    
    Take advantage of the "impl Bundle for Component" changes in #2975 / add the follow up changes discussed there.
    
    ## Solution
    
    - Change `insert` and `remove` to accept a Bundle instead of a Component (for both Commands and World)
    - Deprecate `insert_bundle`, `remove_bundle`, and `remove_bundle_intersection`
    - Add `remove_intersection`
    
    ---
    
    ## Changelog
    
    - Change `insert` and `remove` now accept a Bundle instead of a Component (for both Commands and World)
    - `insert_bundle` and `remove_bundle` are deprecated
    
    
    ## Migration Guide
    
    Replace `insert_bundle` with `insert`:
    ```rust
    // Old (0.8)
    commands.spawn().insert_bundle(SomeBundle::default());
    // New (0.9)
    commands.spawn().insert(SomeBundle::default());
    ```
    
    Replace `remove_bundle` with `remove`:
    ```rust
    // Old (0.8)
    commands.entity(some_entity).remove_bundle::<SomeBundle>();
    // New (0.9)
    commands.entity(some_entity).remove::<SomeBundle>();
    ```
    
    Replace `remove_bundle_intersection` with `remove_intersection`:
    ```rust
    // Old (0.8)
    world.entity_mut(some_entity).remove_bundle_intersection::<SomeBundle>();
    // New (0.9)
    world.entity_mut(some_entity).remove_intersection::<SomeBundle>();
    ```
    
    Consider consolidating as many operations as possible to improve ergonomics and cut down on archetype moves:
    ```rust
    // Old (0.8)
    commands.spawn()
      .insert_bundle(SomeBundle::default())
      .insert(SomeComponent);
    
    // New (0.9) - Option 1
    commands.spawn().insert((
      SomeBundle::default(),
      SomeComponent,
    ))
    
    // New (0.9) - Option 2
    commands.spawn_bundle((
      SomeBundle::default(),
      SomeComponent,
    ))
    ```
    
    ## Next Steps
    
    Consider changing `spawn` to accept a bundle and deprecate `spawn_bundle`.

[33mcommit d9e99cd80cf23462324f50a431cf7c8cc6440b2a[m
Author: Federico Rinaldi <gisquerin@gmail.com>
Date:   Wed Sep 21 17:37:57 2022 +0000

    Fix API docs for `Commands` methods (#5955)
    
    # Objective
    
    The doc comments for `Command` methods are a bit inconsistent on the format, they sometimes go out of scope, and most importantly they are wrong, in the sense that they claim to perform the action described by the command, while in reality, they just push a command to perform the action.
    
    - Follow-up of #5938.
    - Related to #5913.
    
    ## Solution
    
    - Where applicable, only stated that a `Command` is pushed.
    - Added a âSee alsoâ section for similar methods.
    - Added a missing âPanicsâ section for `Commands::entity`.
    - Removed a wrong comment about `Commands::get_or_spawn` returning `None` (It does not return an option).
    - Removed polluting descriptions of other items.
    - Misc formatting changes.
    
    ## Future possibilities
    
    Since the `Command` implementors (`Spawn`, `InsertBundle`, `InitResource`, ...) are public, I thought that it might be appropriate to describe the action of the command there instead of the method, and to add a `method â command struct` link to fill the gap.
    
    If that seems too far-fetched, we may opt to make them private, if possible, or `#[doc(hidden)]`.

[33mcommit 2eb9dd9dd9ae88c8adaf39bf7159b6832fd4e98f[m
Author: bwhitt7 <bwhitt7@students.towson.edu>
Date:   Tue Sep 20 21:36:38 2022 +0000

    Adding transform example links to documentation (#5997)
    
    # Objective
    
    Working on issue #1934 , with linking examples to the documentation. PR for transform examples.
    
    ## Solution
    
    Added to the documentation in bevy_transform transform.rs and global_transform.rs utilizing links from examples.
    
    [X] 3d_rotations.rs linked to rotate in Transform
    [X] global_vs_local_translation.rs linked to top of Transform and GlobalTransform documentation
    [X] scale.rs linked to scale Struct in Transform
    [X] transform.rs linked to top of Transform documentation
    [X] translation.rs linked to from_translation in Transform
    
    Co-authored-by: bwhitt7 <103079612+bwhitt7@users.noreply.github.com>

[33mcommit 1a2aedd165d1873d6b2a34f906c05fa88bc23dbf[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Tue Sep 20 20:17:08 2022 +0000

     Implement `Bundle` for `Component`. Use `Bundle` tuples for insertion (#2975)
    
    @BoxyUwU this is your fault.
    
    Also cart didn't arrive in time to tell us not to do this.
    
    # Objective
    
    - Fix #2974
    
    ## Solution
    
    - The first commit just does the actual change
    - Follow up commits do steps to prove that this method works to unify as required, but this does not remove `insert_bundle`.
    
    ## Changelog
    
    ### Changed
    Nested bundles now collapse automatically, and every `Component` now implements `Bundle`.
    This means that you can combine bundles and components arbitrarily, for example:
    ```rust
    // before:
    .insert(A).insert_bundle(MyBBundle{..})
    // after:
    .insert_bundle((A, MyBBundle {..}))
    ```
    
    Note that there will be a follow up PR that removes the current `insert` impl and renames `insert_bundle` to `insert`.
    
    ### Removed
    The `bundle` attribute in `derive(Bundle)`.
    
    ## Migration guide
    
    In `derive(Bundle)`, the `bundle` attribute has been removed. Nested bundles are not collapsed automatically. You should remove `#[bundle]` attributes.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit d30d3e752a1fc62b1b35c8d53c5e97f35c0176ca[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Tue Sep 20 19:38:18 2022 +0000

    bevy_reflect: Improve serialization format even more (#5723)
    
    > Note: This is rebased off #4561 and can be viewed as a competitor to that PR. See `Comparison with #4561` section for details.
    
    # Objective
    
    The current serialization format used by `bevy_reflect` is both verbose and error-prone. Taking the following structs[^1] for example:
    
    ```rust
    // -- src/inventory.rs
    
    #[derive(Reflect)]
    struct Inventory {
      id: String,
      max_storage: usize,
      items: Vec<Item>
    }
    
    #[derive(Reflect)]
    struct Item {
      name: String
    }
    ```
    
    Given an inventory of a single item, this would serialize to something like:
    
    ```rust
    // -- assets/inventory.ron
    
    {
      "type": "my_game::inventory::Inventory",
      "struct": {
        "id": {
          "type": "alloc::string::String",
          "value": "inv001",
        },
        "max_storage": {
          "type": "usize",
          "value": 10
        },
        "items": {
          "type": "alloc::vec::Vec<alloc::string::String>",
          "list": [
            {
              "type": "my_game::inventory::Item",
              "struct": {
                "name": {
                  "type": "alloc::string::String",
                  "value": "Pickaxe"
                },
              },
            },
          ],
        },
      },
    }
    ```
    
    Aside from being really long and difficult to read, it also has a few "gotchas" that users need to be aware of if they want to edit the file manually. A major one is the requirement that you use the proper keys for a given type. For structs, you need `"struct"`. For lists, `"list"`. For tuple structs, `"tuple_struct"`. And so on.
    
    It also ***requires*** that the `"type"` entry come before the actual data. Despite being a mapâ which in programming is almost always orderless by defaultâ the entries need to be in a particular order. Failure to follow the ordering convention results in a failure to deserialize the data.
    
    This makes it very prone to errors and annoyances.
    
    
    ## Solution
    
    Using #4042, we can remove a lot of the boilerplate and metadata needed by this older system. Since we now have static access to type information, we can simplify our serialized data to look like:
    
    ```rust
    // -- assets/inventory.ron
    
    {
      "my_game::inventory::Inventory": (
        id: "inv001",
        max_storage: 10,
        items: [
          (
            name: "Pickaxe"
          ),
        ],
      ),
    }
    ```
    
    This is much more digestible and a lot less error-prone (no more key requirements and no more extra type names).
    
    Additionally, it is a lot more familiar to users as it follows conventional serde mechanics. For example, the struct is represented with `(...)` when serialized to RON.
    
    #### Custom Serialization
    
    Additionally, this PR adds the opt-in ability to specify a custom serde implementation to be used rather than the one created via reflection. For example[^1]:
    
    ```rust
    // -- src/inventory.rs
    
    #[derive(Reflect, Serialize)]
    #[reflect(Serialize)]
    struct Item {
      #[serde(alias = "id")]
      name: String
    }
    ```
    
    ```rust
    // -- assets/inventory.ron
    
    {
      "my_game::inventory::Inventory": (
        id: "inv001",
        max_storage: 10,
        items: [
          (
            id: "Pickaxe"
          ),
        ],
      ),
    },
    ```
    
    By allowing users to define their own serialization methods, we do two things:
    
    1. We give more control over how data is serialized/deserialized to the end user
    2. We avoid having to re-define serde's attributes and forcing users to apply both (e.g. we don't need a `#[reflect(alias)]` attribute).
    
    ### Improved Formats
    
    One of the improvements this PR provides is the ability to represent data in ways that are more conventional and/or familiar to users. Many users are familiar with RON so here are some of the ways we can now represent data in RON:
    
    ###### Structs
    
    ```js
    {
      "my_crate::Foo": (
        bar: 123
      )
    }
    // OR
    {
      "my_crate::Foo": Foo(
        bar: 123
      )
    }
    ```
    
    <details>
    <summary>Old Format</summary>
    
    ```js
    {
      "type": "my_crate::Foo",
      "struct": {
        "bar": {
          "type": "usize",
          "value": 123
        }
      }
    }
    ```
    
    </details>
    
    ###### Tuples
    
    ```js
    {
      "(f32, f32)": (1.0, 2.0)
    }
    ```
    
    <details>
    <summary>Old Format</summary>
    
    ```js
    {
      "type": "(f32, f32)",
      "tuple": [
        {
          "type": "f32",
          "value": 1.0
        },
        {
          "type": "f32",
          "value": 2.0
        }
      ]
    }
    ```
    
    </details>
    
    ###### Tuple Structs
    
    ```js
    {
      "my_crate::Bar": ("Hello World!")
    }
    // OR
    {
      "my_crate::Bar": Bar("Hello World!")
    }
    ```
    
    <details>
    <summary>Old Format</summary>
    
    ```js
    {
      "type": "my_crate::Bar",
      "tuple_struct": [
        {
          "type": "alloc::string::String",
          "value": "Hello World!"
        }
      ]
    }
    ```
    
    </details>
    
    ###### Arrays
    
    It may be a bit surprising to some, but arrays now also use the tuple format. This is because they essentially _are_ tuples (a sequence of values with a fixed size), but only allow for homogenous types. Additionally, this is how RON handles them and is probably a result of the 32-capacity limit imposed on them (both by [serde](https://docs.rs/serde/latest/serde/trait.Serialize.html#impl-Serialize-for-%5BT%3B%2032%5D) and by [bevy_reflect](https://docs.rs/bevy/latest/bevy/reflect/trait.GetTypeRegistration.html#impl-GetTypeRegistration-for-%5BT%3B%2032%5D)).
    
    ```js
    {
      "[i32; 3]": (1, 2, 3)
    }
    ```
    
    <details>
    <summary>Old Format</summary>
    
    ```js
    {
      "type": "[i32; 3]",
      "array": [
        {
          "type": "i32",
          "value": 1
        },
        {
          "type": "i32",
          "value": 2
        },
        {
          "type": "i32",
          "value": 3
        }
      ]
    }
    ```
    
    </details>
    
    ###### Enums
    
    To make things simple, I'll just put a struct variant here, but the style applies to all variant types:
    
    ```js
    {
      "my_crate::ItemType": Consumable(
        name: "Healing potion"
      )
    }
    ```
    
    <details>
    <summary>Old Format</summary>
    
    ```js
    {
      "type": "my_crate::ItemType",
      "enum": {
        "variant": "Consumable",
        "struct": {
          "name": {
            "type": "alloc::string::String",
            "value": "Healing potion"
          }
        }
      }
    }
    ```
    
    </details>
    
    ### Comparison with #4561
    
    This PR is a rebased version of #4561. The reason for the split between the two is because this PR creates a _very_ different scene format. You may notice that the PR descriptions for either PR are pretty similar. This was done to better convey the changes depending on which (if any) gets merged first. If #4561 makes it in first, I will update this PR description accordingly.
    
    ---
    
    ## Changelog
    
    * Re-worked serialization/deserialization for reflected types
    * Added `TypedReflectDeserializer` for deserializing data with known `TypeInfo`
    * Renamed `ReflectDeserializer` to `UntypedReflectDeserializer`
    * ~~Replaced usages of `deserialize_any` with `deserialize_map` for non-self-describing formats~~ Reverted this change since there are still some issues that need to be sorted out (in a separate PR). By reverting this, crates like `bincode` can throw an error when attempting to deserialize non-self-describing formats (`bincode` results in `DeserializeAnyNotSupported`)
    * Structs, tuples, tuple structs, arrays, and enums are now all de/serialized using conventional serde methods
    
    ## Migration Guide
    
    * This PR reduces the verbosity of the scene format. Scenes will need to be updated accordingly:
    
    ```js
    // Old format
    {
      "type": "my_game::item::Item",
      "struct": {
        "id": {
          "type": "alloc::string::String",
          "value": "bevycraft:stone",
        },
        "tags": {
          "type": "alloc::vec::Vec<alloc::string::String>",
          "list": [
            {
              "type": "alloc::string::String",
              "value": "material"
            },
          ],
        },
    }
    
    // New format
    {
      "my_game::item::Item": (
        id: "bevycraft:stone",
        tags: ["material"]
      )
    }
    ```
    
    [^1]: Some derives omitted for brevity.

[33mcommit bc863cec4d046cc69f58e7325a996ccb7a910f3f[m
Author: targrub <targrub@gmail.com>
Date:   Tue Sep 20 18:24:00 2022 +0000

    Derived `Copy` trait for `bevy_input` events, `Serialize`/`Deserialize` for events in `bevy_input` and `bevy_windows`, `PartialEq` for events in both, and `Eq` where possible in both. (#6023)
    
    # Objective
    
    Add traits to events in `bevy_input` and `bevy_windows`: `Copy`, `Serialize`/`Deserialize`, `PartialEq`, and `Eq`, as requested in https://github.com/bevyengine/bevy/issues/6022, https://github.com/bevyengine/bevy/issues/6023, https://github.com/bevyengine/bevy/issues/6024.
    
    ## Solution
    
    Added the traits to events in `bevy_input` and `bevy_windows`.  Added dependency of `serde` in `Cargo.toml` of `bevy_input`.
    
    
    ## Migration Guide
    
    If one has been `.clone()`'ing `bevy_input` events, Clippy will now complain about that.  Just remove `.clone()` to solve.
    
    ## Other Notes
    
    Some events in `bevy_input` had `f32` fields, so `Eq` trait was not derived for them.
    Some events in `bevy_windows` had `String` fields, so `Copy` trait was not derived for them.
    
    Co-authored-by: targrub <62773321+targrub@users.noreply.github.com>

[33mcommit 2b80a3f279d1273fbcface9e075637fe681a38d2[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Tue Sep 20 00:29:10 2022 +0000

    Implement `IntoIterator` for `&Extract<P>` (#6025)
    
    # Objective
    
    Implement `IntoIterator` for `&Extract<P>` if the system parameter it wraps implements `IntoIterator`.
    
    Enables the use of `IntoIterator` with an extracted query.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 7d5a7cc76d3e823ba9daafceb96b9c93360fcfdc[m
Author: Jakub Åabor <jacob.labor@gmail.com>
Date:   Mon Sep 19 22:50:35 2022 +0000

    Register missing bevy_text types (#6029)
    
    Register two missing bevy_text types.

[33mcommit 28205fd3f4ef2dc2f7cb7cdb48511ebb34d97340[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Mon Sep 19 16:36:38 2022 +0000

    Remove `AssetServer::watch_for_changes()` (#5968)
    
    # Objective
    `AssetServer::watch_for_changes()` is racy and redundant with `AssetServerSettings`.
    Closes #5964.
    
    ## Changelog
    
    * Remove `AssetServer::watch_for_changes()`
    * Add `AssetServerSettings` to the prelude.
    * Minor cleanup.
    
    ## Migration Guide
    `AssetServer::watch_for_changes()` was removed.
    Instead, use the `AssetServerSettings` resource.
    ```rust
    app // AssetServerSettings must be inserted before adding the AssetPlugin or DefaultPlugins.
            .insert_resource(AssetServerSettings {
                    watch_for_changes: true,
                    ..default()
            })
    ```
    
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 91a235e6d6ea5c33c27a3724d114b3f075a80de0[m
Author: Afonso Lage <lage.afonso@gmail.com>
Date:   Mon Sep 19 16:36:37 2022 +0000

    Implement `Debug` for dynamic types (#5948)
    
    # Objective
    
    When trying derive `Debug` for type that has `DynamicEnum` it wasn't possible, since neither of `DynamicEnum`, `DynamicTuple`, `DynamicVariant` or `DynamicArray` implements `Debug`.
    
    ## Solution
    
    Implement Debug for those types, using `derive` macro
    
    ---
    
    ## Changelog
    
    - `DynamicEnum`, `DynamicTuple`, `DynamicVariant` and `DynamicArray` now implements `Debug`

[33mcommit b6efe0f318b93330376cd44849281e919eec4a53[m
Author: xtr3m3nerd <xtr3m3nerd@gmail.com>
Date:   Mon Sep 19 16:12:12 2022 +0000

    Limit FontAtlasSets  (#5708)
    
    # Objective
    
    Fixes #5636
    Summary: The FontAtlasSet caches generated font textures per font size. Since font size can be any arbitrary floating point number it is possible for the user to generate thousands of font texture inadvertently by changing the font size over time. This results in a memory leak as these generated font textures fill the available memory.
    
    ## Solution
    
    We limit the number of possible font sizes that we will cache and throw an error if the user attempts to generate more. This error encourages the user to use alternative, less performance intensive methods to accomplish the same goal. If the user requires more font sizes and the alternative solutions wont work there is now a TextSettings Resource that the user can set to configure this limit.
    
    ---
    
    ## Changelog
    
    The number of cached font sizes per font is now limited with a default limit of 100 font sizes per font. This limit is configurable via the new TextSettings struct.

[33mcommit 6c5403cf477036f855341ee07565b34b3c6a8490[m
Author: Nicola Papale <nico@nicopap.ch>
Date:   Mon Sep 19 16:12:11 2022 +0000

    Add warning when a hierarchy component is missing (#5590)
    
    # Objective
    
    A common pitfall since 0.8 is the requirement on `ComputedVisibility`
    being present on all ancestors of an entity that itself has
    `ComputedVisibility`, without which, the entity becomes invisible.
    
    I myself hit the issue and got very confused, and saw a few people hit
    it as well, so it makes sense to provide a hint of what to do when such
    a situation is encountered.
    
    - Fixes #5849
    - Closes #5616
    - Closes #2277
    - Closes #5081
    
    ## Solution
    
    We now check that all entities with both a `Parent` and a
    `ComputedVisibility` component have parents that themselves have a
    `ComputedVisibility` component.
    
    Note that the warning is only printed once.
    
    We also add a similar warning to `GlobalTransform`.
    
    This only emits a warning. Because sometimes it could be an intended
    behavior.
    
    Alternatives:
    - Do nothing and keep repeating to newcomers how to avoid recurring
      pitfalls
    - Make the transform and visibility propagation tolerant to missing
      components (#5616)
    - Probably archetype invariants, though the current draft would not
      allow detecting that kind of errors
    
    ---
    
    ## Changelog
    
    - Add a warning when encountering dubious component hierarchy structure
    
    
    Co-authored-by: Nicola Papale <nicopap@users.noreply.github.com>

[33mcommit ac1aebed5ecc92c784084bbe66bbfd5ce194c50d[m
Author: Maksymilian Mozolewski <makspl17@gmail.com>
Date:   Mon Sep 19 16:12:10 2022 +0000

    Add `reflect(skip_serializing)` which retains reflection but disables automatic serialization (#5250)
    
    # Objective
    
    - To address problems outlined in https://github.com/bevyengine/bevy/issues/5245
    
    ## Solution
    
    - Introduce `reflect(skip_serializing)` on top of `reflect(ignore)` which disables automatic serialisation to scenes, but does not disable reflection of the field.
    
    ---
    
    ## Changelog
    - Adds:
      - `bevy_reflect::serde::type_data` module
      - `SerializationData` structure for describing which fields are to be/not to be ignored, automatically registers as type_data for struct-based types
      - the `skip_serialization` flag for `#[reflect(...)]`
     - Removes:
       - ability to ignore Enum variants in serialization, since that didn't work anyway
    
    
    ## Migration Guide
    - Change `#[reflect(ignore)]` to `#[reflect(skip_serializing)]` where disabling reflection is not the intended effect.
    - Remove ignore/skip attributes from enum variants as these won't do anything anymore

[33mcommit f2ad11104dec0e3bbd93ad70c9fdea9d61bfa1aa[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon Sep 19 15:46:03 2022 +0000

    Swap out num_cpus for std::thread::available_parallelism (#4970)
    
    # Objective
    As of Rust 1.59, `std::thread::available_parallelism` has been stabilized. As of Rust 1.61, the API matches `num_cpus::get` by properly handling Linux's cgroups and other sandboxing mechanisms.
    
    As bevy does not have an established MSRV, we can replace `num_cpus` in `bevy_tasks` and reduce our dependency tree by one dep.
    
    ## Solution
    Replace `num_cpus` with `std::thread::available_parallelism`. Wrap it to have a fallback in the case it errors out and have it operate in the same manner as `num_cpus` did.
    
    This however removes `physical_core_count` from the API, though we are currently not using it in any way in first-party crates.
    
    ---
    
    ## Changelog
    Changed: `bevy_tasks::logical_core_count` -> `bevy_tasks::available_parallelism`.
    Removed: `bevy_tasks::physical_core_count`.
    
    ## Migration Guide
    `bevy_tasks::logical_core_count` and `bevy_tasks::physical_core_count` have been removed. `logical_core_count` has been replaced with `bevy_tasks::available_parallelism`, which works identically. If `bevy_tasks::physical_core_count` is required, the `num_cpus` crate can be used directly, as these two were just aliases for `num_cpus` APIs.

[33mcommit 047b43756001c98df4c87cd8102656f1a1ba47c1[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Sep 19 13:56:56 2022 +0000

    Update rodio requirement from 0.15 to 0.16 (#6020)
    
    # Objective
    
    - #6019 but with the duplicate package list updated
    - Fixes #5774

[33mcommit d0e294c86bd40473517ac33acc156f01f6fa5c9a[m
Author: targrub <targrub@gmail.com>
Date:   Sun Sep 18 23:52:01 2022 +0000

    `Query` filter types must be `ReadOnlyWorldQuery` (#6008)
    
    # Objective
    
    Fixes Issue #6005.
    
    ## Solution
    
    Replaced WorldQuery with ReadOnlyWorldQuery on F generic in Query filters and QueryState to restrict its trait bound.
    
    ## Migration Guide
    
    Query filter (`F`) generics are now bound by `ReadOnlyWorldQuery`, rather than `WorldQuery`. If for some reason you were requesting `Query<&A, &mut B>`, please use `Query<&A, With<B>>` instead.

[33mcommit 1f0fa5908a46f9b1314e1a31da10b9e1c57a4fbc[m
Author: JohnTheCoolingFan <43478602+JohnTheCoolingFan@users.noreply.github.com>
Date:   Sun Sep 18 23:36:05 2022 +0000

    Clarify that Stopwatch.reset does not affect paused state (#6016)
    
    # Objective
    
    Makes `Stopwatch::reset` documentation more clear
    
    ## Solution
    
    Added a doc comment

[33mcommit 53157c0801e064a643eff39cc470475b83f95464[m
Author: Ida Iyes <identry@protonmail.com>
Date:   Sun Sep 18 22:49:27 2022 +0000

    Sprite: allow using a sub-region (Rect) of the image (#6014)
    
    Very small change that improves the usability of `Sprite`.
    
    Before this PR, the only way to render a portion of an `Image` was to create a `TextureAtlas` and use `TextureAtlasSprite`/`SpriteSheetBundle`. This can be very annoying for one-off use cases, like if you just want to remove a border from an image, or something. Using `Sprite`/`SpriteBundle` always meant that the entire full image would be rendered.
    
    This PR adds an optional `rect` field to `Sprite`, allowing a sub-rectangle of the image to be rendered. This is similar to how texture atlases work, but does not require creating a texture atlas asset, making it much more convenient and efficient for quick one-off use cases.
    
    Given how trivial this change is, it really felt like missing functionality in Bevy's sprites API. ;)
    
    ## Changelog
    
    Added:
     - `rect` field on `Sprite`: allows rendering a portion of the sprite's image; more convenient for one-off use cases, than creating a texture atlas.

[33mcommit 43f9271d139cbe5f3678559e44a58416994e5493[m
Author: Squirrel <gilescope@gmail.com>
Date:   Sun Sep 18 15:49:49 2022 +0000

    unused dep references? (#5954)
    
    Got a hunch ( from undepend ) that these are not needed.

[33mcommit 91109f6f18d4c2a6a61adbd671e03dd0a9d247d0[m
Author: Michael Clayton <mwc@clayto.com>
Date:   Sun Sep 18 02:03:10 2022 +0000

    add Debug, Copy, Clone derives to Circle (#6009)
    
    # Objective
    
    - all the shapes except Circle have derives for Debug, Copy, and Clone
    
    ## Solution
    
    - add derive to Circle for Debug, Copy, and Clone

[33mcommit e96b21a24a7fe17a64e52b7bba81e00145ea1756[m
Author: SpecificProtagonist <vincentjunge@posteo.net>
Date:   Sat Sep 17 12:49:00 2022 +0000

    Fix DrawFunctionId typo (#5996)
    
    Fix extra slashes visible in documentation of `DrawFunctionId`. Also point to where the type is used.

[33mcommit 1965d09b728703332645fb9c656a69c3b307375f[m
Author: Andres O. Vela <andresovela@users.noreply.github.com>
Date:   Sat Sep 17 07:21:53 2022 +0000

    Fix typo in link to dev-docs (#5999)
    
    # Objective
    
    - Fix typo
    
    ## Solution
    
    - Fix typo

[33mcommit 503c2a9677ab6f210aef8df086237bde99baaffb[m
Author: robtfm <50659922+robtfm@users.noreply.github.com>
Date:   Thu Sep 15 21:58:14 2022 +0000

    adjust cluster index for viewport origin (#5947)
    
    # Objective
    
    fixes #5946
    
    ## Solution
    
    adjust cluster index calculation for viewport origin.
    
    from reading point 2 of the rasterization algorithm description in https://gpuweb.github.io/gpuweb/#rasterization, it looks like framebuffer space (and so @bulitin(position)) is not meant to be adjusted for viewport origin, so we need to subtract that to get the right cluster index.
    
    - add viewport origin to rust `ExtractedView` and wgsl `View` structs
    - subtract from frag coord for cluster index calculation

[33mcommit deeab3fc90d7a587728ab758f7c16fd202e81626[m
Author: Federico Rinaldi <gisquerin@gmail.com>
Date:   Thu Sep 15 17:05:09 2022 +0000

    Optimize use statement (#5992)
    
    Just a very small `use` statement thing. Check the changed file.

[33mcommit c256c3848634b0f2fd9c26fdc25a6583a0e51da9[m
Author: Kurt KÃ¼hnert <kurt@kuehnert.dev>
Date:   Thu Sep 15 15:57:04 2022 +0000

    Add TextureFormat::Rg16Unorm support for Image and derive Resource for SpecializedComputePipelines (#5991)
    
    # Objective
    
    Currently some TextureFormats are not supported by the Image type.
    The `TextureFormat::Rg16Unorm` format is useful for storing minmax heightmaps.
    Similar to #5249 I now additionally require image to support the dual channel variant.
    
    ## Solution
    
    Added `TextureFormat::Rg16Unorm` support to Image.
    
    Additionally this PR derives `Resource` for `SpecializedComputePipelines`, because for some reason this was missing.
    All other special pipelines do derive `Resource` already.
    
    
    Co-authored-by: Kurt KÃ¼hnert <51823519+Ku95@users.noreply.github.com>

[33mcommit 619c44f482a92ed257a24454f84797f18a15e559[m
Author: Sergi-Ferrez <sferrez@milaifontanals.org>
Date:   Wed Sep 14 18:57:13 2022 +0000

    Remaining fn in Timer (#5971)
    
    # Objective
    
    Fixes #5963
    
    ## Solution
    
    Add remaining fn in Timer class, this function only minus total duration with elapsed time.
    
    Co-authored-by: Sergi-Ferrez <61662926+Sergi-Ferrez@users.noreply.github.com>

[33mcommit 1378ab2859cdbabfd3ee0deadf7ca3e02cb524be[m
Author: Eliton Machado da Silva <elitonmachadod200@gmail.com>
Date:   Tue Sep 13 22:41:29 2022 +0000

    Stopwatch elapsed secs f64 (#5978)
    
    # Objective
    
    While coding in bevy I needed to get the elapsed time of a stopwatch as f64.
    I found it quite odd there are functions on Timer to get time as f64 but not on the Stopwatch.
    
    ## Solution
    
    - added a function that returns the `Stopwatch` elapsed time as `f64`
    
    ---
    
    ## Changelog
    
    ### Added
    - Added a function to get `Stopwatch` elapsed time as `f64`
    
    ### Fixed
    - The Stopwatch elapsed function had a wrong docs link

[33mcommit 5d821fe1a73791efb8e44ab1686bc8abd1fff368[m
Author: James Liu <contact@jamessliu.com>
Date:   Tue Sep 13 19:28:13 2022 +0000

    Start running systems while prepare_systems is running (#4919)
    
    # Objective
    While using the ParallelExecutor, systems do not actually start until `prepare_systems` completes. In stages where there are large numbers of "empty" systems with very little work to do, this delay adds significant overhead, which can add up over many stages.
    
    ## Solution
    Immediately and synchronously signal the start of systems that can run without dependencies inside `prepare_systems` instead of waiting for the first executor iteration after `prepare_systems` completes. Any system that is dependent on them still cannot run until after `prepare_systems` completes, but there are a large number of unconstrained systems in the base engine where this is a general benefit in almost every case.
    
    ## Performance
    
    This change was tested against `many_foxes` in the default configuration. As this change is sensitive to the overhead around scheduling systems, the spans for measuring system timing, system overhead, and system commands were all commented out for these measurements.
    
    The median stage timings between `main` and this PR are as follows:
    
    |stage|main|this PR|
    |:--|:--|:--|
    |First|75.54 us|61.61 us|
    |LoadAssets|51.05 us|42.32 us|
    |PreUpdate|54.6 us|55.56 us|
    |Update|61.89 us|51.5 us|
    |PostUpdate|7.27 ms|6.71 ms|
    |AssetEvents|47.82 us|35.95 us|
    |Last|39.19 us|37.71 us|
    |reserve_and_flush|57.83 us|48.2 us|
    |Extract|1.41 ms|1.28 ms|
    |Prepare|554.49 us|502.53 us|
    |Queue|216.29 us|207.51 us|
    |Sort|67.03 us|60.99 us|
    |Render|1.73 ms|1.58 ms|
    |Cleanup|33.55 us|30.76 us|
    |Clear Entities|18.56 us|17.05 us|
    |**full frame**|**11.9 ms**|**10.91 ms**|
    
    For the first few stages, the benefit is small but cumulative over each. For PostUpdate in particular, this allows `parent_update` to run while prepare_systems is running, which is required for the animation and transform propagation systems, which dominate the time spent in the stage, but also frontloads the contention as the other "empty" systems are also running while `parent_update` is running. For Render, where there is just a single large exclusive system, the benefit comes from not waiting on a spuriously scheduled task on the task pool to kick off the system: it's immediately scheduled to run.

[33mcommit d8d191fdd5df0a0b3e291b53d0cd15cae8f664cb[m
Author: gak <gak@gak0.com>
Date:   Tue Sep 13 04:36:50 2022 +0000

    Fix a small doc typo: grater -> greater (#5970)
    
    # Objective
    
    Fix a small typo in the docs: [DefaultTaskPoolOptions::max_total_threads](https://docs.rs/bevy/latest/bevy/core/struct.DefaultTaskPoolOptions.html#structfield.max_total_threads)
    
    ## Solution
    
    Change the spelling. :+1:

[33mcommit 9c08a5df7675e54ed672dc99a991fa337b54be77[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon Sep 12 22:59:14 2022 +0000

    Mention dev docs in CONTRIBUTING.md (#5969)
    
    # Objective
    Fixes #5390. Makes https://dev-docs.bevyengine.org/ a bit more discoverable.
    
    ## Solution
    Mention the option as an alternative option to building the docs yourself in CONTRIBUTING.md.

[33mcommit 1b9720526e01c276272f986cfac4e1e1d5b6fc10[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Sep 12 12:19:40 2022 +0000

    Scene example: write file in a task (#5952)
    
    # Objective
    
    - Fix #5951
    - Improve on #5949 by not risking blocking a system
    
    ## Solution
    
    - Wrap file writing in a task

[33mcommit 404b4fc0eb96a91dcee6bc0b9e74ac00c84f14fc[m
Author: Boxy <supbscripter@gmail.com>
Date:   Mon Sep 12 04:34:52 2022 +0000

    lifetime related cleanup in `entity_ref.rs` (#5611)
    
    # Objective
    
    EntityMut::world takes &mut self instead of &self I don't see any reason for this.
    EntityRef is overly restrictive with fn world and could return &'w World
    
    ---
    
    ## Changelog
    
    - EntityRef now implements Copy and Clone
    - EntityRef::world is now fn(&self) -> &'w World instead of fn(&mut self) -> &World
    - EntityMut::world is now fn(&self) -> &World instead of fn(&mut self) -> &World

[33mcommit 05afbc68156dcaa8a28b45faa9b26d5883e70891[m
Author: PROMETHIA-27 <electriccobras@gmail.com>
Date:   Mon Sep 12 04:15:55 2022 +0000

    Remove `Sync` bound from `Local` (#5483)
    
    # Objective
    
    Currently, `Local` has a `Sync` bound. Theoretically this is unnecessary as a local can only ever be accessed from its own system, ensuring exclusive access on one thread. This PR removes this restriction.
    
    ## Solution
    
    - By removing the `Resource` bound from `Local` and adding the new `SyncCell` threading primative, `Local` can have the `Sync` bound removed.
    
    ## Changelog
    
    ### Added
    
    - Added `SyncCell` to `bevy_utils`
    
    ### Changed
    
    - Removed `Resource` bound from `Local`
    - `Local` is now wrapped in a `SyncCell`
    
    ## Migration Guide
    
    - Any code relying on `Local<T>` having `T: Resource` may have to be changed, but this is unlikely.
    
    Co-authored-by: PROMETHIA-27 <42193387+PROMETHIA-27@users.noreply.github.com>

[33mcommit 301ecf65ba5115d4a2bb8f9e43a1f727aab7fcb4[m
Author: robem <rob3m@pm.me>
Date:   Mon Sep 12 01:25:34 2022 +0000

    Add more documentation and tests to collide_aabb::collide() (#5910)
    
    While looking into `collide()`, I wrote some tests to confirm the behavior I read in the code. This PR adds those tests and improves the documentation.
    
    Co-authored-by: robem <669201+robem@users.noreply.github.com>

[33mcommit fc07557913e2edd49056023d49addea9aae6d41c[m
Author: Federico Rinaldi <gisquerin@gmail.com>
Date:   Mon Sep 12 01:06:09 2022 +0000

    Clarify `Commands` API docs (#5938)
    
    # Objective
    
    - Make people stop believing that commands are applied immediately (hopefully).
    - Close #5913.
    - Alternative to #5930.
    
    ## Solution
    
    I added the clause âto perform impactful changes to the `World`â to the first line to subliminally help the reader accept the fact that some operations cannot be performed immediately without messing up everything.
    
    Then I explicitely said that applying a command requires exclusive `World` access, and finally I proceeded to show when these commands are automatically applied.
    
    I also added a brief paragraph about how commands can be applied manually, if they want.
    
    ---
    
    ### Further possibilities
    
    If you agree, we can also change the text of the method documentation (in a separate PR) to stress about enqueueing an action instead of just performing it. For example, in `Commands::spawn`:
    
    > Creates a new `Entity`
    
    would be changed to something like:
    
    > Issues a `Command` to spawn a new `Entity`
    
    This may even have a greater effect, since when typing in an IDE, the docs of the method pop up and the programmer can read them on the fly.

[33mcommit f83a9c23f2dde536b1b2b0868926d8355417dd34[m
Author: Wanderrful <wanderrful@gmail.com>
Date:   Sun Sep 11 20:18:57 2022 +0000

    Add writing of scene data to Scene example (#5949)
    
    # Objective
    
    Alice says to make this PR: https://discord.com/channels/691052431525675048/745805740274614303/1018554340841107477
    
    - The "scene" example in the examples folder has a TODO comment about writing the serialized data to a file. This PR implements that.
    
    ## Solution
    
    The `AssetIo` trait in the `AssetServer` only supports reading data, not writing it. So, I used `std::io::File` for the implementation. This way, every time you run the example, it will mutate the file in-place.
    
    I had thought about adding a UUID string to the example Component, so that every time you run the example, the file will be guaranteed to change (currently, it just writes the same numbers over and over). However, I didn't bother because it was beyond the scope of the TODO comment.
    
    One thing to note is that the logic for serializing the scene into RON data has changed since the existing RON file was created, and so even though the data is the same, it's rendered in a different order for whatever reason.
    
    I left the changed output to the example file, because it's presumably trivial.  I can remove it and force-push if you don't want that included in here.

[33mcommit bb7f521f91df4ce1b3f33fbb2efdf2ce26098c0b[m
Author: Erin <asherkin@limetech.io>
Date:   Sun Sep 11 15:26:40 2022 +0000

    Ensure 2D phase items are sorted before batching (#5942)
    
    # Objective
    
    Without this we can inappropriately merge batches together without properly accounting for non-batch items between them, and the merged batch will then be sorted incorrectly later.
    
    This change seems to reliably fix the issue I was seeing in #5919.
    
    ## Solution
    
    Ensure the `batch_phase_system` runs after the `sort_phase_system`, so that batching can only look at actually adjacent phase items.

[33mcommit 6f2cc0b30e335f3084f7028498c0866279c78099[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Fri Sep 9 21:26:36 2022 +0000

    relax `Sized` bounds around change detection types (#5917)
    
    # Objective
    
    I wanted to run the code
    ```rust
    let reflect_resource: ReflectResource = ...;
    let value: Mut<dyn Reflect> = reflect_resource.reflect(world);
    value.deref();
    // ^ ERROR: deref method doesn't exist because `dyn Reflect` doesnt satisfy `: Sized`.
    ```
    
    ## Solution
    
    Relax `Sized` bounds in all the methods and trait implementations for `Mut` and friends.

[33mcommit ca3fa9dd6f258602c099b6a028307c5bc3868d08[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Fri Sep 9 18:44:47 2022 +0000

    Move ambiguity detection into its own file (#5918)
    
    # Objective
    
    This code is very disjoint, and the `stage.rs` file that it's in is already very long.
    
    All I've done is move the code and clean up the compiler errors that result.
    
    Followup to #5916, split out from #4299.

[33mcommit c96b7ffb508e41b0629b2b0169149bc817ff93d1[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Fri Sep 9 17:21:50 2022 +0000

    Remove ambiguity sets (#5916)
    
    # Objective
    
    Ambiguity sets are used to ignore system order ambiguities between groups of systems. However, they are not very useful: they are clunky, poorly integrated, and generally hampered by the difficulty using (or discovering) the ambiguity detector.
    
    As a first step to the work in #4299, we're removing them.
    
    ## Migration Guide
    
    Ambiguity sets have been removed.

[33mcommit 54e32ee681e5ab820cd2287018da65d50b92b14b[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Fri Sep 9 16:26:52 2022 +0000

    Add a change detection bypass and manual control over change ticks (#5635)
    
    # Objective
    
    - Our existing change detection API is not flexible enough for advanced users: particularly those attempting to do rollback networking.
    - This is an important use case, and with adequate warnings we can make mucking about with change ticks scary enough that users generally won't do it.
    - Fixes #5633.
    - Closes #2363.
    
    ## Changelog
    
    - added `ChangeDetection::set_last_changed` to manually mutate the `last_change_ticks` field"
    - the `ChangeDetection` trait now requires an `Inner` associated type, which contains the value being wrapped.
    - added `ChangeDetection::bypass_change_detection`, which hands out a raw `&mut Inner`
    
    ## Migration Guide
    
    Add the `Inner` associated type and new methods to any type that you've implemented `DetectChanges` for.

[33mcommit 7d9e864d9cbd2e755d2458b3d204328776687227[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Wed Sep 7 15:59:50 2022 +0000

    implement `Reflect` for `Input<T>`, some misc improvements to reflect value derive (#5676)
    
    # Objective
    
    - I'm currently working on being able to call methods on reflect types (https://github.com/jakobhellermann/bevy_reflect_fns)
    - for that, I'd like to add methods to the `Input<KeyCode>` resource (which I'm doing by registering type data)
    - implementing `Reflect` is currently a requirement for having type data in the `TypeRegistry`
    
    ## Solution
    
    - derive `Reflect` for `KeyCode` and `Input`
    - uses `#[reflect_value]` for `Input`, since it's fields aren't supposed to be observable
    - using reflect_value would need `Clone` bounds on `T`, but since all the methods (`.pressed` etc) already require `T: Copy`, I unified everything to requiring `Copy`
    - add `Send + Sync + 'static` bounds, also required by reflect derive
    
    ## Unrelated improvements
    I can extract into a separate PR if needed.
    
    - the `Reflect` derive would previously ignore `#[reflect_value]` and only accept `#[reflect_value()]` which was a bit confusing
    - the generated code used `val.clone()` on a reference, which is fine if `val` impls `Clone`, but otherwise also compiles with a worse error message. Change to `std::clone::Clone::clone(val)` instead which gives a neat `T does not implement Clone` error

[33mcommit 7a925552338e3c614ec16d4bf5eeefdcb8abc80c[m
Author: robem <rob3m@pm.me>
Date:   Tue Sep 6 21:24:40 2022 +0000

    Update WorldQueryGats doc with type aliases (#5898)
    
    Make API users aware that the type aliases `QueryItem` and `QueryFetch` can be used instead of the more bloated alternative with `WorldQueryGats`.
    
    Fixes #5842

[33mcommit bd68ba1c3cf8d67b69c24a29172663ce63ed3abf[m
Author: Al M <hello@yrns.org>
Date:   Tue Sep 6 20:03:40 2022 +0000

    make TextLayoutInfo a Component (#4460)
    
    # Objective
    
    Make `TextLayoutInfo` more accessible as a component, rather than internal to `TextPipeline`. I am working on a plugin that manipulates these and there is no (mutable) access to them right now.
    
    ## Solution
    
    This changes `TextPipeline::queue_text` to return `TextLayoutInfo`'s rather than storing them in a map internally. `text2d_system` and `text_system` now take the returned `TextLayoutInfo` and store it as a component of the entity. I considered adding an accessor to `TextPipeline` (e.g. `get_glyphs_mut`) but this seems like it might be a little faster, and also has the added benefit of cleaning itself up when entities are removed. Right now nothing is ever removed from the glyphs map.
    
    ## Changelog
    
    Removed `DefaultTextPipeline`. `TextPipeline` no longer has a generic key type. `TextPipeline::queue_text` returns `TextLayoutInfo` directly.
    
    ## Migration Guide
    
    This might break a third-party crate? I could restore the orginal TextPipeline API as a wrapper around what's in this PR.

[33mcommit 1914696a24f33ee3abc18effd1a7b14f4f303b82[m
Author: FÃ©lix Lescaudey de Maneville <felix.maneville@gmail.com>
Date:   Tue Sep 6 15:06:18 2022 +0000

    Remove unused dependency from bevy_app (#5894)
    
    # Objective
    
    `bevy_app` has an unused `bevy_tasks` dependency

[33mcommit 6b889774cb0b16954491c78503e671594226b640[m
Author: shuo <shuoli84@gmail.com>
Date:   Tue Sep 6 15:06:17 2022 +0000

    disable window pre creation for ios (#5883)
    
    # Objective
    
    Fixes #5882
    
    ## Solution
    
    Per https://github.com/rust-windowing/winit/issues/1705, the root cause is "UIWindow should be created inside UIApplicationMain". Currently, there are two places to create UIWindow, one is Plugin's build function, which is not inside UIApplicationMain. Just comment it out, and it works.

[33mcommit 28c16b9713e12efa3a026616e4f763b599ed65a0[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Tue Sep 6 14:45:44 2022 +0000

     Support monitor selection for all window modes. (#5878)
    
    # Objective
    Support monitor selection for all window modes.
    Fixes #5875.
    
    ## Changelog
    
    * Moved `MonitorSelection` out of `WindowPosition::Centered`, into `WindowDescriptor`.
    * `WindowPosition::At` is now relative to the monitor instead of being in 'desktop space'.
    * Renamed `MonitorSelection::Number` to `MonitorSelection::Index` for clarity.
    * Added `WindowMode` to the prelude.
    * `Window::set_position` is now relative to a monitor and takes a `MonitorSelection` as argument.
    
    ## Migration Guide
    
    `MonitorSelection` was moved out of `WindowPosition::Centered`, into `WindowDescriptor`.
    `MonitorSelection::Number` was renamed to `MonitorSelection::Index`.
    ```rust
    // Before
    .insert_resource(WindowDescriptor {
        position: WindowPosition::Centered(MonitorSelection::Number(1)),
        ..default()
    })
    // After
    .insert_resource(WindowDescriptor {
        monitor: MonitorSelection::Index(1),
        position: WindowPosition::Centered,
        ..default()
    })
    ```
    `Window::set_position` now takes a `MonitorSelection` as argument.
    ```rust
    window.set_position(MonitorSelection::Current, position);
    ```
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 092bb71bcf00fa278b828df0115c144451233983[m
Author: Gabriel Bourgeois <gabriel.bourgeoisv4si@gmail.com>
Date:   Mon Sep 5 21:50:31 2022 +0000

    Clean up taffy nodes when UI node entities are removed (#5886)
    
    # Objective
    
    Clean up taffy nodes when the associated UI node gets removed. The current UI code will keep the taffy nodes around forever.
    
    ## Solution
    
    Use `RemovedComponents<Node>` to iterate over nodes that are no longer valid UI nodes or that have been despawned, and remove them from taffy and the internal hash map.
    
    ## Implementation Notes
    
    Do note that using `despawn()` instead of `despawn_recursive()` on a UI node that has children will result in a [warnings spam](https://github.com/bevyengine/bevy/blob/main/crates/bevy_ui/src/flex/mod.rs#L120) since the children will not be part of a proper UI hierarchy anymore.
    
    ---
    
    ## Changelog
    
    - Fixed memory leak when nodes are removed in bevy_ui

[33mcommit 76ae6f4c6e77866104229659a211045748cfb4bf[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Mon Sep 5 00:30:21 2022 +0000

    Miscellaneous code-quality improvements. (#5860)
    
    Does what it do.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 7a29c707bf6c79b3dab6e79048818836cdc26bbe[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Sat Sep 3 20:08:54 2022 +0000

    `Gamepad` type is `Copy`; do not require / return references to it in `Gamepads` API (#5296)
    
    # Objective
    
    - The `Gamepad` type is a tiny value-containing type that implements `Copy`.
    - By convention, references to `Copy` types should be avoided, as they can introduce overhead and muddle the semantics of what's going on.
    - This allows us to reduce boilerplate reference manipulation and lifetimes in user facing code.
    
    ## Solution
    
    - Make assorted methods on `Gamepads` take / return a raw `Gamepad`, rather than `&Gamepad`.
    
    ## Migration Guide
    
    - `Gamepads::iter` now returns an iterator of `Gamepad`. rather than an iterator of `&Gamepad`.
    - `Gamepads::contains` now accepts a `Gamepad`, rather than a `&Gamepad`.

[33mcommit 927441d048a6bfb3ef3142bda519d482a4829720[m
Author: Moulberry <james.jenour@protonmail.com>
Date:   Sat Sep 3 18:06:42 2022 +0000

    Add From<EntityMut> for EntityRef (fixes #5459) (#5461)
    
    Add From<EntityMut> for EntityRef (fixes #5459)

[33mcommit 697d297b554fc3f2699c90ae93faa150f40950eb[m
Author: JoJoJet <joe102000@gmail.com>
Date:   Sat Sep 3 18:06:41 2022 +0000

    Remove last uses of string-labels (#5420)
    
    # Objective
    
    * Related: #4341
    * Remove all remaining uses of stringly-typed labels in the repo. Right now, it's just a bunch of tests and examples.

[33mcommit cbb884cb0226790c371c129a1334bdeeb978cb97[m
Author: micron-mushroom <micron.mushroom@gmail.com>
Date:   Sat Sep 3 17:47:38 2022 +0000

    Expose `Image` conversion functions (fixes #5452) (#5527)
    
    ## Solution
    Exposes the image <-> "texture" as methods on `Image`.
    
    ## Extra
    I'm wondering if `image_texture_conversion.rs` should be renamed to `image_conversion.rs`. That or the file be deleted altogether in favour of putting the code alongside the rest of the `Image` impl. Its kind-of weird to refer to the `Image`  as a texture.
    
    Also `Image::convert` is a public method so I didn't want to edit its signature, but it might be nice to have the function consume the image instead of just passing a reference to it because it would eliminate a clone.
    
    ## Changelog
    > Rename `image_to_texture` to `Image::from_dynamic`
    > Rename `texture_to_image` to `Image::try_into_dynamic`
    > `Image::try_into_dynamic` now returns a `Result` (this is to make it easier for users who didn't read that only a few conversions are supported to figure it out.)

[33mcommit 6a54683491f9fded1b546553e2617a90bf700bd7[m
Author: Jerome Humbert <djeedai@gmail.com>
Date:   Sat Sep 3 14:30:44 2022 +0000

    Document the `bevy_render::camera` module tree (#3528)
    
    # Objective
    
    Document most of the public items of the `bevy_render::camera` module and its
    sub-modules.
    
    ## Solution
    
    Add docs to most public items. Follow-up from #3447.

[33mcommit 0c98a2f0caaca309be572f641cc8619a064156c6[m
Author: harudagondi <giogdeasis@gmail.com>
Date:   Sat Sep 3 03:02:04 2022 +0000

    Expose mint feature in bevy_math/glam (#5857)
    
    # Objective
    
    - Expose `mint` feature of `glam` in `bevy_math`.
    - Unblocks harudagondi/bevy_oddio#22
            - [`oddio::SpatialOptions`] uses mint types
    
    [`oddio::SpatialOptions`]: https://docs.rs/oddio/latest/oddio/struct.SpatialOptions.html
    
    ## Solution
    
    - Added features in `bevy_math`, ~`bevy_internal`, `bevy`~
    - ~Updated `docs/cargo_features.md`~
    
    ---
    
    ## Changelog
    
    ### Added
    
    - `mint` feature in `bevy_math` to allow interoperation of glam types with mint-compatible libraries.

[33mcommit dfeb63e7b8103e0e18ee2f2289f53f2719416eff[m
Author: Federico Rinaldi <gisquerin@gmail.com>
Date:   Fri Sep 2 16:33:19 2022 +0000

    Update `Query` methods documentation (#5742)
    
    # Objective
    
    - Increase consistency across documentation of `Query` methods.
    - Fixes #5506
    
    ## Solution
    
    - See #4989. This PR is derived from it. It just includes changes to the `Query` methods' docs.

[33mcommit 26d30fe412912d8836898c712cc8d56993537343[m
Author: Jerome Humbert <djeedai@gmail.com>
Date:   Fri Sep 2 16:33:18 2022 +0000

    Document `PipelineCache` and related types (#5600)
    
    # Objective
    
    Document `PipelineCache` and a few other related types.
    
    ## Solution
    
    Add documenting comments to `PipelineCache` and a few other related
    types in the same file.

[33mcommit c3cdb12149789d3e66e98d10dd0670967fa927a8[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Fri Sep 2 16:17:46 2022 +0000

    Remove unnecessary unsafe `Send` and `Sync` impl for `WinitWindows` on wasm. (#5863)
    
    # Objective
    
    https://github.com/bevyengine/bevy/pull/503 added these.
    I don't know what problem it solved, the PR doesn't say and the code didn't make it obvious to me.
    
    ## Solution
    
    AFAIK removing unsafe `Send`/`Sync` impls can't introduce unsoundness.
    Yeet.
    
    ## Migration Guide
    Why tho.
    
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 3c2ac3651f30db62270ef58ef7cc16d86064e4fa[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Fri Sep 2 16:17:45 2022 +0000

    bevy_reflect: Update `Reflection` documentation (#5841)
    
    # Objective
    
    The documentation on `Reflect` doesn't account for the recently added reflection traits: [`Array`](https://github.com/bevyengine/bevy/pull/4701) and [`Enum`](https://github.com/bevyengine/bevy/pull/4761).
    
    ## Solution
    
    Updated the documentation for `Reflect` to account for the `Array` and `Enum`.
    
    
    Co-authored-by: Gino Valente <49806985+MrGVSV@users.noreply.github.com>

[33mcommit 17d84e8811adaf6ce70d64b102aab9061ba71c12[m
Author: Ixentus <alexvermaat@gmail.com>
Date:   Fri Sep 2 15:54:54 2022 +0000

    Update to notify 5.0 stable (#5865)
    
    # Objective
    
    - Update notify dependency to 5.0.0 stable
    - Fix breaking changes
    - Closes #5861
    
    ## Solution
    
    - RecommendedWatcher now takes a Config argument. Giving it the default Config should be the same behavior as before (check every 30 seconds)

[33mcommit 662c6e9a348098dbb3ef8bc02c10cd8cba5418d1[m
Author: Ixentus <alexvermaat@gmail.com>
Date:   Fri Sep 2 14:20:49 2022 +0000

    Update to ron 0.8 (#5864)
    
    # Objective
    
    - Update ron to 0.8.0
    - Fix breaking changes
    - Closes #5862
    
    ## Solution
    
    - Removed now non-existing method call (behavior is now the same without it)

[33mcommit 7511c9bfaa84d9c51c210b1c4671b50eba8a15e9[m
Author: Federico Rinaldi <gisquerin@gmail.com>
Date:   Fri Sep 2 12:57:39 2022 +0000

    Update `Query` struct docs (#5741)
    
    # Objective
    
    - Update `Query` docs with better terminology
    - add some performance remarks (Fixes #4742)
    
    ## Solution
    
    - See #4989. This PR is derived from it. It just includes changes to the `Query` struct docs.

[33mcommit 59bf3c4cc968f0725aa6b97b0a0bf42b280c8b6f[m
Author: Federico Rinaldi <gisquerin@gmail.com>
Date:   Fri Sep 2 12:35:24 2022 +0000

    Improve `WorldQuery` docs (#5740)
    
    # Objective
    
    - Update docs to `WorldQuery`
    
    ## Solution
    
    - See #4989. This PR is derived from it, and limited to the `WorldQuery` item docs.

[33mcommit 8b7b44d8399b4b58140d419c79bee19a770b6e4b[m
Author: Jerome Humbert <djeedai@gmail.com>
Date:   Fri Sep 2 12:35:23 2022 +0000

    Move `sprite::Rect` into `bevy_math` (#5686)
    
    # Objective
    
    Promote the `Rect` utility of `sprite::Rect`, which defines a rectangle
    by its minimum and maximum corners, to the `bevy_math` crate to make it
    available as a general math type to all crates without the need to
    depend on the `bevy_sprite` crate.
    
    Fixes #5575
    
    ## Solution
    
    Move `sprite::Rect` into `bevy_math` and fix all uses.
    
    Implement `Reflect` for `Rect` directly into the `bevy_reflect` crate by
    having `bevy_reflect` depend on `bevy_math`. This looks like a new
    dependency, but the `bevy_reflect` was "cheating" for other math types
    by directly depending on `glam` to reflect other math types, thereby
    giving the illusion that there was no dependency on `bevy_math`. In
    practice conceptually Bevy's math types are reflected into the
    `bevy_reflect` crate to avoid a dependency of that crate to a "lower
    level" utility crate like `bevy_math` (which in turn would make
    `bevy_reflect` be a dependency of most other crates, and increase the
    risk of circular dependencies). So this change simply formalizes that
    dependency in `Cargo.toml`.
    
    The `Rect` struct is also augmented in this change with a collection of
    utility methods to improve its usability. A few uses cases are updated
    to use those new methods, resulting is more clear and concise syntax.
    
    ---
    
    ## Changelog
    
    ### Changed
    
    - Moved the `sprite::Rect` type into `bevy_math`.
    
    ### Added
    
    - Added several utility methods to the `math::Rect` type.
    
    ## Migration Guide
    
    The `bevy::sprite::Rect` type moved to the math utility crate as
    `bevy::math::Rect`. You should change your imports from `use
    bevy::sprite::Rect` to `use bevy::math::Rect`.

[33mcommit 5b0381655d85716b264de0ee84b2f094b1b346a9[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Fri Sep 2 12:18:45 2022 +0000

    Warn when passing invalid argument to CI (#5858)
    
    Example:
    ```sh
    cargo run -p ci -- lint
    Invalid argument: "lint".
    Enter one of: lints, test, doc, compile, format, clippy, compile-fail, bench-check, example-check, doc-check, doc-test.
    ```
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 6b87fb0bdb083080f0178b5fd27496f4010682fc[m
Author: pwygab <poonsters6@gmail.com>
Date:   Fri Sep 2 12:18:44 2022 +0000

    improve panic messages for add_system_to_stage and add_system_set_to_stage (#5847)
    
    # Objective
    
    - Make the panic messages more specific and understandable.
    - Fixes #5811
    ## Solution
    
    - Edit the panic message.
    
    ---

[33mcommit 480b3baa44ac4a8ec1a0c2f2d86a490fda6f8717[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Sep 2 12:18:43 2022 +0000

    Helpers to check pipeline cache status (#5796)
    
    # Objective
    
    - In WASM, creating a pipeline can easily take 2 seconds, freezing the game while doing so
    - Preloading pipelines can be done during a "loading" state, but it is not trivial to know which pipeline to preload, or when it's done
    
    ## Solution
    
    - Add a log with shaders being loaded and their shader defs
    - add a function on `PipelineCache` to return the number of ready pipelines

[33mcommit e8041150eed08354b3806502a4fc07b6686c232f[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Sep 2 11:56:21 2022 +0000

    can clone a scene (#5855)
    
    # Objective
    
    - Easier to work with model assets
    - Models are often one mesh, many textures. This can be hard to use in Bevy as it's not possible to clone the scene to have one scene for each material. It's still possible to instantiate the texture-less scene, then modify the texture material once spawned but that means happening during play and is quite more painful
    
    ## Solution
    
    - Expose the code to clone a scene. This code already existed but was only possible to use to spawn the scene

[33mcommit 79e7c93060c4b44b00be898512c223ab4ec30fa7[m
Author: Fishy <caspar.m.green@gmail.com>
Date:   Fri Sep 2 02:16:18 2022 +0000

    Support for additional gamepad buttons and axis (#5853)
    
    # Objective
    
    Extend the scope of Gamepad to accommodate devices that have more inputs than a typical controller.
    
    ## Solution
    
    Add additional enum variants to both _GamepadButtonType_ and _GamepadAxisType_ that supports up to 255 more non-standard buttons/axis respectively.
    
    ## Personal motivation
    
    I have been writing an alternative to the GILRS crate, and with this simple change to the source code, It will be a trivial thing to direct new devices through the bevy systems, even when they do not always behave exactly like your typical controller.

[33mcommit f9853cbbc2d52c1fe07b0ad0829f9cec22de0f9c[m
Author: James O'Brien <james.obrien@drafly.net>
Date:   Thu Sep 1 22:06:46 2022 +0000

    Add get_entity to Commands (#5854)
    
    # Objective
    
    - Fixes #5850
    
    ## Solution
    
    - As described in the issue, added a `get_entity` method on `Commands` that returns an `Option<EntityCommands>`
    
    ## Changelog
    - Added the new method with a simple doc test
    - I have re-used `get_entity` in `entity`, similarly to how `get_single` is used in `single` while additionally preserving the error message
    - Add `#[inline]` to both functions
    
    Entities that have commands queued to despawn system will still return commands when `get_entity` is called but that is representative of the fact that the entity is still around until those commands are flushed.
    
    A potential `contains_entity` could also be added in this PR if desired, that would effectively be replacing Entities.contains but may be more discoverable if this is a common use case.
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 9e34c748c6736546537fb5039f4c3de58cc25da3[m
Author: John <startoaster23@gmail.com>
Date:   Wed Aug 31 01:53:15 2022 +0000

    Added the ability to get or set the last change tick of a system. (#5838)
    
    # Objective
    I'm build a UI system for bevy. In this UI system there is a concept of a system per UI entity. I had an issue where change detection wasn't working how I would expect and it's because when a function system is ran the `last_change_tick` is updated with the latest tick(from world). In my particular case I want to "wait" to update the `last_change_tick` until after my system runs for each entity.
    
    ## Solution
    Initially I thought bypassing the change detection all together would be a good fix, but on talking to some users in discord a simpler fix is to just expose `last_change_tick` to the end users. This is achieved by adding the following to the `System` trait:
    ```rust
        /// Allows users to get the system's last change tick.
        fn get_last_change_tick(&self) -> u32;
        /// Allows users to set the system's last change tick.
        fn set_last_change_tick(&mut self, last_change_tick: u32);
    ```
    
    This causes a bit of weirdness with two implementors of `System`. `FixedTimestep` and `ChainSystem` both implement system and thus it's required that some sort of implementation be given for the new functions. I solved this by outputting a warning and not doing anything for these systems.
    
    I think it's important to understand why I can't add the new functions only to the function system and not to the `System` trait. In my code I store the systems generically as `Box<dyn System<...>>`. I do this because I have differing parameters that are being passed in depending on the UI widget's system.  As far as I can tell there isn't a way to take a system trait and cast it into a specific type without knowing what those parameters are.
    
    In my own code this ends up looking something like:
    ```rust
    // Runs per entity.
    let old_tick = widget_system.get_last_change_tick();
    should_update_children = widget_system.run((widget_tree.clone(), entity.0), world);
    widget_system.set_last_change_tick(old_tick);
    
    
    // later on after all the entities have been processed:
    for system in context.systems.values_mut() {
        system.set_last_change_tick(world.read_change_tick());
    }
    ```
    
    ## Changelog
    
    - Added `get_last_change_tick` and `set_last_change_tick` to `System`'s.

[33mcommit b42f426fc3f39ffa586f366184da26fc71109754[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Tue Aug 30 22:10:24 2022 +0000

    Add associated constant `IDENTITY` to `Transform` and friends. (#5340)
    
    # Objective
    Since `identity` is a const fn that takes no arguments it seems logical to make it an associated constant.
    This is also more in line with types from glam (eg. `Quat::IDENTITY`).
    
    ## Migration Guide
    
    The method `identity()` on `Transform`, `GlobalTransform` and `TransformBundle` has been deprecated.
    Use the associated constant `IDENTITY` instead.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit ed773dbe30d30b125c951cbb10732ab9d42a33ba[m
Author: Boxy <supbscripter@gmail.com>
Date:   Tue Aug 30 21:56:00 2022 +0000

    Misc query.rs cleanup (#5591)
    
    # Objective
    - `for_each` methods inconsistently used an actual generic param or `impl Trait` change it to use `impl Trait` always, change them to be consistent
    - some methods returned `'w 's` or `'_ '_`, change them to return `'_ 's`
    
    ## Solution
    
    - Do what i just said
    
    ---
    
    ## Changelog
    
    - `iter_unsafe` and `get_unchecked` no longer return borrows tied to `'w`
    
    ## Migration Guide
    
    transmute the returned borrow from `iter_unsafe` and `get_unchecked` if this broke you (although preferably find a way to write your code that doesnt need to do this...)

[33mcommit dcdda4cb333295cc76f27b10ba68bb413df79ee9[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Aug 30 21:39:48 2022 +0000

    Remove extra spaces from Range reflect impls (#5839)
    
    # Objective
    
    Remove extra spaces from Range reflect impls. Follow up to #5763
    
    ## Solution
    
    Remove extra spaces from Range reflect impls.

[33mcommit ecc584ff2370cb1fd66a23e9e751db921608131e[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Tue Aug 30 21:20:58 2022 +0000

    bevy_reflect: Get owned fields (#5728)
    
    # Objective
    
    Sometimes it's useful to be able to retrieve all the fields of a container type so that they may be processed separately. With reflection, however, we typically only have access to references.
    
    The only alternative is to "clone" the value using `Reflect::clone_value`. This, however, returns a Dynamic type in most cases. The solution there would be to use `FromReflect` instead, but this also has a problem in that it means we need to add `FromReflect` as an additional bound.
    
    ## Solution
    
    Add a `drain` method to all container traits. This returns a `Vec<Box<dyn Reflect>>` (except for `Map` which returns `Vec<(Box<dyn Reflect>, Box<dyn Reflect>)>`).
    
    This allows us to do things a lot simpler. For example, if we finished processing a struct and just need a particular value:
    
    ```rust
    // === OLD === //
    /// May or may not return a Dynamic*** value (even if `container` wasn't a `DynamicStruct`)
    fn get_output(container: Box<dyn Struct>, output_index: usize) -> Box<dyn Reflect> {
      container.field_at(output_index).unwrap().clone_value()
    }
    
    // === NEW === //
    /// Returns _exactly_ whatever was in the given struct
    fn get_output(container: Box<dyn Struct>, output_index: usize) -> Box<dyn Reflect> {
      container.drain().remove(output_index).unwrap()
    }
    ```
    
    ### Discussion
    
    * Is `drain` the best method name? It makes sense that it "drains" all the fields and that it consumes the container in the process, but I'm open to alternatives.
    
    ---
    
    ## Changelog
    
    * Added a `drain` method to the following traits:
      * `Struct`
      * `TupleStruct`
      * `Tuple`
      * `Array`
      * `List`
      * `Map`
      * `Enum`

[33mcommit bb2303a654c08fd295828b3b12e1cfb6daddbc28[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Tue Aug 30 21:06:32 2022 +0000

    Add `pop` method for `List` trait. (#5797)
    
    # Objective
    
    - The reflection `List` trait does not have a `pop` function.
    - Popping elements off a list is a common use case and is almost always supported by `List`-like types.
    
    ## Solution
    
    - Add the `pop()` method to the `List` trait and add the appropriate implementations of this function.
    
    ## Migration Guide
    
    - Any custom type that implements the `List` trait will now need to implement the `pop` method.
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit e9661bea1a3ce9b387a33c98929266742a0559d7[m
Author: Marc-Stefan Cassola <maccesch@synphonyte.com>
Date:   Tue Aug 30 20:51:21 2022 +0000

    Implemented `Reflect` for all the ranges (#5806)
    
    # Objective
    
    Fixes #5763
    
    ## Solution
    
    Implemented as reflect value like the current `Range`. Is there a benefit to changing everything to a reflect struct?

[33mcommit df31b7d7627286375e68c62c63ab9647415e6766[m
Author: Boxy <supbscripter@gmail.com>
Date:   Tue Aug 30 20:32:15 2022 +0000

    Remove `insert_resource_with_id` (#5608)
    
    # Objective
    
    remove `insert_resource_with_id` because `insert_resource_by_id` exists and does almost exactly the same thing
    
    blocked on #5587 because otherwise we will leak a resource when it's inserted
    
    ## Solution
    
    remove the function and also add a safety invariant of to `insert_resource_by_id` that the id be valid for the world.
    
    I didn't see any discussion in #4447 about this safety invariant being left off in favor of a panic so I'm curious if there was one or if it just seemed nicer to have less safety invariants for callers to uphold :sweat_smile:
    
    ---
    
    ## Changelog
    
    - safety invariant added to `insert_resource_by_id` requiring the id to be valid for world
    
    ## Migration Guide
    
    - audit any calls to `insert_resource_by_id` making sure that the id is valid for the world
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit e874b91ddae96d9c1ddd2ba4553e0e7ac6b8977d[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Tue Aug 30 20:13:38 2022 +0000

    Fix window centering when scale_factor is not 1.0 (#5582)
    
    # Objective
    
    Fixes #5581
    
    ## Solution
    
    `Window::scale_factor` already has logic for selecting the overridden or actual scale factor, so use it.
    
    I tested this with the displays I have access to, but more testing would be nice. This seems like a pretty straightforward bug/fix though.
    
    ## Changelog
    
    ### Fixed
    
    Fixed window centering on high-dpi displays.

[33mcommit 65252bb87a0ca8da2805649f5be821f853afcd99[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Tue Aug 30 19:52:11 2022 +0000

    Consistently use `PI` to specify angles in examples. (#5825)
    
    Examples inconsistently use either `TAU`, `PI`, `FRAC_PI_2` or `FRAC_PI_4`.
    Often in odd ways and without `use`ing the constants, making it difficult to parse.
    
     * Use `PI` to specify angles.
     * General code-quality improvements.
     * Fix borked `hierarchy` example.
    
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit fe6246dac6b7fb8768c42acb05d37965769c8f38[m
Author: Jerome Humbert <djeedai@gmail.com>
Date:   Tue Aug 30 03:16:22 2022 +0000

    Make most `Entity` methods `const` (#5688)
    
    # Objective
    
    Fixes #5687
    
    ## Solution
    
    Update the methods on the `Entity` struct to be `const`, so we can
    define compile-time constants and more generally use them in a const
    context.
    
    ---
    
    ## Changelog
    
    ### Added
    
    - Most `Entity` methods are now `const fn`.

[33mcommit 24e5e10cd48d741c58c7059bdce9b66400a835c2[m
Author: Lain-dono <lain.dono@gmail.com>
Date:   Tue Aug 30 03:00:39 2022 +0000

    Use 3 bits of PipelineKey to store MSAA sample count (#5826)
    
    Sample count always power of two. Thus, it is enough to store `log2(sample_count)`.
    This can be implemented using [u32::trailing_zeros](https://doc.rust-lang.org/stable/std/primitive.u32.html#method.trailing_zeros). Then we can restore sample count with the `1 << stored`.
    You get 3 bits instead of 6 and up to 128x MSAA. This is more than is supported by any common hardware.
    
    Full table of possible variations:
    
    ```
        original MSAA sample count      stored    loaded
    * 00000000000000000000000000000000 -> 000 -> 00000001  1
      00000000000000000000000000000001 -> 000 -> 00000001  1
      00000000000000000000000000000010 -> 001 -> 00000010  2
      00000000000000000000000000000100 -> 010 -> 00000100  4
      00000000000000000000000000001000 -> 011 -> 00001000  8
      00000000000000000000000000010000 -> 100 -> 00010000  16
      00000000000000000000000000100000 -> 101 -> 00100000  32
      00000000000000000000000001000000 -> 110 -> 01000000  64
      00000000000000000000000010000000 -> 111 -> 10000000  128
    * 00000000000000000000000100000000 -> 000 -> 00000001  256
    * 00000000000000000000001000000000 -> 001 -> 00000010  512
    * 00000000000000000000010000000000 -> 010 -> 00000100  1024
    * 00000000000000000000100000000000 -> 011 -> 00001000  2048
    * 00000000000000000001000000000000 -> 100 -> 00010000  4096
    * 00000000000000000010000000000000 -> 101 -> 00100000  8192
    * 00000000000000000100000000000000 -> 110 -> 01000000  16384
    * 00000000000000001000000000000000 -> 111 -> 10000000  32768
    * 00000000000000010000000000000000 -> 000 -> 00000001  65536
    * 00000000000000100000000000000000 -> 001 -> 00000010  131072
    * 00000000000001000000000000000000 -> 010 -> 00000100  262144
    * 00000000000010000000000000000000 -> 011 -> 00001000  524288
    * 00000000000100000000000000000000 -> 100 -> 00010000  1048576
    * 00000000001000000000000000000000 -> 101 -> 00100000  2097152
    * 00000000010000000000000000000000 -> 110 -> 01000000  4194304
    * 00000000100000000000000000000000 -> 111 -> 10000000  8388608
    * 00000001000000000000000000000000 -> 000 -> 00000001  16777216
    * 00000010000000000000000000000000 -> 001 -> 00000010  33554432
    * 00000100000000000000000000000000 -> 010 -> 00000100  67108864
    * 00001000000000000000000000000000 -> 011 -> 00001000  134217728
    * 00010000000000000000000000000000 -> 100 -> 00010000  268435456
    * 00100000000000000000000000000000 -> 101 -> 00100000  536870912
    * 01000000000000000000000000000000 -> 110 -> 01000000  1073741824
    * 10000000000000000000000000000000 -> 111 -> 10000000  2147483648
    ```

[33mcommit 9dd5b5354f2d0b13c5a88b7d6875d491ca82c355[m
Author: Robin KAY <komadori@gekkou.co.uk>
Date:   Tue Aug 30 02:40:18 2022 +0000

    Add note on ordering to AssetServerSettings docs. (#5706)
    
    # Objective
    
    It's not obvious that the `AssetServerSettings` resource must be added before the `AssetPlugin`.
    
    ## Solution
    
    Add a doc comment to this effect.

[33mcommit d346274e322561bc3b98f5691750dc867f2d1072[m
Author: Aceeri <conmcclusk@gmail.com>
Date:   Tue Aug 30 02:23:04 2022 +0000

    Warning message for missing events (#5730)
    
    # Objective
    - Reduce debugging burden when using events by telling user when they missed an event.
    
    ## Solution
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 46f68161f78a944c1751fb5a5780c689eaf82697[m
Author: Javier Goday <jgoday@gmail.com>
Date:   Tue Aug 30 02:07:47 2022 +0000

    #5817: derive_bundle macro is not hygienic (#5835)
    
    # Objective
    - Fixes #5817.
    - Removes std::vec::Vec ambiguities in derive_bundle macro
    
    ## Solution
    Prepend :: to standard library full Vec qualified type name (::std::vec::Vec)

[33mcommit 5597fc54d2cc28e996cacbe341be6e1b547b1d3e[m
Author: Federico Rinaldi <gisquerin@gmail.com>
Date:   Tue Aug 30 00:39:17 2022 +0000

    Add documentation to `QueryCombinationIter` (#5739)
    
    # Objective
    
    - Document `QueryCombinationIter`
    
    ## Solution
    
    - Describe the item, add usage and examples
    - Copy notes about the number of query items generated from the corresponding query methods (they will be removed in #5742 ([motivation]))
    
    ## Additional notes
    
    - Derived from #4989
    
    [motivation]: https://github.com/bevyengine/bevy/pull/4989#issuecomment-1208421496

[33mcommit 584d855fd1738dc0528029e1404033a16ca6711e[m
Author: JoJoJet <joe102000@gmail.com>
Date:   Tue Aug 30 00:17:20 2022 +0000

    Add a module for common system `chain`/`pipe` adapters (#5776)
    
    # Objective
    
    Right now, users have to implement basic system adapters such as `Option` <-> `Result` conversions by themselves. This is slightly annoying and discourages the use of system chaining.
    
    ## Solution
    
    Add the module `system_adapter` to the prelude, which contains a collection of common adapters. This is very ergonomic in practice.
    
    ## Examples
    
    Convenient early returning.
    
    ```rust
    use bevy::prelude::*;
    
    App::new()
        // If the system fails, just try again next frame.
        .add_system(pet_dog.chain(system_adapter::ignore))
        .run();
    
    #[derive(Component)]
    struct Dog;
    
    fn pet_dog(dogs: Query<(&Name, Option<&Parent>), With<Dog>>) -> Option<()> {
        let (dog, dad) = dogs.iter().next()?;
        println!("You pet {dog}. He/she/they are a good boy/girl/pupper.");
        let (dad, _) = dogs.get(dad?.get()).ok()?;
        println!("Their dad's name is {dad}");
        Some(())
    }
    ```
    
    Converting the output of a system
    
    ```rust
    use bevy::prelude::*;
    
    App::new()
        .add_system(
            find_name
                .chain(system_adapter::new(String::from))
                .chain(spawn_with_name),
        )
        .run();
    
    fn find_name() -> &'static str { /* ... */ }
    fn spawn_with_name(In(name): In<String>, mut commands: Commands) {
        commands.spawn().insert(Name::new(name));
    }
    ```
    ---
    
    ## Changelog
    
    * Added the module `bevy_ecs::prelude::system_adapter`, which contains a collection of common system chaining adapters.
      * `new` - Converts a regular fn to a system adapter.
      * `unwrap` - Similar to `Result::unwrap`
      * `ignore` - Discards the output of the previous system.

[33mcommit 74520c0e953726718af3932d5acf4647861aafce[m
Author: Andreas Weibye <wandalen.me@gmail.com>
Date:   Mon Aug 29 23:56:43 2022 +0000

    Add window resizing example (#5813)
    
    # Objective
    
    - Adopted from #3836
    - Example showcases how to request a new resolution
    - Example showcases how to react to resolution changes
    
    
    Co-authored-by: Andreas Weibye <13300393+Weibye@users.noreply.github.com>

[33mcommit e8439bf8275d3029e532665a66e9f38e088c62d8[m
Author: Tristan Guichaoua <tguichaoua.dev@gmail.com>
Date:   Mon Aug 29 23:56:42 2022 +0000

    fix `Quat` type name in scene example scene file (#5803)
    
    # Objective
    
    fix #5790
    
    ## Solution
    
    Change type name in the scene file by its new name `glam::f32::sse2::quat::Quat`.

[33mcommit 4fadd261689ae989d891a4b8b1f31f3f110ef175[m
Author: Andreas Weibye <neikos@neikos.email>
Date:   Mon Aug 29 23:35:53 2022 +0000

    Add UI scaling (#5814)
    
    # Objective
    
    - Allow users to change the scaling of the UI
    - Adopted from #2808
    
    ## Solution
    
    - This is an accessibility feature for fixed-size UI elements, allowing the developer to expose a range of UI scales for the player to set a scale that works for their needs.
    
    > - The user can modify the UiScale struct to change the scaling at runtime. This multiplies the Px values by the scale given, while not touching any others.
    > - The example showcases how this even allows for fluid transitions
    
    > Here's how the example looks like:
    
    https://user-images.githubusercontent.com/1631166/132979069-044161a9-8e85-45ab-9e93-fcf8e3852c2b.mp4
    
    ---
    
    ## Changelog
    
    - Added a `UiScale` which can be used to scale all of UI
    
    
    Co-authored-by: Andreas Weibye <13300393+Weibye@users.noreply.github.com>
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit f68f5cd2a547a714726501fd3f5d2a1fc6b16289[m
Author: bjorn3 <17426603+bjorn3@users.noreply.github.com>
Date:   Mon Aug 29 23:16:43 2022 +0000

    Add troubleshooting for pkgconfig errors on fedora (#5821)
    
    # Objective
    
    - There can be a confusing pkgconfig error on fedora.
    
    ## Solution
    
    - Add troubleshooting guide for pkgconfig errors on fedora.
    
    ---
    
    cc https://github.com/bevyengine/bevy/issues/2826
    cc https://github.com/bevyengine/bevy/issues/5738
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 8a1061209c25bb762c5916aa8c69d59f5b91cd5e[m
Author: harudagondi <giogdeasis@gmail.com>
Date:   Mon Aug 29 23:02:12 2022 +0000

    Remove `Sync` requirement in `Decodable::Decoder` (#5819)
    
    # Objective
    
    - Allow non-`Sync` Decoders
    - Unblocks #5422.
    - Unblocks harudagondi/bevy_fundsp#1
    
    ## Solution
    
    - Remove `Sync` requirement in `Decodable::Decoder`
    - This aligns with kira's [`Sound`] and majority of [oddio]'s types (like [`Mixer`]).
    
    [`Sound`]: https://docs.rs/kira/latest/kira/sound/trait.Sound.html
    [oddio]: https://docs.rs/oddio/latest/oddio/index.html
    [`Mixer`]: https://docs.rs/oddio/latest/oddio/struct.Mixer.html
    
    ---
    
    ## Changelog
    
    ### Changed
    
    - `Decodable::Decoder` now no longer requires `Sync` types.

[33mcommit adf2475dabdb3095ed8dc30f68b8bcf4c5f2949c[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Mon Aug 29 22:26:43 2022 +0000

    Add warning when using load_folder on web (#5827)
    
    # Objective
    
    Help users who are using `load_folder` in wasm builds to find a slightly shorter path to figuring out why their stuff is broken.
    
    ## Solution
    
    Adds a warning to `read_directory` in the `WasmAssetIo`.
    
    This is extremely similar to the warning already emitted a few lines below for `watch_for_changes`.

[33mcommit f62bdc3590ddf65a6223ae4eca0e9375d1b72bd3[m
Author: Andreas Weibye <13300393+Weibye@users.noreply.github.com>
Date:   Sat Aug 27 20:34:53 2022 +0000

    Ignore RUSTSEC-2021-0139 (#5816)
    
    # Objective
    
    - `ansi_term` has become unmaintained: https://github.com/ogham/rust-ansi-term/issues/72
    - This is now blocking our CI so we need to find a way around that.
    
    
    ## Solution
    
    Temporary add `RUSTSEC-2021-0139` to ignore until tracing switches to a new crate: https://github.com/tokio-rs/tracing/pull/2040
    
    ## Dependency tree
    ```
    ansi_term v0.12.1
         âââ tracing-subscriber v0.3.15
             âââ bevy_log v0.9.0-dev
             â   âââ bevy_asset v0.9.0-dev
             â   â   âââ bevy_animation v0.9.0-dev
             â   â   â   âââ bevy_gltf v0.9.0-dev
             â   â   â   â   âââ bevy_internal v0.9.0-dev
             â   â   â   â       âââ bevy v0.9.0-dev
             â   â   â   â       âââ bevy v0.9.0-dev (*)
             â   â   â   âââ bevy_internal v0.9.0-dev (*)
             â   â   âââ bevy_audio v0.9.0-dev
             â   â   â   âââ bevy_internal v0.9.0-dev (*)
             â   â   âââ bevy_core_pipeline v0.9.0-dev
             â   â   â   âââ bevy_gltf v0.9.0-dev (*)
             â   â   â   âââ bevy_internal v0.9.0-dev (*)
             â   â   â   âââ bevy_pbr v0.9.0-dev
             â   â   â   â   âââ bevy_gltf v0.9.0-dev (*)
             â   â   â   â   âââ bevy_internal v0.9.0-dev (*)
             â   â   â   âââ bevy_sprite v0.9.0-dev
             â   â   â   â   âââ bevy_internal v0.9.0-dev (*)
             â   â   â   â   âââ bevy_text v0.9.0-dev
             â   â   â   â   â   âââ bevy_internal v0.9.0-dev (*)
             â   â   â   â   â   âââ bevy_ui v0.9.0-dev
             â   â   â   â   â       âââ bevy_internal v0.9.0-dev (*)
             â   â   â   â   âââ bevy_ui v0.9.0-dev (*)
             â   â   â   âââ bevy_ui v0.9.0-dev (*)
             â   â   âââ bevy_gltf v0.9.0-dev (*)
             â   â   âââ bevy_internal v0.9.0-dev (*)
             â   â   âââ bevy_pbr v0.9.0-dev (*)
             â   â   âââ bevy_render v0.9.0-dev
             â   â   â   âââ bevy_core_pipeline v0.9.0-dev (*)
             â   â   â   âââ bevy_gltf v0.9.0-dev (*)
             â   â   â   âââ bevy_internal v0.9.0-dev (*)
             â   â   â   âââ bevy_pbr v0.9.0-dev (*)
             â   â   â   âââ bevy_scene v0.9.0-dev
             â   â   â   â   âââ bevy_gltf v0.9.0-dev (*)
             â   â   â   â   âââ bevy_internal v0.9.0-dev (*)
             â   â   â   âââ bevy_sprite v0.9.0-dev (*)
             â   â   â   âââ bevy_text v0.9.0-dev (*)
             â   â   â   âââ bevy_ui v0.9.0-dev (*)
             â   â   âââ bevy_scene v0.9.0-dev (*)
             â   â   âââ bevy_sprite v0.9.0-dev (*)
             â   â   âââ bevy_text v0.9.0-dev (*)
             â   â   âââ bevy_ui v0.9.0-dev (*)
             â   âââ bevy_diagnostic v0.9.0-dev
             â   â   âââ bevy_asset v0.9.0-dev (*)
             â   â   âââ bevy_internal v0.9.0-dev (*)
             â   âââ bevy_gltf v0.9.0-dev (*)
             â   âââ bevy_internal v0.9.0-dev (*)
             â   âââ bevy_render v0.9.0-dev (*)
             â   âââ bevy_sprite v0.9.0-dev (*)
             â   âââ bevy_ui v0.9.0-dev (*)
             âââ tracing-wasm v0.2.1
                 âââ bevy_log v0.9.0-dev (*)
    ```

[33mcommit 70106773f2f70bdc19c89e57c64d38918aab9c02[m
Author: Ben Frankel <ben.frankel7@gmail.com>
Date:   Thu Aug 25 20:31:51 2022 +0000

    Fix example in `AnyOf` docs (#5798)

[33mcommit 7da97b4deea1297b51e3880a4385d03fee3e777b[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Wed Aug 24 21:21:11 2022 +0000

    bevy_reflect: Remove unnecessary `Clone` bounds (#5783)
    
    # Objective
    
    Some of the reflection impls for container types had unnecessary `Clone` bounds on their generic arguments. These come from before `FromReflect` when types were instead bound by `Reflect + Clone`. With `FromReflect` this is no longer necessary.
    
    ## Solution
    
    Removed all leftover `Clone` bounds from types that use `FromReflect` instead.
    
    ## Note
    
    I skipped `Result<T, E>`, `HashSet<T>`, and `Range<T>` since those do not use `FromReflect`. This should probably be handled in a separate PR since it would be a breaking change.
    
    ---
    
    ## Changelog
    
    - Remove unnecessary `Clone` bounds on reflected containers

[33mcommit 880ea5d4be7451f69b24953c3386d3624afac7c5[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Wed Aug 24 20:44:35 2022 +0000

    bevy_reflect: Fix `apply` method for `Option<T>` (#5780)
    
    # Objective
    
    #5658 made it so that `FromReflect` was used as the bound for `T` in `Option<T>`. However, it did not use this change effectively for the implementation of `Reflect::apply` (it was still using `take`, which would fail for Dynamic types).
    
    Additionally, the changes were not consistent with other methods within the file, such as the ones for `Vec<T>` and `HashMap<K, V>`.
    
    ## Solution
    
    Update `Option<T>` to fallback on `FromReflect` if `take` fails, instead of wholly relying on one or the other.
    
    I also chose to update the error messages, as they weren't all too descriptive before.
    
    ---
    
    ## Changelog
    
    - Use `FromReflect::from_reflect` as a fallback in the `Reflect::apply` implementation for `Option<T>`

[33mcommit 886837d7313afeff8aef6985e8c70bd6ecc7ae55[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Wed Aug 24 20:25:52 2022 +0000

    bevy_reflect: `GetTypeRegistration` for `SmallVec<T>` (#5782)
    
    # Objective
    
    `SmallVec<T>` was missing a `GetTypeRegistration` impl.
    
    ## Solution
    
    Added a `GetTypeRegistration` impl.
    
    ---
    
    ## Changelog
    
    * Added a `GetTypeRegistration` impl for `SmallVec<T>`

[33mcommit 3d194a216075cca8ba2074f2d222035c14827635[m
Author: Ida Iyes <identry@protonmail.com>
Date:   Tue Aug 23 21:19:29 2022 +0000

    Add missing type registrations for bevy_math types (#5758)
    
    Type registrations were only present for some of the `bevy_math` types, and missing for others. This is a very strange inconsistency, given that they all impl `Reflect` and `FromReflect`. In practice, this means these types cannot be used in scenes.
    
    In particular, this is especially problematic, because `Affine3A` is one of the missing types, and it is now used in `GlobalTransform`. Trying to create a bevy scene that contains `GlobalTransform`s results in an error due to the missing type registration.

[33mcommit 3817afc1f4b4f5fd7360f18f6d75d735055b6256[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Tue Aug 23 17:41:39 2022 +0000

    register missing reflect types (#5747)
    
    # Objective
    
    - While generating https://github.com/jakobhellermann/bevy_reflect_ts_type_export/blob/main/generated/types.ts, I noticed that some types that implement `Reflect` did not register themselves
    - `Viewport` isn't reflect but can be (there's a TODO)
    
    
    ## Solution
    
    - register all reflected types
    - derive `Reflect` for `Viewport`
    
    
    ## Changelog
    - more types are not registered in the type registry
    - remove `Serialize`, `Deserialize` impls from `Viewport`
    
    
    I also decided to remove the `Serialize, Deserialize` from the `Viewport`, since they were (AFAIK) only used for reflection, which now is done without serde. So this is technically a breaking change for people who relied on that impl directly.
    Personally I don't think that every bevy type should implement `Serialize, Deserialize`, as that would lead to a ton of code generation that mostly isn't necessary because we can do the same with `Reflect`, but if this is deemed controversial I can remove it from this PR.
    
    ## Migration Guide
    - `KeyCode` now implements `Reflect` not as `reflect_value`, but with proper struct reflection. The `Serialize` and `Deserialize` impls were removed, now that they are no longer required for scene serialization.

[33mcommit 5e2d9b4ae4b6c996900428e3f3980611ac497ce3[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Tue Aug 23 09:40:06 2022 +0000

    Add explicit ordering between `update_frusta` and `camera_system` (#5757)
    
    # Objective
    
    Fix a nasty system ordering bug between `update_frusta` and `camera_system` that lead to incorrect frustum s, leading to excessive culling and extremely hard-to-debug visual glitches
    
    ## Solution
    
    - add explicit system ordering

[33mcommit 675607a7e64a760dfb254d8cb401e81ea3898391[m
Author: Andreas Weibye <13300393+Weibye@users.noreply.github.com>
Date:   Mon Aug 22 23:08:08 2022 +0000

    Add AUTO and UNDEFINED const constructors for `Size` (#5761)
    
    # Objective
    
    Very small convenience constructors added to `Size`.
    
    Does not change current examples too much but I'm working on a rather complex UI use-case where this cuts down on some extra typing :)

[33mcommit cde5ae8104a0473ffe82c0ba2380bdd96a0b17ab[m
Author: Ian Chamberlain <ian.h.chamberlain@gmail.com>
Date:   Sun Aug 21 00:45:49 2022 +0000

    bevy_ecs: Use 32-bit entity ID cursor on platforms without AtomicI64 (#4452)
    
    # Objective
    - Fixes #4451
    
    ## Solution
    - Conditionally compile entity ID cursor as `AtomicI32` when compiling on a platform that does not support 64-bit atomics.
    
    - This effectively raises the MSRV to 1.60 as it uses a `#[cfg]` that was only just stabilized there. (should this be noted in changelog?)
    
    ---
    
    ## Changelog
    - Added `bevy_ecs` support for platforms without 64-bit atomic ints
    
    
    ## Migration Guide
    N/A

[33mcommit 04538fd802e99080210a587e9a4805d098eb2d75[m
Author: Tomasz Galkowski <galkowski_t@fastmail.com>
Date:   Sat Aug 20 19:55:53 2022 +0000

    fixes the types for Vec3 and Quat in scene example to remove WARN from the logs (#5751)
    
    # Objective
    - Fixes #5745.
    
    ## Solution
    - Changes the Vec3 and Quat types.

[33mcommit 681c9c6dc859be52565609e56ce9dc7f6f1c1f12[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Thu Aug 18 21:54:40 2022 +0000

    bevy_pbr: Fix tangent and normal normalization (#5666)
    
    # Objective
    
    - Morten Mikkelsen clarified that the world normal and tangent must be normalized in the vertex stage and the interpolated values must not be normalized in the fragment stage. This is in order to match the mikktspace approach exactly.
    - Fixes #5514 by ensuring the tangent basis matrix (TBN) is orthonormal
    
    ## Solution
    
    - Normalize the world normal in the vertex stage and not the fragment stage
    - Normalize the world tangent xyz in the vertex stage
    - Take into account the sign of the determinant of the local to world matrix when calculating the bitangent
    
    ---
    
    ## Changelog
    
    - Fixed - scaling a model that uses normal mapping now has correct lighting again

[33mcommit 1c6be94f4fceb36ed0b52a5807bf431b1890b390[m
Author: pwygab <88221256+merelymyself@users.noreply.github.com>
Date:   Thu Aug 18 18:53:09 2022 +0000

    Correctly parse labels with '#' (#5729)
    
    # Objective
    
    - Fixes #5707
    
    ## Solution
    
    - Used `splitn` instead of `split` to collect the rest of the string into the label after the first '#'.
    
    ---

[33mcommit 00323b3048443b821df759d468d9d4c3e0515534[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Thu Aug 18 18:53:08 2022 +0000

    Better error message for `World::resource_scope` (#5727)
    
    # Objective
    
    - Fixes #5365
    - The `assert!()` when the resource from `World::resource_scope` is inserted into the world is not descriptive.
    
    ## Solution
    
    - Add more context to the assert inside of `World::resource_scope` when the `FnOnce` param inserts the resource.

[33mcommit 00508d110adfd3964a5432a8944f0653a5ac1901[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Thu Aug 18 18:53:07 2022 +0000

    bevy_reflect: Add `FromReflect` to the prelude (#5720)
    
    # Objective
    
    `FromReflect` is a commonly used component to the Reflect API. It's required as a bound for reflecting things like `Vec<T>` and `HashMap<K, V>` and is generally useful (if not necessary) to derive on most structs or enums.
    
    Currently, however, it is not exported in `bevy_reflect`'s prelude. This means a module that uses `bevy_reflect` might have the following two lines:
    
    ```rust
    use bevy_reflect::prelude::*;
    use bevy_reflect::FromReflect;
    ```
    
    Additionally, users of the full engine might need to put:
    
    ```rust
    use bevy::prelude::*;
    use bevy::reflect::FromReflect;
    ```
    
    ## Solution
    
    Add `FromReflect` to the prelude of `bevy_reflect`.
    
    ---
    
    ## Changelog
    
    - Added `FromReflect` to the prelude of `bevy_reflect`

[33mcommit f0c512731b46723d1ab8ec9203d19891596f7f86[m
Author: Aceeri <conmcclusk@gmail.com>
Date:   Thu Aug 18 18:31:12 2022 +0000

    SystemParam for the name of the system you are currently in (#5731)
    
    # Objective
    - Similar to `SystemChangeTick`, probably somewhat useful for debugging messages.
    
    ---
    
    ## Changelog
    
    - Added `SystemName` which copies the `SystemMeta::name` field so it can be accessed within a system.

[33mcommit 56fc1dfe775e7e3dbb7230422f143f14aa89db75[m
Author: Verte <vertesians@protonmail.com>
Date:   Wed Aug 17 14:00:10 2022 +0000

    Correctly use as_hsla_f32 in Add<Color> and AddAssign<Color>, fixes #5543 (#5546)
    
    Probably a copy-paste error, but `Add<Color>` and `AddAssign<Color>` should use `rhs.as_hlsa_f32()` instead of `rhs.as_linear_rgba_f32()` when the LHS is a `Color::Hsla`. Fixes #5543.
    
    
    
    Co-authored-by: Verte <105466627+vertesians@users.noreply.github.com>

[33mcommit aed3232e38e2d700cbb06b782ed7242d0684c244[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Wed Aug 17 00:21:15 2022 +0000

    bevy_reflect: Relax bounds on `Option<T>` (#5658)
    
    # Objective
    
    The reflection impls on `Option<T>` have the bound `T: Reflect + Clone`. This means that using `FromReflect` requires `Clone` even though we can normally get away with just `FromReflect`.
    
    ## Solution
    
    Update the bounds on `Option<T>` to match that of `Vec<T>`, where `T: FromReflect`.
    
    This helps remove a `Clone` implementation that may be undesired but added for the sole purpose of getting the code to compile.
    
    ---
    
    ## Changelog
    
    * Reflection on `Option<T>` now has `T` bound by `FromReflect` rather than `Reflect + Clone`
    * Added a `FromReflect` impl for `Instant`
    
    ## Migration Guide
    
    If using `Option<T>` with Bevy's reflection API, `T` now needs to implement `FromReflect` rather than just `Clone`. This can be achieved easily by simply deriving `FromReflect`:
    
    ```rust
    
    // OLD
    #[derive(Reflect, Clone)]
    struct Foo;
    
    let reflected: Box<dyn Reflect> = Box::new(Some(Foo));
    
    // NEW
    #[derive(Reflect, FromReflect)]
    struct Foo;
    
    let reflected: Box<dyn Reflect> = Box::new(Some(Foo));
    ```
    > Note: You can still derive `Clone`, but it's not required in order to compile.

[33mcommit 3221e569e059eaf133fb3d46c0b45725eca96d77[m
Author: JoJoJet <joe102000@gmail.com>
Date:   Tue Aug 16 23:40:24 2022 +0000

    Remove an outdated workaround for `impl Trait` (#5659)
    
    # Objective
    
    Rust 1.63 resolved [an issue](https://github.com/rust-lang/rust/issues/83701) that prevents you from combining explicit generic arguments with `impl Trait` arguments.
    
    Now, we no longer need to use dynamic dispatch to work around this.
    
    ## Migration Guide
    
    The methods `Schedule::get_stage` and `get_stage_mut` now accept `impl StageLabel` instead of `&dyn StageLabel`.
    
    ### Before
    ```rust
    let stage = schedule.get_stage_mut::<SystemStage>(&MyLabel)?;
    ```
    
    ### After
    ```rust
    let stage = schedule.get_stage_mut::<SystemStage>(MyLabel)?;
    ```

[33mcommit f9104b73a2980717a0745c108d47c1ea573ddf2d[m
Author: Tomasz Galkowski <galkowski_t@fastmail.com>
Date:   Tue Aug 16 23:18:54 2022 +0000

    Use circle for breakout example (#5657)
    
    # Objective
    
    - Replace the square with a circle in the breakout example.
    - Fixes #4324, adopted from #4682 by @shaderduck.
    
    ## Solution
    - Uses the Mesh2D APIs to draw a circle. The collision still uses the AABB algorithm, but it seems to be working fine, and I haven't seen any odd looking cases.

[33mcommit f20c9ee0f5223189c8f3ca49e9bde2d7a17e7fa6[m
Author: Alex <okafora@gmail.com>
Date:   Tue Aug 16 20:46:46 2022 +0000

    fix: grammar and typo fixes in rendergraph docs (#5710)
    
    # Objective
    
    - fix a typo on RendGraph Docs
    
    ## Solution
    
    - fixed typo
    
    ---
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 110831150e8228ab96dce8a73123d9f1a1a56a90[m
Author: Jonas Wagner <jonas at 29a dot ch>
Date:   Tue Aug 16 20:46:45 2022 +0000

    Make vertex colors work without textures in bevy_sprite (#5685)
    
    # Objective
    
    This PR changes it possible to use vertex colors without a texture using the bevy_sprite ColorMaterial.
    
    Fixes #5679
    
    ## Solution
    
    - Made multiplication of the output color independent of the COLOR_MATERIAL_FLAGS_TEXTURE_BIT bit
    - Extended mesh2d_vertex_color_texture example to show off both vertex colors and tinting
    
    Not sure if extending the existing example was the right call but it seems to be reasonable to me.
    
    I couldn't find any tests for the shaders and I think adding shader testing would be beyond the scope of this PR. So no tests in this PR. :grimacing:
    
    Co-authored-by: Jonas Wagner <jonas@29a.ch>

[33mcommit bd317ea364f5a74e265223cd16a3723a9f28c02e[m
Author: Marc-Stefan Cassola <maccesch@synphonyte.com>
Date:   Tue Aug 16 20:46:44 2022 +0000

    register `Cow<'static, str>` for reflection (#5664)
    
    # Objective
    
    Fixes #5597
    
    ## Solution
    
    Registered type at suggested place.

[33mcommit 21dacbf137745f4d138dcdaacd78f9e504a8b2f7[m
Author: PÃ©ter LeÃ©h <leeh123peter@gmail.com>
Date:   Tue Aug 16 20:28:31 2022 +0000

    fix typos in examples (#5711)
    
    ## Objective
    Fixed some typos I came across while reading examples.

[33mcommit a70b9c596978f3f6ddbd68669a9af75a65daedc0[m
Author: Boutillier <boris.boutillier@gmail.com>
Date:   Mon Aug 15 23:03:42 2022 +0000

    Remove duplicate asserts in test (#5648)
    
    # Objective
    
    While poking around the hierarchy code, I wondered why some asserts in tests were duplicated.
    Some git blame later, I found out that commit ( https://github.com/bevyengine/bevy/commit/8eb0440f1ed0f075ed488e7efa36ba0f8bb37cad ) added already existing asserts while removing others.
    
    ## Solution
    
    Remove the duplicated asserts.

[33mcommit 5ba5c8e375bd0271e2bf50728a85a1691ec8666b[m
Author: Charles <c.giguere42@gmail.com>
Date:   Mon Aug 15 22:17:41 2022 +0000

    insert_attribute panic with full message (#5651)
    
    # Objective
    
    When an invalid attribute is inserted and the LogPlugin is not enabled the full error is not printed which means makes it hard to diagnose.
    
    ## Solution
    
    - Always print the full message in the panic.
    
    ## Notes
    
    I originally had a separate error log because I wanted to make it clearer for users, but this is probably causing more issues than necessary.

[33mcommit f1be89d45809c71c7d3f9f341f99e80780d69b20[m
Author: Charlie Hills <contagnas@gmail.com>
Date:   Sun Aug 14 07:08:58 2022 +0000

    Remove unused DepthCalculation enum (#5684)
    
    # Objective
    
    Remove unused `enum DepthCalculation` and its usages. This was used to compute visible entities in the [old renderer](https://github.com/bevyengine/bevy/blob/db665b96c07084f081b0c9ab367e67297fe35132/crates/bevy_render/src/camera/visible_entities.rs), but is now unused.
    
    ## Solution
    
    `sed 's/DepthCalculation//g'`
    
    ---
    
    ## Changelog
    ### Changed
    Removed `bevy_render::camera::DepthCalculation`.
    
    ## Migration Guide
    Remove references to `bevy_render::camera::DepthCalculation`, such as `use bevy_render::camera::DepthCalculation`. Remove `depth_calculation` fields from Projections.

[33mcommit e84e39157118f4eefe7ac406d73d5d5ca3cb2aa9[m
Author: TimJentzsch <tim-jentzsch@gmx.de>
Date:   Sun Aug 14 06:28:32 2022 +0000

    Remove unneeded skipped crates for duplicate dependencies (#5678)
    
    # Objective
    
    The `deny.toml` file defines some crates that are skipped for duplicate dependency detection, because the issues are deeper in the dependency tree and not easily fixable.
    
    However, two of those exceptions are no longer necessary.
    
    ## Solution
    
    Remove `hashbrown` and `mio` from the skipped crates, according to `cargo deny check` this is no longer needed.

[33mcommit d1e5c507614e7c5da51349bc72c898a2ce9232be[m
Author: TimJentzsch <tim-jentzsch@gmx.de>
Date:   Sat Aug 13 15:44:35 2022 +0000

    Use latest stable version for CI 'build' job (#5672)
    
    # Objective
    
    Fixes #5668.
    
    The Rust version used in the CI `build` step previously depended on the default Rust version defined by GitHub in the Ubuntu image: <https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2004-Readme.md#rust-tools>
    
    This currently doesn't allow us to use Rust 1.63 features until this version is updated.
    
    ## Solution
    
    We now use the `actions-rs/toolchain@v1` action to always use the latest stable Rust version.
    This is already used for other CI jobs that we have.

[33mcommit 0e46b045605c6df114b198d15040a8df5a14d1ad[m
Author: Charlie Hills <contagnas@gmail.com>
Date:   Sat Aug 13 15:27:49 2022 +0000

    Grammar fixes in render graph doc (#5671)
    
    # Objective
    
    Fixing some grammar in the rustdoc for RenderGraph

[33mcommit de6bef72a10bda2a71c4cad0a4badf153c716f8c[m
Author: Boutillier <boris.boutillier@gmail.com>
Date:   Sat Aug 13 10:51:19 2022 +0000

    Fix for bevy CI on main - clippy safety comments on trait. (#5665)
    
    # Objective
    
    Make CI pass on bevy main.
    
    Update to rust-1.63, updated clippy to 1.63 which introduced the following enhancements:
    - [undocumented_unsafe_blocks](https://rust-lang.github.io/rust-clippy/master/index.html#undocumented_unsafe_blocks): Now also lints on unsafe trait implementations
    
    This caught two incorrectly written ( but existing) safety comments for unsafe  traits.
    
    ## Solution
    
    Fix the comment to use `SAFETY:`

[33mcommit 55957330351828e84bfc63cf8e151e2805e9d278[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Tue Aug 9 18:05:43 2022 +0000

    drop old value in `insert_resource_by_id` if exists (#5587)
    
    # Objective
    
    While trying out the lint `unsafe_op_in_unsafe_fn` I noticed that `insert_resource_by_id` didn't drop the old value if it already existed, and reimplemented `Column::replace` manually for no apparent reason.
    
    ## Solution
    
    - use `Column::replace` and add a test expecting the correct drop count
    
    ---
    
    ## Changelog
    
    - `World::insert_resource_by_id` will now correctly drop the old resource value, if one already existed

[33mcommit 166279e3831fda0f4df65e7924af3d023f3d50a5[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Tue Aug 9 16:53:28 2022 +0000

    add some info from `ReflectPathError` to the error messages (#5626)
    
    # Objective
    
    - The `Display` impl for `ReflectPathError` is pretty unspecific (e.g. `the current struct doesn't have a field with the given name`
    - it has info for better messages available
    
    ## Solution
    
    - make the display impl more descriptive by including values from the type

[33mcommit fe97b384a560bb2b72a47192c5865c974e1aac7c[m
Author: Alex <okafora@gmail.com>
Date:   Tue Aug 9 16:53:27 2022 +0000

    fix: typo in system params docs (#5624)
    
    # Objective
    
    - Fix a typo on `SystemParam` docs
    
    ## Solution
    - added 'be'.
    - Hurray my first OSS PR!
    
    ---

[33mcommit fcb77d6988ea0403003e4269188de89a2ee031b5[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Tue Aug 9 16:19:34 2022 +0000

    remove `ReflectMut` in favor of `Mut<dyn Reflect>` (#5630)
    
    # Objective
    
    - `ReflectMut` served no purpose that wasn't met by `Mut<dyn Reflect>` which is easier to understand since you have to deal with fewer types
    - there is another `ReflectMut` type that could be confused with this one
    
    ## Solution/Changelog
    
    - relax `T: ?Sized` bound in `Mut<T>`
    - replace all instances of `ReflectMut` with `Mut<dyn Reflect>`

[33mcommit 397b6df0234182eacec397cda5cb663651875927[m
Author: Nicola Papale <nico@nicopap.ch>
Date:   Mon Aug 8 22:59:18 2022 +0000

    Add into_world_mut to EntityMut (#5586)
    
    # Objective
    
    Provide a safe API to access an `EntityMut`'s `World`.
    
    ## Solution
    
    * Add `EntityMut::into_world_mut` for safe access to the entity's world.
    
    ---
    
    ## Changelog
    
    * Add `EntityMut::into_world_mut` for safe access to the entity's world.

[33mcommit a9634c7344313f313d13b67b52c47821a3298aa0[m
Author: Jerome Humbert <djeedai@gmail.com>
Date:   Mon Aug 8 22:46:04 2022 +0000

    Make internal struct `ShaderData` non-`pub` (#5609)
    
    # Objective
    
    `ShaderData` is marked as public, but is an internal type only used by one other
    internal type, so it should be made private.
    
    ## Solution
    
    `ShaderData` is only used in `ShaderCache`, and the latter is private,
    so there is no need to make the former public. This change removes the
    `pub` keyword from `ShaderData`, hidding it as the implementation detail
    it is.
    
    Split from #5600

[33mcommit b80636b33039b2ef8d08e9f803a4bcd9f4c6378f[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Aug 8 21:58:20 2022 +0000

    don't render completely transparent UI nodes (#5537)
    
    # Objective
    
    - I often have UI nodes that are completely transparent and just for organisation
    - Don't render them
    - I doesn't bring a lot of improvements, but it doesn't add a lot of complexity either

[33mcommit 992681b59b93be3efd52ad8d5a34ebb4ddfd0c20[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Mon Aug 8 21:36:35 2022 +0000

    Make `Resource` trait opt-in, requiring `#[derive(Resource)]` V2 (#5577)
    
    *This PR description is an edited copy of #5007, written by @alice-i-cecile.*
    # Objective
    Follow-up to https://github.com/bevyengine/bevy/pull/2254. The `Resource` trait currently has a blanket implementation for all types that meet its bounds.
    
    While ergonomic, this results in several drawbacks:
    
    * it is possible to make confusing, silent mistakes such as inserting a function pointer (Foo) rather than a value (Foo::Bar) as a resource
    * it is challenging to discover if a type is intended to be used as a resource
    * we cannot later add customization options (see the [RFC](https://github.com/bevyengine/rfcs/blob/main/rfcs/27-derive-component.md) for the equivalent choice for Component).
    * dependencies can use the same Rust type as a resource in invisibly conflicting ways
    * raw Rust types used as resources cannot preserve privacy appropriately, as anyone able to access that type can read and write to internal values
    * we cannot capture a definitive list of possible resources to display to users in an editor
    ## Notes to reviewers
     * Review this commit-by-commit; there's effectively no back-tracking and there's a lot of churn in some of these commits.
       *ira: My commits are not as well organized :')*
     * I've relaxed the bound on Local to Send + Sync + 'static: I don't think these concerns apply there, so this can keep things simple. Storing e.g. a u32 in a Local is fine, because there's a variable name attached explaining what it does.
     * I think this is a bad place for the Resource trait to live, but I've left it in place to make reviewing easier. IMO that's best tackled with https://github.com/bevyengine/bevy/issues/4981.
    
    ## Changelog
    `Resource` is no longer automatically implemented for all matching types. Instead, use the new `#[derive(Resource)]` macro.
    
    ## Migration Guide
    Add `#[derive(Resource)]` to all types you are using as a resource.
    
    If you are using a third party type as a resource, wrap it in a tuple struct to bypass orphan rules. Consider deriving `Deref` and `DerefMut` to improve ergonomics.
    
    `ClearColor` no longer implements `Component`. Using `ClearColor` as a component in 0.8 did nothing.
    Use the `ClearColorConfig` in the `Camera3d` and `Camera2d` components instead.
    
    
    Co-authored-by: Alice <alice.i.cecile@gmail.com>
    Co-authored-by: Alice Cecile <alice.i.cecile@gmail.com>
    Co-authored-by: devil-ira <justthecooldude@gmail.com>
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 2ac744331b2151fb803953440547aeaa1fe20e10[m
Author: Timo KÃ¶sters <timo@koesters.xyz>
Date:   Mon Aug 8 19:59:59 2022 +0000

    Fix shader syntax (#5613)

[33mcommit 51fce7e13f471af4f2aa9ae93465ad0bf8b4ea0c[m
Author: Peter Hebden <peterhebden6@gmail.com>
Date:   Mon Aug 8 19:39:07 2022 +0000

    Update license link in README.md (#5614)
    
    # Objective
    
    The `LICENSE` file in the root directory was removed in #4966. This breaks the license shield link in the README.
    
    ## Solution
    
    I changed the link to instead point at the license section of the readme on the main repo page. I think this is better than a 404, but I am unsure as to if it's the best solution. As such feedback is appreciated.

[33mcommit cd19d2757bd1effa78b7798d210072b55b61b847[m
Author: Charlie Hills <contagnas@gmail.com>
Date:   Sun Aug 7 20:26:13 2022 +0000

    use bevy_default() for texture format in post_processing (#5601)
    
    # Objective
    
    Fixes https://github.com/bevyengine/bevy/issues/5599
    
    ## Solution
    
    Use bevy_default() for texture format in example to get proper texture format for wasm.

[33mcommit c27cc59e0d1e305b0ab42b07455c3550ed671740[m
Author: Peter Hebden <peterhebden6@gmail.com>
Date:   Sat Aug 6 01:19:57 2022 +0000

    Remove unnecessary `use` from examples (#5583)
    
    # Objective
    
    `bevy::render::texture::ImageSettings` was added to prelude in #5566, so these `use` statements are unnecessary and the examples can be made a bit more concise.
    
    ## Solution
    
    Remove `use bevy::render::texture::ImageSettings`

[33mcommit 115211161b783a2f5c39346caeb8ee6b3b202bef[m
Author: Bleb1k <viktor.masnikov17283940@gmail.com>
Date:   Fri Aug 5 04:19:53 2022 +0000

    Added keyboard scan input event (#5495)
    
    # Objective
    
    - I wanted to have controls independent from keyboard layout and found that bevy doesn't have a proper implementation for that
    
    ## Solution
    
    - I created a `ScanCode` enum with two hundreds scan codes and updated `keyboard_input_system` to include and update `ResMut<Input<ScanCode>>`
    - closes both https://github.com/bevyengine/bevy/issues/2052 and https://github.com/bevyengine/bevy/issues/862
    
    Co-authored-by: Bleb1k <91003089+Bleb1k@users.noreply.github.com>

[33mcommit c37939d322af85e7300018db6493ee11684d2f7d[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Fri Aug 5 03:49:12 2022 +0000

    Make `Children` constructor `pub(crate)`. (#5532)
    
    #4197 intended to remove all `pub` constructors of `Children` and `Parent` and it seems like this one was missed.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 54750deddd39c4853fdf69ad52bf8c4aacb84157[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Fri Aug 5 02:28:07 2022 +0000

    Document `gamepad.rs` (#5548)
    
    # Objective
    
    - Fixes #5544
    - Part of the splitting process of #3692.
    
    ## Solution
    
    - Document everything in the `gamepad.rs` file.
    - Add a doc example for mocking gamepad input.
    
    ---
    
    ## Changelog
    
    - Added and updated the documentation inside of the `gamepad.rs` file.

[33mcommit 704d8e251b7f4be5c3e663f6454024d2ffc26bb8[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Fri Aug 5 02:28:06 2022 +0000

    Sync up bevy_sprite and bevy_ui shader View struct (#5531)
    
    # Objective
    
    - Similar to #5512 , the `View` struct definition in the shaders in `bevy_sprite` and `bevy_ui` were out of sync with the rust-side `ViewUniform`. Only `view_proj` was being used and is the first member and as those shaders are not customisable it makes little difference in practice, unlike for `Mesh2d`.
    
    ## Solution
    
    - Sync shader `View` struct definition in `bevy_sprite` and `bevy_ui` with the correct definition that matches `ViewUniform`

[33mcommit 444150025deee54eef5f3d891f2ebecf0842458f[m
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Fri Aug 5 02:03:05 2022 +0000

    Bump Version after Release (#5576)
    
    Bump version after release
    This PR has been auto-generated

[33mcommit 0ffb5441c3f63129aba1b4570924a3646b22bb1f[m
Author: McSpidey <Mcspidey@gmail.com>
Date:   Thu Aug 4 22:27:14 2022 +0000

    changed diagnostics from seconds to milliseconds (#5554)
    
    Co-authored-by: Alice Cecile <alice.i.cecile@gmail.com>
    
    # Objective
    
    Change frametimediagnostic from seconds to milliseconds because this will always be less than one seconds and is the common diagnostic display unit for game engines.
    
    ## Solution
    
    - multiplied the existing value by 1000
    
    ---
    
    ## Changelog
    
    Frametimes are now reported in milliseconds
    
    Co-authored-by: Syama Mishra <38512086+SyamaMishra@users.noreply.github.com>
    Co-authored-by: McSpidey <mcspidey@gmail.com>
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 90d1dc8820a54fb4686d691ee90a0267d629bf1e[m
Author: Peter Hebden <peterhebden6@gmail.com>
Date:   Thu Aug 4 22:09:52 2022 +0000

    Add `bevy_render::texture::ImageSettings` to prelude (#5566)
    
    # Objective
    
    In Bevy 0.8, the default filter mode was changed to linear (#4465). I believe this is a sensible default, but it's also very common to want to use point filtering (e.g. for pixel art games).
    
    ## Solution
    
    I am proposing including `bevy_render::texture::ImageSettings` in the Bevy prelude so it is more ergonomic to change the filtering in such cases.
    
    ---
    
    ## Changelog
    
    ### Added
    - Added `bevy_render::texture::ImageSettings` to prelude.

[33mcommit 765e8d7dca34fcec0718da453802e047ea07803d[m
Author: Marc-Stefan Cassola <maccesch@synphonyte.com>
Date:   Thu Aug 4 22:09:51 2022 +0000

    Fix lifetime bound on `From` impl for `NonSendMut` -> `Mut` (#5560)
    
    # Objective
    
    Fixes #5456

[33mcommit 13b4a7daaadde8f66f93c78ef78a43a3d57b776b[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Thu Aug 4 22:09:50 2022 +0000

    Add `Projection` component to prelude. (#5557)
    
    :)
    
    Co-authored-by: Devil Ira <justthecooldude@gmail.com>

[33mcommit 97fdbad9db9869bccf2ba0e63b4e71122eba27ba[m
Author: maxwellodri <maxwellodri@gmail.com>
Date:   Thu Aug 4 22:09:49 2022 +0000

    Added reflect/from reflect impls for NonZero integer types (#5556)
    
    # Objective
    
    Add reflect/from reflect impls for NonZero integer types. I'm guessing these haven't been added yet because no one has needed them as of yet.

[33mcommit eabcd27d9369ec018a6171afa7bf08f335b91d60[m
Author: Boxy <supbscripter@gmail.com>
Date:   Thu Aug 4 21:51:02 2022 +0000

    make `WorldQuery` very flat (#5205)
    
    # Objective
    
    Simplify the worldquery trait hierarchy as much as possible by putting it all in one trait. If/when gats are stabilised this can be trivially migrated over to use them, although that's not why I made this PR, those reasons are:
    - Moves all of the conceptually related unsafe code for a worldquery next to eachother
    - Removes now unnecessary traits simplifying the "type system magic" in bevy_ecs
    
    ---
    
    ## Changelog
    
    All methods/functions/types/consts on `FetchState` and `Fetch` traits have been moved to the `WorldQuery` trait and the other traits removed. `WorldQueryGats` now only contains an `Item` and `Fetch` assoc type.
    
    ## Migration Guide
    Implementors should move items in impls to the `WorldQuery/Gats` traits and remove any `Fetch`/`FetchState` impls
    Any use sites of items in the `Fetch`/`FetchState` traits should be updated to use the `WorldQuery` trait items instead
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 07d576987a7f2bdcabc97fefcc043e19e1a30222[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Aug 3 20:03:34 2022 +0000

    fix order of exit/close window systems (#5558)
    
    # Objective
    
    Fixes #5384 and maybe other issues around window closing/app not exiting
    
    ## Solution
    
    There are three systems involved in exiting when closing a window:
    - `close_when_requested` asking Winit to close the window in stage `Update`
    - `exit_on_all_closed` exiting when no window remains opened in stage `Update`
    - `change_window` removing windows that are closed in stage `PostUpdate`
    
    This ordering meant that when closing a window, we had to run one more frame to actually exit. As there was no window, panics could occur in systems assuming there was a window. In case of Bevy app using a low power options, that means waiting for the timeout before actually exiting the app (60 seconds by default)
    
    This PR changes the ordering so that `exit_on_all_closed` happens after `change_window` in the same frame, so there isn't an extra frame without window

[33mcommit bd008589f31ea5b890aaef581d247cda6fd401fd[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Tue Aug 2 22:40:29 2022 +0000

    bevy_reflect: Update enum derives (#5473)
    
    > In draft until #4761 is merged. See the relevant commits [here](https://github.com/bevyengine/bevy/pull/5473/commits/a85fe94a183fdd62d512b2613376ce6eace8ab63).
    
    ---
    
    # Objective
    
    Update enums across Bevy to use the new enum reflection and get rid of `#[reflect_value(...)]` usages.
    
    ## Solution
    
    Find and replace all[^1] instances of `#[reflect_value(...)]` on enum types.
    
    ---
    
    ## Changelog
    
    - Updated all[^1] reflected enums to implement `Enum` (i.e. they are no longer `ReflectRef::Value`)
    
    ## Migration Guide
    Bevy-defined enums have been updated to implement `Enum` and are not considered value types (`ReflectRef::Value`) anymore. This means that their serialized representations will need to be updated. For example, given the Bevy enum:
    
    ```rust
    pub enum ScalingMode {
      None,
      WindowSize,
      Auto { min_width: f32, min_height: f32 },
      FixedVertical(f32),
      FixedHorizontal(f32),
    }
    ```
    
    You will need to update the serialized versions accordingly.
    
    ```js
    // OLD FORMAT
    {
      "type": "bevy_render::camera::projection::ScalingMode",
      "value": FixedHorizontal(720),
    },
    
    // NEW FORMAT
    {
      "type": "bevy_render::camera::projection::ScalingMode",
      "enum": {
        "variant": "FixedHorizontal",
        "tuple": [
          {
            "type": "f32",
            "value": 720,
          },
        ],
      },
    },
    ```
    
    This may also have other smaller implications (such as `Debug` representation), but serialization is probably the most prominent.
    
    [^1]: All enums except `HandleId` as neither `Uuid` nor `AssetPathId` implement the reflection traits

[33mcommit 15826d60194ae42e497fe0b007d284e53f10566c[m
Author: Gino Valente <bricedavier@gmail.com>
Date:   Tue Aug 2 22:14:41 2022 +0000

    bevy_reflect: Reflect enums (#4761)
    
    # Objective
    
    > This is a revival of #1347. Credit for the original PR should go to @Davier.
    
    Currently, enums are treated as `ReflectRef::Value` types by `bevy_reflect`. Obviously, there needs to be better a better representation for enums using the reflection API.
    
    ## Solution
    
    Based on prior work from @Davier, an `Enum` trait has been added as well as the ability to automatically implement it via the `Reflect` derive macro. This allows enums to be expressed dynamically:
    
    ```rust
    #[derive(Reflect)]
    enum Foo {
      A,
      B(usize),
      C { value: f32 },
    }
    
    let mut foo = Foo::B(123);
    assert_eq!("B", foo.variant_name());
    assert_eq!(1, foo.field_len());
    
    let new_value = DynamicEnum::from(Foo::C { value: 1.23 });
    foo.apply(&new_value);
    assert_eq!(Foo::C{value: 1.23}, foo);
    ```
    
    ### Features
    
    #### Derive Macro
    
    Use the `#[derive(Reflect)]` macro to automatically implement the `Enum` trait for enum definitions. Optionally, you can use `#[reflect(ignore)]` with both variants and variant fields, just like you can with structs. These ignored items will not be considered as part of the reflection and cannot be accessed via reflection.
    
    ```rust
    #[derive(Reflect)]
    enum TestEnum {
      A,
      // Uncomment to ignore all of `B`
      // #[reflect(ignore)]
      B(usize),
      C {
        // Uncomment to ignore only field `foo` of `C`
        // #[reflect(ignore)]
        foo: f32,
        bar: bool,
      },
    }
    ```
    
    #### Dynamic Enums
    
    Enums may be created/represented dynamically via the `DynamicEnum` struct. The main purpose of this struct is to allow enums to be deserialized into a partial state and to allow dynamic patching. In order to ensure conversion from a `DynamicEnum` to a concrete enum type goes smoothly, be sure to add `FromReflect` to your derive macro.
    
    ```rust
    let mut value = TestEnum::A;
    
    // Create from a concrete instance
    let dyn_enum = DynamicEnum::from(TestEnum::B(123));
    
    value.apply(&dyn_enum);
    assert_eq!(TestEnum::B(123), value);
    
    // Create a purely dynamic instance
    let dyn_enum = DynamicEnum::new("TestEnum", "A", ());
    
    value.apply(&dyn_enum);
    assert_eq!(TestEnum::A, value);
    ```
    
    #### Variants
    
    An enum value is always represented as one of its variantsâ never the enum in its entirety.
    
    ```rust
    let value = TestEnum::A;
    assert_eq!("A", value.variant_name());
    
    // Since we are using the `A` variant, we cannot also be the `B` variant
    assert_ne!("B", value.variant_name());
    ```
    
    All variant types are representable within the `Enum` trait: unit, struct, and tuple.
    
    You can get the current type like:
    
    ```rust
    match value.variant_type() {
      VariantType::Unit => println!("A unit variant!"),
      VariantType::Struct => println!("A struct variant!"),
      VariantType::Tuple => println!("A tuple variant!"),
    }
    ```
    
    > Notice that they don't contain any values representing the fields. These are purely tags.
    
    If a variant has them, you can access the fields as well:
    
    ```rust
    let mut value = TestEnum::C {
      foo: 1.23,
      bar: false
    };
    
    // Read/write specific fields
    *value.field_mut("bar").unwrap() = true;
    
    // Iterate over the entire collection of fields
    for field in value.iter_fields() {
      println!("{} = {:?}", field.name(), field.value());
    }
    ```
    
    #### Variant Swapping
    
    It might seem odd to group all variant types under a single trait (why allow `iter_fields` on a unit variant?), but the reason this was done ~~is to easily allow *variant swapping*.~~ As I was recently drafting up the **Design Decisions** section, I discovered that other solutions could have been made to work with variant swapping. So while there are reasons to keep the all-in-one approach, variant swapping is _not_ one of them.
    
    ```rust
    let mut value: Box<dyn Enum> = Box::new(TestEnum::A);
    value.set(Box::new(TestEnum::B(123))).unwrap();
    ```
    
    #### Serialization
    
    Enums can be serialized and deserialized via reflection without needing to implement `Serialize` or `Deserialize` themselves (which can save thousands of lines of generated code). Below are the ways an enum can be serialized.
    
    > Note, like the rest of reflection-based serialization, the order of the keys in these representations is important!
    
    ##### Unit
    
    ```json
    {
      "type": "my_crate::TestEnum",
      "enum": {
        "variant": "A"
      }
    }
    ```
    
    ##### Tuple
    
    ```json
    {
      "type": "my_crate::TestEnum",
      "enum": {
        "variant": "B",
        "tuple": [
          {
            "type": "usize",
            "value": 123
          }
        ]
      }
    }
    ```
    
    <details>
    <summary>Effects on Option</summary>
    
    This ends up making `Option` look a little ugly:
    
    ```json
    {
      "type": "core::option::Option<usize>",
      "enum": {
        "variant": "Some",
        "tuple": [
          {
            "type": "usize",
            "value": 123
          }
        ]
      }
    }
    ```
    
    
    </details>
    
    ##### Struct
    
    ```json
    {
      "type": "my_crate::TestEnum",
      "enum": {
        "variant": "C",
        "struct": {
          "foo": {
            "type": "f32",
            "value": 1.23
          },
          "bar": {
            "type": "bool",
            "value": false
          }
        }
      }
    }
    ```
    
    ## Design Decisions
    
    <details>
    <summary><strong>View Section</strong></summary>
    
    This section is here to provide some context for why certain decisions were made for this PR, alternatives that could have been used instead, and what could be improved upon in the future.
    
    ### Variant Representation
    
    One of the biggest decisions was to decide on how to represent variants. The current design uses a "all-in-one" design where unit, tuple, and struct variants are all simultaneously represented by the `Enum` trait. This is not the only way it could have been done, though.
    
    #### Alternatives
    
    ##### 1. Variant Traits
    
    One way of representing variants would be to define traits for each variant, implementing them whenever an enum featured at least one instance of them. This would allow us to define variants like:
    
    ```rust
    pub trait Enum: Reflect {
      fn variant(&self) -> Variant;
    }
    
    pub enum Variant<'a> {
        Unit,
        Tuple(&'a dyn TupleVariant),
        Struct(&'a dyn StructVariant),
    }
    
    pub trait TupleVariant {
      fn field_len(&self) -> usize;
      // ...
    }
    ```
    
    And then do things like:
    
    ```rust
    fn get_tuple_len(foo: &dyn Enum) -> usize {
      match foo.variant() {
        Variant::Tuple(tuple) => tuple.field_len(),
        _ => panic!("not a tuple variant!")
      }
    }
    ```
    
    The reason this PR does not go with this approach is because of the fact that variants are not separate types. In other words, we cannot implement traits on specific variantsâ these cover the *entire* enum. This means we offer an easy footgun:
    
    ```rust
    let foo: Option<i32> = None;
    let my_enum = Box::new(foo) as Box<dyn TupleVariant>;
    ```
    
    Here, `my_enum` contains `foo`, which is a unit variant. However, since we need to implement `TupleVariant` for `Option` as a whole, it's possible to perform such a cast. This is obviously wrong, but could easily go unnoticed. So unfortunately, this makes it not a good candidate for representing variants.
    
    ##### 2. Variant Structs
    
    To get around the issue of traits necessarily needing to apply to both the enum and its variants, we could instead use structs that are created on a per-variant basis. This was also considered but was ultimately [[removed](https://github.com/bevyengine/bevy/pull/4761/commits/71d27ab3c6871bb188d8b46512db3b0922a56a0c)](https://github.com/bevyengine/bevy/pull/4761/commits/71d27ab3c6871bb188d8b46512db3b0922a56a0c) due to concerns about allocations.
    
     Each variant struct would probably look something like:
    
    ```rust
    pub trait Enum: Reflect {
      fn variant_mut(&self) -> VariantMut;
    }
    
    pub enum VariantMut<'a> {
        Unit,
        Tuple(TupleVariantMut),
        Struct(StructVariantMut),
    }
    
    struct StructVariantMut<'a> {
      fields: Vec<&'a mut dyn Reflect>,
      field_indices: HashMap<Cow<'static, str>, usize>
    }
    ```
    
    This allows us to isolate struct variants into their own defined struct and define methods specifically for their use. It also prevents users from casting to it since it's not a trait. However, this is not an optimal solution. Both `field_indices` and `fields` will require an allocation (remember, a `Box<[T]>` still requires a `Vec<T>` in order to be constructed). This *might* be a problem if called frequently enough.
    
    ##### 3. Generated Structs
    
    The original design, implemented by @Davier, instead generates structs specific for each variant. So if we had a variant path like `Foo::Bar`, we'd generate a struct named `FooBarWrapper`. This would be newtyped around the original enum and forward tuple or struct methods to the enum with the chosen variant.
    
    Because it involved using the `Tuple` and `Struct` traits (which are also both bound on `Reflect`), this meant a bit more code had to be generated. For a single struct variant with one field, the generated code amounted to ~110LoC. However, each new field added to that variant only added ~6 more LoC.
    
    In order to work properly, the enum had to be transmuted to the generated struct:
    
    ```rust
    fn variant(&self) -> crate::EnumVariant<'_> {
      match self {
        Foo::Bar {value: i32} => {
          let wrapper_ref = unsafe {
            std::mem::transmute::<&Self, &FooBarWrapper>(self)
          };
          crate::EnumVariant::Struct(wrapper_ref as &dyn crate::Struct)
        }
      }
    }
    ```
    
    This works because `FooBarWrapper` is defined as `repr(transparent)`.
    
    Out of all the alternatives, this would probably be the one most likely to be used again in the future. The reasons for why this PR did not continue to use it was because:
    
    * To reduce generated code (which would hopefully speed up compile times)
    * To avoid cluttering the code with generated structs not visible to the user
    * To keep bevy_reflect simple and extensible (these generated structs act as proxies and might not play well with current or future systems)
    * To avoid additional unsafe blocks
    * My own misunderstanding of @Davier's code
    
    That last point is obviously on me. I misjudged the code to be too unsafe and unable to handle variant swapping (which it probably could) when I was rebasing it. Looking over it again when writing up this whole section, I see that it was actually a pretty clever way of handling variant representation.
    
    #### Benefits of All-in-One
    
    As stated before, the current implementation uses an all-in-one approach. All variants are capable of containing fields as far as `Enum` is concerned. This provides a few benefits that the alternatives do not (reduced indirection, safer code, etc.).
    
    The biggest benefit, though, is direct field access. Rather than forcing users to have to go through pattern matching, we grant direct access to the fields contained by the current variant. The reason we can do this is because all of the pattern matching happens internally. Getting the field at index `2` will automatically return `Some(...)` for the current variant if it has a field at that index or `None` if it doesn't (or can't).
    
    This could be useful for scenarios where the variant has already been verified or just set/swapped (or even where the type of variant doesn't matter):
    
    ```rust
    let dyn_enum: &mut dyn Enum = &mut Foo::Bar {value: 123};
    // We know it's the `Bar` variant
    let field = dyn_enum.field("value").unwrap();
    ```
    
    Reflection is not a type-safe abstractionâ almost every return value is wrapped in `Option<...>`. There are plenty of places to check and recheck that a value is what Reflect says it is. Forcing users to have to go through `match` each time they want to access a field might just be an extra step among dozens of other verification processes.
    
     Some might disagree, but ultimately, my view is that the benefit here is an improvement to the ergonomics and usability of reflected enums.
    
    </details>
    
    ---
    
    ## Changelog
    
    ### Added
    
    * Added `Enum` trait
    * Added `Enum` impl to `Reflect` derive macro
    * Added `DynamicEnum` struct
      * Added `DynamicVariant`
    * Added `EnumInfo`
      * Added `VariantInfo`
        * Added `StructVariantInfo`
        * Added `TupleVariantInfo`
        * Added `UnitVariantInfo`
    * Added serializtion/deserialization support for enums
      * Added `EnumSerializer`
    
    * Added `VariantType`
    * Added `VariantFieldIter`
    * Added `VariantField`
    * Added `enum_partial_eq(...)`
    * Added `enum_hash(...)`
    
    ### Changed
    
    * `Option<T>` now implements `Enum`
    * `bevy_window` now depends on `bevy_reflect`
      * Implemented `Reflect` and `FromReflect` for `WindowId`
    * Derive `FromReflect` on `PerspectiveProjection`
    * Derive `FromReflect` on `OrthographicProjection`
    * Derive `FromReflect` on `WindowOrigin`
    * Derive `FromReflect` on `ScalingMode`
    * Derive `FromReflect` on `DepthCalculation`
    
    
    ## Migration Guide
    
    * Enums no longer need to be treated as values and usages of `#[reflect_value(...)]` can be removed or replaced by `#[reflect(...)]`
    * Enums (including `Option<T>`) now take a different format when serializing. The format is described above, but this may cause issues for existing scenes that make use of enums.
    
    ---
    
    Also shout out to @nicopap for helping clean up some of the code here! It's a big feature so help like this is really appreciated!
    
    Co-authored-by: Gino Valente <gino.valente.code@gmail.com>

[33mcommit a9cb18eefc621c04bf09aec348fc72e309ad1726[m
Author: Josh Stratton <strattonbrazil@gmail.com>
Date:   Tue Aug 2 18:13:21 2022 +0000

    add default direction to DirectionalLight docs (#5188)
    
    # Objective
    
    - Adds a default direction to the documentation of DirectionalLight
    
    ## Solution
    
    Suggestion from Q&A answer:
    https://github.com/bevyengine/bevy/discussions/5186#discussioncomment-3073767

[33mcommit fdcffb885f4c9ffdacbfb9989a5ff8d0bedd1bb1[m
Author: 0x182d4454fb211940 <ianwoodformal@gmail.com>
Date:   Tue Aug 2 12:45:54 2022 +0000

    Remove duplicate `RenderGraph` insertion to render world (#5551)
    
    # Objective
    
    - Remove unnecessary duplicate `init_resource` call for `RenderGraph`.
    
    ## Solution
    
    - Remove unnecessary duplicate `init_resource` call for `RenderGraph`.

[33mcommit 825518564af92a3c11393e2b4ccb96547899764c[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Tue Aug 2 00:04:49 2022 +0000

    Add docs for arguments of various color functions (#5533)
    
    Fixes #5530

[33mcommit f3b5bf029c54a1abfb39014104a14dde24a4c2ce[m
Author: PROMETHIA-27 <electriccobras@gmail.com>
Date:   Mon Aug 1 16:50:11 2022 +0000

    Add `FromWorld` bound to `T` in `Local<T>` (#5481)
    
    # Objective
    
    Currently, actually using a `Local` on a system requires that it be `T: FromWorld`, but that requirement is only expressed on the `SystemParam` machinery, which leads to the confusing error message for when the user attempts to add an invalid system. By adding these bounds to `Local` directly, it improves clarity on usage and semantics.
    
    ## Solution
    
    - Add `T: FromWorld` bound to `Local`'s definition
    
    ## Migration Guide
    
    - It might be possible for references to `Local`s without `T: FromWorld` to exist, but these should be exceedingly rare and probably dead code. In the event that one of these is encountered, the easiest solutions are to delete the code or wrap the inner `T` in an `Option` to allow it to be default constructed to `None`.

[33mcommit bf085ee1d260191face3fdb10c11fe284e98a3e5[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Mon Aug 1 16:27:16 2022 +0000

    Remove `Size` and `UiRect` generics (#5404)
    
    # Objective
    
    - Migrate changes from #3503.
    
    ## Solution
    
    - Change `Size<T>` and `UiRect<T>` to `Size` and `UiRect` using `Val`.
    - Implement `Sub`, `SubAssign`, `Mul`, `MulAssign`, `Div` and `DivAssign` for `Val`.
    - Update tests for `Size`.
    
    ---
    
    ## Changelog
    
    ### Changed
    
    - The generic `T` of `Size` and `UiRect` got removed and instead they both now always use `Val`.
    
    ## Migration Guide
    
    - The generic `T` of `Size` and `UiRect` got removed and instead they both now always use `Val`. If you used a `Size<f32>` consider replacing it with a `Vec2` which is way more powerful.
    
    
    Co-authored-by: KDecay <KDecayMusic@protonmail.com>

[33mcommit 6752c9c59b3b81168ea6607767cbb519e5127976[m
Author: Azervu <sndr.hell@gmail.com>
Date:   Sun Jul 31 19:10:53 2022 +0000

    Fix View by adding missing fields present in ViewUniform (#5512)
    
    # Objective
    
    View mesh2d_view_types.wgsl was missing a couple of fields present in bevy::render::ViewUniform, causing rendering issues for shaders using later fields.
    
    ## Solution
    Solved by adding the fields in question

[33mcommit 0149c4145f0f398e9fba85c2584d0481a260f57c[m[33m ([m[1;33mtag: v0.8.0[m[33m)[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jul 30 15:03:21 2022 +0000

    Update changelog for 0.8.0 (#5494)
    
    Big thanks to @colepoirier for putting together the changelog this time around!

[33mcommit 856588ed7c3f2d0c07b221967b5b640cc724fb3b[m
Author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
Date:   Sat Jul 30 14:07:30 2022 +0000

    Release 0.8.0 (#5490)
    
    Preparing next release
    This PR has been auto-generated

[33mcommit 05e5008624b35f51cd6418acc745236be2cddd28[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Sat Jul 30 07:02:58 2022 +0000

    Support array / cubemap / cubemap array textures in KTX2  (#5325)
    
    # Objective
    
    - Fix / support KTX2 array / cubemap / cubemap array textures
    - Fixes #4495 . Supersedes #4514 .
    
    ## Solution
    
    - Add `Option<TextureViewDescriptor>` to `Image` to enable configuration of the `TextureViewDimension` of a texture.
      - This allows users to set `D2Array`, `D3`, `Cube`, `CubeArray` or whatever they need
      - Automatically configure this when loading KTX2
    - Transcode all layers and faces instead of just one
    - Use the UASTC block size of 128 bits, and the number of blocks in x/y for a given mip level in order to determine the offset of the layer and face within the KTX2 mip level data
    - `wgpu` wants data ordered as layer 0 mip 0..n, layer 1 mip 0..n, etc. See https://docs.rs/wgpu/latest/wgpu/util/trait.DeviceExt.html#tymethod.create_texture_with_data
    - Reorder the data KTX2 mip X layer Y face Z to `wgpu` layer Y face Z mip X order
    - Add a `skybox` example to demonstrate / test loading cubemaps from PNG and KTX2, including ASTC 4x4, BC7, and ETC2 compression for support everywhere. Note that you need to enable the `ktx2,zstd` features to be able to load the compressed textures.
    
    ---
    
    ## Changelog
    
    - Fixed: KTX2 array / cubemap / cubemap array textures
    - Fixes: Validation failure for compressed textures stored in KTX2 where the width/height are not a multiple of the block dimensions.
    - Added: `Image` now has an `Option<TextureViewDescriptor>` field to enable configuration of the texture view. This is useful for configuring the `TextureViewDimension` when it is not just a plain 2D texture and the loader could/did not identify what it should be.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 83a9e16158ede23c7636a7a106a507d05e86c7b8[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Sat Jul 30 01:38:13 2022 +0000

    Replace `many_for_each_mut` with `iter_many_mut`. (#5402)
    
    # Objective
    Replace `many_for_each_mut` with `iter_many_mut` using the same tricks to avoid aliased mutability that `iter_combinations_mut` uses.
    
    <sub>I tried rebasing the draft PR I made for this before and it died. F</sub>
    ## Why
    `many_for_each_mut` is worse for a few reasons:
    1. The closure prevents the use of `continue`, `break`, and `return` behaves like a limited `continue`.
    2. rustfmt will crumple it and double the indentation when the line gets too long.
        ```rust
        query.many_for_each_mut(
            &entity_list,
            |(mut transform, velocity, mut component_c)| {
                // Double trouble.
            },
        );
        ```
    3. It is more surprising to have `many_for_each_mut` as a mutable counterpart to `iter_many` than `iter_many_mut`.
    4. It required a separate unsafe fn; more unsafe code to maintain.
    5. The `iter_many_mut` API matches the existing `iter_combinations_mut` API.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 418beffaec9c4e291e35c6460a493d66d0f6cecf[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jul 29 23:24:39 2022 +0000

    Revert "Recalculate entity aabbs when meshes change (#4944)" (#5489)
    
    # Objective
    
    Sadly, #4944 introduces a serious exponential despawn behavior, which cannot be included in 0.8. [Handling AABBs properly is a controversial topic](https://github.com/bevyengine/bevy/pull/5423#issuecomment-1199995825) and one that deserves more time than the day we have left before release.
    
    ## Solution
    
    This reverts commit c2b332f98a0bcab7390e4b184099202cfb4fbbe1.

[33mcommit 4078273e93be0af20d67367924973172e9169bf0[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Jul 29 20:01:51 2022 +0000

    fix bevy_reflect README (#5477)
    
    # Objective
    
    - Code in `bevy_reflect` README doesn't compile
    
    ## Solution
    
    - Fix it

[33mcommit 2d2ea337dd267237507a66955523864b5774fb17[m
Author: Brandon Reinhart <brandon@encultured.ai>
Date:   Thu Jul 28 20:37:49 2022 +0000

    add a debug label to storage buffers (#5341)
    
    # Objective
    
    - Expose the wgpu debug label on storage buffer types.
    
    ## Solution
    
    ð
    
    - Add an optional cow static string and pass that to the label field of create_buffer_with_data
    - This pattern is already used by Bevy for debug tags on bind group and layout descriptors.
    
    ---
    
    Example Usage:
    
    A buffer is given a label using the label function. Alternatively a buffer may be labeled when it is created if the default() convention is not used.
    ![ray_buf](https://user-images.githubusercontent.com/106117615/179366494-f037bd8c-4d65-4b37-8135-01ac0c5c8ee0.png)
    
    Here is the buffer appearing with the correct name in RenderDoc. Previously the buffer would have an anonymous name such as "Buffer223":
    ![buffer_named](https://user-images.githubusercontent.com/106117615/179366552-faeb6c27-5373-4e4e-a0e2-c04446f95a4b.png)
    
    
    
    Co-authored-by: rebelroad-reinhart <reinhart@rebelroad.gg>

[33mcommit 4e2600b788a1f705c88bf2fcd8db9a60e7f78240[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Jul 28 13:34:56 2022 +0000

    text rendering: convert colours only once per section (#5474)
    
    # Objective
    
    - Improve performance when rendering text
    
    ## Solution
    
    - While playing with example `many_buttons`, I noticed a lot of time was spent converting colours
    - Investigating, the biggest culprit seems to be text colour. Each glyph in a text is an individual UI node for rendering, with a copy of the colour. Making the conversion to RGBA linear only once per text section reduces the number of conversion done once rendering.
    - This improves FPS for example `many_buttons` from ~33 to ~42
    - I did the same change for text 2d

[33mcommit 56667886287e0d0a710b7b354ce140a58ef3b586[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Thu Jul 28 02:19:32 2022 +0000

    Fix blurry debug texture in 3d shapes example (#5472)
    
    # Objective
    
    The 3d shapes example uses a "UV debug texture" which probably works best with nearest neighbor filtering, but the default is now linear.
    
    <img width="1392" alt="Screen Shot 2022-07-27 at 7 08 19 PM" src="https://user-images.githubusercontent.com/200550/181405101-f91d6ced-be80-4bf4-b6bb-79e0da9b9c6e.png">
    
    ## Solution
    
    Add `ImageSettings::default_nearest()`
    
    <img width="1392" alt="Screen Shot 2022-07-27 at 7 08 37 PM" src="https://user-images.githubusercontent.com/200550/181405149-3809f5f9-9ea7-4b4a-8387-6e5bef6d00e4.png">

[33mcommit eed6843e8499c7e2463c797c9341f6794d1b6cca[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Jul 27 16:51:03 2022 +0000

    remove disable-weak-memory-emulation (#5469)
    
    # Objective
    
    - Fixes #5164
    - Remove `miri-disable-weak-memory-emulation`
    - Issue has been fixed in dependency

[33mcommit c6a41cdd10c77b1e563efde2b721eb364e4f3143[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jul 27 06:49:37 2022 +0000

    ImageSampler linear/nearest constructors (#5466)
    
    # Objective
    
    I found this small ux hiccup when writing the 0.8 blog post:
    
    ```rust
    image.sampler = ImageSampler::Descriptor(ImageSampler::nearest_descriptor());
    ```
    
    Not good!
    
    ## Solution
    
    ```rust
    image.sampler = ImageSampler::nearest();
    ```
    
    (there are Good Reasons to keep around the nearest_descriptor() constructor and I think it belongs on this type)

[33mcommit be19c696bded63a4ddbfd17ab988337f3ad0fc05[m
Author: Boxy <supbscripter@gmail.com>
Date:   Wed Jul 27 06:49:36 2022 +0000

    Add missing `ReadOnly = Self` bound (#5462)
    
    # Objective
    `ReadOnlyWorldQuery` should have required `Self::ReadOnly = Self` so that calling `.iter()` on a readonly query is equivelent to calling `iter_mut()`.
    
    ## Solution
    
    add `ReadOnly = Self` to the definition of `ReadOnlyWorldQuery`
    
    ---
    
    ## Changelog
    
    ReadOnlyWorldQuery's `ReadOnly` assoc type is now always equal to `Self`
    
    ## Migration Guide
    
    Make `Self::ReadOnly = Self` hold

[33mcommit 3561b38e4debb9ffb83d3011c01d5ee28b714d79[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Jul 27 06:35:04 2022 +0000

    set ndk env variable (#5465)
    
    # Objective
    
    - Fixes #5463
    - set ANDROID_NDK_ROOT
    - GitHub recently updated their ubuntu container, removing some of the android environment variable: https://github.com/actions/virtual-environments/commit/ca5d04c7da260089447a4b445d6951e204373989
    - `cargo-apk` is not reading the new environment variable: https://github.com/rust-windowing/android-ndk-rs/blob/9a8be258a951e213f4d07abe3c4c190d568c9694/ndk-build/src/ndk.rs#L33-L38
    - this also means CI will now use the latest android NDK, I don't know if that's an issue

[33mcommit 6a1ba9c456663808aecce2bcdc0a181eed6204d5[m
Author: robtfm <50659922+robtfm@users.noreply.github.com>
Date:   Mon Jul 25 16:24:54 2022 +0000

    Spotlight shadow bugfix (#5451)
    
    # Objective
    
    fix an error in shadow map indexing that occurs when point lights without shadows are used in conjunction with spotlights with shadows
    
    ## Solution
    
    calculate point_light_count correctly

[33mcommit d4787111a38ddb45cac7a6e2a107e0f7520e7ec2[m
Author: Jerome Humbert <djeedai@gmail.com>
Date:   Mon Jul 25 16:11:29 2022 +0000

    Conversion of `ResMut` and `NonSendMut` to `Mut` (#5438)
    
    # Objective
    
    Enable treating components and resources equally, which can
    simplify the implementation of some systems where only the change
    detection feature is relevant and not the kind of object (resource or
    component).
    
    ## Solution
    
    Implement `From<ResMut<T>>` and `From<NonSendMut<T>>` for
    `Mut`. Since the 3 structs are similar, and only differ by their system
    param role, the conversion is trivial.
    
    ---
    
    ## Changelog
    
    Added - `From<ResMut>` and `From<NonSendMut>` for `Mut<T>`.

[33mcommit 231894a3a6ae57d50483ed51658e7c15c6122a63[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Jul 25 15:48:14 2022 +0000

    Lighter no default features (#5447)
    
    # Objective
    
    - Even though it's marked as optional, it is no longer possible to not depend on `bevy_render` as it's a dependency of `bevy_scene`
    
    ## Solution
    
    - Make `bevy_scene` optional
    - For the minimalist among us, also make `bevy_asset` optional

[33mcommit a7f2120c9e36ffb0985ed7cd65f26dcd4a6b51ad[m
Author: Nicola Papale <nico@nicopap.ch>
Date:   Mon Jul 25 15:48:13 2022 +0000

    Wasm optimization tips (#5443)
    
    # Objective
    
    Add a section to the example's README on how
    to reduce generated wasm executable size.
    
    Add a `wasm-release` profile to bevy's `Cargo.toml`
    in order to use it when building bevy-website.
    
    Notes:
    - We do not recommend `strip = "symbols"` since it breaks bindgen
    - see https://github.com/bevyengine/bevy-website/pull/402

[33mcommit 619c30c036ddfceb66030922099961bd17b65e35[m
Author: eiei114 <nowaka37564@gmail.com>
Date:   Fri Jul 22 15:04:32 2022 +0000

    Fix comment typo (#5421)
    
    # Objective
    
    - Fix some typos
    
    ## Solution
    
    For the first time in my life, I made a pull request to OSS.
    Am I right?
    
    
    Co-authored-by: eiei114 <60887155+eiei114@users.noreply.github.com>

[33mcommit cfee0e882e3ed73cc7da84c818ef5726768d7ac8[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Thu Jul 21 20:46:54 2022 +0000

    Fix various typos (#5417)
    
    ## Objective
    
    - Fix some typos
    
    ## Solution
    
    - Fix em.
    - My favorite was `maxizimed`

[33mcommit 77894639f82fc05c6e5e687fefce98116ce9635b[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Jul 21 14:57:38 2022 +0000

    bevy_asset: add missing doc in wasm (#5407)
    
    # Objective
    
    - `#![warn(missing_docs)]` was added to bevy_asset in #3536
    - A method was not documented when targeting wasm
    
    ## Solution
    
    - Add documentation for it

[33mcommit 4b191d968d2ea011b26d9f91da65b77f09da22e2[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Thu Jul 21 14:57:37 2022 +0000

    remove blanket `Serialize + Deserialize` requirement for `Reflect` on generic types (#5197)
    
    # Objective
    
    Some generic types like `Option<T>`, `Vec<T>` and `HashMap<K, V>` implement `Reflect` when where their generic types `T`/`K`/`V` implement `Serialize + for<'de> Deserialize<'de>`.
    This is so that in their `GetTypeRegistration` impl they can insert the `ReflectSerialize` and `ReflectDeserialize` type data structs.
    
    This has the annoying side effect that if your struct contains a `Option<NonSerdeStruct>` you won't be able to derive reflect (https://github.com/bevyengine/bevy/issues/4054).
    
    ## Solution
    
    - remove the `Serialize + Deserialize` bounds on wrapper types
      - this means that `ReflectSerialize` and `ReflectDeserialize` will no longer be inserted even for `.register::<Option<DoesImplSerde>>()`
    - add `register_type_data<T, D>` shorthand for `registry.get_mut(T).insert(D::from_type<T>())`
    - require users to register their specific generic types **and the serde types** separately like
    ```rust
            .register_type::<Option<String>>()
            .register_type_data::<Option<String>, ReflectSerialize>()
            .register_type_data::<Option<String>, ReflectDeserialize>()
    
    ```
    I believe this is the best we can do for extensibility and convenience without specialization.
    
    
    ## Changelog
    
    - `.register_type` for generic types like `Option<T>`, `Vec<T>`, `HashMap<K, V>` will no longer insert `ReflectSerialize` and `ReflectDeserialize` type data. Instead you need to register it separately for concrete generic types like so:
    ```rust
            .register_type::<Option<String>>()
            .register_type_data::<Option<String>, ReflectSerialize>()
            .register_type_data::<Option<String>, ReflectDeserialize>()
    ```
    
    TODO: more docs and tweaks to the scene example to demonstrate registering generic types.

[33mcommit a96b3b2e2f0dceee8a485e2cd6f4f5ef7d5a4e1d[m
Author: Nicola Papale <nico@nicopap.ch>
Date:   Thu Jul 21 14:39:03 2022 +0000

    Add stress test for many ui elements (#5253)
    
    # Objective
    
    Bevy need a way to benchmark UI rendering code,
    this PR adds a stress test that spawns a lot of buttons.
    
    ## Solution
    
    - Add the `many_buttons` stress test.
    
    ---
    
    ## Changelog
    
    - Add the `many_buttons` stress test.

[33mcommit 1c23421f4141c1e93c120ccfc27ed86edc3488af[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Wed Jul 20 22:43:36 2022 +0000

    dds: Ensure the Extent3d for compressed textures represents the physical size (#5406)
    
    # Objective
    
    - wgpu 0.13 has validation to ensure that the width and height specified for a texture are both multiples of the respective block width and block height. This means validation fails for compressed textures with say a 4x4 block size, but non-modulo-4 image width/height.
    
    ## Solution
    
    - Using `Extent3d`'s `physical_size()` method in the `dds` loader. It takes a `TextureFormat` argument and ensures the resolution is correct.
    
    ---
    
    ## Changelog
    
    - Fixes: Validation failure for compressed textures stored in `dds` where the width/height are not a multiple of the block dimensions.

[33mcommit 4b1f6f4ebba92fc968124380d5a19e1d2500e2dd[m
Author: Nicola Papale <nico@nicopap.ch>
Date:   Wed Jul 20 22:00:59 2022 +0000

    Add some documentation to standard material fields (#5323)
    
    # Objective
    
    the bevy pbr shader doesn't handle at all normal maps
    if a mesh doesn't have backed tangents. This is a pitfall
    (that I fell into) and needs to be documented.
    
    # Solution
    
    Document the behavior. (Also document a few other
    `StandardMaterial` fields)
    
    ## Changelog
    
    * Add documentation to `emissive`, `normal_map_texture` and `occlusion_texture` fields of `StandardMaterial`.

[33mcommit 99440c11b323e867245b21047b4ee2e6fd69ba37[m
Author: adsick <adsick@protonmail.com>
Date:   Wed Jul 20 21:39:51 2022 +0000

    removed duplicated doc line in  material.rs (#5405)
    
    # Objective
    
    I've found there is a duplicated line, probably left after some copy paste.
    
    ## Solution
    
    - removed it
    
    ---
    
    
    
    Co-authored-by: adsick <vadimgangsta73@gmail.com>

[33mcommit 01f5f8cbe3de5b3fbcf861b4662b40ea1d02f14c[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Wed Jul 20 21:26:47 2022 +0000

    Disable UI node `Interaction` when `ComputedVisibility` is false (#5361)
    
    # Objective
    
    UI nodes can be hidden by setting their `Visibility` property. Since #5310 was merged, this is now ergonomic to use, as visibility is now inherited.
    
    However, UI nodes still receive (and store) interactions when hidden, resulting in surprising hidden state (and an inability to otherwise disable UI nodes.
    
    ## Solution
    
    Fixes #5360.
    
    I've updated the `ui_focus_system` to accomplish this in a minimally intrusive way, and updated the docs to match.
    
    **NOTE:** I have not added automated tests to verify this behavior, as we do not currently have a good testing paradigm for `bevy_ui`. I'm not thrilled with that by any means, but I'm not sure fixing it is within scope.
    
    ## Paths not taken
    
    ### Separate `Disabled` component
    
    This is a much larger and more controversial change, and not well-scoped to UI.
    Furthermore, it is extremely rare that you want hidden UI elements to function: the most common cases are for things like changing tabs, collapsing elements or so on.
    Splitting this behavior would be more complex, and substantially violate user expectations.
    
    ### A separate limbo world
    
    Mentioned in the linked issue. Super cool, but all of the problems  of the `Disabled` component solution with a whole new RFC-worth of complexity.
    
    ### Using change detection to reduce the amount of redundant work
    
    Adds a lot of complexity for questionable performance gains. Likely involves a complete refactor of the entire system.
    
    We simply don't have the tests or benchmarks here to justify this.
    
    ## Changelog
    
    - UI nodes are now always in an `Interaction::None` state while they are hidden (via the `ComputedVisibility` component).

[33mcommit c0b87d284f1c6f77ec3f6f91aeb87b56bcee5595[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Jul 20 20:03:13 2022 +0000

    don't cull ui nodes that have a rotation (#5389)
    
    # Objective
    
    - Fixes #5293
    - UI nodes with a rotation that made the top left corner lower than the top right corner (z rotations greater than Ï/4) were culled
    
    ## Solution
    
    - Do not cull nodes with a rotation, but don't do proper culling in this case
    
    
    
    As a reminder, changing rotation and scale of UI nodes is not recommended as it won't impact layout. This is a quick fix but doesn't handle properly rotations and scale in clipping/culling. This would need a lot more work as mentioned here: https://github.com/bevyengine/bevy/blob/c2b332f98a0bcab7390e4b184099202cfb4fbbe1/crates/bevy_ui/src/render/mod.rs#L404-L405

[33mcommit 56e9a3de88869d324df22089dc13b6125d3ab824[m
Author: JoJoJet <joe102000@gmail.com>
Date:   Wed Jul 20 19:39:42 2022 +0000

    improve documentation for macro-generated label types (#5367)
    
    # Objective
    
    I noticed while working on #5366 that the documentation for label types wasn't working correctly. Having experimented with this for a few weeks, I believe that generating docs in macros is more effort than it's worth.
    
    ## Solution
    
    Add more boilerplate, copy-paste and edit the docs across types. This also lets us add custom doctests for specific types. Also, we don't need `concat_idents` as a dependency anymore.

[33mcommit 433306b9787df8f19585a196829a4974c6299542[m
Author: Brian Merchant <bhmerchang@gmail.com>
Date:   Wed Jul 20 17:24:34 2022 +0000

    Documenting `UniformBuffer`, `DynamicUniformBuffer`, `StorageBuffer` and `DynamicStorageBuffer`. (#5223)
    
    # Objective
    
    Documents the `UniformBuffer`, `DynamicUniformBuffer`, `StorageBuffer` and `DynamicStorageBuffer` render resources.
    
    
    ## Solution
    
    I looked through Discord discussion on these structures, and found [a comment](https://discord.com/channels/691052431525675048/953222550568173580/956596218857918464) to be particularly helpful, in the general discussion around encase. Other resources I have used are documented here:  https://discord.com/channels/691052431525675048/968333504838524958/991195474029715520
    
    
    Co-authored-by: Brian Merchant <bhmerchant@gmail.com>

[33mcommit db860230692dc5cd076f30e12bedc17e3a0bfe52[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Wed Jul 20 17:05:43 2022 +0000

    Note that changes to licensing are controversial (#4975)
    
    # Objective
    
    - In #4966, @DJMcNab noted that the changes should likely have been flagged as controversial, and blocked on a final pass from @cart.
      - I think this is generally reasonable.
      - Added as an explicit guideline.
    - Changes to top-level files are also typically controversial, due to the high visible impact (see #4700 for a case of that).
      - Added as an explicit guideline.
    - The licensing information of our included assets is hard to find.
       - Call out the existence of CREDITS.md

[33mcommit 60c6934f32fcbfa88481368a5b0253abb3f03ea0[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Wed Jul 20 15:42:18 2022 +0000

    Document `Size` and `UiRect` (#5381)
    
    # Objective
    
    - Migrate changes from #3503.
    
    ## Solution
    
    - Document `Size` and `UiRect`.
    - I also removed the type alias from the `size_ops` test since it's unnecessary.
    
    ## Follow Up
    
    After this change is merged I'd follow up with removing the generics from `Size` and `UiRect` since `Val` should be extensible enough. This was also discussed and decided on in #3503. let me know if this is not needed or wanted anymore!

[33mcommit ee3368b20149c8a1004080f32f2652f09cde403a[m
Author: Zicklag <zicklag@katharostech.com>
Date:   Wed Jul 20 15:18:26 2022 +0000

    Update Notify Dependency (#5396)
    
    # Objective
    
    I want to use the `deno_runtime` crate in my game, but it has a conflict with the version of the `notify` crate that Bevy depends on.
    
    ## Solution
    
    Updates the version of the `notify` crate the Bevy depends on.

[33mcommit 84bf6f611a10bcdffa14e8fa76906e3876def857[m
Author: sark <sarkahn@gmail.com>
Date:   Wed Jul 20 14:14:30 2022 +0000

    Export anyhow::error for custom asset loaders (#5359)
    
    If users try to implement a custom asset loader, they must manually import anyhow::error as it's used by the asset loader trait but not exported.
    
    https://github.com/bevyengine/bevy/blob/2b93ab58128178fef64de8134a130f036f07dc5d/examples/asset/custom_asset.rs#L25
    
    Fixes #3138
    
    Co-authored-by: sark <sarkahn@hotmail.com>

[33mcommit 9f906fdc8b94ac039ea14b593db789aaba4f49b2[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Wed Jul 20 14:14:29 2022 +0000

    Improve ergonomics and reduce boilerplate around creating text elements. (#5343)
    
    # Objective
    
    Creating UI elements is very boilerplate-y with lots of indentation.
    This PR aims to reduce boilerplate around creating text elements.
    
    ## Changelog
    
    * Renamed `Text::with_section` to `from_section`.
      It no longer takes a `TextAlignment` as argument, as the vast majority of cases left it `Default::default()`.
    * Added `Text::from_sections` which creates a `Text` from a list of `TextSections`.
      Reduces line-count and reduces indentation by one level.
    * Added `Text::with_alignment`.
      A builder style method for setting the `TextAlignment` of a `Text`.
    * Added `TextSection::new`.
      Does not reduce line count, but reduces character count and made it easier to read. No more `.to_string()` calls!
    * Added `TextSection::from_style` which creates an empty `TextSection` with a style.
      No more empty strings! Reduces indentation.
    * Added `TextAlignment::CENTER` and friends.
    * Added methods to `TextBundle`. `from_section`, `from_sections`, `with_text_alignment` and `with_style`.
    
    ## Note for reviewers.
    Because of the nature of these changes I recommend setting diff view to 'split'.
    ~~Look for the book icon~~ cog in the top-left of the Files changed tab.
    
    Have fun reviewing :heart:
    <sup> >:D </sup>
    
    ## Migration Guide
    
    `Text::with_section` was renamed to `from_section` and no longer takes a `TextAlignment` as argument.
    Use `with_alignment` to set the alignment instead.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 35f99a6ccc21e049ae423ff2ad4a3c32b9510908[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Jul 20 13:58:03 2022 +0000

    unpin nightly in CI (#5385)
    
    # Objective
    
    - Nightly was pinned after a Rust regression
    - Rust regression has been fixed
    
    ## Solution
    
    - Unpin nightly

[33mcommit 222f2dd32c9ce3104abf673f3071f8ae31db60e5[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Wed Jul 20 13:16:28 2022 +0000

    Fix `OwningPtr` docs (#5391)
    
    # Objective
    
    - Fix some small errors in the documentation of the `OwningPtr` struct.
    
    ## Solution
    
    - Change comments with 4 slashes `////` to doc comments with 3 slashes `///`.
    - Fix typos.

[33mcommit c2b332f98a0bcab7390e4b184099202cfb4fbbe1[m
Author: Mark Lodato <mlodato517@gmail.com>
Date:   Wed Jul 20 07:05:29 2022 +0000

    Recalculate entity aabbs when meshes change (#4944)
    
    # Objective
    
    Update the `calculate_bounds` system to update `Aabb`s
    for entities who've either:
    - gotten a new mesh
    - had their mesh mutated
    
    Fixes https://github.com/bevyengine/bevy/issues/4294.
    
    ## Solution
    
    There are two commits here to address the two issues above:
    
    ### Commit 1
    
    **This Commit**
    Updates the `calculate_bounds` system to operate not only on entities
    without `Aabb`s but also on entities whose `Handle<Mesh>` has changed.
    
    **Why?**
    So if an entity gets a new mesh, its associated `Aabb` is properly
    recalculated.
    
    **Questions**
    - This type is getting pretty gnarly - should I extract some types?
    - This system is public - should I add some quick docs while I'm here?
    
    ### Commit 2
    
    **This Commit**
    Updates `calculate_bounds` to update `Aabb`s of entities whose meshes
    have been directly mutated.
    
    **Why?**
    So if an entity's mesh gets updated, its associated `Aabb` is properly
    recalculated.
    
    **Questions**
    - I think we should be using `ahash`. Do we want to do that with a
      direct `hashbrown` dependency or an `ahash` dependency that we
      configure the `HashMap` with?
    - There is an edge case of duplicates with `Vec<Entity>` in the
      `HashMap`. If an entity gets its mesh handle changed and changed back
      again it'll be added to the list twice. Do we want to use a `HashSet`
      to avoid that? Or do a check in the list first (assuming iterating
      over the `Vec` is faster and this edge case is rare)?
    - There is an edge case where, if an entity gets a new mesh handle and
      then its old mesh is updated, we'll update the entity's `Aabb` to the
      new geometry of the _old_ mesh. Do we want to remove items from the
      `Local<HashMap>` when handles change? Does the `Changed` event give us
      the old mesh handle? If not we might need to have a
      `HashMap<Entity, Handle<Mesh>>` or something so we can unlink entities
      from mesh handles when the handle changes.
    - I did the `zip()` with the two `HashMap` gets assuming those would
      be faster than calculating the Aabb of the mesh (otherwise we could do
      `meshes.get(mesh_handle).and_then(Mesh::compute_aabb).zip(entity_mesh_map...)`
      or something). Is that assumption way off?
    
    ## Testing
    
    I originally tried testing this with `bevy_mod_raycast` as mentioned in the
    original issue but it seemed to work (maybe they are currently manually
    updating the Aabbs?). I then tried doing it in 2D but it looks like
    `Handle<Mesh>` is just for 3D. So I took [this example](https://github.com/bevyengine/bevy/blob/main/examples/3d/pbr.rs)
    and added some systems to mutate/assign meshes:
    
    <details>
    <summary>Test Script</summary>
    
    ```rust
    use bevy::prelude::*;
    use bevy::render::camera::ScalingMode;
    use bevy::render::primitives::Aabb;
    
    /// Make sure we only mutate one mesh once.
    #[derive(Eq, PartialEq, Clone, Debug, Default)]
    struct MutateMeshState(bool);
    
    /// Let's have a few global meshes that we can cycle between.
    /// This way we can be assigned a new mesh, mutate the old one, and then get the old one assigned.
    #[derive(Eq, PartialEq, Clone, Debug, Default)]
    struct Meshes(Vec<Handle<Mesh>>);
    
    fn main() {
        App::new()
            .add_plugins(DefaultPlugins)
            .init_resource::<MutateMeshState>()
            .init_resource::<Meshes>()
            .add_startup_system(setup)
            .add_system(assign_new_mesh)
            .add_system(show_aabbs.after(assign_new_mesh))
            .add_system(mutate_meshes.after(show_aabbs))
            .run();
    }
    
    fn setup(
        mut commands: Commands,
        mut meshes: ResMut<Assets<Mesh>>,
        mut global_meshes: ResMut<Meshes>,
        mut materials: ResMut<Assets<StandardMaterial>>,
    ) {
        let m1 = meshes.add(Mesh::from(shape::Icosphere::default()));
        let m2 = meshes.add(Mesh::from(shape::Icosphere {
            radius: 0.90,
            ..Default::default()
        }));
        let m3 = meshes.add(Mesh::from(shape::Icosphere {
            radius: 0.80,
            ..Default::default()
        }));
        global_meshes.0.push(m1.clone());
        global_meshes.0.push(m2);
        global_meshes.0.push(m3);
    
        // add entities to the world
        // sphere
        commands.spawn_bundle(PbrBundle {
            mesh: m1,
            material: materials.add(StandardMaterial {
                base_color: Color::hex("ffd891").unwrap(),
                ..default()
            }),
            ..default()
        });
        // new 3d camera
        commands.spawn_bundle(Camera3dBundle {
            projection: OrthographicProjection {
                scale: 3.0,
                scaling_mode: ScalingMode::FixedVertical(1.0),
                ..default()
            }
            .into(),
            ..default()
        });
    
        // old 3d camera
        // commands.spawn_bundle(OrthographicCameraBundle {
        //     transform: Transform::from_xyz(0.0, 0.0, 8.0).looking_at(Vec3::default(), Vec3::Y),
        //     orthographic_projection: OrthographicProjection {
        //         scale: 0.01,
        //         ..default()
        //     },
        //     ..OrthographicCameraBundle::new_3d()
        // });
    }
    fn show_aabbs(query: Query<(Entity, &Handle<Mesh>, &Aabb)>) {
        for thing in query.iter() {
            println!("{thing:?}");
        }
    }
    
    /// For testing the second part - mutating a mesh.
    ///
    /// Without the fix we should see this mutate an old mesh and it affects the new mesh that the
    /// entity currently has.
    /// With the fix, the mutation doesn't affect anything until the entity is reassigned the old mesh.
    fn mutate_meshes(
        mut meshes: ResMut<Assets<Mesh>>,
        time: Res<Time>,
        global_meshes: Res<Meshes>,
        mut mutate_mesh_state: ResMut<MutateMeshState>,
    ) {
        let mutated = mutate_mesh_state.0;
        if time.seconds_since_startup() > 4.5 && !mutated {
            println!("Mutating {:?}", global_meshes.0[0]);
            let m = meshes.get_mut(&global_meshes.0[0]).unwrap();
            let mut p = m.attribute(Mesh::ATTRIBUTE_POSITION).unwrap().clone();
            use bevy::render::mesh::VertexAttributeValues;
            match &mut p {
                VertexAttributeValues::Float32x3(v) => {
                    v[0] = [10.0, 10.0, 10.0];
                }
                _ => unreachable!(),
            }
            m.insert_attribute(Mesh::ATTRIBUTE_POSITION, p);
            mutate_mesh_state.0 = true;
        }
    }
    
    /// For testing the first part - assigning a new handle.
    fn assign_new_mesh(
        mut query: Query<&mut Handle<Mesh>, With<Aabb>>,
        time: Res<Time>,
        global_meshes: Res<Meshes>,
    ) {
        let s = time.seconds_since_startup() as usize;
        let idx = s % global_meshes.0.len();
        for mut handle in query.iter_mut() {
            *handle = global_meshes.0[idx].clone_weak();
        }
    }
    ```
    
    </details>
    
    ## Changelog
    
    ### Fixed
    Entity `Aabb`s not updating when meshes are mutated or re-assigned.

[33mcommit 959f3b1186b20a5066bfb51b9b71542705db76d8[m
Author: harudagondi <giogdeasis@gmail.com>
Date:   Wed Jul 20 01:09:45 2022 +0000

    Allows conversion of mutable queries to immutable queries (#5376)
    
    # Objective
    
    - Allows conversion of mutable queries to immutable queries.
    - Fixes #4606
    
    ## Solution
    
    - Add `to_readonly` method on `Query`, which uses `QueryState::as_readonly`
    - `AsRef` is not feasible because creation of new queries is needed.
    
    ---
    
    ## Changelog
    
    ### Added
    
    - Allows conversion of mutable queries to immutable queries using `Query::to_readonly`.

[33mcommit 7dcfaaef67ee4d4000af9b8e8ec6c32784229d68[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Tue Jul 19 23:00:34 2022 +0000

    bevy_reflect: `ReflectFromPtr` to create `&dyn Reflect` from a `*const ()` (#4475)
    
    # Objective
    
    https://github.com/bevyengine/bevy/pull/4447 adds functions that can fetch resources/components as `*const ()` ptr by providing the `ComponentId`. This alone is not enough for them to be usable safely with reflection, because there is no general way to go from the raw pointer to a `&dyn Reflect` which is the pointer + a pointer to the VTable of the `Reflect` impl.
    
    By adding a `ReflectFromPtr` type that is included in the type type registration when deriving `Reflect`, safe functions can be implemented in scripting languages that don't assume a type layout and can access the component data via reflection:
    
    ```rust
    #[derive(Reflect)]
    struct StringResource {
        value: String
    }
    ```
    
    ```lua
    local res_id = world:resource_id_by_name("example::StringResource")
    local res = world:resource(res_id)
    
    print(res.value)
    ```
    
    ## Solution
    
    1. add a `ReflectFromPtr` type with a `FromType<T: Reflect>` implementation and the following methods:
    - `     pub unsafe fn as_reflect_ptr<'a>(&self, val: Ptr<'a>) -> &'a dyn Reflect`
    - `     pub unsafe fn as_reflect_ptr_mut<'a>(&self, val: PtrMut<'a>) -> &'a mud dyn Reflect`
    
    Safety requirements of the methods are that you need to check that the `ReflectFromPtr` was constructed for the correct type.
    
    2. add that type to the `TypeRegistration` in the `GetTypeRegistration` impl generated by `#[derive(Reflect)]`.
    This is different to other reflected traits because it doesn't need `#[reflect(ReflectReflectFromPtr)]` which IMO should be there by default.
    
    Co-authored-by: Jakob Hellermann <hellermann@sipgate.de>
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 0fa499a7d044919b01c4de0e2619bb7fab012de3[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Jul 19 22:28:05 2022 +0000

    rename send_default_event to send_event_default on world (#5383)
    
    after #5355, three methods were added on world:
    * `send_event`
    * `send_event_batch`
    * `send_default_event`
    
    rename `send_default_event` to `send_event_default` for better discoverability

[33mcommit 50a44417baf312db0798aa8581dcb0663ebb4479[m
Author: Matthew Taylor <wrapperup4@gmail.com>
Date:   Tue Jul 19 22:05:43 2022 +0000

    Derive AsBindGroup Improvements: Better errors, more options, update examples (#5364)
    
    # Objective
    
    - Provide better compile-time errors and diagnostics.
    - Add more options to allow more textures types and sampler types.
    - Update array_texture example to use upgraded AsBindGroup derive macro.
    
    ## Solution
    
    Split out the parsing of the inner struct/field attributes (the inside part of a `#[foo(...)]` attribute) for better clarity
    
    Parse the binding index for all inner attributes, as it is part of all attributes (`#[foo(0, ...)`), then allow each attribute implementer to parse the rest of the attribute metadata as needed. This should make it very trivial to extend/change if needed in the future.
    
    Replaced invocations of `panic!` with the `syn::Error` type, providing fine-grained errors that retains span information. This provides much nicer compile-time errors, and even better IDE errors.
    
    ![image](https://user-images.githubusercontent.com/7478134/179452241-6d85d440-4b67-44da-80a7-9d47e8c88b8a.png)
    
    Updated the array_texture example to demonstrate the new changes.
    
    ## New AsBindGroup attribute options
    
    
    ### `#[texture(u32, ...)]`
    Where `...` is an optional list of arguments.
    | Arguments     | Values                                                                | Default |
    |-------------- |----------------------------------------------------------------       | ----------- |
    | dimension = "..."     | `"1d"`, `"2d"`, `"2d_array"`, `"3d"`, `"cube"`, `"cube_array"`        |    `"2d"`    |
    | sample_type = "..."   | `"float"`, `"depth"`, `"s_int"` or `"u_int"`                          |    `"float"`    |
    | filterable = ...      | `true`, `false`                                                       |    `true`     |
    | multisampled = ...    | `true`, `false`                                                       |    `false` |
    | visibility(...)       | `all`, `none`, or a list-combination of `vertex`, `fragment`, `compute` |   `vertex`, `fragment`   |
    
    Example: `#[texture(0, dimension = "2d_array", visibility(vertex, fragment))]`
    
    
    ### `#[sampler(u32, ...)]`
    Where `...` is an optional list of arguments.
    | Arguments     | Values                                                | Default |
    |-----------    |---------------------------------------------------    | ----------- |
    | sampler_type = "..."          | `"filtering"`, `"non_filtering"`, `"comparison"`.     |  `"filtering"`  |
    | visibility(...)       | `all`, `none`, or a list-combination of `vertex`, `fragment`, `compute` |   `vertex`, `fragment`   |
    
    Example: `#[sampler(0, sampler_type = "filtering", visibility(vertex, fragment)]`
    
    ## Changelog
    
    - Added more options to `#[texture(...)]` and `#[sampler(...)]` attributes, supporting more kinds of materials. See above for details.
    - Upgraded IDE and compile-time error messages.
    - Updated array_texture example using the new options.

[33mcommit 282f8ed0b9005a003fbe67e0d1913ac3f303d605[m
Author: Aevyrie <aevyrie@gmail.com>
Date:   Tue Jul 19 20:54:03 2022 +0000

    Add helpers to send `Events` from `World` (#5355)
    
    # Objective
    
    - With access to `World`, it's not obvious how to send an event.
    - This is especially useful if you are writing a `Command` that needs to send an `Event`.
    - `Events` are a first-class construct in bevy, even though they are just `Resources` under the hood. Their methods should be discoverable.
    
    ## Solution
    
    - Provide a simple helpers to send events through `Res<Events<T>>`.
    ---
    
    ## Changelog
    
    > `send_event`, `send_default_event`, and `send_event_batch` methods added to `World`.

[33mcommit 44e9cd4bfc0f0faab8edeae48b7b57b3672f23b2[m
Author: JoJoJet <joe102000@gmail.com>
Date:   Tue Jul 19 05:21:19 2022 +0000

    Add attribute to ignore fields of derived labels (#5366)
    
    # Objective
    
    Fixes #5362
    
    ## Solution
    
    Add the attribute `#[label(ignore_fields)]` for `*Label` types.
    
    ```rust
    #[derive(SystemLabel)]
    pub enum MyLabel {
        One,
    
        // Previously this was not allowed since labels cannot contain data.
        #[system_label(ignore_fields)]
        Two(PhantomData<usize>),
    }
    ```
    
    ## Notes
    
    This label makes it possible for equality to behave differently depending on whether or not you are treating the type as a label. For example:
    
    ```rust
    #[derive(SystemLabel, PartialEq, Eq)]
    #[system_label(ignore_fields)]
    pub struct Foo(usize);
    ```
    
    If you compare it as a label, it will ignore the wrapped fields as the user requested. But if you compare it as a `Foo`, the derive will incorrectly compare the inner fields. I see a few solutions
    
    1. Do nothing. This is technically intended behavior, but I think we should do our best to prevent footguns.
    2. Generate impls of `PartialEq` and `Eq` along with the `#[derive(Label)]` macros. This is a breaking change as it requires all users to remove these derives from their types.
    3. Only allow `PhantomData` to be used with `ignore_fields` -- seems needlessly prescriptive.
    
    ---
    
    ## Changelog
    
    * Added the `ignore_fields` attribute to the derive macros for `*Label` types.
    * Added an example showing off different forms of the derive macro.
    
    <!--
    ## Migration Guide
    
    > This section is optional. If there are no breaking changes, you can delete this section.
    
    - If this PR is a breaking change (relative to the last release of Bevy), describe how a user might need to migrate their code to support these changes
    - Simply adding new functionality is not a breaking change.
    - Fixing behavior that was definitely a bug, rather than a questionable design choice is not a breaking change.
    -->

[33mcommit 1ac8a476cf4ad14bd0b9bfb091dd04796652230d[m
Author: Boxy <supbscripter@gmail.com>
Date:   Tue Jul 19 00:45:00 2022 +0000

    remove QF generics from all `Query/State` methods and types (#5170)
    
    # Objective
    
    remove `QF` generics from a bunch of types and methods on query related items. this has a few benefits:
    - simplifies type signatures `fn iter(&self) -> QueryIter<'_, 's, Q::ReadOnly, F::ReadOnly>` is (imo) conceptually simpler than `fn iter(&self) -> QueryIter<'_, 's, Q, ROQueryFetch<'_, Q>, F>`
    - `Fetch` is mostly an implementation detail but previously we had to expose it on every `iter` `get` etc method
    - Allows us to potentially in the future simplify the `WorldQuery` trait hierarchy by removing the `Fetch` trait
    
    ## Solution
    
    remove the `QF` generic and add a way to (unsafely) turn `&QueryState<Q1, F1>` into `&QueryState<Q2, F2>`
    
    ---
    
    ## Changelog/Migration Guide
    
    The `QF` generic was removed from various `Query` iterator types and some methods, you should update your code to use the type of the corresponding worldquery of the fetch type that was being used, or call `as_readonly`/`as_nop` to convert a querystate to the appropriate type. For example:
    `.get_single_unchecked_manual::<ROQueryFetch<Q>>(..)` -> `.as_readonly().get_single_unchecked_manual(..)`
    `my_field: QueryIter<'w, 's, Q, ROQueryFetch<'w, Q>, F>` -> `my_field: QueryIter<'w, 's, Q::ReadOnly, F::ReadOnly>`

[33mcommit 4affc8cd93942f91f62ed1c5f9a2107864eb9319[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Jul 18 23:27:30 2022 +0000

    add a SpatialBundle with visibility and transform components (#5344)
    
    # Objective
    
    - Help user when they need to add both a `TransformBundle` and a `VisibilityBundle`
    
    ## Solution
    
    - Add a `SpatialBundle` adding all components

[33mcommit 9c116d557df5a88940ed2e29dab6ff13c84d61a9[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sun Jul 17 23:14:38 2022 +0000

    allow unicode license (#5337)
    
    # Objective
    
    - Crate `unicode-ident` added the [unicode license](https://github.com/dtolnay/unicode-ident/blob/master/LICENSE-UNICODE). See https://github.com/dtolnay/unicode-ident#license. The only requirement seems to be to include the license in the distribution
    - This makes license check fail
    
    ## Solution
    
    - The license should be ok for Bevy, add it to the allowed licenses

[33mcommit 2b93ab58128178fef64de8134a130f036f07dc5d[m
Author: Niklas Eicker <git@nikl.me>
Date:   Sun Jul 17 15:24:24 2022 +0000

    Remove unused code in game of life shader (#5349)
    
    # Objective
    
    - Make `game_of_life.wgsl` easier to read and understand
    
    ## Solution
    
    - Remove unused code in the shader
        - `location_f32` was unused in `init`
        - `color` was unused in `update`

[33mcommit 71368d4ebe75f6339837ba6d11999cae557243b2[m
Author: Niklas Eicker <git@nikl.me>
Date:   Sun Jul 17 15:02:57 2022 +0000

    Fix line material shader (#5348)
    
    # Objective
    
    - The line shader missed the wgpu 0.13 update (#5168) and does not work in it's current state
    
    ## Solution
    
    - update the shader

[33mcommit d65e01b7682ffb9b9dc99f9c93602b5ed90b984f[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sun Jul 17 14:43:35 2022 +0000

    windows CI: use exact same command to prebuild (#5352)
    
    # Objective
    
    - Running examples on windows crash due to full disk
    - The prebuild step was not being reused and consuming extra space
    
    ## Solution
    
    - Use the exact same command to prebuild to ensure it will be reused
    - Also on linux

[33mcommit 3fdf40d9c8bd0c5938edb529fdb678fd5f4248d2[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Sun Jul 17 12:34:31 2022 +0000

    Make the contributor birbs bounce to the window height! (#5274)
    
    Birbs no longer bounce too low, not coming close to their true bouncy potential.
    Birbs also no longer bonk head when window is smaller. (Will still bonk head when window is made smaller too fast! pls no)
    
    *cough cough*
    Make the height of the birb-bounces dependent on the window size so they always bounce elegantly towards the top of the window.
    Also no longer panics when closing the window q:
    
    ~~Might put a video here if I figure out how to.~~
    <sup> rendering video is hard. birbrate go brr
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit d4f8f88bb6d440b9f4731dc4b30fcf25b59072a8[m
Author: Christopher Biscardi <chris@christopherbiscardi.com>
Date:   Sat Jul 16 21:50:19 2022 +0000

    Don't panic when StandardMaterial normal_map hasn't loaded yet (#5307)
    
    # Objective
    
    [This unwrap()](https://github.com/bevyengine/bevy/blob/de484c1e4147d01bf34c88a10797b75128a0d98a/crates/bevy_pbr/src/pbr_material.rs#L195) in pbr_material.rs will be hit if a StandardMaterial normal_map image has not finished loading, resulting in an error message that is hard to debug.
    
    ## Solution
    
    ~~This PR improves the error message including a potential indication of why the unwrap() could have panic'd by using expect() instead of unwrap().~~
    
    This PR removes the panic by only proceeding if the image is found.
    
    ---
    
    ## Changelog
    
    Don't panic when StandardMaterial normal_map images have not finished loading.

[33mcommit f531a94370755155accd625c58a06f07d33edcce[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Sat Jul 16 13:53:41 2022 +0000

    Remove redundant `Size` import (#5339)
    
    # Objective
    
    - Fixes  #5338
    - Allow the usage of `use bevy::ui::Size` (see migration guide in #4285)
    
    ## Solution
    
    - Remove the `use crate::Size` import so that the `pub use geometry::*` import also publicly uses the `Size` struct.

[33mcommit 25d222b73e57f27cf7f346015c7f554dafab131a[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Sat Jul 16 08:37:18 2022 +0000

    Minimally fix the known unsoundness in bevy_mikktspace (#5299)
    
    # Objective
    
    - 0.8 is coming soon, and our mikktspace implementation is unsound - see https://github.com/gltf-rs/mikktspace/issues/26
    - Best not to ship that
    
    ## Solution
    
    - Fix the unsoundness in a minimal way
    - Obviously there might be others, but it seems unlikely we have any way to know about those

[33mcommit a63d761aa36d8451d7ffbab7d4e7baa3ef786ac6[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Sat Jul 16 02:47:23 2022 +0000

    Add VisibilityBundle and use it to fix gltfs, scenes, and examples (#5335)
    
    # Objective
    
    Gltfs, and a few examples were broken by #5310. Fix em.
    
    Closes #5334
    
    ## Solution
    
    Add `VisibilityBundle` as described here: https://github.com/bevyengine/bevy/issues/5334#issuecomment-1186050778 and sprinkle it around where needed.

[33mcommit 9f8bdeeeb94d8c3ac2e24e31fda4b32792151287[m
Author: Dusty DeWeese <dustin.deweese@gmail.com>
Date:   Sat Jul 16 00:51:12 2022 +0000

    Use Affine3A for GlobalTransform to allow any affine transformation (#4379)
    
    # Objective
    
    - Add capability to use `Affine3A`s for some `GlobalTransform`s. This allows affine transformations that are not possible using a single `Transform` such as shear and non-uniform scaling along an arbitrary axis.
    - Related to #1755 and #2026
    
    ## Solution
    
    - `GlobalTransform` becomes an enum wrapping either a `Transform` or an `Affine3A`.
    - The API of `GlobalTransform` is minimized to avoid inefficiency, and to make it clear that operations should be performed using the underlying data types.
    - using `GlobalTransform::Affine3A` disables transform propagation, because the main use is for cases that `Transform`s cannot support.
    
    ---
    
    ## Changelog
    
    - `GlobalTransform`s can optionally support any affine transformation using an `Affine3A`.
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 8810a73e87e84f8806d6e86598650b0df41dadde[m
Author: Johan Klokkhammer Helsing <johanhelsing@gmail.com>
Date:   Sat Jul 16 00:20:04 2022 +0000

    Support AsBindGroup for 2d materials as well (#5312)
    
    Port changes made to Material in #5053 to Material2d as well.
    
    This is more or less an exact copy of the implementation in bevy_pbr; I
    simply pretended the API existed, then copied stuff over until it
    started building and the shapes example was working again.
    
    # Objective
    
    The changes in #5053 makes it possible to add custom materials with a lot less boiler plate. However, the implementation isn't shared with Material 2d as it's a kind of fork of the bevy_pbr version. It should be possible to use AsBindGroup on the 2d version as well.
    
    ## Solution
    
    This makes the same kind of changes in Material2d in bevy_sprite.
    
    This makes the following work:
    
    ```rust
    //! Draws a circular purple bevy in the middle of the screen using a custom shader
    
    use bevy::{
        prelude::*,
        reflect::TypeUuid,
        render::render_resource::{AsBindGroup, ShaderRef},
        sprite::{Material2d, Material2dPlugin, MaterialMesh2dBundle},
    };
    
    fn main() {
        App::new()
            .add_plugins(DefaultPlugins)
            .add_plugin(Material2dPlugin::<CustomMaterial>::default())
            .add_startup_system(setup)
            .run();
    }
    
    /// set up a simple 2D scene
    fn setup(
        mut commands: Commands,
        mut meshes: ResMut<Assets<Mesh>>,
        mut materials: ResMut<Assets<CustomMaterial>>,
        asset_server: Res<AssetServer>,
    ) {
        commands.spawn_bundle(MaterialMesh2dBundle {
            mesh: meshes.add(shape::Circle::new(50.).into()).into(),
            material: materials.add(CustomMaterial {
                color: Color::PURPLE,
                color_texture: Some(asset_server.load("branding/icon.png")),
            }),
            transform: Transform::from_translation(Vec3::new(-100., 0., 0.)),
            ..default()
        });
    
        commands.spawn_bundle(Camera2dBundle::default());
    }
    
    /// The Material2d trait is very configurable, but comes with sensible defaults for all methods.
    /// You only need to implement functions for features that need non-default behavior. See the Material api docs for details!
    impl Material2d for CustomMaterial {
        fn fragment_shader() -> ShaderRef {
            "shaders/custom_material.wgsl".into()
        }
    }
    
    // This is the struct that will be passed to your shader
    #[derive(AsBindGroup, TypeUuid, Debug, Clone)]
    #[uuid = "f690fdae-d598-45ab-8225-97e2a3f056e0"]
    pub struct CustomMaterial {
        #[uniform(0)]
        color: Color,
        #[texture(1)]
        #[sampler(2)]
        color_texture: Option<Handle<Image>>,
    }
    ```

[33mcommit e0a8087408c9177927e00a538c8581ada74e1831[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Jul 16 00:07:08 2022 +0000

    remove nightly from CI/bors (#5333)
    
    # Objective
    
    - After a few recent failures, nightly in CI seems too costly to keep
    
    ## Solution
    
    - remove from CI/bors

[33mcommit 40d4992401da0193c05690dbf16066413358d939[m
Author: Carter Anderson <contact@jamessliu.com>
Date:   Fri Jul 15 23:24:42 2022 +0000

    Visibilty Inheritance, universal ComputedVisibility and RenderLayers support (#5310)
    
    # Objective
    
    Fixes #4907. Fixes #838. Fixes #5089.
    Supersedes #5146. Supersedes #2087. Supersedes #865. Supersedes #5114
    
    Visibility is currently entirely local. Set a parent entity to be invisible, and the children are still visible. This makes it hard for users to hide entire hierarchies of entities.
    
    Additionally, the semantics of `Visibility` vs `ComputedVisibility` are inconsistent across entity types. 3D meshes use `ComputedVisibility` as the "definitive" visibility component, with `Visibility` being just one data source. Sprites just use `Visibility`, which means they can't feed off of `ComputedVisibility` data, such as culling information, RenderLayers, and (added in this pr) visibility inheritance information.
    
    ## Solution
    
    Splits `ComputedVisibilty::is_visible` into `ComputedVisibilty::is_visible_in_view` and `ComputedVisibilty::is_visible_in_hierarchy`. For each visible entity, `is_visible_in_hierarchy` is computed by propagating visibility down the hierarchy. The `ComputedVisibility::is_visible()` function combines these two booleans for the canonical "is this entity visible" function.
    
    Additionally, all entities that have `Visibility` now also have `ComputedVisibility`.  Sprites, Lights, and UI entities now use `ComputedVisibility` when appropriate.
    
    This means that in addition to visibility inheritance, everything using Visibility now also supports RenderLayers. Notably, Sprites (and other 2d objects) now support `RenderLayers` and work properly across multiple views.
    
    Also note that this does increase the amount of work done per sprite. Bevymark with 100,000 sprites on `main` runs in `0.017612` seconds and this runs in `0.01902`. That is certainly a gap, but I believe the api consistency and extra functionality this buys us is worth it. See [this thread](https://github.com/bevyengine/bevy/pull/5146#issuecomment-1182783452) for more info. Note that #5146 in combination with #5114 _are_ a viable alternative to this PR and _would_ perform better, but that comes at the cost of api inconsistencies and doing visibility calculations in the "wrong" place. The current visibility system does have potential for performance improvements. I would prefer to evolve that one system as a whole rather than doing custom hacks / different behaviors for each feature slice.
    
    Here is a "split screen" example where the left camera uses RenderLayers to filter out the blue sprite.
    
    ![image](https://user-images.githubusercontent.com/2694663/178814868-2e9a2173-bf8c-4c79-8815-633899d492c3.png)
    
    
    Note that this builds directly on #5146 and that @james7132 deserves the credit for the baseline visibility inheritance work. This pr moves the inherited visibility field into `ComputedVisibility`, then does the additional work of porting everything to `ComputedVisibility`. See my [comments here](https://github.com/bevyengine/bevy/pull/5146#issuecomment-1182783452) for rationale.
    
    ## Follow up work
    
    * Now that lights use ComputedVisibility, VisibleEntities now includes "visible lights" in the entity list. Functionally not a problem as we use queries to filter the list down in the desired context. But we should consider splitting this out into a separate`VisibleLights` collection for both clarity and performance reasons. And _maybe_ even consider scoping `VisibleEntities` down to `VisibleMeshes`?.
    * Investigate alternative sprite rendering impls (in combination with visibility system tweaks) that avoid re-generating a per-view fixedbitset of visible entities every frame, then checking each ExtractedEntity. This is where most of the performance overhead lives. Ex: we could generate ExtractedEntities per-view using the VisibleEntities list, avoiding the need for the bitset.
    * Should ComputedVisibility use bitflags under the hood? This would cut down on the size of the component, potentially speed up the `is_visible()` function, and allow us to cheaply expand ComputedVisibility with more data (ex: split out local visibility and parent visibility, add more culling classes, etc).
    ---
    
    ## Changelog
    
    * ComputedVisibility now takes hierarchy visibility into account.
    * 2D, UI and Light entities now use the ComputedVisibility component.
    
    ## Migration Guide
    
    If you were previously reading `Visibility::is_visible` as the "actual visibility" for sprites or lights, use `ComputedVisibilty::is_visible()` instead:
    
    ```rust
    // before (0.7)
    fn system(query: Query<&Visibility>) {
      for visibility in query.iter() {
        if visibility.is_visible {
           log!("found visible entity");
        }
      }
    }
    
    // after (0.8)
    fn system(query: Query<&ComputedVisibility>) {
      for visibility in query.iter() {
        if visibility.is_visible() {
           log!("found visible entity");
        }
      }
    }
    ```
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit c8aa047ccae81c2dd24f5847824854f5466a5813[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Jul 15 22:37:07 2022 +0000

    Parameterize nightly toolchain in CI (#5330)
    
    # Objective
    
    Rust's nightly builds semi-regularly break us (or our dependencies). This creates churn and angst when we're just trying to get our jobs done.
    
    We do still want nightly builds for a variety of reasons:
    
    * cargo-udeps requires nightly and likely always will.
    * Helps us catch rust nightly bugs quickly. We're "good citizens" if we regularly report regressions.
    * Lets us prepare for "actual expected breakage" ahead of stable releases so we avoid breaking main users.
    
    ## Solution
    
    * This pr parameterizes the nightly toolchain, making it an easy one-liner to pin our builds to a specific nightly, when required.
    * Put nightly jobs to check wasm and nightly on their own matrix. I also removed tests on nightly linux, just build check
    * alternative to https://github.com/bevyengine/bevy/pull/5329
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 56ee620495c79b50e177056512bd17351e4784f2[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Fri Jul 15 22:37:06 2022 +0000

    Export and register `Mat2`. (#5324)
    
    Export and register a missing type from `glam`.
    
    Reflect impls were already present, but not registered.
    
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 6b34e81f00db8c525479714e909bd5255eaa3f2e[m
Author: Charles <c.giguere42@gmail.com>
Date:   Fri Jul 15 22:37:05 2022 +0000

    add a 3d lines example (#5319)
    
    # Objective
    
    - Showcase how to use a `Material` and `Mesh` to spawn 3d lines
    
    ![image](https://user-images.githubusercontent.com/8348954/179034236-ebc07f90-3eb5-46cc-8fc1-be7e6bf983fb.png)
    
    ## Solution
    
    - Add an example using a simple `Material` and `Mesh` definition to draw a 3d line
            - Shows how to use `LineList` and `LineStrip` in combination with a specialized `Material`
    
    ## Notes
    
    This isn't just a primitive shape because it needs a special Material, but I think it's a good showcase of the power of the `Material` and `AsBindGroup` abstractions. All of this is easy to figure out when you know these options are a thing, but I think they are hard to discover which is why I think this should be an example and not shipped with bevy.
    
    Co-authored-by: Charles <IceSentry@users.noreply.github.com>

[33mcommit 44566dbab7107f0231dafd99598a20acb9d471b0[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Jul 14 23:43:57 2022 +0000

    remove an unused import in release (#5320)
    
    # Objective
    
    - There is a warning when building in release:
    ```
    warning: unused import: `Local`
     --> crates/bevy_render/src/extract_resource.rs:4:34
      |
    4 | use bevy_ecs::system::{Commands, Local, Res, ResMut, Resource};
      |                                  ^^^^^
      |
      = note: `#[warn(unused_imports)]` on by default
    ```
    - It's used https://github.com/bevyengine/bevy/blob/814f8d1635587ad26d9e1e6e08e7d63b4355f4d7/crates/bevy_render/src/extract_resource.rs#L45
    - Fix it
    
    ## Solution
    
    - Gate the import

[33mcommit 814f8d1635587ad26d9e1e6e08e7d63b4355f4d7[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Jul 14 21:17:16 2022 +0000

    update wgpu to 0.13 (#5168)
    
    # Objective
    
    - Update wgpu to 0.13
    - ~~Wait, is wgpu 0.13 released? No, but I had most of the changes already ready since playing with webgpu~~ well it has been released now
    - Also update parking_lot to 0.12 and naga to 0.9
    
    ## Solution
    
    - Update syntax for wgsl shaders https://github.com/gfx-rs/wgpu/blob/master/CHANGELOG.md#wgsl-syntax
    - Add a few options, remove some references: https://github.com/gfx-rs/wgpu/blob/master/CHANGELOG.md#other-breaking-changes
    - fragment inputs should now exactly match vertex outputs for locations, so I added exports for those to be able to reuse them https://github.com/gfx-rs/wgpu/pull/2704

[33mcommit c43295af80bb3a7e9b455500d76d13454a037ca0[m
Author: JoJoJet <joe102000@gmail.com>
Date:   Thu Jul 14 18:23:01 2022 +0000

    Simplify design for `*Label`s (#4957)
    
    # Objective
    
    - Closes #4954
    - Reduce the complexity of the `{System, App, *}Label` APIs.
    
    ## Solution
    
    For the sake of brevity I will only refer to `SystemLabel`, but everything applies to all of the other label types as well.
    
    - Add `SystemLabelId`, a lightweight, `copy` struct.
    - Convert custom types into `SystemLabelId` using the trait `SystemLabel`.
    
    ## Changelog
    
    - String literals implement `SystemLabel` for now, but this should be changed with #4409 .
    
    ## Migration Guide
    
    - Any previous use of `Box<dyn SystemLabel>` should be replaced with `SystemLabelId`.
    - `AsSystemLabel` trait has been modified.
        - No more output generics.
        - Method `as_system_label` now returns `SystemLabelId`, removing an unnecessary level of indirection.
    - If you *need* a label that is determined at runtime, you can use `Box::leak`. Not recommended.
    
    ## Questions for later
    
    * Should we generate a `Debug` impl along with `#[derive(*Label)]`?
    * Should we rename `as_str()`?
    * Should we remove the extra derives (such as `Hash`) from builtin `*Label` types?
    * Should we automatically derive types like `Clone, Copy, PartialEq, Eq`?
    * More-ergonomic comparisons between `Label` and `LabelId`.
    * Move `Dyn{Eq, Hash,Clone}` somewhere else.
    * Some API to make interning dynamic labels easier.
    * Optimize string representation
        * Empty string for unit structs -- no debug info but faster comparisons
        * Don't show enum types -- same tradeoffs as asbove.

[33mcommit 234e5af8828007e1fd16f03b02a440daccd75b08[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Thu Jul 14 17:26:40 2022 +0000

    Implement `From<bool>` for `ShouldRun`. (#5306)
    
    Make writing simple yes/no run criteria easier.
    
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 847f47d8d4c9c2acc80553b8a593c92f5a548bfc[m
Author: Ben Reeves <benwolverine2019@gmail.com>
Date:   Thu Jul 14 17:00:01 2022 +0000

    Remove `rand` crate from dependency tree (#3992)
    
    This replaces `rand` with `fastrand` as the source of randomness for `HandleId::new()` in `bevy_asset`. This was the only crate with a dependency on `rand`, and now the dependency exists only as a dev-dependency.
    
    `fastrand` was already in the dependency tree, thanks to `futures-lite`, `async-executor`, and `tempfile` to name a few.
    
    ## Changelog
    
    Removed `rand` from dependencies in `bevy_asset` in favor of existing in-tree `fast-rand`

[33mcommit dc3b4b6c850898c922dff9fd6d312823e07096f1[m
Author: FÃ©lix Lescaudey de Maneville <felix.maneville@gmail.com>
Date:   Thu Jul 14 11:03:13 2022 +0000

    Added colors to sprite stress test (#5317)
    
    # Objective
    
    Allow better performance testing for https://github.com/bevyengine/bevy/pull/5247
    
    
    ## Solution
    
    I added color tints to the `many_sprites` example stress test.

[33mcommit fe59fe5860a1524801f9f2895204d7bb6e09513a[m
Author: Daniel Liu <daniel@karatsubalabs.com>
Date:   Thu Jul 14 01:12:15 2022 +0000

    Add `assert_is_exclusive_system` function (#5275)
    
    Add compile time check for if a system is an exclusive system. Resolves #4788
    
    Co-authored-by: Daniel Liu <mr.picklepinosaur@gmail.com>
    Co-authored-by: Daniel Liu <danieliu3120@gmail.com>

[33mcommit b3d15153f3e913e7aef1518829c92da7ac2487c1[m
Author: Troels Jessen <trojes@tuta.io>
Date:   Wed Jul 13 19:13:46 2022 +0000

    Added performance warning when running stress test examples in debug mode (#5029)
    
    # Objective
    
    Fixes #5028
    
    ## Solution
    Used #[cfg(debug_assertions)] to display a warning when running examples under stress_tests in debug mode

[33mcommit 6c06fc5b7c5b9b3c34abfbacc73d3aae795a5bab[m
Author: Nicola Papale <nico@nicopap.ch>
Date:   Wed Jul 13 16:08:48 2022 +0000

    Add ExactSizeIterator implementation for QueryCombinatonIter (#5148)
    
    Following https://github.com/bevyengine/bevy/pull/5124 I decided to add the `ExactSizeIterator` impl for `QueryCombinationIter`.
    
    Also:
    - Clean up the tests for `size_hint` and `len` for both the normal `QueryIter` and `QueryCombinationIter`.
    - Add tests to `QueryCombinationIter` when it shouldn't be `ExactSizeIterator`
    
    ---
    
    ## Changelog
    
    - Added `ExactSizeIterator` implementation for `QueryCombinatonIter`

[33mcommit 1dbb1f7b2016e37d64d1070b3f0421b62ecc9e8a[m
Author: harudagondi <giogdeasis@gmail.com>
Date:   Wed Jul 13 15:37:27 2022 +0000

    Allow iter combinations on custom world queries (#5286)
    
    # Objective
    
    - `.iter_combinations_*()` cannot be used on custom derived `WorldQuery`, so this fixes that
    - Fixes #5284
    
    ## Solution
    
    - `#[derive(Clone)]` on the `Fetch` of the proc macro derive.
    - `#[derive(Clone)]` for `AnyOf` to satisfy tests.

[33mcommit 56d69c14277925c283ac82c666095514311496d1[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Wed Jul 13 15:10:43 2022 +0000

    Fix incorrect rotation in `Transform::rotate_around`. (#5300)
    
    Someone noted that the `rotate_around` method did not give the results they expected: [discord thread](https://discord.com/channels/691052431525675048/996497295325544479)
    I tested `rotate_around` and their workaround and it seems like it was indeed incorrect.
    
    Here is a scene with some cubes at different angles all being rotated around the center on the Y axis.
    
    https://user-images.githubusercontent.com/29694403/178598432-407d7e80-1caf-4b17-b69b-66d9156c81e1.mp4
    
    Interestingly, the middle cube rotates as you might expect. This threw me for a bit of a loop before I added the other cubes to the test haha.
    
    Here is the same scene with the order multiplication of the quaternions flipped in `rotate_around`.
    
    https://user-images.githubusercontent.com/29694403/178598446-a98026f3-524c-448b-8437-4d0d3175c6ca.mp4
    
    That looks better :)
    
    ## Changelog
    
    * Fixed `rotate_around` rotating the wrong way around
    * Added `translate_around`. - Split out the translation code from `rotate_around`.
    * Simplified/optimized `rotate_local_*` methods. - Yep, That works somehow.
    
    <sup>Quaternions sure are wacky. Do not ask me how this works exactly, haha.</sup>
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 2f9a886c55d4cf8e82d27b45a2ad97087675f738[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Wed Jul 13 15:10:41 2022 +0000

    Implement `Debug` for `Gamepads` (#5291)
    
    Generally a good idea.
    
    I ran into this because I wanted to store `Gamepads` in a wrapper struct in https://github.com/Leafwing-Studios/leafwing-input-manager/pull/168.
    
    This PR allows the `Debug` derive used there to continue working. I could workaround this with a custom impl, but a PR upstream seemed like the right fix.

[33mcommit bb9706c96f5edc536bd7148f869615350ac13c8a[m
Author: JoJoJet <joe102000@gmail.com>
Date:   Wed Jul 13 14:40:52 2022 +0000

    Document exotic patterns for `Command`s and `Event`s (#4840)
    
    # Objective
    
    Improve documentation, information users of the limitations in bevy's idiomatic patterns, and suggesting alternatives for when those limitations are encountered.
    
    ## Solution
    
    * Add documentation to `Commands` informing the user of the option of writing one-shot commands with closures.
    * Add documentation to `EventWriter` regarding the limitations of event types, and suggesting alternatives using commands.

[33mcommit 052de08e56ab5dcc89e9afc43dbf149c1954f19b[m
Author: Francesco Giordana <fra.giordana@gmail.com>
Date:   Wed Jul 13 11:31:18 2022 +0000

    Enable loading textures of unlimited size (#5305)
    
    # Objective
    
    Fixes #5304
    
    ## Solution
    
    Instead of using a simple utility function for loading, which uses a default allocation limit of 512MB, we use a Reader object which can be configured ad hoc.
    
    ## Changelog
    
    > This section is optional. If this was a trivial fix, or has no externally-visible impact, you can delete this section.
    
    - Allows loading of textures larger than 512MB

[33mcommit de484c1e4147d01bf34c88a10797b75128a0d98a[m
Author: Charles <c.giguere42@gmail.com>
Date:   Wed Jul 13 04:53:50 2022 +0000

    fix extract_wireframes (#5301)
    
    # Objective
    
    - Wireframes are currently not rendering on main because they aren't being extracted correctly
    
    ## Solution
    
    - Extract the wireframes correctly

[33mcommit df7736c572d435b4220a90955dd308adbb28726f[m
Author: Nicola Papale <nico@nicopap.ch>
Date:   Tue Jul 12 18:57:19 2022 +0000

    Alias world_to_viewport for easier migration (#5298)
    
    # Objective
    
    When someone searches in rustdoc for `world_to_screen`, they now will
    find `world_to_viewport`. The method was renamed in 0.8, it would be
    nice to allow users to find the new name more easily.
    
    ---

[33mcommit f9c1a8a3d5ebe737f78bdc562b6cfc8725cfce07[m
Author: Mark Nokalt <marknokalt@live.com>
Date:   Tue Jul 12 15:44:09 2022 +0000

    docs: Full documentation for bevy_asset (#3536)
    
    # Objective
    
    This PR aims to document the `bevy_asset` crate to complete coverage, while also trying to improve some bits of UX.
    
    ### Progress
    
    - [x] Root items
    - [x] `handle` module
    - [x] `info` module
    - [x] `path` module
    - [x] `loader` module
    - [x] `io` and `filesystem_watcher` module
    - [x] `assets` module
    - [x] `asset_server` module
    - [x] `diagnostic` module
    - [x] `debug_asset_server` module
    - [x] Crate level documentation
    - [x] Add `#![warn(missing_docs)]` lint
    
    Coverage: 100%
    
    ## Migration Guide
    
    - Rename `FileAssetIo::get_root_path` uses to `FileAssetIo::get_base_path`
    
        `FileAssetIo::root_path()` is a getter for the `root_path` field, while `FileAssetIo::get_root_path` returned the parent directory of the asset root path, which was the executable's directory unless `CARGO_MANIFEST_DIR` was set. This change solves the ambiguity between the two methods.

[33mcommit 93a131661de507eb711264b11965fe1d4bb13f12[m
Author: CGMossa <cgmossa@gmail.com>
Date:   Tue Jul 12 13:06:16 2022 +0000

    Very minor doc formatting changes (#5287)
    
    # Objective
    
    - Added a bunch of backticks to things that should have them, like equations, abstract variable names,
    - Changed all small x, y, and z to capitals X, Y, Z.
    
    This might be more annoying than helpful; Feel free to refuse this PR.

[33mcommit a1d3f1b3b42c3a6e05a532362ddfccf0be6b5df3[m
Author: Mike <mike.hsu@gmail.com>
Date:   Mon Jul 11 23:19:00 2022 +0000

    Update time by sending frame instant through a channel (#4744)
    
    # Objective
    
    - The time update is currently done in the wrong part of the schedule. For a single frame the current order of things is update input, update time (First stage), other stages, render stage (frame presentation). So when we update the time it includes the input processing of the current frame and the frame presentation of the previous frame. This is a problem when vsync is on. When input processing takes a longer amount of time for a frame, the vsync wait time gets shorter. So when these are not paired correctly we can potentially have a long input processing time added to the normal vsync wait time in the previous frame. This leads to inaccurate frame time reporting and more variance of the time than actually exists. For more details of why this is an issue see the linked issue below.
    - Helps with https://github.com/bevyengine/bevy/issues/4669
    - Supercedes https://github.com/bevyengine/bevy/pull/4728 and https://github.com/bevyengine/bevy/pull/4735. This PR should be less controversial than those because it doesn't add to the API surface.
    
    ## Solution
    
    - The most accurate frame time would come from hardware. We currently don't have access to that for multiple reasons, so the next best thing we can do is measure the frame time as close to frame presentation as possible. This PR gets the Instant::now() for the time immediately after frame presentation in the render system and then sends that time to the app world through a channel.
    - implements suggestion from @aevyrie from here https://github.com/bevyengine/bevy/pull/4728#discussion_r872010606
    
    ## Statistics
    
    ![image](https://user-images.githubusercontent.com/2180432/168410265-f249f66e-ea9d-45d1-b3d8-7207a7bc536c.png)
    
    
    ---
    
    ## Changelog
    
    - Make frame time reporting more accurate.
    
    ## Migration Guide
    
    `time.delta()` now reports zero for 2 frames on startup instead of 1 frame.

[33mcommit 4847f7e3adc835053a8907dd578c342b4bd395e2[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Mon Jul 11 15:28:50 2022 +0000

    Update codebase to use `IntoIterator` where possible. (#5269)
    
    Remove unnecessary calls to `iter()`/`iter_mut()`.
    Mainly updates the use of queries in our code, docs, and examples.
    
    ```rust
    // From
    for _ in list.iter() {
    for _ in list.iter_mut() {
    
    // To
    for _ in &list {
    for _ in &mut list {
    ```
    
    We already enable the pedantic lint [clippy::explicit_iter_loop](https://rust-lang.github.io/rust-clippy/stable/) inside of Bevy. However, this only warns for a few known types from the standard library.
    
    ## Note for reviewers
    As you can see the additions and deletions are exactly equal.
    Maybe give it a quick skim to check I didn't sneak in a crypto miner, but you don't have to torture yourself by reading every line.
    I already experienced enough pain making this PR :)
    
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 3203a8585cd3fdf48cd970d3577b50bf9fb610a8[m
Author: Daniel Liu <daniel@karatsubalabs.com>
Date:   Mon Jul 11 14:36:23 2022 +0000

    Change window position types from tuple to vec (#5276)
    
    Resolves #5004. As suggested in the original issue, change tuple types to their corresponding vector type.
    
    ## migration guide
    
    Changed the following fields
    - `WindowCommand::SetWindowMode.resolution` from `(u32, u32)` to `UVec2`
    - `WindowCommand::SetResolution.logical_resolution` from `(f32, f32)` to `Vec2`
    
    Co-authored-by: Daniel Liu <mr.picklepinosaur@gmail.com>

[33mcommit 2344ada89f45131afa70f0a0e86b96e0699a1dbe[m
Author: Christian Legnitto <christian@legnitto.com>
Date:   Mon Jul 11 14:11:32 2022 +0000

    Rename `headless_defaults` example to `no_renderer` for clarity (#5263)
    
    # Objective
    
    - Reduce confusion as the example opens a window and isn't truly "headless"
    - Fixes https://github.com/bevyengine/bevy/issues/5260.
    
    
    ## Solution
    
    - Rename the example and add to the docs that the window is expected.

[33mcommit 6c2f78f449deecca8f0544507b3952bcc5c2ba91[m
Author: Charles <c.giguere42@gmail.com>
Date:   Mon Jul 11 14:11:31 2022 +0000

    Validate vertex attribute format on insert (#5259)
    
    # Objective
    
    - Validate the format of the values with the expected attribute format.
    - Currently, if you pass the wrong format, it will crash somewhere unrelated with a very cryptic error message, so it's really hard to debug for beginners.
    
    ## Solution
    
    - Compare the format and panic when unexpected format is passed
    
    ## Note
    
    - I used a separate `error!()` for a human friendly message because the panic message is very noisy and hard to parse for beginners. I don't mind changing this to only a panic if people prefer that.
    - This could potentially be something that runs only in debug mode, but I don't think inserting attributes is done often enough for this to be an issue.
    
    
    Co-authored-by: Charles <IceSentry@users.noreply.github.com>

[33mcommit fda1fee1bb76714343385fc45535bf07b4ca9adf[m
Author: Kornel <github@pornel.net>
Date:   Mon Jul 11 14:11:30 2022 +0000

    Use collect to build mesh attributes (#5255)
    
    Small optimization. `.collect()` from arrays generates very nice code without reallocations: https://rust.godbolt.org/z/6E6c595bq
    
    Co-authored-by: Kornel <kornel@geekhood.net>

[33mcommit 8ea4a3decf96121b89dbae5cde61a87884cd5c41[m
Author: Kurt KÃ¼hnert <kurt@kuehnert.dev>
Date:   Mon Jul 11 14:11:29 2022 +0000

    TextureFormat::R16Unorm support for Image (#5249)
    
    # Objective
    
    Currently some TextureFormats are not supported by the Image type.
    The `TextureFormat::R16Unorm` format is useful for storing heightmaps.
    This small change would unblock releasing my terrain plugin on bevy 0.8.
    
    ## Solution
    
    Added `TextureFormat::R16Unorm` support to Image.
    This is an alternative (short term solution) to the large texture format issue https://github.com/bevyengine/bevy/pull/4124.

[33mcommit 81bb4ef30075313ff4b87e2745e3ace64e04bfa9[m
Author: Zicklag <zicklag@katharostech.com>
Date:   Mon Jul 11 14:11:27 2022 +0000

    Document That FloatOrd Implements Hash and Eq Too (#5228)
    
    # Objective
    
    - Slight documentation tweak to make it more clear that `FloatOrd` also implements `Hash` and `Eq`, not just `Ord`.
    - I know that it does show that Hash is implemented in the docs, but I had missed it after reading the description and assuming it didn't do it, so hopefully this helps other people who might miss it like I did. :)
    
    ## Solution
    
    - Just mention in the Hash and Eq implementation in the docstring.

[33mcommit 9b6253b7691b835c05b70c9916f7ec11a4445382[m
Author: fadhliazhari <m.fadhliazhari@gmail.com>
Date:   Mon Jul 11 14:11:26 2022 +0000

    Added multi windows check for bevy_ui `Interaction`. (#5225)
    
    # Objective
    
    - Currently bevy_ui only checks for primary window cursor position to determine `Interaction` behavior.
    - Added checks for focused window where cursor position is available.
    - Fixes #5224.
    
    ## Solution
    
    - Added checks for focused windows in `Interaction` focus system.
    
    ## Follow Up
    
    - All windows with camera will be rendering the UI elements right now.
    - We will need some way to tell which camera to render which UI.
    
    ---
    
    Co-authored-by: fadhliazhari <44402264+fadhliazhari@users.noreply.github.com>

[33mcommit 1fccb99d3aac5674da9e49608a9ff33608990dbc[m
Author: Zicklag <zicklag@katharostech.com>
Date:   Mon Jul 11 14:11:25 2022 +0000

    Improve Gamepad DPad Button Detection (#5220)
    
    # Objective
    
    - Enable the `axis_dpad_to_button` gilrs filter to map hats to dpad buttons on supported remotes.
    - Fixes https://github.com/Leafwing-Studios/leafwing-input-manager/issues/149
    - Might have fixed the confusion related to https://github.com/bevyengine/bevy/issues/3229
    
    ## Solution
    
    - Enables the `axis_dpad_to_button` filter in `gilrs` which will use it's remote mapping information to see if there are hats mapped to dpads for that remote model. I don't really understand the logic it uses exactly, but it is usually enabled by default in gilrs and I believe it probably leads to more intuitive mapping compared to the current situation of dpad buttons being mapped to an axis.
    - Removes the `GamepadAxisType::DPadX` and `GamepadAxisType::DPadY` enum variants to avoid user confusion. Those variants should never be emitted anyway, for all supported remotes.
    
    ---
    
    ## Changelog
    
    ### Changed
    
    - Removed `GamepadAxisType::DPadX` and `GamepadAxisType::DPadY` in favor of using `GamepadButtonType::DPad[Up/Down/Left/Right]` instead.
    
    ## Migration Guide
    
    If your game reads gamepad events or queries the axis state of `GamePadAxisType::DPadX` or `GamePadAxisType::DPadY`, then you must migrate your code to check whether or not the `GamepadButtonType::DPadUp`, `GamepadButtonType::DPadDown`, etc. buttons were pressed instead.

[33mcommit 1da6720132ed9dd29f3321f2d09285f9a68c6dcf[m
Author: Hennadii Chernyshchyk <genaloner@gmail.com>
Date:   Mon Jul 11 14:11:24 2022 +0000

    Add apply_or_insert functions to reflected component and resources (#5201)
    
    # Objective
    
    `ReflectResource` and `ReflectComponent` will panic on `apply` method if there is no such component. It's not very ergonomic. And not very good for performance since I need to check if such component exists first.
    
    ## Solution
    
    * Add `ReflectComponent::apply_or_insert` and `ReflectResource::apply_or_insert` functions.
    * Rename `ReflectComponent::add` into `ReflectComponent::insert` for consistency.
    
    ---
    
    ## Changelog
    
    ### Added
    
    * `ReflectResource::apply_or_insert` and `ReflectComponent::apply_on_insert`.
    
    ### Changed
    
    * Rename `ReflectComponent::add` into `ReflectComponent::insert` for consistency.
    * Use `ReflectComponent::apply_on_insert` in `DynamicScene` instead of manual checking.
    
    ## Migration Guide
    
    * Rename `ReflectComponent::add` into `ReflectComponent::insert`.

[33mcommit 8de03b0839661c24cca19cf2998ad342d13549ae[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Sun Jul 10 21:04:35 2022 +0000

    Extract resources into their target location (#5271)
    
    # Objective
    
    - Extracting resources currently always uses commands, which requires *at least* one additional move of the extracted value, as well as dynamic dispatch.
    - Addresses https://github.com/bevyengine/bevy/pull/4402#discussion_r911634931
    
    ## Solution
    
    - Write the resource into a `ResMut<R>` directly.
    - Fall-back to commands if the resource hasn't been added yet.

[33mcommit 8eb0440f1ed0f075ed488e7efa36ba0f8bb37cad[m
Author: James Liu <contact@jamessliu.com>
Date:   Sun Jul 10 20:29:06 2022 +0000

    Hierarchy commandization (#4197)
    
    ## Objective
    Implement absolute minimum viable product for the changes proposed in bevyengine/rfcs#53.
    
    ## Solution
    
     - Remove public mutative access to `Parent` (Children is already publicly read-only). This includes public construction methods like `Copy`, `Clone`, and `Default`.
     - Remove `PreviousParent`
     - Remove `parent_update_system`
     - Update all hierarchy related commands to immediately update both `Parent` and `Children` references.
    
    ## Remaining TODOs
    
     - [ ] Update documentation for both `Parent` and `Children`. Discourage using `EntityCommands::remove`
     - [x] Add `HierarchyEvent` to notify listeners of hierarchy updates. This is meant to replace listening on `PreviousParent`
    
    ## Followup
    
     - These changes should be best moved to the hooks mentioned in #3742.
     - Backing storage for both might be best moved to indexes mentioned in the same relations.

[33mcommit 518408dfdaa8884ba86a71512de2a7d57848413d[m
Author: Charles <c.giguere42@gmail.com>
Date:   Sat Jul 9 01:05:06 2022 +0000

    Remove spirv-reflect from readme (#5192)
    
    # Objective
    
    - The libraries used section of the README is outdated and is missing a lot of libraries
    - The README isn't really the place for that anyway
    
    ## Solution
    
    - Remove the section

[33mcommit 7b2cf98896387cbe3ecb7fbce64e1fed2a318d76[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Fri Jul 8 23:56:33 2022 +0000

    Make `RenderStage::Extract` run on the render world (#4402)
    
    # Objective
    
    - Currently, the `Extract` `RenderStage` is executed on the main world, with the render world available as a resource.
    - However, when needing access to resources in the render world (e.g. to mutate them), the only way to do so was to get exclusive access to the whole `RenderWorld` resource.
    - This meant that effectively only one extract which wrote to resources could run at a time.
    - We didn't previously make `Extract`ing writing to the world a non-happy path, even though we want to discourage that.
    
    ## Solution
    
    - Move the extract stage to run on the render world.
    - Add the main world as a `MainWorld` resource.
    - Add an `Extract` `SystemParam` as a convenience to access a (read only) `SystemParam` in the main world during `Extract`.
    
    ## Future work
    
    It should be possible to avoid needing to use `get_or_spawn` for the render commands, since now the `Commands`' `Entities` matches up with the world being executed on.
    We need to determine how this interacts with https://github.com/bevyengine/bevy/pull/3519
    It's theoretically possible to remove the need for the `value` method on `Extract`. However, that requires slightly changing the `SystemParam` interface, which would make it more complicated. That would probably mess up the `SystemState` api too.
    
    ## Todo
    I still need to add doc comments to `Extract`.
    
    ---
    
    ## Changelog
    
    ### Changed
    - The `Extract` `RenderStage` now runs on the render world (instead of the main world as before).
       You must use the `Extract` `SystemParam` to access the main world during the extract phase.
       Resources on the render world can now be accessed using `ResMut` during extract.
    
    ### Removed
    - `Commands::spawn_and_forget`. Use `Commands::get_or_spawn(e).insert_bundle(bundle)` instead
    
    ## Migration Guide
    
    The `Extract` `RenderStage` now runs on the render world (instead of the main world as before).
    You must use the `Extract` `SystemParam` to access the main world during the extract phase. `Extract` takes a single type parameter, which is any system parameter (such as `Res`, `Query` etc.). It will extract this from the main world, and returns the result of this extraction when `value` is called on it.
    
    For example, if previously your extract system looked like:
    ```rust
    fn extract_clouds(mut commands: Commands, clouds: Query<Entity, With<Cloud>>) {
        for cloud in clouds.iter() {
            commands.get_or_spawn(cloud).insert(Cloud);
        }
    }
    ```
    the new version would be:
    ```rust
    fn extract_clouds(mut commands: Commands, mut clouds: Extract<Query<Entity, With<Cloud>>>) {
        for cloud in clouds.value().iter() {
            commands.get_or_spawn(cloud).insert(Cloud);
        }
    }
    ```
    The diff is:
    ```diff
    --- a/src/clouds.rs
    +++ b/src/clouds.rs
    @@ -1,5 +1,5 @@
    -fn extract_clouds(mut commands: Commands, clouds: Query<Entity, With<Cloud>>) {
    -    for cloud in clouds.iter() {
    +fn extract_clouds(mut commands: Commands, mut clouds: Extract<Query<Entity, With<Cloud>>>) {
    +    for cloud in clouds.value().iter() {
             commands.get_or_spawn(cloud).insert(Cloud);
         }
     }
    ```
    You can now also access resources from the render world using the normal system parameters during `Extract`:
    ```rust
    fn extract_assets(mut render_assets: ResMut<MyAssets>, source_assets: Extract<Res<MyAssets>>) {
         *render_assets = source_assets.clone();
    }
    ```
    Please note that all existing extract systems need to be updated to match this new style; even if they currently compile they will not run as expected. A warning will be emitted on a best-effort basis if this is not met.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit e6faf993b00c44e50e4c08e0ec3235954bd0c1f6[m
Author: Robin KAY <komadori@gekkou.co.uk>
Date:   Fri Jul 8 21:18:32 2022 +0000

    Add support for removing attributes from meshes. (#5254)
    
    # Objective
    
    Support removing attributes from meshes. For an example use case, meshes created using the bevy::predule::shape types or loaded from external files may have attributes that are not needed for the materials they will be rendered with.
    
    This was extracted from PR #5222.
    
    ## Solution
    
    Implement Mesh::remove_attribute().

[33mcommit 3c51ad27641f23a8bcff77b7c2ab7f253b2af22d[m
Author: Robin KAY <komadori@gekkou.co.uk>
Date:   Fri Jul 8 20:55:08 2022 +0000

    Allow rendering meshes without UV coordinate data. (#5222)
    
    # Objective
    
    Bevy requires meshes to include UV coordinates, even if the material does not use any textures, and will fail with an error `ERROR bevy_pbr::material: Mesh is missing requested attribute: Vertex_Uv (MeshVertexAttributeId(2), pipeline type: Some("bevy_pbr::material::MaterialPipeline<bevy_pbr::pbr_material::StandardMaterial>"))` otherwise. The objective of this PR is to permit this.
    
    ## Solution
    
    This PR follows the design of #4528, which added support for per-vertex colours. It adds a shader define called VERTEX_UVS which indicates the presence of UV coordinates to the shader.

[33mcommit 132950cd5556f537dfcb2c048045b87d7ca95a5c[m
Author: robtfm <50659922+robtfm@users.noreply.github.com>
Date:   Fri Jul 8 19:57:43 2022 +0000

    Spotlights (#4715)
    
    # Objective
    
    add spotlight support
    
    ## Solution / Changelog
    
    - add spotlight angles (inner, outer) to ``PointLight`` struct. emitted light is linearly attenuated from 100% to 0% as angle tends from inner to outer. Direction is taken from the existing transform rotation.
    - add spotlight direction (vec3) and angles (f32,f32) to ``GpuPointLight`` struct (60 bytes -> 80 bytes) in ``pbr/render/lights.rs`` and ``mesh_view_bind_group.wgsl``
    - reduce no-buffer-support max point light count to 204 due to above
    - use spotlight data to attenuate light in ``pbr.wgsl``
    - do additional cluster culling on spotlights to minimise cost in ``assign_lights_to_clusters``
    - changed one of the lights in the lighting demo to a spotlight
    - also added a ``spotlight`` demo - probably not justified but so reviewers can see it more easily
    
    ## notes
    
    increasing the size of the GpuPointLight struct on my machine reduces the FPS of ``many_lights -- sphere`` from ~150fps to 140fps.
    
    i thought this was a reasonable tradeoff, and felt better than handling spotlights separately which is possible but would mean introducing a new bind group, refactoring light-assignment code and adding new spotlight-specific code in pbr.wgsl. the FPS impact for smaller numbers of lights should be very small.
    
    the cluster culling strategy reintroduces the cluster aabb code which was recently removed... sorry. the aabb is used to get a cluster bounding sphere, which can then be tested fairly efficiently using the strategy described at the end of https://bartwronski.com/2017/04/13/cull-that-cone/. this works well with roughly cubic clusters (where the cluster z size is close to the same as x/y size), less well for other cases like single Z slice / tiled forward rendering. In the worst case we will end up just keeping the culling of the equivalent point light.
    
    Co-authored-by: FranÃ§ois <mockersf@gmail.com>

[33mcommit 4c35ecf71f2f254acab1d785f5b0f1d7cc7fd578[m
Author: SuperSamus <40663462+SuperSamus@users.noreply.github.com>
Date:   Fri Jul 8 17:14:34 2022 +0000

    linux_dependencies: fix NixOS (#5251)
    
    I forgot a rec... (and I removed the redundant file name).
    
    # Objective
    
    - Fix the whoopsie from #5086.

[33mcommit 47f19449595e1aa81ee60cffac3812e56e338f4e[m
Author: Mark Schmale <masch@masch.it>
Date:   Fri Jul 8 03:46:50 2022 +0000

    Adds a "Question" link to the new issue selection (#5169)
    
    This gives users a hint to use the GitHub "Discussions" for questions about bevy, instead of filing an issue.
    
    ## Objective
    > Users sometimes file unhelpful issues when asking questions about how to use Bevy.
    
    We should provide a link to the Discussion board in the list of "new Issue" options. This hopefully allows users to better find this option and reduces the number of question-issues.
    
    - fixes #5150
    
    ## Solution
    
    - add a small config.yml that configures the link
    
    Looks like this (currently live on my local fork https://github.com/themasch/bevy/issues/new/choose):
    ![grafik](https://user-images.githubusercontent.com/170171/176940564-cd3a4ad1-731b-4417-95c2-3b5285120c88.png)
    
    ---
    
    ## Open questsions
     - I am unsure about the wording.

[33mcommit 17e87f116fee6f57f2d5faf7aa2c8743744666ef[m
Author: Hennadii Chernyshchyk <genaloner@gmail.com>
Date:   Fri Jul 8 01:14:24 2022 +0000

    Improve EntityMap API (#5231)
    
    # Objective
    
    `EntityMap` lacks documentation, don't have `len()` / `is_empty` and `insert` doesn't work as in the regular HashMap`.
    
    ## Solution
    
    * Add `len()` method.
    * Return previously mapped entity from `insert()` as in the regular `HashMap`.
    * Add documentation.
    
    ---
    
    ## Changelog
    
    * Add `EntityMap::len()`.
    * Return previously mapped entity from `EntityMap::insert()` as in the regular `HashMap`.
    * Add documentation for `EntityMap` methods.

[33mcommit 11c45140237188e80f7a5c32fe53a952c41d784d[m
Author: Tethys Svensson <freaken@freaken.dk>
Date:   Fri Jul 8 01:14:23 2022 +0000

    Move the configuration of the WindowPlugin to a resource (#5227)
    
    # Objective
    
    It is currently hard to configure the `WindowPlugin`, as it is added as part of the `DefaultPlugins`. Ideally this should not be difficult.
    
    ## Solution
    
    Remove the configuration from the plugin itself and put it as a `Resource`, similar to how it is done for almost all other plugins.
    
    ## Migration Guide
    
    If you are currently configuring the behavior of the `WindowPlugin`, by constructing it manually, then you will need to instead create add the `WindowSettings` as a resource.

[33mcommit 6b073ee412a7dc484a991dcf129b4809f210e3da[m
Author: Boutillier <boris.boutillier@gmail.com>
Date:   Fri Jul 8 01:14:22 2022 +0000

    Update shader_material_glsl example to include texture sampling (#5215)
    
    # Objective
    
    Add texture sampling to the GLSL shader example, as naga does not support the commonly used sampler2d type.
    Fixes #5059
    
    ## Solution
    
    - Align the shader_material_glsl example behaviour with the shader_material example,  as the later includes texture sampling.
    - Update the GLSL shader to do texture sampling the way naga supports it, and document the way naga does not support it.
    
    ## Changelog
    
    - The shader_material_glsl example has been updated to demonstrate texture sampling using the GLSL shading language.
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 4ee73ed904f48670a66db2473d4fe9f5fddab890[m
Author: Nicola Papale <nico@nicopap.ch>
Date:   Fri Jul 8 00:59:39 2022 +0000

    Rename CameraUi (#5234)
    
    # Objective
    
    In bevy 0.7, `CameraUi` was a component specifically added to cameras
    that display the UI. Since camera-driven rendering was merged, it
    actually does the opposite! This will make it difficult for current
    users to adapt to 0.8.
    
    ## Solution
    
    To avoid unnecessary confusion, we rename `CameraUi` into
    `UiCameraConfig`.
    
    ---
    
    ## Changelog
    
    - Rename `CameraUi` to `UiCameraConfig`

[33mcommit cf200f09dd7dd359a02f7cc7166b1485df276882[m
Author: Obdzen <obdzen@proton.me>
Date:   Thu Jul 7 15:25:17 2022 +0000

    Fix typo in Word::get_by_id docs (#5246)
    
    I believe this should read `immutable` not `mutable`
    
    
    
    Co-authored-by: Obdzen <108854527+Obdzen@users.noreply.github.com>

[33mcommit bf1ca81779f2101a7c381e58df4df9e789430feb[m
Author: Oliver Pauffley <mrpauffley@gmail.com>
Date:   Wed Jul 6 02:59:51 2022 +0000

    remove component and resource suffixes from reflect structs (#5219)
    
    # Objective
    
    Remove suffixes from reflect component and resource methods to closer match bevy norms.
    
    ## Solution
    
    removed suffixes and also fixed a spelling error
    
    ---

[33mcommit 2db1611775805722e72589b0f482a1c6f23f2dd9[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Wed Jul 6 00:11:24 2022 +0000

    Add troubleshooting command to miri docs (#5116)
    
    # Objective
    
    When `miri` runs in our build system to detect unsoundness, its output can be very unhelpful, as the tests are all run in parallel.
    
    ## Solution
    
    Add a comment documenting the extremely obvious 10/10 command used by @BoxyUwU in #4959.
    
    I've stuck this in the CI file, as it seems like the most obvious place to check when frustrated. I didn't put it  in CONTRIBUTING.md because this is an eldritch abomination and will never be useful to new contributors.

[33mcommit f73987ae84d1e8b03b409a1700fe37e1379aee91[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Jul 5 18:44:54 2022 +0000

    add a more helpful error to help debug panicking command on despawned entity (#5198)
    
    # Objective
    
    - Help users fix issue when their app panic when executing a command on a despawned entity
    
    ## Solution
    
    - Add an error code and a page describing how to debug the issue

[33mcommit 40982cd0a2d73d6f9dd7c10c6b357b01c59234a2[m
Author: Afonso Lage <lage.afonso@gmail.com>
Date:   Tue Jul 5 17:41:54 2022 +0000

    Make reflect_partial_eq return more accurate results (#5210)
    
    # Objective
    
    Closes #5204
    
    ## Solution
    
    - Followed @nicopap suggestion on https://github.com/bevyengine/bevy/pull/4761#discussion_r903982224
    
    ## Changelog
    
    - [x] Updated [struct_trait](https://github.com/bevyengine/bevy/blob/dfe969005264fff54060f9fb148639f80f9cfb29/crates/bevy_reflect/src/struct_trait.rs#L455-L457), [tuple_struct](https://github.com/bevyengine/bevy/blob/dfe969005264fff54060f9fb148639f80f9cfb29/crates/bevy_reflect/src/tuple_struct.rs#L366-L368), [tuple](https://github.com/bevyengine/bevy/blob/dfe969005264fff54060f9fb148639f80f9cfb29/crates/bevy_reflect/src/tuple.rs#L386), [array](https://github.com/bevyengine/bevy/blob/dfe969005264fff54060f9fb148639f80f9cfb29/crates/bevy_reflect/src/array.rs#L335-L337), [list](https://github.com/bevyengine/bevy/blob/dfe969005264fff54060f9fb148639f80f9cfb29/crates/bevy_reflect/src/list.rs#L309-L311) and [map](https://github.com/bevyengine/bevy/blob/dfe969005264fff54060f9fb148639f80f9cfb29/crates/bevy_reflect/src/map.rs#L361-L363) to return `None` when comparison couldn't be performed.
    - [x] Updated docs comments to reflect above changes.

[33mcommit a249e956931413905bef79329d254e2a3f51dc9e[m
Author: Mark Lodato <mlodato517@gmail.com>
Date:   Tue Jul 5 16:59:31 2022 +0000

    Fix small typo in example name (#5217)
    
    **This Commit**
    Renames "Scale Factor Iverride" to
    "Scale Factor Override".
    
    **Why?**
    I imagine the current name is a typo.

[33mcommit faa40bfc8206a6e667d5ed29c3efa3d8f8392693[m
Author: Thierry Berger <contact@thierryberger.com>
Date:   Tue Jul 5 15:49:11 2022 +0000

    Fix markdownlint privileges complaint (#5216)
    
    # Objective
    
    Fixes an annoying error message in CI.
    
    more info at https://github.com/github/super-linter/pull/2464
    
    ![image](https://user-images.githubusercontent.com/2290685/177364755-fe607c9c-615e-477c-8e91-d35aae07ab0b.png)

[33mcommit aa0cd7c7dc04d6babdbed8b75c5eea5d1410d502[m
Author: Tethys Svensson <freaken@freaken.dk>
Date:   Tue Jul 5 14:02:00 2022 +0000

    Make the fields of the Material2dKey public (#5212)
    
    # Objective
    
    Make it easier to create pipelines derived from the `Material2dPipeline`. Currently this is made difficult because the fields of `Material2dKey` are private.
    
    ## Solution
    
    Make the fields public.

[33mcommit 61e5bfb2edce7ae543b044efaef1895e3c2abf31[m
Author: Maksymilian Mozolewski <makspl17@gmail.com>
Date:   Tue Jul 5 13:38:47 2022 +0000

    implement reflection for more glam types (#5194)
    
    # Objective
    
    - To implement `Reflect` for more glam types.
    
    ## Solution
    
    insert `impl_reflect_struct` invocations for more glam types. I am not sure about the boolean vectors, since none of them implement `Serde::Serialize/Deserialize`, and the SIMD versions don't have public fields.
    I do still think implementing reflection is useful for BVec's since then they can be incorporated into `Reflect`'ed components and set dynamically even if as a whole + it's more consistent.
    
    ## Changelog
    Implemented `Reflect` for the following types
     - BVec2
     - BVec3
     - **BVec3A** (on simd supported platforms only)
     - BVec4
     - **BVec4A** (on simd supported platforms only)
     - Mat2
     - Mat3A
     - DMat2
     - Affine2
     - Affine3A
     - DAffine2
     - DAffine3
     - EulerRot

[33mcommit 5b5013d54035da09eebdd365b513486248f6726e[m
Author: Robin KAY <komadori@gekkou.co.uk>
Date:   Tue Jul 5 06:13:39 2022 +0000

    Add ViewRangefinder3d to reduce boilerplate when enqueuing standard 3D PhaseItems. (#5014)
    
    # Objective
    
    Reduce the boilerplate code needed to make draw order sorting work correctly when queuing items through new common functionality. Also fix several instances in the bevy code-base (mostly examples) where this boilerplate appears to be incorrect.
    
    ## Solution
    
    - Moved the logic for handling back-to-front vs front-to-back draw ordering into the PhaseItems by inverting the sort key ordering of Opaque3d and AlphaMask3d. The means that all the standard 3d rendering phases measure distance in the same way. Clients of these structs no longer need to know to negate the distance.
    - Added a new utility struct, ViewRangefinder3d, which encapsulates the maths needed to calculate a "distance" from an ExtractedView and a mesh's transform matrix.
    - Converted all the occurrences of the distance calculations in Bevy and its examples to use ViewRangefinder3d. Several of these occurrences appear to be buggy because they don't invert the view matrix or don't negate the distance where appropriate. This leads me to the view that Bevy should expose a facility to correctly perform this calculation.
    
    ## Migration Guide
    
    Code which creates Opaque3d, AlphaMask3d, or Transparent3d phase items _should_ use ViewRangefinder3d to calculate the distance value.
    
    Code which manually calculated the distance for Opaque3d or AlphaMask3d phase items and correctly negated the z value will no longer depth sort correctly. However, incorrect depth sorting for these types will not impact the rendered output as sorting is only a performance optimisation when drawing with depth-testing enabled. Code which manually calculated the distance for Transparent3d phase items will continue to work as before.

[33mcommit dfe969005264fff54060f9fb148639f80f9cfb29[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Mon Jul 4 17:31:47 2022 +0000

    docs: Add section about using Tracy for profiling (#4534)
    
    # Objective
    
    - Document how to do profiling with Tracy
    
    # Solution
    
    - The documentation of setting `RUST_LOG=info` in order to capture `wgpu` spans depends on https://github.com/bevyengine/bevy/pull/5182

[33mcommit 2c9bc0b31fdd0cb68b187aadc1c17e2e452016cf[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Mon Jul 4 15:12:35 2022 +0000

    Remove dead `SystemLabelMarker` struct (#5190)
    
    This struct had no internal use, docs, or intuitable external use.
    
    It has been removed.

[33mcommit d38a8dfdd79f6fd8e1e915aa5e2ddb03ffdaa76a[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Mon Jul 4 14:44:24 2022 +0000

    add more `SAFETY` comments and lint for missing ones in `bevy_ecs` (#4835)
    
    # Objective
    
    `SAFETY` comments are meant to be placed before `unsafe` blocks and should contain the reasoning of why in this case the usage of unsafe is okay. This is useful when reading the code because it makes it clear which assumptions are required for safety, and makes it easier to spot possible unsoundness holes. It also forces the code writer to think of something to write and maybe look at the safety contracts of any called unsafe methods again to double-check their correct usage.
    
    There's a clippy lint called `undocumented_unsafe_blocks` which warns when using a block without such a comment.
    
    ## Solution
    
    - since clippy expects `SAFETY` instead of `SAFE`, rename those
    - add `SAFETY` comments in more places
    - for the last remaining 3 places, add an `#[allow()]` and `// TODO` since I wasn't comfortable enough with the code to justify their safety
    - add ` #![warn(clippy::undocumented_unsafe_blocks)]` to `bevy_ecs`
    
    
    ### Note for reviewers
    
    The first commit only renames `SAFETY` to `SAFE` so it doesn't need a thorough review.
    https://github.com/bevyengine/bevy/pull/4835/files/cb042a416ecbe5e7d74797449969e064d8a5f13c..55cef2d6fa3aa634667a60f6d5abc16f43f16298 is the diff for all other changes.
    
    ### Safety comments where I'm not too familiar with the code
    
    https://github.com/bevyengine/bevy/blob/774012ece50e4add4fcc8324ec48bbecf5546c3c/crates/bevy_ecs/src/entity/mod.rs#L540-L546
    
    https://github.com/bevyengine/bevy/blob/774012ece50e4add4fcc8324ec48bbecf5546c3c/crates/bevy_ecs/src/world/entity_ref.rs#L249-L252
    
    ### Locations left undocumented with a `TODO` comment
    
    https://github.com/bevyengine/bevy/blob/5dde944a3051426ac69fdedc5699f7da97a7e147/crates/bevy_ecs/src/schedule/executor_parallel.rs#L196-L199
    
    https://github.com/bevyengine/bevy/blob/5dde944a3051426ac69fdedc5699f7da97a7e147/crates/bevy_ecs/src/world/entity_ref.rs#L287-L289
    
    https://github.com/bevyengine/bevy/blob/5dde944a3051426ac69fdedc5699f7da97a7e147/crates/bevy_ecs/src/world/entity_ref.rs#L413-L415
    
    Co-authored-by: Jakob Hellermann <hellermann@sipgate.de>

[33mcommit 4d05eb19be6e86c0872886b3e319f86a11bf9a07[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Mon Jul 4 14:17:46 2022 +0000

    bevy_reflect: remove `glam` from a test which is active without the glam feature (#5195)
    
    # Objective
    
    `glam` is an optional feature in `bevy_reflect` and there is a separate `mod test { #[cfg(feature = "glam")] mod glam { .. }}`.
    The `reflect_downcast` test is not in that module and doesn't depend on glam, which breaks `cargo test -p bevy_reflect` without the `glam` feature.
    
    ## Solution
    
    - Remove the glam types from the test, they're not relevant to it

[33mcommit 179f7195530fbacca8250356b523a531366bdda7[m
Author: ShadowCurse <shadowcurse57@gmail.com>
Date:   Mon Jul 4 14:17:45 2022 +0000

    ECS benchmarks organization (#5189)
    
    ## Objective
    
    Fixes: #5110
    
    ## Solution
    
    - Moved benches into separate modules according to the part of ECS they are testing.
    - Made so all ECS benches are included in one `benches.rs` so they donât need to be added separately in `Cargo.toml`.
    - Renamed a bunch of files to have more coherent names.
    - Merged `schedule.rs` and `system_schedule.rs` into one file.

[33mcommit 050251da5a11c33e907fd6951deb8eb16607cf8e[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Mon Jul 4 13:04:21 2022 +0000

    Add standard Bevy boilerplate to README.md (#5191)
    
    @BoxyUwU says that she always looks for this here, following the example of [tetra](https://github.com/17cupsofcoffee/tetra).
    
    I think this is a pretty sensible idea!

[33mcommit 534cad611dc1fff3476be661196b2a0d599e9832[m
Author: Hennadii Chernyshchyk <genaloner@gmail.com>
Date:   Mon Jul 4 13:04:20 2022 +0000

    Add reflection for resources (#5175)
    
    # Objective
    
    We don't have reflection for resources.
    
    ## Solution
    
    Introduce reflection for resources.
    
    Continues #3580 (by @Davier), related to #3576.
    
    ---
    
    ## Changelog
    
    ### Added
    
    * Reflection on a resource type (by adding `ReflectResource`):
    
    ```rust
    #[derive(Reflect)]
    #[reflect(Resource)]
    struct MyResourse;
    ```
    
    ### Changed
    
    * Rename `ReflectComponent::add_component` into `ReflectComponent::insert_component` for consistency.
    
    ## Migration Guide
    
    * Rename `ReflectComponent::add_component` into `ReflectComponent::insert_component`.

[33mcommit 5498ef81fbca2e19271f635df588a2717abb7439[m
Author: James Liu <bricedavier@gmail.com>
Date:   Mon Jul 4 13:04:19 2022 +0000

    bevy_reflect: support map insertion  (#5173)
    
    # Objective
    
    This is a rebase of #3701 which is currently scheduled for 0.8 but is marked for adoption.
    
    > Fixes https://github.com/bevyengine/bevy/discussions/3609
    
    ## Solution
    > - add an `insert_boxed()` method on the `Map` trait
    > - implement it for `HashMap` using a new `FromReflect` generic bound
    > - add a `map_apply()` helper method to implement `Map::apply()`, that inserts new values instead of ignoring them
    
    
    ---
    
    ## Changelog
    TODO
    
    Co-authored-by: james7132 <contact@jamessliu.com>

[33mcommit e64efd399ee311869b54e8f5594ca098d0cf78cd[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Mon Jul 4 13:04:18 2022 +0000

    Remove the dependency cycles (#5171)
    
    # Objective
    
    - I think our codebase is hit badly by rust-lang/rust-analyzer#11410
    - None of our uses of cyclic dependencies are remotely necessary
    - Note that these are false positives in rust-analyzer, however it's probably easier for us to work around this
    - Note also that I haven't confirmed that this is causing rust-analyzer to not work very well, but it's not a bad guess.
    
    ## Solution
    
    - Remove our cyclic dependencies
    - Import the trick from #2851 for no-op plugin groups.

[33mcommit 3a102e7dc20e442e8f8dd96bc92b040f0a6f0e6d[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Mon Jul 4 13:04:17 2022 +0000

    Add Events to `bevy_ecs` prelude (#5159)
    
    # Objective
    
    This is a common and useful type. I frequently use this when working with `Events` resource directly, typically when caching the data or manipulating the `World` directly.
    
    This is also useful when manually configuring the cleanup strategy for events.

[33mcommit 5d3fa5e77b5fe937b9f21c3b991d71fe896f37fc[m
Author: Elijah <elijaharita@gmail.com>
Date:   Mon Jul 4 21:04:16 2022 +0800

    Add `inverse_projection` and `inverse_view_proj` fields to shader view uniform (#5119)
    
    # Objective
    
    Transform screen-space coordinates into world space in shaders. (My use case is for generating rays for ray tracing with the same perspective as the 3d camera).
    
    ## Solution
    
    Add `inverse_projection` and `inverse_view_proj` fields to shader view uniform
    
    ---
    
    ## Changelog
    
    ### Added
    `inverse_projection` and `inverse_view_proj` fields to shader view uniform
    
    ## Note
    
    It'd probably be good to double-check that I did the matrix multiplication in the right order for `inverse_proj_view`. Thanks!

[33mcommit 46f541160534152e2adcfcbe3c5d556f377d8e55[m
Author: James O'Brien <james.obrien@drafly.net>
Date:   Mon Jul 4 13:04:15 2022 +0000

    Add TextureAtlas stress test based on many_sprites and sprite_sheet examples (#5087)
    
    # Objective
    
    Intended to close #5073
    
    ## Solution
    
    Adds a stress test that use TextureAtlas based on the existing many_sprites test using the animated sprite implementation from the sprite_sheet example.
    
    In order to satisfy the goals described in #5073 the animations are all slightly offset.
    
    Of note is that the original stress test was designed to test fullstrum culling. I kept this test similar as to facilitate easy comparisons between the use of TextureAtlas and without.

[33mcommit 49da4e741d21e07c263366d9fac5f468230c7f05[m
Author: LoipesMas <46327403+LoipesMas@users.noreply.github.com>
Date:   Mon Jul 4 13:04:14 2022 +0000

    Add option to center a window (#4999)
    
    # Objective
    - Fixes #4993
    
    ## Solution
    
    - ~~Add `centered` property to `WindowDescriptor`~~
    - Add `WindowPosition` enum
    - `WindowDescriptor.position` is now `WindowPosition` instead of `Option<Vec2>`
    - Add `center_window` function to `Window`
    
    ## Migration Guide
    - If using `WindowDescriptor`, replace `position: None` with `position: WindowPosition::Default` and `position: Some(vec2)`  with `WindowPosition::At(vec2)`.
    
    I'm not sure if this is the best approach, so feel free to give any feedback.
    Also I'm not sure how `Option`s should be handled in `bevy_winit/src/lib.rs:161`.
    
    Also, on window creation we can't (or at least I couldn't) get `outer_size`, so this doesn't include decorations in calculations.

[33mcommit c0f807ce38919b116c38ddfbbb70448e2d9341ac[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Jul 4 13:04:13 2022 +0000

    Bump peter-evans/create-pull-request from 3 to 4 (#4940)
    
    Bumps [peter-evans/create-pull-request](https://github.com/peter-evans/create-pull-request) from 3 to 4.
    <details>
    <summary>Release notes</summary>
    <p><em>Sourced from <a href="https://github.com/peter-evans/create-pull-request/releases">peter-evans/create-pull-request's releases</a>.</em></p>
    <blockquote>
    <h2>Create Pull Request v4.0.0</h2>
    <h2>Breaking changes</h2>
    <ul>
    <li>The <code>add-paths</code> input no longer accepts <code>-A</code> as a valid value. When committing all new and modified files the <code>add-paths</code> input should be omitted.</li>
    <li>If using self-hosted runners or GitHub Enterprise Server, there are minimum requirements for <code>v4</code> to run. See &quot;What's new&quot; below for details.</li>
    </ul>
    <h2>What's new</h2>
    <ul>
    <li>Updated runtime to Node.js 16
    <ul>
    <li>The action now requires a minimum version of v2.285.0 for the <a href="https://github.com/actions/runner/releases/tag/v2.285.0">Actions Runner</a>.</li>
    <li>If using GitHub Enterprise Server, the action requires <a href="https://docs.github.com/en/enterprise-server@3.4/admin/release-notes">GHES 3.4</a> or later.</li>
    </ul>
    </li>
    </ul>
    <h2>What's Changed</h2>
    <ul>
    <li>README.md: Add word &quot;permissions&quot; to part on GITHUB_TOKEN by <a href="https://github.com/hartwork"><code>@âhartwork</code></a> in <a href="https://github-redirect.dependabot.com/peter-evans/create-pull-request/pull/1082">peter-evans/create-pull-request#1082</a></li>
    <li>docs: Document how to improve close-and-reopen user experience by <a href="https://github.com/hartwork"><code>@âhartwork</code></a> in <a href="https://github-redirect.dependabot.com/peter-evans/create-pull-request/pull/1084">peter-evans/create-pull-request#1084</a></li>
    <li>README.md: Skip follow-up steps if there is no pull request by <a href="https://github.com/hartwork"><code>@âhartwork</code></a> in <a href="https://github-redirect.dependabot.com/peter-evans/create-pull-request/pull/1083">peter-evans/create-pull-request#1083</a></li>
    <li>v4 by <a href="https://github.com/peter-evans"><code>@âpeter-evans</code></a> in <a href="https://github-redirect.dependabot.com/peter-evans/create-pull-request/pull/1099">peter-evans/create-pull-request#1099</a></li>
    </ul>
    <h2>New Contributors</h2>
    <ul>
    <li><a href="https://github.com/hartwork"><code>@âhartwork</code></a> made their first contribution in <a href="https://github-redirect.dependabot.com/peter-evans/create-pull-request/pull/1082">peter-evans/create-pull-request#1082</a></li>
    </ul>
    <p><strong>Full Changelog</strong>: <a href="https://github.com/peter-evans/create-pull-request/compare/v3.14.0...v4.0.0">https://github.com/peter-evans/create-pull-request/compare/v3.14.0...v4.0.0</a></p>
    <h2>Create Pull Request v3.14.0</h2>
    <p>This release reverts a commit made to bump the runtime to node 16. It inadvertently caused <a href="https://github-redirect.dependabot.com/peter-evans/create-pull-request/issues/1077">an issue</a> for users on GitHub Enterprise. Apologies. ðââï¸</p>
    <h2>What's Changed</h2>
    <ul>
    <li>feat: revert update action runtime to node 16 by <a href="https://github.com/peter-evans"><code>@âpeter-evans</code></a> <a href="https://github.com/peter-evans/create-pull-request/commit/18f7dc018cc2cd597073088f7c7591b9d1c02672">https://github.com/peter-evans/create-pull-request/commit/18f7dc018cc2cd597073088f7c7591b9d1c02672</a></li>
    </ul>
    <p><strong>Full Changelog</strong>: <a href="https://github.com/peter-evans/create-pull-request/compare/v3.13.0...v3.14.0">https://github.com/peter-evans/create-pull-request/compare/v3.13.0...v3.14.0</a></p>
    <h2>Create Pull Request v3.13.0</h2>
    <h2>What's Changed</h2>
    <ul>
    <li>Document that draft status changes are not reflected by <a href="https://github.com/willthames"><code>@âwillthames</code></a> in <a href="https://github-redirect.dependabot.com/peter-evans/create-pull-request/pull/1064">peter-evans/create-pull-request#1064</a></li>
    <li>fix: remove unused draft param from pull update by <a href="https://github.com/peter-evans"><code>@âpeter-evans</code></a> in <a href="https://github-redirect.dependabot.com/peter-evans/create-pull-request/pull/1065">peter-evans/create-pull-request#1065</a></li>
    <li>Update action runtime to node 16 by <a href="https://github.com/sibiraj-s"><code>@âsibiraj-s</code></a> in <a href="https://github-redirect.dependabot.com/peter-evans/create-pull-request/pull/1074">peter-evans/create-pull-request#1074</a></li>
    </ul>
    <h2>New Contributors</h2>
    <ul>
    <li><a href="https://github.com/willthames"><code>@âwillthames</code></a> made their first contribution in <a href="https://github-redirect.dependabot.com/peter-evans/create-pull-request/pull/1064">peter-evans/create-pull-request#1064</a></li>
    <li><a href="https://github.com/sibiraj-s"><code>@âsibiraj-s</code></a> made their first contribution in <a href="https://github-redirect.dependabot.com/peter-evans/create-pull-request/pull/1074">peter-evans/create-pull-request#1074</a></li>
    </ul>
    <p><strong>Full Changelog</strong>: <a href="https://github.com/peter-evans/create-pull-request/compare/v3.12.1...v3.13.0">https://github.com/peter-evans/create-pull-request/compare/v3.12.1...v3.13.0</a></p>
    <h2>Create Pull Request v3.12.1</h2>
    <h2>What's Changed</h2>
    <ul>
    <li>ci: remove workflow by <a href="https://github.com/peter-evans"><code>@âpeter-evans</code></a> in <a href="https://github-redirect.dependabot.com/peter-evans/create-pull-request/pull/1046">peter-evans/create-pull-request#1046</a></li>
    <li>fix: add '--' to checkout command to avoid ambiguity by <a href="https://github.com/kenji-miyake"><code>@âkenji-miyake</code></a> in <a href="https://github-redirect.dependabot.com/peter-evans/create-pull-request/pull/1051">peter-evans/create-pull-request#1051</a></li>
    </ul>
    <h2>New Contributors</h2>
    <ul>
    <li><a href="https://github.com/kenji-miyake"><code>@âkenji-miyake</code></a> made their first contribution in <a href="https://github-redirect.dependabot.com/peter-evans/create-pull-request/pull/1051">peter-evans/create-pull-request#1051</a></li>
    </ul>
    <!-- raw HTML omitted -->
    </blockquote>
    <p>... (truncated)</p>
    </details>
    <details>
    <summary>Commits</summary>
    <ul>
    <li><a href="https://github.com/peter-evans/create-pull-request/commit/923ad837f191474af6b1721408744feb989a4c27"><code>923ad83</code></a> force tryFetch (<a href="https://github-redirect.dependabot.com/peter-evans/create-pull-request/issues/1189">#1189</a>)</li>
    <li><a href="https://github.com/peter-evans/create-pull-request/commit/f094b77505fb89581e68a1163fbd2fffece39da1"><code>f094b77</code></a> fix: avoid issue with case sensitivity of repo names (<a href="https://github-redirect.dependabot.com/peter-evans/create-pull-request/issues/1179">#1179</a>)</li>
    <li><a href="https://github.com/peter-evans/create-pull-request/commit/af7c021bb9c41362d0986422bd244ce51a3bf52f"><code>af7c021</code></a> docs: shorten quote</li>
    <li><a href="https://github.com/peter-evans/create-pull-request/commit/97872c48431b7ab039b31e504f8e0f73b5005127"><code>97872c4</code></a> docs: update GA quote/ref in concepts-guidelines.md (<a href="https://github-redirect.dependabot.com/peter-evans/create-pull-request/issues/1169">#1169</a>)</li>
    <li><a href="https://github.com/peter-evans/create-pull-request/commit/bd72e1b7922d417764d27d30768117ad7da78a0e"><code>bd72e1b</code></a> fix: use full name for head branch to allow for repo renaming (<a href="https://github-redirect.dependabot.com/peter-evans/create-pull-request/issues/1164">#1164</a>)</li>
    <li><a href="https://github.com/peter-evans/create-pull-request/commit/f1a7646cead32c950d90344a4fb5d4e926972a8f"><code>f1a7646</code></a> build: update distribution (<a href="https://github-redirect.dependabot.com/peter-evans/create-pull-request/issues/1157">#1157</a>)</li>
    <li><a href="https://github.com/peter-evans/create-pull-request/commit/15b68d176daae473d63f8e6dc64a3eb891e4239a"><code>15b68d1</code></a> fix: strip optional '.git' suffix from https server remote name. (<a href="https://github-redirect.dependabot.com/peter-evans/create-pull-request/issues/1153">#1153</a>)</li>
    <li><a href="https://github.com/peter-evans/create-pull-request/commit/0dfc93c1049996241252d9dc45a270b7c12dec6b"><code>0dfc93c</code></a> build(deps): bump peter-evans/create-pull-request from 3 to 4 (<a href="https://github-redirect.dependabot.com/peter-evans/create-pull-request/issues/1150">#1150</a>)</li>
    <li><a href="https://github.com/peter-evans/create-pull-request/commit/252fb19db2e7e1916698d4cfffd2c4509f43a3b2"><code>252fb19</code></a> build(deps): bump peter-evans/slash-command-dispatch from 2 to 3 (<a href="https://github-redirect.dependabot.com/peter-evans/create-pull-request/issues/1122">#1122</a>)</li>
    <li><a href="https://github.com/peter-evans/create-pull-request/commit/4b867c49391bf17f2d6c1cb033cbe9951c57c8c4"><code>4b867c4</code></a> build(deps): bump actions/setup-node from 2 to 3 (<a href="https://github-redirect.dependabot.com/peter-evans/create-pull-request/issues/1123">#1123</a>)</li>
    <li>Additional commits viewable in <a href="https://github.com/peter-evans/create-pull-request/compare/v3...v4">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=peter-evans/create-pull-request&package-manager=github_actions&previous-version=3&new-version=4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit 288765930fe9109395427392024561abee146034[m
Author: Nicola Papale <nico@nicopap.ch>
Date:   Mon Jul 4 12:44:23 2022 +0000

    Rework extract_meshes (#4240)
    
    * Cleanup redundant code
    * Use a type alias to make sure the `caster_query` and
      `not_caster_query` really do the same thing and access the same things
    
    **Objective**
    
    Cleanup code that would otherwise be difficult to understand
    
    **Solution**
    
    * `extract_meshes` had two for loops which are functionally identical,
      just copy-pasted code. I extracted the common code between the two
      and put them into an anonymous function.
    * I flattened the tuple literal for the bundle batch, it looks much
      less nested and the code is much more readable as a result.
    * The parameters of `extract_meshes` were also very daunting, but they
      turned out to be the same query repeated twice. I extracted the query
      into a type alias.
    
    EDIT: I reworked the PR to **not do anything breaking**, and keep the old allocation behavior. Removing the memorized length was clearly a performance loss, so I kept it.

[33mcommit af48c10b3e3e0d4cc02d16f9e1ae40723fefa81f[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Mon Jul 4 09:14:04 2022 +0000

    Enable wgpu profiling spans when using bevy's trace feature (#5182)
    
    # Objective
    
    - Enable `wgpu` profiling spans
    
    ## Solution
    
    - `wgpu` uses the `profiling` crate to add profiling span instrumentation to their code
    - `profiling` offers multiple 'backends' for profiling, including `tracing`
    - When the `bevy` `trace` feature is used, add the `profiling` crate with its `profile-with-tracing` feature to enable appropriate profiling spans in `wgpu` using `tracing` which fits nicely into our infrastructure
    - Bump our default `tracing` subscriber filter to `wgpu=info` from `wgpu=error` so that the profiling spans are not filtered out as they are created at the `info` level.
    
    ---
    
    ## Changelog
    
    - Added: `tracing` profiling support for `wgpu` when using bevy's `trace` feature
    - Changed: The default `tracing` filter statement for `wgpu` has been changed from the `error` level to the `info` level to not filter out the wgpu profiling spans

[33mcommit 72e7358636dec21d8ba33cdb99f23bd7430766c5[m
Author: Elabajaba <Elabajaba@users.noreply.github.com>
Date:   Sun Jul 3 20:17:27 2022 +0000

    Disable Vsync for stress tests. (#5187)
    
    # Objective
    
    Currently stress tests are vsynced. This is undesirable for a stress test, as you want to run them with uncapped framerates.
    
    ## Solution
    
    Ensure all stress tests are using PresentMode::Immediate if they render anything.

[33mcommit 33f9b3940deccac01f9f4cdf7f8acb965ac40a59[m
Author: CGMossa <cgmossa@gmail.com>
Date:   Sun Jul 3 19:55:33 2022 +0000

    Updated `glam` to `0.21`. (#5142)
    
    Removed `const_vec2`/`const_vec3`
    and replaced with equivalent `.from_array`.
    
    # Objective
    
    Fixes #5112
    
    ## Solution
    
    - `encase` needs to update to `glam` as well. See teoxoy/encase#4 on progress on that.
    - `hexasphere` also needs to be updated, see OptimisticPeach/hexasphere#12.

[33mcommit 8f721d8d0ac2e14a46051175f6d3394ed87c7214[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Sat Jul 2 18:30:45 2022 +0000

    Move `get_short_name` utility method from `bevy_reflect` into `bevy_utils` (#5174)
    
    # Summary
    
    This method strips a long type name like `bevy::render::camera::PerspectiveCameraBundle` down into the bare type name (`PerspectiveCameraBundle`). This is generally useful utility method, needed by #4299 and #5121.
    
    As a result:
    
    - This method was moved to `bevy_utils` for easier reuse.
    - The legibility and robustness of this method has been significantly improved.
    - Harder test cases have been added.
    
    This change was split out of #4299 to unblock it and make merging / reviewing the rest of those changes easier.
    
    ## Changelog
    
    - added `bevy_utils::get_short_name`, which strips the path from a type name for convenient display.
    - removed the `TypeRegistry::get_short_name` method. Use the function in `bevy_utils` instead.

[33mcommit de92054bbee3c0902da334b382b3f0fe6d107e48[m
Author: LoipesMas <46327403+LoipesMas@users.noreply.github.com>
Date:   Sat Jul 2 09:49:20 2022 +0000

    Improve Command(s) docs (#4994)
    
    # Objective
    
    - Improve Command(s) docs
    - Fixes #4737
    
    ## Solution
    
    - Update and improve documentation.
    
    ---
    - "list" -> "queue" in `Commands` doc (this better represents reality)
    - expand `Command` doc
    - update/improve `Commands::add` doc, as specified in linked issue
    
    Let me know if you want any changes!

[33mcommit 382cd49c3b3229b732c5325b0fac7c648f7ea7ea[m
Author: Jerome Humbert <djeedai@gmail.com>
Date:   Sat Jul 2 07:00:04 2022 +0000

    Add documentation to `VisibleEntities` and related (#5100)
    
    # Objective
    
    Add missing docs
    
    ## Solution
    
    Add documentation to the `VisibleEntities` component, its related
    `check_visibility()` system, and that system's label.
    
    See Discord discussion here : https://discord.com/channels/691052431525675048/866787577687310356/990432663921901678

[33mcommit 4c5e30a9f83b4d856e58d23a4e89d662abf476ad[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Sat Jul 2 00:55:52 2022 +0000

    Re-enable check-unused-dependencies in CI (#5172)
    
    # Objective
    
    Fixes #5155. This *should* work now that the semver breaking dependency of the CI crate got yanked, but we'll see what CI has to say about it.

[33mcommit a1a07945d63e4130d0ca3c069fbffbd447178f0d[m
Author: Boxy <supbscripter@gmail.com>
Date:   Fri Jul 1 21:54:28 2022 +0000

    fix some memory leaks detected by miri (#4959)
    
    The first leak:
    ```rust
        #[test]
        fn blob_vec_drop_empty_capacity() {
            let item_layout = Layout::new::<Foo>();
            let drop = drop_ptr::<Foo>;
            let _ = unsafe { BlobVec::new(item_layout, Some(drop), 0) };
        }
    ```
    this is because we allocate the swap scratch in blobvec regardless of what the capacity is, but we only deallocate if capacity is > 0
    
    The second leak:
    ```rust
        #[test]
        fn panic_while_overwriting_component() {
            let helper = DropTestHelper::new();
    
            let res = panic::catch_unwind(|| {
                let mut world = World::new();
                world
                    .spawn()
                    .insert(helper.make_component(true, 0))
                    .insert(helper.make_component(false, 1));
    
                println!("Done inserting! Dropping world...");
            });
    
            let drop_log = helper.finish(res);
    
            assert_eq!(
                &*drop_log,
                [
                    DropLogItem::Create(0),
                    DropLogItem::Create(1),
                    DropLogItem::Drop(0),
                ]
            );
        }
    ```
    this is caused by us not running the drop impl on the to-be-inserted component if the drop impl of the overwritten component panics
    
    ---
    
    managed to figure out where the leaks were by using this 10/10 command
    ```
    cargo --quiet test --lib -- --list | sed 's/: test$//' | MIRIFLAGS="-Zmiri-disable-isolation" xargs -n1 cargo miri test --lib -- --exact
    ```
    which runs every test one by one rather than all at once which let miri actually tell me which test had the leak :upside_down_face:

[33mcommit cdbabb70537b9e0f6b9b9b62de240e7ec637cb01[m
Author: SarthakSingh31 <ss269@uw.edu>
Date:   Fri Jul 1 17:03:32 2022 +0000

    Removed world cell from places where split multable access is not needed (#5167)
    
    Fixes #5109.

[33mcommit 49ff42cc699c8aca30b05505f481f718e674aba6[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Fri Jul 1 13:41:23 2022 +0000

    fix new clippy lints (#5160)
    
    # Objective
    
    - Nightly clippy lints should be fixed before they get stable and break CI
    
    ## Solution
    
    - fix new clippy lints
    - ignore `significant_drop_in_scrutinee` since it isn't relevant in our loop https://github.com/rust-lang/rust-clippy/issues/8987
    ```rust
    for line in io::stdin().lines() {
        ...
    }
    ```
    
    Co-authored-by: Jakob Hellermann <hellermann@sipgate.de>

[33mcommit 8ba6be187d9d51d71740fc09c8598afddd3480d1[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Jul 1 13:19:39 2022 +0000

    unpin nightly and disable weak memory emulation (#4988)
    
    # Objective
    
    - Follow suggestion from https://github.com/bevyengine/bevy/pull/4984#issuecomment-1152949640
    
    ## Solution
    
    - Unpin nightly, disable weak memory emulation
    
    ---
    
    This failed the miri job in my branch with the following error:
    ```
    error: Undefined Behavior: attempting a read access using <untagged> at alloc198028[0x0], but that tag does not exist in the borrow stack for this location
       --> /home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.12.0/src/imp_std.rs:177:28
        |
    177 |                 let next = (*waiter).next;
        |                            ^^^^^^^^^^^^^^
        |                            |
        |                            attempting a read access using <untagged> at alloc198028[0x0], but that tag does not exist in the borrow stack for this location
        |                            this error occurs as part of an access at alloc198028[0x0..0x8]
        |
        = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental
        = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information
    ```
    
    @BoxyUwU could you take a look? I guess it's related to the issue mentioned in https://github.com/rust-lang/miri/issues/2223

[33mcommit ea13f0bddf22f7a5739a8efc775b014d6f008ac7[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Fri Jul 1 03:58:54 2022 +0000

    Add helper methods for rotating `Transform`s (#5151)
    
    # Objective
    Users often ask for help with rotations as they struggle with `Quat`s.
    `Quat` is rather complex and has a ton of verbose methods.
    
    ## Solution
    Add rotation helper methods to `Transform`.
    
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 5e1756954f8b0c7f888d06afeda93210d9be71ee[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Fri Jul 1 03:42:15 2022 +0000

    Derive default for enums where possible (#5158)
    
    # Objective
    
    Fixes #5153
    
    ## Solution
    
    Search for all enums and manually check if they have default impls that can use this new derive.
    
    By my reckoning:
    
    | enum | num |
    |-|-|
    | total | 159 |
    | has default impl | 29 |
    | default is unit variant | 23 |

[33mcommit 747b0c69b01bb40cf8050af1af4c60f9149889ea[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 30 23:48:46 2022 +0000

    Better Materials: AsBindGroup trait and derive, simpler Material trait (#5053)
    
    # Objective
    
    This PR reworks Bevy's Material system, making the user experience of defining Materials _much_ nicer. Bevy's previous material system leaves a lot to be desired:
    * Materials require manually implementing the `RenderAsset` trait, which involves manually generating the bind group, handling gpu buffer data transfer, looking up image textures, etc. Even the simplest single-texture material involves writing ~80 unnecessary lines of code. This was never the long term plan.
    * There are two material traits, which is confusing, hard to document, and often redundant: `Material` and `SpecializedMaterial`. `Material` implicitly implements `SpecializedMaterial`, and `SpecializedMaterial` is used in most high level apis to support both use cases. Most users shouldn't need to think about specialization at all (I consider it a "power-user tool"), so the fact that `SpecializedMaterial` is front-and-center in our apis is a miss.
    * Implementing either material trait involves a lot of "type soup". The "prepared asset" parameter is particularly heinous: `&<Self as RenderAsset>::PreparedAsset`. Defining vertex and fragment shaders is also more verbose than it needs to be.
    
    ## Solution
    
    Say hello to the new `Material` system:
    
    ```rust
    #[derive(AsBindGroup, TypeUuid, Debug, Clone)]
    #[uuid = "f690fdae-d598-45ab-8225-97e2a3f056e0"]
    pub struct CoolMaterial {
        #[uniform(0)]
        color: Color,
        #[texture(1)]
        #[sampler(2)]
        color_texture: Handle<Image>,
    }
    impl Material for CoolMaterial {
        fn fragment_shader() -> ShaderRef {
            "cool_material.wgsl".into()
        }
    }
    ```
    
    Thats it! This same material would have required [~80 lines of complicated "type heavy" code](https://github.com/bevyengine/bevy/blob/v0.7.0/examples/shader/shader_material.rs) in the old Material system. Now it is just 14 lines of simple, readable code.
    
    This is thanks to a new consolidated `Material` trait and the new `AsBindGroup` trait / derive.
    
    ### The new `Material` trait
    
    The old "split" `Material` and `SpecializedMaterial` traits have been removed in favor of a new consolidated `Material` trait. All of the functions on the trait are optional.
    
    The difficulty of implementing `Material` has been reduced by simplifying dataflow and removing type complexity:
    
    ```rust
    // Old
    impl Material for CustomMaterial {
        fn fragment_shader(asset_server: &AssetServer) -> Option<Handle<Shader>> {
            Some(asset_server.load("custom_material.wgsl"))
        }
    
        fn alpha_mode(render_asset: &<Self as RenderAsset>::PreparedAsset) -> AlphaMode {
            render_asset.alpha_mode
        }
    }
    
    // New
    impl Material for CustomMaterial {
        fn fragment_shader() -> ShaderRef {
            "custom_material.wgsl".into()
        }
    
        fn alpha_mode(&self) -> AlphaMode {
            self.alpha_mode
        }
    }
    ```
    
    Specialization is still supported, but it is hidden by default under the `specialize()` function (more on this later).
    
    ### The `AsBindGroup` trait / derive
    
    The `Material` trait now requires the `AsBindGroup` derive. This can be implemented manually relatively easily, but deriving it will almost always be preferable.
    
    Field attributes like `uniform` and `texture` are used to define which fields should be bindings,
    what their binding type is, and what index they should be bound at:
    
    ```rust
    #[derive(AsBindGroup)]
    struct CoolMaterial {
        #[uniform(0)]
        color: Color,
        #[texture(1)]
        #[sampler(2)]
        color_texture: Handle<Image>,
    }
    ```
    
    In WGSL shaders, the binding looks like this:
    
    ```wgsl
    struct CoolMaterial {
        color: vec4<f32>;
    };
    
    [[group(1), binding(0)]]
    var<uniform> material: CoolMaterial;
    [[group(1), binding(1)]]
    var color_texture: texture_2d<f32>;
    [[group(1), binding(2)]]
    var color_sampler: sampler;
    ```
    
    Note that the "group" index is determined by the usage context. It is not defined in `AsBindGroup`. Bevy material bind groups are bound to group 1.
    
    The following field-level attributes are supported:
    * `uniform(BINDING_INDEX)`
        * The field will be converted to a shader-compatible type using the `ShaderType` trait, written to a `Buffer`, and bound as a uniform. It can also be derived for custom structs.
    * `texture(BINDING_INDEX)`
        * This field's `Handle<Image>` will be used to look up the matching `Texture` gpu resource, which will be bound as a texture in shaders. The field will be assumed to implement `Into<Option<Handle<Image>>>`. In practice, most fields should be a `Handle<Image>` or `Option<Handle<Image>>`. If the value of an `Option<Handle<Image>>` is `None`, the new `FallbackImage` resource will be used instead. This attribute can be used in conjunction with a `sampler` binding attribute (with a different binding index).
    * `sampler(BINDING_INDEX)`
        * Behaves exactly like the `texture` attribute, but sets the Image's sampler binding instead of the texture.
    
    Note that fields without field-level binding attributes will be ignored.
    ```rust
    #[derive(AsBindGroup)]
    struct CoolMaterial {
        #[uniform(0)]
        color: Color,
        this_field_is_ignored: String,
    }
    ```
    
    As mentioned above, `Option<Handle<Image>>` is also supported:
    ```rust
    #[derive(AsBindGroup)]
    struct CoolMaterial {
        #[uniform(0)]
        color: Color,
        #[texture(1)]
        #[sampler(2)]
        color_texture: Option<Handle<Image>>,
    }
    ```
    This is useful if you want a texture to be optional. When the value is `None`, the `FallbackImage` will be used for the binding instead, which defaults to "pure white".
    
    Field uniforms with the same binding index will be combined into a single binding:
    ```rust
    #[derive(AsBindGroup)]
    struct CoolMaterial {
        #[uniform(0)]
        color: Color,
        #[uniform(0)]
        roughness: f32,
    }
    ```
    
    In WGSL shaders, the binding would look like this:
    ```wgsl
    struct CoolMaterial {
        color: vec4<f32>;
        roughness: f32;
    };
    
    [[group(1), binding(0)]]
    var<uniform> material: CoolMaterial;
    ```
    
    Some less common scenarios will require "struct-level" attributes. These are the currently supported struct-level attributes:
    * `uniform(BINDING_INDEX, ConvertedShaderType)`
        * Similar to the field-level `uniform` attribute, but instead the entire `AsBindGroup` value is converted to `ConvertedShaderType`, which must implement `ShaderType`. This is useful if more complicated conversion logic is required.
    * `bind_group_data(DataType)`
        * The `AsBindGroup` type will be converted to some `DataType` using `Into<DataType>` and stored as `AsBindGroup::Data` as part of the `AsBindGroup::as_bind_group` call. This is useful if data needs to be stored alongside the generated bind group, such as a unique identifier for a material's bind group. The most common use case for this attribute is "shader pipeline specialization".
    
    The previous `CoolMaterial` example illustrating "combining multiple field-level uniform attributes with the same binding index" can
    also be equivalently represented with a single struct-level uniform attribute:
    ```rust
    #[derive(AsBindGroup)]
    #[uniform(0, CoolMaterialUniform)]
    struct CoolMaterial {
        color: Color,
        roughness: f32,
    }
    
    #[derive(ShaderType)]
    struct CoolMaterialUniform {
        color: Color,
        roughness: f32,
    }
    
    impl From<&CoolMaterial> for CoolMaterialUniform {
        fn from(material: &CoolMaterial) -> CoolMaterialUniform {
            CoolMaterialUniform {
                color: material.color,
                roughness: material.roughness,
            }
        }
    }
    ```
    
    ### Material Specialization
    
    Material shader specialization is now _much_ simpler:
    
    ```rust
    #[derive(AsBindGroup, TypeUuid, Debug, Clone)]
    #[uuid = "f690fdae-d598-45ab-8225-97e2a3f056e0"]
    #[bind_group_data(CoolMaterialKey)]
    struct CoolMaterial {
        #[uniform(0)]
        color: Color,
        is_red: bool,
    }
    
    #[derive(Copy, Clone, Hash, Eq, PartialEq)]
    struct CoolMaterialKey {
        is_red: bool,
    }
    
    impl From<&CoolMaterial> for CoolMaterialKey {
        fn from(material: &CoolMaterial) -> CoolMaterialKey {
            CoolMaterialKey {
                is_red: material.is_red,
            }
        }
    }
    
    impl Material for CoolMaterial {
        fn fragment_shader() -> ShaderRef {
            "cool_material.wgsl".into()
        }
    
        fn specialize(
            pipeline: &MaterialPipeline<Self>,
            descriptor: &mut RenderPipelineDescriptor,
            layout: &MeshVertexBufferLayout,
            key: MaterialPipelineKey<Self>,
        ) -> Result<(), SpecializedMeshPipelineError> {
            if key.bind_group_data.is_red {
                let fragment = descriptor.fragment.as_mut().unwrap();
                fragment.shader_defs.push("IS_RED".to_string());
            }
            Ok(())
        }
    }
    ```
    
    Setting `bind_group_data` is not required for specialization (it defaults to `()`). Scenarios like "custom vertex attributes" also benefit from this system:
    ```rust
    impl Material for CustomMaterial {
        fn vertex_shader() -> ShaderRef {
            "custom_material.wgsl".into()
        }
    
        fn fragment_shader() -> ShaderRef {
            "custom_material.wgsl".into()
        }
    
        fn specialize(
            pipeline: &MaterialPipeline<Self>,
            descriptor: &mut RenderPipelineDescriptor,
            layout: &MeshVertexBufferLayout,
            key: MaterialPipelineKey<Self>,
        ) -> Result<(), SpecializedMeshPipelineError> {
            let vertex_layout = layout.get_layout(&[
                Mesh::ATTRIBUTE_POSITION.at_shader_location(0),
                ATTRIBUTE_BLEND_COLOR.at_shader_location(1),
            ])?;
            descriptor.vertex.buffers = vec![vertex_layout];
            Ok(())
        }
    }
    ```
    
    ### Ported `StandardMaterial` to the new `Material` system
    
    Bevy's built-in PBR material uses the new Material system (including the AsBindGroup derive):
    
    ```rust
    #[derive(AsBindGroup, Debug, Clone, TypeUuid)]
    #[uuid = "7494888b-c082-457b-aacf-517228cc0c22"]
    #[bind_group_data(StandardMaterialKey)]
    #[uniform(0, StandardMaterialUniform)]
    pub struct StandardMaterial {
        pub base_color: Color,
        #[texture(1)]
        #[sampler(2)]
        pub base_color_texture: Option<Handle<Image>>,
        /* other fields omitted for brevity */
    ```
    
    ### Ported Bevy examples to the new `Material` system
    
    The overall complexity of Bevy's "custom shader examples" has gone down significantly. Take a look at the diffs if you want a dopamine spike.
    
    Please note that while this PR has a net increase in "lines of code", most of those extra lines come from added documentation. There is a significant reduction
    in the overall complexity of the code (even accounting for the new derive logic).
    
    ---
    
    ## Changelog
    
    ### Added
    
    * `AsBindGroup` trait and derive, which make it much easier to transfer data to the gpu and generate bind groups for a given type.
    
    ### Changed
    
    * The old `Material` and `SpecializedMaterial` traits have been replaced by a consolidated (much simpler) `Material` trait. Materials no longer implement `RenderAsset`.
    * `StandardMaterial` was ported to the new material system. There are no user-facing api changes to the `StandardMaterial` struct api, but it now implements `AsBindGroup` and `Material` instead of `RenderAsset` and `SpecializedMaterial`.
    
    ## Migration Guide
    The Material system has been reworked to be much simpler. We've removed a lot of boilerplate with the new `AsBindGroup` derive and the `Material` trait is simpler as well!
    
    ### Bevy 0.7 (old)
    
    ```rust
    #[derive(Debug, Clone, TypeUuid)]
    #[uuid = "f690fdae-d598-45ab-8225-97e2a3f056e0"]
    pub struct CustomMaterial {
        color: Color,
        color_texture: Handle<Image>,
    }
    
    #[derive(Clone)]
    pub struct GpuCustomMaterial {
        _buffer: Buffer,
        bind_group: BindGroup,
    }
    
    impl RenderAsset for CustomMaterial {
        type ExtractedAsset = CustomMaterial;
        type PreparedAsset = GpuCustomMaterial;
        type Param = (SRes<RenderDevice>, SRes<MaterialPipeline<Self>>);
        fn extract_asset(&self) -> Self::ExtractedAsset {
            self.clone()
        }
    
        fn prepare_asset(
            extracted_asset: Self::ExtractedAsset,
            (render_device, material_pipeline): &mut SystemParamItem<Self::Param>,
        ) -> Result<Self::PreparedAsset, PrepareAssetError<Self::ExtractedAsset>> {
            let color = Vec4::from_slice(&extracted_asset.color.as_linear_rgba_f32());
    
            let byte_buffer = [0u8; Vec4::SIZE.get() as usize];
            let mut buffer = encase::UniformBuffer::new(byte_buffer);
            buffer.write(&color).unwrap();
    
            let buffer = render_device.create_buffer_with_data(&BufferInitDescriptor {
                contents: buffer.as_ref(),
                label: None,
                usage: BufferUsages::UNIFORM | BufferUsages::COPY_DST,
            });
    
            let (texture_view, texture_sampler) = if let Some(result) = material_pipeline
                .mesh_pipeline
                .get_image_texture(gpu_images, &Some(extracted_asset.color_texture.clone()))
            {
                result
            } else {
                return Err(PrepareAssetError::RetryNextUpdate(extracted_asset));
            };
            let bind_group = render_device.create_bind_group(&BindGroupDescriptor {
                entries: &[
                    BindGroupEntry {
                        binding: 0,
                        resource: buffer.as_entire_binding(),
                    },
                    BindGroupEntry {
                        binding: 0,
                        resource: BindingResource::TextureView(texture_view),
                    },
                    BindGroupEntry {
                        binding: 1,
                        resource: BindingResource::Sampler(texture_sampler),
                    },
                ],
                label: None,
                layout: &material_pipeline.material_layout,
            });
    
            Ok(GpuCustomMaterial {
                _buffer: buffer,
                bind_group,
            })
        }
    }
    
    impl Material for CustomMaterial {
        fn fragment_shader(asset_server: &AssetServer) -> Option<Handle<Shader>> {
            Some(asset_server.load("custom_material.wgsl"))
        }
    
        fn bind_group(render_asset: &<Self as RenderAsset>::PreparedAsset) -> &BindGroup {
            &render_asset.bind_group
        }
    
        fn bind_group_layout(render_device: &RenderDevice) -> BindGroupLayout {
            render_device.create_bind_group_layout(&BindGroupLayoutDescriptor {
                entries: &[
                    BindGroupLayoutEntry {
                        binding: 0,
                        visibility: ShaderStages::FRAGMENT,
                        ty: BindingType::Buffer {
                            ty: BufferBindingType::Uniform,
                            has_dynamic_offset: false,
                            min_binding_size: Some(Vec4::min_size()),
                        },
                        count: None,
                    },
                    BindGroupLayoutEntry {
                        binding: 1,
                        visibility: ShaderStages::FRAGMENT,
                        ty: BindingType::Texture {
                            multisampled: false,
                            sample_type: TextureSampleType::Float { filterable: true },
                            view_dimension: TextureViewDimension::D2Array,
                        },
                        count: None,
                    },
                    BindGroupLayoutEntry {
                        binding: 2,
                        visibility: ShaderStages::FRAGMENT,
                        ty: BindingType::Sampler(SamplerBindingType::Filtering),
                        count: None,
                    },
                ],
                label: None,
            })
        }
    }
    ```
    
    ### Bevy 0.8 (new)
    
    ```rust
    impl Material for CustomMaterial {
        fn fragment_shader() -> ShaderRef {
            "custom_material.wgsl".into()
        }
    }
    
    #[derive(AsBindGroup, TypeUuid, Debug, Clone)]
    #[uuid = "f690fdae-d598-45ab-8225-97e2a3f056e0"]
    pub struct CustomMaterial {
        #[uniform(0)]
        color: Color,
        #[texture(1)]
        #[sampler(2)]
        color_texture: Handle<Image>,
    }
    ```
    
    ## Future Work
    
    * Add support for more binding types (cubemaps, buffers, etc). This PR intentionally includes a bare minimum number of binding types to keep "reviewability" in check.
    * Consider optionally eliding binding indices using binding names. `AsBindGroup` could pass in (optional?) reflection info as a "hint".
        * This would make it possible for the derive to do this:
            ```rust
            #[derive(AsBindGroup)]
            pub struct CustomMaterial {
                #[uniform]
                color: Color,
                #[texture]
                #[sampler]
                color_texture: Option<Handle<Image>>,
                alpha_mode: AlphaMode,
            }
            ```
        * Or this
            ```rust
            #[derive(AsBindGroup)]
            pub struct CustomMaterial {
                #[binding]
                color: Color,
                #[binding]
                color_texture: Option<Handle<Image>>,
                alpha_mode: AlphaMode,
            }
            ```
        * Or even this (if we flip to "include bindings by default")
            ```rust
            #[derive(AsBindGroup)]
            pub struct CustomMaterial {
                color: Color,
                color_texture: Option<Handle<Image>>,
                #[binding(ignore)]
                alpha_mode: AlphaMode,
            }
            ```
    * If we add the option to define custom draw functions for materials (which could be done in a type-erased way), I think that would be enough to support extra non-material bindings. Worth considering!

[33mcommit d4e4a929821d87f4b112f3184b4b50799dd99386[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Jun 30 19:42:45 2022 +0000

    android - fix issues other than the rendering (#5130)
    
    # Objective
    
    - Make Bevy work on android
    
    ## Solution
    
    - Update android metadata and add a few more
    - Set the target sdk to 31 as it will soon (in august) be the minimum sdk level for play store
    - Remove the custom code to create an activity and use ndk-glue macro instead
    - Delay window creation event on android
    - Set the example with compatibility settings for wgpu. Those are needed for Bevy to work on my 2019 android tablet
    - Add a few details on how to debug in case of failures
    - Fix running the example on emulator. This was failing because of the name of the example
    
    Bevy still doesn't work on android with this, audio features need to be disabled because of an ndk-glue version mismatch: rodio depends on 0.6.2, winit on 0.5.2. You can test with:
    ```
    cargo apk run --release --example android_example --no-default-features --features "bevy_winit,render"
    ```

[33mcommit 96f0ebb9af3f3bd859d2ee0e71d57f2ee86482e4[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 30 19:24:28 2022 +0000

    Fix rust 1.62 changes (#5154)
    
    # Objective
    
    CI is now failing with some changes that landed in 1.62.
    
    ## Solution
    
    * Fix an unused lifetime by using it (we double-used the `w` lifetime).
    * Update compile_fail error messages
    * temporarily disable check-unused-dependencies

[33mcommit b3fa4790b7fe45c134bc884871824a512f4fd6a3[m
Author: harudagondi <giogdeasis@gmail.com>
Date:   Thu Jun 30 15:23:09 2022 +0000

    Add ability to inspect entity's components (#5136)
    
    # Objective
    
    - Provide a way to see the components of an entity.
    - Fixes #1467
    
    ## Solution
    
    - Add `World::inspect_entity`. It accepts an `Entity` and returns a vector of `&ComponentInfo` that the entity has.
    - Add `EntityCommands::log_components`. It logs the component names of the entity. (info level)
    
    ---
    
    ## Changelog
    
    ### Added
    - Ability to inspect components of an entity through `World::inspect_entity` or `EntityCommands::log_components`

[33mcommit 5f8e43833d49fa5c9c2ad2388615d23cb96ea7ae[m
Author: Lucien Menassol <lucien.menassol@gmail.com>
Date:   Wed Jun 29 15:44:34 2022 +0000

    Enable single-commit option for doc deployment (#5138)
    
    Closes #5092.
    
    The `force` option wasn't needed as it is [already enabled by default](https://github.com/JamesIves/github-pages-deploy-action#optional-choices) (however I can add it if it would be better to have it explicitly specified).

[33mcommit 5b5660ea08fc0649bca78772aab65699cafad74e[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Wed Jun 29 15:44:33 2022 +0000

    remove unnecessary unsafe impl of `Send+Sync` for `ParallelSystemContainer` (#5137)
    
    `ParallelSystemContainer` has no `!Send` or `!Sync` fields, so it doesn't need unsafe impls of these traits.

[33mcommit 7d554146524987b050923841de06c7d18adf66e9[m
Author: DGriffin91 <github@dgdigital.net>
Date:   Wed Jun 29 03:57:08 2022 +0000

    Use tone mapping in array_texture example (#5131)
    
    # Objective
    
    The array_texture example does not currently apply tone mapping:
    ![no_tonemapping](https://user-images.githubusercontent.com/33357138/176327061-4c404b62-d260-458d-b3cb-4671bd8c2735.PNG)
    
    ## Solution
    
    Use tone mapping:
    ![with_tonemapping](https://user-images.githubusercontent.com/33357138/176327092-7aaeac85-0d95-4c7d-9d91-7fe46bed32c3.PNG)

[33mcommit 7a42f7b3f9c3c2accfe45d66004fa7a252a1e0f2[m
Author: grace125 <graceschorno@protonmail.com>
Date:   Wed Jun 29 02:48:47 2022 +0000

    Fix typos in bevy_reflect readme (#5134)
    
    # Objective
    
    Fix some typos in bevy_reflect's readme
    
    ## Solution
    
    - Change `Foo`'s `d` field to be of type `Vec<Baz>`
    - Format `&dyn Reflect` to be monospace

[33mcommit 072f2e17d34091d8d04b3df7302fa1187f2378a4[m
Author: DGriffin91 <33357138+DGriffin91@users.noreply.github.com>
Date:   Wed Jun 29 02:48:46 2022 +0000

    Move texture sample out of branch in prepare_normal (#5129)
    
    # Objective
    
    This fixes https://github.com/bevyengine/bevy/issues/5127
    
    ## Solution
    
    - Moved texture sample out of branch in `prepare_normal()`.
    
    
    Co-authored-by: DGriffin91 <github@dgdigital.net>

[33mcommit 510ce5e832a1303c1d402e87ae6e04b1b4f3ad18[m
Author: Mike <mike.hsu@gmail.com>
Date:   Wed Jun 29 02:29:51 2022 +0000

    fix resource not found error message (#5128)
    
    There are some outdated error messages for when a resource is not found. It references `add_resource` and `add_non_send_resource` which were renamed to `insert_resource` and `insert_non_send_resource`.

[33mcommit ba3d8bedc5c4ad6c75a757a49d351d81abbba23a[m
Author: James Liu <contact@jamessliu.com>
Date:   Wed Jun 29 02:29:50 2022 +0000

    Wider ECS Benchmarks (#5123)
    
    # Objective
    As a part of evaluating #4800, at the behest of @cart, it was noted that the ECS microbenchmarks all focus on singular component queries, whereas in reality most systems will have wider queries with multiple components in each.
    
    ## Solution
    Use const generics to add wider variants of existing benchmarks.

[33mcommit 6e50b249a4dd2f7dbdf20ed6f8adcfa1ece4898b[m
Author: harudagondi <giogdeasis@gmail.com>
Date:   Wed Jun 29 02:15:28 2022 +0000

    Update `ExactSizeIterator` impl to support archetypal filters (With, Without) (#5124)
    
    # Objective
    
    - Fixes #3142
    
    ## Solution
    
    - Done according to #3142
    - Created new marker trait `ArchetypeFilter`
    - Implement said trait to:
      - `With<T>`
      - `Without<T>`
      - tuples containing only types that implement `ArchetypeFilter`, from 0 to 15 elements
      - `Or<T>` where T is a tuple as described previously
    - Changed `ExactSizeIterator` impl to include a new generic that must implement `WorldQuery` and `ArchetypeFilter`
    - Added new tests
    
    ---
    
    ## Changelog
    
    ### Added
    - `Query`s with archetypal filters can now use `.iter().len()` to get the exact size of the iterator.

[33mcommit e28b88b3782b11d61cfe8fbca6c9b4f0ff7173e5[m
Author: Saverio Miroddi <saverio.pub2@gmail.com>
Date:   Tue Jun 28 16:37:36 2022 +0000

    Fix Events example link (#5126)
    
    The `crate` intermediate directory is missing from the path, which currently leads to 404.

[33mcommit e60f614a862253f8342fdccb597e2521fd7be62b[m
Author: Brian Merchant <bhmerchang@gmail.com>
Date:   Tue Jun 28 04:09:04 2022 +0000

    Documenting `BufferVec`. (#4673)
    
    # Objective
    
    Documents the `BufferVec` render resource.
    
    `BufferVec` is a fairly low level object, that will likely be managed by a higher level API (e.g. through [`encase`](https://github.com/bevyengine/bevy/issues/4272)) in the future. For now, since it is still used by some simple
    example crates (e.g. [bevy-vertex-pulling](https://github.com/superdump/bevy-vertex-pulling)), it will be helpful
    to provide some simple documentation on what `BufferVec` does.
    
    ## Solution
    
    I looked through Discord discussion on `BufferVec`, and found [a comment](https://discord.com/channels/691052431525675048/953222550568173580/956596218857918464 ) by @superdump to be particularly helpful, in the general discussion around `encase`.
    
    I have taken care to clarify where the data is stored (host-side), when the device-side buffer is created (through calls to `reserve`), and when data writes from host to device are scheduled (using `write_buffer` calls).
    
    ---
    
    ## Changelog
    
    - Added doc string for `BufferVec` and two of its methods: `reserve` and `write_buffer`.
    
    
    Co-authored-by: Brian Merchant <bhmerchant@gmail.com>

[33mcommit 84991d34f3fdf985b2721a193352d4adb30eab75[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Tue Jun 28 00:58:50 2022 +0000

    Array texture example (#5077)
    
    # Objective
    
    - Make the reusable PBR shading functionality a little more reusable
      - Add constructor functions for `StandardMaterial` and `PbrInput` structs to populate them with default values
      - Document unclear `PbrInput` members
    - Demonstrate how to reuse the bevy PBR shading functionality
    - The final important piece from #3969 as the initial shot at making the PBR shader code reusable in custom materials
    
    ## Solution
    
    - Add back and rework the 'old' `array_texture` example from pre-0.6.
    - Create a custom shader material
      - Use a single array texture binding and sampler for the material bind group
      - Use a shader that calls `pbr()` from the `bevy_pbr::pbr_functions` import
    - Spawn a row of cubes using the custom material
    - In the shader, select the array texture layer to sample by using the world position x coordinate modulo the number of array texture layers
    
    <img width="1392" alt="Screenshot 2022-06-23 at 12 28 05" src="https://user-images.githubusercontent.com/302146/175278593-2296f519-f577-4ece-81c0-d842283784a1.png">
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 9eb69282efe57b9e3922e66ade887e6239bff175[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon Jun 27 16:52:26 2022 +0000

    Directly copy moved Table components to the target location (#5056)
    
    # Objective
    Speed up entity moves between tables by reducing the number of copies conducted. Currently three separate copies are conducted: `src[index] -> swap scratch`, `src[last] -> src[index]`, and `swap scratch -> dst[target]`. The first and last copies can be merged by directly using the copy `src[index] -> dst[target]`, which can save quite some time if the component(s) in question are large.
    
    ## Solution
    This PR does the  following:
    
     - Adds `BlobVec::swap_remove_unchecked(usize, PtrMut<'_>)`, which is identical to `swap_remove_and_forget_unchecked`, but skips the `swap_scratch` and directly copies the component into the provided `PtrMut<'_>`.
     - Build `Column::initialize_from_unchecked(&mut Column, usize, usize)` on top of it, which uses the above to directly initialize a row from another column.
     - Update most of the table move APIs to use `initialize_from_unchecked` instead of a combination of `swap_remove_and_forget_unchecked` and `initialize`.
    
    This is an alternative, though orthogonal, approach to achieve the same performance gains as seen in #4853. This (hopefully) shouldn't run into the same Miri limitations that said PR currently does.  After this PR, `swap_remove_and_forget_unchecked` is still in use for Resources and swap_scratch likely still should be removed, so #4853 still has use, even if this PR is merged.
    
    ## Performance
    TODO: Microbenchmark
    
    This PR shows similar improvements to commands that add or remove table components that result in a table move. When tested on `many_cubes sphere`, some of the more command heavy systems saw notable improvements. In particular, `prepare_uniform_components<T>`, this saw a reduction in time from 1.35ms to 1.13ms (a 16.3% improvement) on my local machine, a similar if not slightly better gain than what #4853 showed [here](https://github.com/bevyengine/bevy/pull/4853#issuecomment-1159346106).
    
    ![image](https://user-images.githubusercontent.com/3137680/174570088-1c4c6fd7-3215-478c-9eb7-8bd9fe486b32.png)
    
    The command heavy `Extract` stage also saw a smaller overall improvement:
    
    ![image](https://user-images.githubusercontent.com/3137680/174572261-8a48f004-ab9f-4cb2-b304-a882b6d78065.png)
    ---
    
    ## Changelog
    Added: `BlobVec::swap_remove_unchecked`.
    Added: `Column::initialize_from_unchecked`.

[33mcommit c27a3cff6d593e1b1220886673018a508aaa785d[m
Author: PROMETHIA-27 <electriccobras@gmail.com>
Date:   Mon Jun 27 16:52:25 2022 +0000

    Make `Reflect` safe to implement (#5010)
    
    # Objective
    
    Currently, `Reflect` is unsafe to implement because of a contract in which `any` and `any_mut` must return `self`, or `downcast` will cause UB. This PR makes `Reflect` safe, makes `downcast` not use unsafe, and eliminates this contract.
    
    ## Solution
    
    This PR adds a method to `Reflect`, `any`. It also renames the old `any` to `as_any`.
    `any` now takes a `Box<Self>` and returns a `Box<dyn Any>`.
    
    ---
    
    ## Changelog
    
    ### Added:
    - `any()` method
    - `represents()` method
    
    ### Changed:
    - `Reflect` is now a safe trait
    - `downcast()` is now safe
    - The old `any` is now called `as_any`, and `any_mut` is now `as_mut_any`
    
    ## Migration Guide
    
    - Reflect derives should not have to change anything
    - Manual reflect impls will need to remove the `unsafe` keyword, add `any()` implementations, and rename the old `any` and `any_mut` to `as_any` and `as_mut_any`.
    - Calls to `any`/`any_mut` must be changed to `as_any`/`as_mut_any`
    
    ## Points of discussion:
    
    - Should renaming `any` be avoided and instead name the new method `any_box`?
    - ~~Could there be a performance regression from avoiding the unsafe? I doubt it, but this change does seem to introduce redundant checks.~~
    - ~~Could/should `is` and `type_id()` be implemented differently? For example, moving `is` onto `Reflect` as an `fn(&self, TypeId) -> bool`~~
    
    
    Co-authored-by: PROMETHIA-27 <42193387+PROMETHIA-27@users.noreply.github.com>

[33mcommit 332cfa1b3acbc34f46286a8db42bdf10f664d800[m
Author: Thierry Berger <contact@thierryberger.com>
Date:   Mon Jun 27 16:33:38 2022 +0000

    Update CONTRIBUTING.md (#4962)
    
    Small nitpicks over my full read over Contributing.md
    
    # Objective
    
    Fixes to Contributing file
    - Lists more coherent: starting with capital letter and ending with point.
    - Fixed a Typo.
    - A clarification on approval aimed at newcomers.
    - Reference links

[33mcommit a138804d618a00d9e42a62547603a0b094be1042[m
Author: Robert Gabriel Jakabosky <rjakabosky+github@neoawareness.com>
Date:   Sun Jun 26 21:45:04 2022 +0000

    Add `reload_asset` method to AssetServer. (#5106)
    
    # Objective
    
    Add support for custom `AssetIo` implementations to trigger reloading of an asset.
    
    ## Solution
    
    - Add a public method to `AssetServer` to allow forcing the reloading of an asset.
    
    ---
    
    ## Changelog
    
    - Add method `reload_asset` to `AssetServer`.
    
    
    Co-authored-by: Robert G. Jakabosky <rjakabosky+neopallium@neoawareness.com>

[33mcommit a32eac825a5a3899a9c54fe6940ea8dcd7e2e825[m
Author: Ralf Jung <post@ralfj.de>
Date:   Sun Jun 26 21:28:00 2022 +0000

    Miri can set thread names now (#5108)
    
    # Objective
    
    https://github.com/rust-lang/miri/issues/1717 has been fixed so we can set thread names in Miri now.
    
    ## Solution
    
    We set thread names in Miri.

[33mcommit e57abc1c42b3cd69173984d90c5e99ceaad1b779[m
Author: Federico Rinaldi <gisquerin@gmail.com>
Date:   Sun Jun 26 14:24:04 2022 +0000

    Remove double blank line from component docs (#5102)
    
    A small trivial documentation fix. Check the changed file.

[33mcommit 4f5f04041f938ddb5a3e4e6c861527981a84dbda[m
Author: Dilyan <44360328+dilyankostov@users.noreply.github.com>
Date:   Sun Jun 26 13:58:56 2022 +0000

    Fix player number in example game in the ecs_guide (#5098)
    
    # Objective
    
    - Small bug in the example game given in examples/ecs/ecs_guide
    
    Currently, if there are 2 players in this example game, the function exclusive_player_system can add a player with the name "Player 2". However, the name should be "Player 3". This PR fixes this. I also add a message to inform that a new player has arrived in the mock game.
    
    Co-authored-by: Dilyan Kostov <dilyanks@amazon.com>

[33mcommit 056f12236e71ace505b3b366cdb236816be81774[m
Author: Federico Rinaldi <gisquerin@gmail.com>
Date:   Sun Jun 26 13:40:43 2022 +0000

    Update `MouseMotion` and `CursorMoved` docs (#5090)
    
    # Objective
    
    - Fixes #5083
    
    ## Solution
    
    I looked at the implementation of those events. I noticed that they both are adaptations of `winit`'s `DeviceEvent`/`WindowEvent` enum variants. Therefore I based the description of the items on the documentation provided by the upstream crate. I also added a link to `CursorMoved`, just like `MouseMotion` already has.
    
    ## Observations
    
    - Looking at the implementation of `MouseMotion`, I noticed the `DeviceId` field of the `winit` event is discarded by `bevy_input`. This means that in the case a machine has multiple pointing devices, it is impossible to distinguish to which one the event is referring to. **EDIT:** just tested, `MouseMotion` events are emitted for movement of both mice.

[33mcommit 1bd33cac31e12fee9382774c5d64934a5c5bb881[m
Author: sark <sarkahn@gmail.com>
Date:   Sun Jun 26 02:26:29 2022 +0000

    Default image sampler doc fix (#5047)
    
    # Objective
    
    Attempt to more clearly document `ImageSettings` and setting a default sampler for new images, as per #5046
    
    ## Changelog
    
    - Moved ImageSettings into image.rs, image::* is already exported. Makes it simpler for linking docs.
    - Renamed "DefaultImageSampler" to "RenderDefaultImageSampler". Not a great name, but more consistent with other render resources.
    - Added/updated related docs

[33mcommit 92eec47b995bc721fb58cfd100a0281814aa9595[m
Author: ç ç©¶ç¤¾äº¤ <cryscan@umich.edu>
Date:   Sun Jun 26 00:00:23 2022 +0000

    Separate PBR and tone mapping into 2 functions (#5078)
    
    # Objective
    
    - Allow custom shaders to reuse the HDR results of PBR.
    
    ## Solution
    
    - Separate `pbr()` and `tone_mapping()` into 2 functions in `pbr_functions.wgsl`.

[33mcommit fa56a5cd51107f5ef1b2eea4e32927966d61c513[m
Author: Garett Cooper <garett@garettcooper.com>
Date:   Sat Jun 25 20:41:54 2022 +0000

    Add component_id function to World and Components (#5066)
    
    # Objective
    
    - Simplify the process of obtaining a `ComponentId` instance corresponding to a `Component`.
    - Resolves #5060.
    
    ## Solution
    
    - Add a `component_id::<T: Component>(&self)` function to both `World` and `Components` to retrieve the `ComponentId` associated with `T` from a immutable reference.
    
    ---
    
    ## Changelog
    
    - Added `World::component_id::<C>()` and `Components::component_id::<C>()` to retrieve a `Component`'s corresponding `ComponentId` if it exists.

[33mcommit f8fa22946559e1e16ce2f4733400fac74caa5f2a[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Jun 25 20:23:24 2022 +0000

    Examples metadata in Cargo.toml (#4741)
    
    # Objective
    
    - Have information about examples only in one place that can be used for the repo and for the website (and remove the need to keep a list of example to build for wasm in the website https://github.com/bevyengine/bevy-website/blob/75acb730406ef9c5928d37daf8bb32e4dbeb8b13/generate-wasm-examples/generate_wasm_examples.sh#L92-L99)
    
    ## Solution
    
    - Add metadata about examples in `Cargo.toml`
    - Build the `examples/README.md` from a template using those metadata. I used tera as the template engine to use the same tech as the website.
    - Make CI fail if an example is missing metadata, or if the readme file needs to be updated (the command to update it is displayed in the failed step in CI)
    
    ## Remaining To Do
    
    - After the next release with this merged in, the website will be able to be updated to use those metadata too
    - I would like to build the examples in wasm and make them available at http://dev-docs.bevyengine.org/ but that will require more design
    - https://github.com/bevyengine/bevy-website/issues/299 for other ToDos
    
    Co-authored-by: Readme <github-actions@github.com>

[33mcommit 57125837827453bbd08ec06cde47a5ccc47d3f35[m
Author: Nikita <krylov.nikita.a@yandex.ru>
Date:   Sat Jun 25 16:22:28 2022 +0000

    Add some docs about lowspec rendering (#5091)
    
    # Objective
    
    - When experimenting with rendering on lowspec machines I've run into some non-obvious things (huge thanks [superdump](https://github.com/superdump), [alice-i-cecile](https://github.com/alice-i-cecile), [mockersf](https://github.com/mockersf) and others for help) and so volunteered to document them.
    - Is a follow-up of https://discordapp.com/channels/691052431525675048/989137552919375902
    
    ## Solution
    
    - I added docs about necessity of `ANGLE` to use `Backends::GL` on Windows.
    - Also documented why `prepare_windows` can be long to execute and some causes.

[33mcommit 5a3e77716a03c7f5db137219a2e54e493f9bbb78[m
Author: Edward Vear <edwardvear@gmail.com>
Date:   Sat Jun 25 09:54:33 2022 +0000

    Fix skinned mesh normal handling in mesh shader (#5095)
    
    # Objective
    
    Update pbr mesh shader to use correct normals for skinned meshes.
    
    ## Solution
    
    Only use `mesh_normal_local_to_world` for normals if `SKINNED` is not defined.

[33mcommit ad88bdae5c63c26be5c94e8e71059c3c62da03b0[m
Author: FÃ©lix Lescaudey de Maneville <felix.maneville@gmail.com>
Date:   Fri Jun 24 21:45:04 2022 +0000

    Fixed Android example icon (#4076)
    
    # Objective
    
    - The android example icon doesn't show up
    
    ## Solution
    
    - I fixed the android metadata to match `cargo-apk` manifest

[33mcommit 3d68094f6f6a5a77c1226aa69c66572edcadfb5e[m
Author: SuperSamus <tinozzo123@tutanota.com>
Date:   Fri Jun 24 02:13:00 2022 +0000

    linux_dependencies: cleanup NixOS (#5086)
    
    # Objective
    
    Small cleanup to NixOS dependencies.
    Switched `clang` and `lld` to `bintools` because of [this](https://matklad.github.io/2022/03/14/rpath-or-why-lld-doesnt-work-on-nixos.html).

[33mcommit 33a5f2b977d89e05843c1dcd985a11051490a964[m
Author: MiniaczQ <xnetroidpl@gmail.com>
Date:   Thu Jun 23 18:36:07 2022 +0000

    `transparency_3d` example tweaks (#4968)
    
    Fixed a typo, removed unused component, normalized comments added a touch more detail.

[33mcommit 7e6dd3f03ec15286e54c974090435480afcb6269[m
Author: James Liu <contact@jamessliu.com>
Date:   Thu Jun 23 10:52:49 2022 +0000

    Allow unbatched render phases to use unstable sorts (#5049)
    
    # Objective
    
    Partially addresses #4291.
    
    Speed up the sort phase for unbatched render phases.
    
    ## Solution
    Split out one of the optimizations in #4899 and allow implementors of `PhaseItem` to change what kind of sort is used when sorting the items in the phase. This currently includes Stable, Unstable, and Unsorted. Each of these corresponds to `Vec::sort_by_key`, `Vec::sort_unstable_by_key`, and no sorting at all. The default is `Unstable`. The last one can be used as a default if users introduce a preliminary depth prepass.
    
    ## Performance
    This will not impact the performance of any batched phases, as it is still using a stable sort. 2D's only phase is unchanged. All 3D phases are unbatched currently, and will benefit from this change.
    
    On `many_cubes`, where the primary phase is opaque, this change sees a speed up from 907.02us -> 477.62us, a 47.35% reduction.
    
    ![image](https://user-images.githubusercontent.com/3137680/174471253-22424874-30d5-4db5-b5b4-65fb2c612a9c.png)
    
    ## Future Work
    There were prior discussions to add support for faster radix sorts in #4291, which in theory should be a `O(n)` instead of a `O(nlog(n))` time. [`voracious`](https://crates.io/crates/voracious_radix_sort) has been proposed, but it seems to be optimize for use cases with more than 30,000 items, which may be atypical for most systems.
    
    Another optimization included in #4899 is to reduce the size of a few of the IDs commonly used in `PhaseItem` implementations to shrink the types to make swapping/sorting faster. Both `CachedPipelineId` and `DrawFunctionId` could be reduced to `u32` instead of `usize`.
    
    Ideally, this should automatically change to use stable sorts when `BatchedPhaseItem` is implemented on the same phase item type, but this requires specialization, which may not land in stable Rust for a short while.
    
    ---
    
    ## Changelog
    Added: `PhaseItem::sort`
    
    ## Migration Guide
    RenderPhases now default to a unstable sort (via `slice::sort_unstable_by_key`). This can typically improve sort phase performance, but may produce incorrect batching results when implementing `BatchedPhaseItem`. To revert to the older stable sort, manually implement `PhaseItem::sort` to implement a stable sort (i.e. via `slice::sort_by_key`).
    
    Co-authored-by: Federico Rinaldi <gisquerin@gmail.com>
    Co-authored-by: Robert Swain <robert.swain@gmail.com>
    Co-authored-by: colepoirier <colepoirier@gmail.com>

[33mcommit 4967351842b707c3c900b967b20301665aaa6988[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Jun 23 02:00:45 2022 +0000

    many foxes: only change animation once (#5076)
    
    # Objective
    
    - When changing animation, all the foxes didn't play the same animation
    
    ## Solution
    
    - Update the animation index only once

[33mcommit 86dd6f065d8d355ca6d75ee3ea270b9dad7e8ecd[m
Author: colepoirier <colepoirier@gmail.com>
Date:   Tue Jun 21 22:57:59 2022 +0000

    depend on dioxus(and bevy)-maintained fork of stretch (taffy) (#4716)
    
    # Objective
    
    DioxusLabs and Bevy have taken over maintaining what was our abandoned ui layout dependency [stretch](https://github.com/vislyhq/stretch). Dioxus' fork has had a lot of work done on it by @alice-i-cecile, @Weibye , @jkelleyrtp, @mockersf, @HackerFoo, @TimJentzsch and a dozen other contributors and now is in much better shape than stretch was. The updated crate is called taffy and is available on github [here](https://github.com/DioxusLabs/taffy) ([taffy](https://crates.io/crates/taffy) on crates.io). The goal of this PR is to replace stretch v0.3.2 with taffy v0.1.0.
    
    ## Solution
    
    I changed the bevy_ui Cargo.toml to depend on taffy instead of stretch and fixed all the errors rustc complained about.
    
    ---
    
    ## Changelog
    
    Changed bevy_ui layout dependency from stretch to taffy (the maintained fork of stretch).
    
    fixes #677
    
    ## Migration Guide
    
    The public api of taffy is different from that of stretch so please advise me on what to do here @alice-i-cecile.

[33mcommit 114d169dcec0e426e7815f184c0f85e67713c95b[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Tue Jun 21 20:50:06 2022 +0000

    Callable PBR functions (#4939)
    
    # Objective
    
    - Builds on top of #4938
    - Make clustered-forward PBR lighting/shadows functionality callable
    - See #3969 for details
    
    ## Solution
    
    - Add `PbrInput` struct type containing a `StandardMaterial`, occlusion, world_position, world_normal, and frag_coord
    - Split functionality to calculate the unit view vector, and normal-mapped normal into `bevy_pbr::pbr_functions`
    - Split high-level shading flow into `pbr(in: PbrInput, N: vec3<f32>, V: vec3<f32>, is_orthographic: bool)` function in `bevy_pbr::pbr_functions`
    - Rework `pbr.wgsl` fragment stage entry point to make use of the new functions
    - This has been benchmarked on an M1 Max using `many_cubes -- sphere`. `main` had a median frame time of 15.88ms, this PR 15.99ms, which is a 0.69% frame time increase, which is within noise in my opinion.
    
    ---
    
    ## Changelog
    
    - Added: PBR shading code is now callable. Import `bevy_pbr::pbr_functions` and its dependencies, create a `PbrInput`, calculate the unit view and normal-mapped normal vectors and whether the projection is orthographic, and call `pbr()`!

[33mcommit c98826418027362e6f58fae47ad18b9df7ab2df5[m
Author: James Liu <contact@jamessliu.com>
Date:   Tue Jun 21 20:35:26 2022 +0000

    Mark mutable APIs under ECS storage as pub(crate) (#5065)
    
    # Objective
    Closes #1557. Partially addresses #3362.
    
    Cleanup the public facing API for storage types. Most of these APIs are difficult to use safely when directly interfacing with these types, and is also currently impossible to interact with in normal ECS use as there is no `World::storages_mut`. The majority of these types should be easy enough to read, and perhaps mutate the contents, but never structurally altered without the same checks in the rest of bevy_ecs code. This both cleans up the public facing types and helps use unused code detection to remove a few of the APIs we're not using internally.
    
    ## Solution
    
     - Mark all APIs that take `&mut T` under `bevy_ecs::storage` as `pub(crate)` or `pub(super)`
     - Cleanup after it all.
    
    Entire type visibility changes:
    
     - `BlobVec` is `pub(super)`, only storage code should be directly interacting with it.
     - `SparseArray` is now `pub(crate)` for the entire type. It's an implementation detail for `Table` and `(Component)SparseSet`.
     - `TableMoveResult` is now `pub(crate)
    
    ---
    
    ## Changelog
    TODO
    
    ## Migration Guide
    Dear God, I hope not.

[33mcommit 389df183433c85520f7aeda7a46e6eb26859fd72[m
Author: James Liu <contact@jamessliu.com>
Date:   Tue Jun 21 18:10:27 2022 +0000

    Change check_visibility to use thread-local queues instead of a channel (#4663)
    
    # Objective
    Further speed up visibility checking by removing the main sources of contention for the system.
    
    ## Solution
     - ~~Make `ComputedVisibility` a resource wrapping a `FixedBitset`.~~
     - ~~Remove `ComputedVisibility` as a component.~~
    
    ~~This adds a one-bit overhead to every entity in the app world. For a game with 100,000 entities, this is 12.5KB of memory. This is still small enough to fit entirely in most L1 caches. Also removes the need for a per-Entity change detection tick. This reduces the memory footprint of ComputedVisibility 72x.~~
    
    ~~The decreased memory usage and less fragmented memory locality should provide significant performance benefits.~~
    
    ~~Clearing visible entities should be significantly faster than before:~~
    
     - ~~Setting one `u32` to 0 clears 32 entities per cycle.~~
     - ~~No archetype fragmentation to contend with.~~
     - ~~Change detection is applied to the resource, so there is no per-Entity update tick requirement.~~
    
    ~~The side benefit of this design is that it removes one more "computed component" from userspace.  Though accessing the values within it are now less ergonomic.~~
    
    This PR changes `crossbeam_channel` in `check_visibility` to use a `Local<ThreadLocal<Cell<Vec<Entity>>>` to mark down visible entities instead.
    
    Co-Authored-By: TheRawMeatball <therawmeatball@gmail.com>
    Co-Authored-By: Aevyrie <aevyrie@gmail.com>

[33mcommit 511bcc963335314c9f655c49faa273b43bac02b6[m
Author: Federico Rinaldi <gisquerin@gmail.com>
Date:   Tue Jun 21 15:29:22 2022 +0000

    Improve entity and component API docs (#4767)
    
    # Objective
    
    The descriptions included in the API docs of `entity` module, `Entity` struct, and `Component` trait have some issues:
    1. the concept of entity is not clearly defined,
    2. descriptions are a little bit out of place,
    3. in a case the description leak too many details about the implementation,
    4. some descriptions are not exhaustive,
    5. there are not enough examples,
    6. the content can be formatted in a much better way.
    
    ## Solution
    
    1. ~~Stress the fact that entity is an abstract and elementary concept. Abstract because the concept of entity is not hardcoded into the library but emerges from the interaction of `Entity` with every other part of `bevy_ecs`, like components and world methods. Elementary because it is a fundamental concept that cannot be defined with other terms (like point in euclidean geometry, or time in classical physics).~~ We decided to omit the definition of entity in the API docs ([see why]). It is only described in its relationship with components.
    2. Information has been moved to relevant places and links are used instead in the other places.
    3. Implementation details about `Entity` have been reduced.
    4. Descriptions have been made more exhaustive by stating how to obtain and use items. Entity operations are enriched with `World` methods.
    5. Examples have been added or enriched.
    6. Sections have been added to organize content. Entity operations are now laid out in a table.
    
    ### Todo list
    
    - [x] Break lines at sentence-level.
    
    ## For reviewers
    
    - ~~I added a TODO over `Component` docs, make sure to check it out and discuss it if necessary.~~ ([Resolved])
    - You can easily check the rendered documentation by doing `cargo doc -p bevy_ecs --no-deps --open`.
    
    [see why]: https://github.com/bevyengine/bevy/pull/4767#discussion_r875106329
    [Resolved]: https://github.com/bevyengine/bevy/pull/4767#discussion_r874127825

[33mcommit c4fc5d88f0ba2d86ff6c9a489154e4ca29666e3b[m
Author: FÃ©lix Lescaudey de Maneville <felix.maneville@gmail.com>
Date:   Mon Jun 20 20:32:19 2022 +0000

    Fixed bevy_ui touch input (#4099)
    
    # Objective
    
    `bevy_ui` doesn't support correctly touch inputs because of two problems in the focus system:
    - It attempts to retrieve touch input with a specific `0` id
    - It doesn't retrieve touch positions and bases its focus solely on mouse position, absent from mobile devices
    
    ## Solution
    
    I added a few methods to the `Touches` resource, allowing to check if **any** touch input was pressed, released or cancelled and to retrieve the *position* of the first pressed touch input and adapted the focus system.
    
    I added a test button to the *iOS* example and it works correclty on emulator. I did not test on a real touch device as:
    - Android is not working (https://github.com/bevyengine/bevy/issues/3249)
    - I don't have an iOS device

[33mcommit 30ca97e287de91b3fe6b4d5b1ce27126c1e3f73a[m
Author: Domi <f.d@posteo.net>
Date:   Mon Jun 20 19:06:38 2022 +0000

    Fix Nix section of linux_dependencies.md (#5050)
    
    
    
    # Objective
    
    `nix-shell` reported: ```error: 'x11' has been renamed to/replaced by 'xlibsWrapper'```.
    
    ## Solution
    
    Replacing `x11` with `xlibsWrapper` in the Nix section of linux_dependencies.md fixes the problem on my system, and bevy projects build fine.

[33mcommit 984ce3fa2289aaa680d820675f748d0858732780[m
Author: Hoidigan <57080125+Hoidigan@users.noreply.github.com>
Date:   Mon Jun 20 18:31:46 2022 +0000

    Add `Input::reset_all`  (#5015)
    
    Adds a `reset_all` method to reset `pressed`, `just_pressed`, and `just_released` on the `Input`.
    
    Fixes #3383

[33mcommit 9089c8b73e26c1d9f1054d23d9f762e49e04b1d9[m
Author: Mark Lodato <mlodato517@gmail.com>
Date:   Mon Jun 20 18:04:31 2022 +0000

    Fix redundant "have" in CONTRIBUTING (#5036)
    
    **This Commit**
    
    1. Makes it so the sentence doesn't read "are contributors who have Have
       actively ..."
    2. Makes it so all three bullet points end in punctuation
    
    **Notes**
    Could also remove the leading "Have" from all bullet points and leave it
    on the previous sentence. That's the least redundant but I guess this is
    more flexible if we want to add a sentence that doesn't start with
    "Have" later.

[33mcommit 515c8a3f505e43b29ef6ef584cbd26d62cb357ed[m
Author: Mark Lodato <mlodato517@gmail.com>
Date:   Mon Jun 20 18:04:29 2022 +0000

    Update `clap` to 3.2 in tools using `value_parser` (#5031)
    
    **Why?**
    The `value_parser` `clap` attribute was added in
    [version 3.2.0][0]. With the current version of `3.1.12` users can get
    errors like:
    
    ```
    error: unexpected attribute: value_parser
      --> tools/spancmp/src/main.rs:18:25
       |
    18 |     #[clap(short, long, value_parser, default_value_t = 0.0)]
       |                         ^^^^^^^^^^^^
    ```
    
    See https://github.com/bevyengine/bevy/pull/4944#issuecomment-1157704785 for more details.
    
    [0]: https://github.com/clap-rs/clap/blob/master/CHANGELOG.md#320---2022-06-13

[33mcommit 2ec5ff9652297ec29d8bb502fe2ac24c7e2fefe6[m
Author: Hoidigan <57080125+Hoidigan@users.noreply.github.com>
Date:   Mon Jun 20 17:35:56 2022 +0000

    Add a `release_all` function to `Input`. (#5011)
    
    Adds a `release_all` function to `Input` that releases all of the currently pressed inputs and marks them as just released.

[33mcommit 3217f216aaf18e855ad925079098c6c0535cf55d[m
Author: Mike <mike.hsu@gmail.com>
Date:   Mon Jun 20 17:35:55 2022 +0000

    change panicking test to not run on global task pool (#4998)
    
    # Objective
    
    - Fixes #4996
    
    ## Solution
    
    - Panicking on the global task pool is probably bad. This changes the panicking test to use a single threaded stage to run the test instead.
    - I checked the other #[should_panic]
    - I also added explicit ordering between the transform propagate system and the parent update system. The ambiguous ordering didn't seem to be causing problems, but the tests are probably more correct this way. The plugins that add these systems have an explicit ordering. I can remove this if necessary.
    
    ## Note
    
    I don't have a 100% mental model of why panicking is causing intermittent failures. It probably has to do with a task for one of the other tests landing on the panicking thread when it actually panics. Why this causes a problem I'm not sure, but this PR seems to fix things.
    
    ## Open questions
    
    - there are some other #[should_panic] tests that run on the task pool in stage.rs. I don't think we restart panicked threads, so this might be killing most of the threads on the pool. But since they're not causing test failures, we should probably decide what to do about that separately. The solution in this PR won't work since those tests are explicitly testing parallelism.

[33mcommit 92ea73036225ae47322b99577542afdaa58517d3[m
Author: JoJoJet <joe102000@gmail.com>
Date:   Mon Jun 20 17:35:54 2022 +0000

    Add benchmarks for schedule dependency resolution (#4961)
    
    # Objective
    
    - Add benchmarks to test the performance of `Schedule`'s system dependency resolution.
    
    ## Solution
    
    - Do a series of benchmarks while increasing the number of systems in the schedule to see how the run-time scales.
    - Split the benchmarks into a group with no dependencies, and a group with many dependencies.

[33mcommit 218b0fd3b6edebab28d8e74498ef9ba97c88c55e[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Mon Jun 20 17:18:58 2022 +0000

    `bevy_reflect`: put `serialize` into external `ReflectSerialize` type (#4782)
    
    builds on top of #4780
    
    # Objective
    
    `Reflect` and `Serialize` are currently very tied together because `Reflect` has a `fn serialize(&self) -> Option<Serializable<'_>>` method. Because of that, we can either implement `Reflect` for types like `Option<T>` with `T: Serialize` and have `fn serialize` be implemented, or without the bound but having `fn serialize` return `None`.
    
    By separating `ReflectSerialize` into a separate type (like how it already is for `ReflectDeserialize`, `ReflectDefault`), we could separately `.register::<Option<T>>()` and `.register_data::<Option<T>, ReflectSerialize>()` only if the type `T: Serialize`.
    
    This PR does not change the registration but allows it to be changed in a future PR.
    
    ## Solution
    
    - add the type
    ```rust
    struct ReflectSerialize { .. }
    impl<T: Reflect + Serialize> FromType<T> for ReflectSerialize { .. }
    ```
    
    - remove `#[reflect(Serialize)]` special casing.
    
    - when serializing reflect value types, look for `ReflectSerialize` in the `TypeRegistry` instead of calling `value.serialize()`

[33mcommit bb1d5248339d7a8508c9f794a03b2553e61d17cb[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Jun 20 17:02:25 2022 +0000

    Cleanups in diagnostics (#3871)
    
    - changed `EntityCountDiagnosticsPlugin` to not use an exclusive system to get its entity count
    - removed mention of `WgpuResourceDiagnosticsPlugin` in example `log_diagnostics` as it doesn't exist anymore
    - added ability to enable, disable ~~or toggle~~ a diagnostic (fix #3767)
    - made diagnostic values lazy, so they are only computed if the diagnostic is enabled
    - do not log an average for diagnostics with only one value
    - removed `sum` function from diagnostic as it isn't really useful
    - ~~do not keep an average of the FPS diagnostic. it is already an average on the last 20 frames, so the average FPS was an average of the last 20 frames over the last 20 frames~~
    - do not compute the FPS value as an average over the last 20 frames but give the actual "instant FPS"
    - updated log format to use variable capture
    - added some doc
    - the frame counter diagnostic value can be reseted to 0

[33mcommit 9095d2fb31114f36e6e00b3ae4f8d6fbd88ee5ac[m
Author: Aevyrie <aevyrie@gmail.com>
Date:   Mon Jun 20 11:19:58 2022 +0000

    Physical viewport calculation fix (#5055)
    
    # Objective
    
    - Fixes early return when viewport is not set. This now matches the description of the function.
    
    ## Solution
    
    - Remove errant try `?`.

[33mcommit 8e8cbcc623b1e998788d70ac701ea9c50dc7c3c4[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Jun 20 10:32:44 2022 +0000

    gltf: do not import IoTaskPool in wasm (#5038)
    
    # Objective
    
    - Remove a warning when building for wasm
    
    ## Solution
    
    - Do not import the dependency when building for wasm

[33mcommit d717c63d341739433755a0858e7a1b4bc575062f[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Jun 20 10:32:43 2022 +0000

    enable optional dependencies to stay optional (#5023)
    
    # Objective
    
    - Optional dependencies were enabled by some features as a side effect. for example, enabling the `webgl` feature enables the `bevy_pbr` optional dependency
    
    ## Solution
    
    - Use the syntax introduced in rust 1.60 to specify weak dependency features: https://blog.rust-lang.org/2022/04/07/Rust-1.60.0.html#new-syntax-for-cargo-features
    
    > Weak dependency features tackle the second issue where the `"optional-dependency/feature-name"` syntax would always enable `optional-dependency`. However, often you want to enable the feature on the optional dependency only if some other feature has enabled the optional dependency. Starting in 1.60, you can add a ? as in `"package-name?/feature-name"` which will only enable the given feature if something else has enabled the optional dependency.

[33mcommit 5dbb178d5d4459009c260293db0a7780f3e9b803[m
Author: Corey Farwell <coreyf@rwell.org>
Date:   Sun Jun 19 16:53:49 2022 +0000

    Implement `Eq` and `PartialEq` for `MouseScrollUnit` (#5048)

[33mcommit 8b27124a801d83a1e92f1136ebd2bc9752c3e9d7[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Jun 18 07:41:54 2022 +0000

    WGSL: use correct syntax for matrix access (#5039)
    
    # Objective
    
    - `.x` is not the correct syntax to access a column in a matrix in WGSL: https://www.w3.org/TR/WGSL/#matrix-access-expr
    - naga accepts it and translates it correctly, but it's not valid when shaders are kept as is and used directly in WGSL
    
    ## Solution
    
    - Use the correct syntax

[33mcommit a62ff657fec0023ca7d2d2daefb4573fb2814571[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Jun 17 22:34:58 2022 +0000

    update hashbrown to 0.12 (#5035)
    
    # Objective
    
    - Update hashbrown to 0.12
    
    ## Solution
    
    - Replace #4004
    - As the 0.12 is already in Bevy dependency tree, it shouldn't be an issue to update
    - The exception for the 0.11 should be removed once https://github.com/zakarumych/gpu-descriptor/pull/21 is merged and released
    - Also removed a few exceptions that weren't needed anymore

[33mcommit caa61c5fb7990a816766d0797a81a8a9ac07b3e8[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Fri Jun 17 00:14:02 2022 +0000

    bevy_render: Fix KTX2 UASTC format mapping (#4569)
    
    # Objective
    
    - KTX2 UASTC format mapping was incorrect. For some reason I had written it to map to a set of data formats based on the count of KTX2 sample information blocks, but the mapping should be done based on the channel type in the sample information.
    - This is a valid change pulled out from #4514 as the attempt to fix the array textures there was incorrect
    
    ## Solution
    
    - Fix the KTX2 UASTC `DataFormat` enum to contain the correct formats based on the channel types in section 3.10.2 of https://github.khronos.org/KTX-Specification/ (search for "Basis Universal UASTC Format")
    - Correctly map from the sample information channel type to `DataFormat`
    - Correctly configure transcoding and the resulting texture format based on the `DataFormat`
    
    ---
    
    ## Changelog
    
    - Fixed: KTX2 UASTC format handling

[33mcommit 14ed3b30cbbc4ab51de8a7fafce6baff1eb62b73[m
Author: Arnav Choubey <56453634+x-52@users.noreply.github.com>
Date:   Thu Jun 16 13:20:37 2022 +0000

    Add documentation comments to `bevy_window` (#4333)
    
    # Objective
    - Add documentation comments and `#![warn(missing_docs)]` to `bevy_window`.
    - Part of #3492

[33mcommit ab72c8368f542c516a494069752b369ba6c2d131[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Jun 15 19:18:53 2022 +0000

    Fix ron deprecation (#5021)
    
    # Objective
    
    - Update to fix `ron` deprecation

[33mcommit 32cd9899c84bb42b3b560f3e3b88102babc8eec0[m
Author: Ben Reeves <benwolverine2019@gmail.com>
Date:   Wed Jun 15 06:29:52 2022 +0000

    bevy_render: Add `attributes` and `attributes_mut` methods to `Mesh`. (#3927)
    
    # Use Case
    
    Seems generally useful, but specifically motivated by my work on the [`bevy_datasize`](https://github.com/BGR360/bevy_datasize) crate.
    
    For that project, I'm implementing "heap size estimators" for all of the Bevy internal types. To do this accurately for `Mesh`, I need to get the lengths of all of the mesh's attribute vectors.
    
    Currently, in order to accomplish this, I am doing the following:
    
    * Checking all of the attributes that are mentioned in the `Mesh` class ([see here](https://github.com/BGR360/bevy_datasize/blob/0531ec2d026085a31e937b12d5ecf4109005e737/src/builtins/render/mesh.rs#L46-L54))
    
    * Providing the user with an option to configure additional attributes to check ([see here](https://github.com/BGR360/bevy_datasize/blob/0531ec2d026085a31e937b12d5ecf4109005e737/src/config.rs#L7-L21))
    
    This is both overly complicated and a bit wasteful (since I have to check every attribute name that I know about in case there are attributes set for it).
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit dc950a4d2ff45cb0b35f16ec271e45bf3b6e8545[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Tue Jun 14 16:14:33 2022 +0000

    Fix broken `WorldCell` test (#5009)
    
    # Objective
    
    Fixes #5008. Aliasing references is allowed under Rust if and only if they are immutable.
    
    This logic applies to `WorldCell` as well.

[33mcommit 915fa69b666eae1d04976995534ffae969973dde[m
Author: Aevyrie <aevyrie@gmail.com>
Date:   Tue Jun 14 02:07:40 2022 +0000

    Parallel Frustum Culling (#4489)
    
    # Objective
    
    Working with a large number of entities with `Aabbs`, rendered with an instanced shader, I found the bottleneck became the frustum culling system. The goal of this PR is to significantly improve culling performance without any major changes. We should consider constructing a BVH for more substantial improvements.
    
    ## Solution
    
    - Convert the inner entity query to a parallel iterator with `par_for_each_mut` using a batch size of 1,024.
    - This outperforms single threaded culling when there are more than 1,000 entities.
      - Below this they are approximately equal, with <= 10 microseconds of multithreading overhead.
      - Above this, the multithreaded version is significantly faster, scaling linearly with core count.
    - In my million-entity-workload, this PR improves my framerate by 200% - 300%.
    
    ## log-log of `check_visibility` time vs. entities for single/multithreaded
    ![image](https://user-images.githubusercontent.com/2632925/163709007-7eab4437-e9f9-4c06-bac0-250073885110.png)
    
    ---
    
    ## Changelog
    
    Frustum culling is now run with a parallel query. When culling more than a thousand entities, this is faster than the previous method, scaling proportionally with the number of available cores.

[33mcommit c6222f1acc4a5d4478b5cb188f0eda24afb6546a[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Tue Jun 14 00:58:30 2022 +0000

    Separate out PBR lighting, shadows, clustered forward, and utils from pbr.wgsl (#4938)
    
    # Objective
    
    - Builds on top of #4901
    - Separate out PBR lighting, shadows, clustered forward, and utils from `pbr.wgsl` as part of making the PBR code more reusable and extensible.
    - See #3969 for details.
    
    ## Solution
    
    - Add `bevy_pbr::utils`, `bevy_pbr::clustered_forward`, `bevy_pbr::lighting`, `bevy_pbr::shadows` shader imports exposing many shader functions for external use
    - Split `PI`, `saturate()`, `hsv2rgb()`, and `random1D()` into `bevy_pbr::utils`
    - Split clustered-forward-specific functions into `bevy_pbr::clustered_forward`, including moving the debug visualization code into a `cluster_debug_visualization()` function in that import
    - Split PBR lighting functions into `bevy_pbr::lighting`
    - Split shadow functions into `bevy_pbr::shadows`
    
    ---
    
    ## Changelog
    
    - Added: `bevy_pbr::utils`, `bevy_pbr::clustered_forward`, `bevy_pbr::lighting`, `bevy_pbr::shadows` shader imports exposing many shader functions for external use
      - Split `PI`, `saturate()`, `hsv2rgb()`, and `random1D()` into `bevy_pbr::utils`
      - Split clustered-forward-specific functions into `bevy_pbr::clustered_forward`, including moving the debug visualization code into a `cluster_debug_visualization()` function in that import
      - Split PBR lighting functions into `bevy_pbr::lighting`
      - Split shadow functions into `bevy_pbr::shadows`

[33mcommit b333386271b38d96a78702172d522981004a1f1c[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Tue Jun 14 00:32:33 2022 +0000

    Add reusable shader functions for transforming position/normal/tangent (#4901)
    
    # Objective
    
    - Add reusable shader functions for transforming positions / normals / tangents between local and world / clip space for 2D and 3D so that they are done in a simple and correct way
    - The next step in #3969 so check there for more details.
    
    ## Solution
    
    - Add `bevy_pbr::mesh_functions` and `bevy_sprite::mesh2d_functions` shader imports
      - These contain `mesh_` and `mesh2d_` versions of the following functions:
        - `mesh_position_local_to_world`
        - `mesh_position_world_to_clip`
        - `mesh_position_local_to_clip`
        - `mesh_normal_local_to_world`
        - `mesh_tangent_local_to_world`
    - Use them everywhere where it is appropriate
      - Notably not in the sprite and UI shaders where `mesh2d_position_world_to_clip` could have been used, but including all the functions depends on the mesh binding so I chose to not use the function there
    - NOTE: The `mesh_` and `mesh2d_` functions are currently identical. However, if I had defined only `bevy_pbr::mesh_functions` and used that in bevy_sprite, then bevy_sprite would have a runtime dependency on bevy_pbr, which seems undesirable. I also expect that when we have a proper 2D rendering API, these functions will diverge between 2D and 3D.
    
    ---
    
    ## Changelog
    
    - Added: `bevy_pbr::mesh_functions` and `bevy_sprite::mesh2d_functions` shader imports containing `mesh_` and `mesh2d_` versions of the following functions:
      - `mesh_position_local_to_world`
      - `mesh_position_world_to_clip`
      - `mesh_position_local_to_clip`
      - `mesh_normal_local_to_world`
      - `mesh_tangent_local_to_world`
    
    ## Migration Guide
    
    - The `skin_tangents` function from the `bevy_pbr::skinning` shader import has been replaced with the `mesh_tangent_local_to_world` function from the `bevy_pbr::mesh_functions` shader import

[33mcommit 407c080e599e98274290d2fc89739ecde0303b84[m
Author: Boxy <supbscripter@gmail.com>
Date:   Mon Jun 13 23:35:54 2022 +0000

    Replace `ReadOnlyFetch` with `ReadOnlyWorldQuery` (#4626)
    
    # Objective
    
    - Fix a type inference regression introduced by #3001
    - Make read only bounds on world queries more user friendly
    
    ptrification required you to write `Q::Fetch: ReadOnlyFetch` as `for<'w> QueryFetch<'w, Q>: ReadOnlyFetch` which has the same type inference problem as `for<'w> QueryFetch<'w, Q>: FilterFetch<'w>` had, i.e. the following code would error:
    ```rust
    #[derive(Component)]
    struct Foo;
    
    fn bar(a: Query<(&Foo, Without<Foo>)>) {
        foo(a);
    }
    
    fn foo<Q: WorldQuery>(a: Query<Q, ()>)
    where
        for<'w> QueryFetch<'w, Q>: ReadOnlyFetch,
    {
    }
    ```
    `for<..>` bounds are also rather user unfriendly..
    
    ## Solution
    
    Remove the `ReadOnlyFetch` trait in favour of a `ReadOnlyWorldQuery` trait, and remove `WorldQueryGats::ReadOnlyFetch` in favor of `WorldQuery::ReadOnly` allowing the previous code snippet to be written as:
    ```rust
    #[derive(Component)]
    struct Foo;
    
    fn bar(a: Query<(&Foo, Without<Foo>)>) {
        foo(a);
    }
    
    fn foo<Q: ReadOnlyWorldQuery>(a: Query<Q, ()>) {}
    ```
    This avoids the `for<...>` bound which makes the code simpler and also fixes the type inference issue.
    
    The reason for moving the two functions out of `FetchState` and into `WorldQuery` is to allow the world query `&mut T` to share a `State` with the `&T` world query so that it can have `type ReadOnly = &T`. Presumably it would be possible to instead have a `ReadOnlyRefMut<T>` world query and then do `type ReadOnly = ReadOnlyRefMut<T>` much like how (before this PR) we had a `ReadOnlyWriteFetch<T>`. A side benefit of the current solution in this PR is that it will likely make it easier in the future to support an API such as `Query<&mut T> -> Query<&T>`. The primary benefit IMO is just that `ReadOnlyRefMut<T>` and its associated fetch would have to reimplement all of the logic that the `&T` world query impl does but this solution avoids that :)
    
    ---
    
    ## Changelog/Migration Guide
    
    The trait `ReadOnlyFetch` has been replaced with `ReadOnlyWorldQuery` along with the `WorldQueryGats::ReadOnlyFetch` assoc type which has been replaced with `<WorldQuery::ReadOnly as WorldQueryGats>::Fetch`
    - Any where clauses such as `QueryFetch<Q>: ReadOnlyFetch` should be replaced with `Q: ReadOnlyWorldQuery`.
    - Any custom world query impls should implement `ReadOnlyWorldQuery` insead of `ReadOnlyFetch`
    
    Functions `update_component_access` and `update_archetype_component_access` have been moved from the `FetchState` trait to `WorldQuery`
    - Any callers should now call `Q::update_component_access(state` instead of `state.update_component_access` (and `update_archetype_component_access` respectively)
    - Any custom world query impls should move the functions from the `FetchState` impl to `WorldQuery` impl
    
    `WorldQuery` has been made an `unsafe trait`, `FetchState` has been made a safe `trait`. (I think this is how it should have always been, but regardless this is _definitely_ necessary now that the two functions have been moved to `WorldQuery`)
    - If you have a custom `FetchState` impl make it a normal `impl` instead of `unsafe impl`
    - If you have a custom `WorldQuery` impl make it an `unsafe impl`, if your code was sound before it is going to still be sound

[33mcommit 4050c8aa310b9c482f387d10c42aa4b59f399749[m
Author: Simonas Kazlauskas <github@kazlauskas.me>
Date:   Mon Jun 13 22:40:29 2022 +0000

    bevy_log: upgrade to tracing-tracy 0.10.0 (#4991)
    
    This upgrade should bring some significant performance improvements to
    instrumentation. These are mostly achieved by disabling features (by
    default) that are likely not widely used by default â collection of
    callstacks and support for fibers that wasn't used for anything in
    particular yet. For callstack collection it might be worthwhile to
    provide a mechanism to enable this at runtime by calling
    `TracyLayer::with_stackdepth`.
    
    These should bring the cost of a single span down from 30+Âµs per span to
    a more reasonable 1.5Âµs or so and down to the ns scale for events (on my
    1st gen Ryzen machine, anyway.) There is still a fair amount of overhead
    over plain tracy_client instrumentation in formatting and such, but
    dealing with it requires significant effort and this is a
    straightforward improvement to have for the time being.
    
    
    Co-authored-by: Simonas Kazlauskas <git@kazlauskas.me>

[33mcommit 0560aa58932bba5035fc7ebd0cdecfaa015dbb93[m
Author: Mike <mike.hsu@gmail.com>
Date:   Mon Jun 13 21:51:16 2022 +0000

    Fix clap for CI (#5005)
    
    # Objective
    
    - Fix CI
    - relevant clap issue https://github.com/clap-rs/clap/issues/3822
    
    ## Solution
    
    - slap `value_parser` on all the clap derives. This tells clap to use the default parser for the type.

[33mcommit b7d784de6e27c46cc42231e1dea94c3ba4de9463[m
Author: Chris Dawkins <dawkins.chris.dev@gmail.com>
Date:   Sun Jun 12 19:34:26 2022 +0000

    Bugfix `State::set` transition condition infinite loop (#4890)
    
    # Objective
    
    - Fixes #4271
    
    ## Solution
    
    - Check for a pending transition in addition to a scheduled operation.
    - I don't see a valid reason for updating the state unless both `scheduled` and `transition` are empty.

[33mcommit 5a09694dec4057e4c53351ef4de3fccf2252aaf3[m
Author: ickshonpe <david.curthoys@googlemail.com>
Date:   Sun Jun 12 19:14:48 2022 +0000

    Overflow::Hidden doesn't work correctly with scale_factor_override (#3854)
    
    # Objective
    
    Overflow::Hidden doesn't work correctly with scale_factor_override.
    If you run the Bevy UI example with scale_factor_override 3 you'll see half clipped text around the edges of the scrolling listbox.
    The problem seems to be that the corners of the node are transformed before the amount of clipping required is calculated. But then that transformed clip is compared to the original untransformed size of the node rect to see if it should be culled or not. With a higher scale factor the relative size of the untransformed node rect is going to be really big, so the overflow isn't culled.
    
    # Solution
    
    Multiply the size of the node rect by extracted_uinode.transform before the cull test.

[33mcommit f969c62f7bfaf1932fbb533dfd87467aeddf75cb[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Jun 11 20:10:13 2022 +0000

    Fix wasm examples (#4967)
    
    # Objective
    
    Fix #4958
    
    There was 4 issues:
    
    - this is not true in WASM and on macOS: https://github.com/bevyengine/bevy/blob/f28b92120920f387020f3b3e858f0e7039b9c07e/examples/3d/split_screen.rs#L90
      - ~~I made sure the system was running at least once~~
      - I'm sending the event on window creation
    - in webgl, setting a viewport has impacts on other render passes
      - only in webgl and when there is a custom viewport, I added a render pass without a custom viewport
    - shaderdef NO_ARRAY_TEXTURES_SUPPORT was not used by the 2d pipeline
      - webgl feature was used but not declared in bevy_sprite, I added it to the Cargo.toml
    - shaderdef NO_STORAGE_BUFFERS_SUPPORT was not used by the 2d pipeline
      - I added it based on the BufferBindingType
    
    The last commit changes the two last fixes to add the shaderdefs in the shader cache directly instead of needing to do it in each pipeline
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 772d15238c2edd6eb6006a71e74bc64fddaca7f1[m
Author: Aevyrie <aevyrie@gmail.com>
Date:   Sat Jun 11 09:13:37 2022 +0000

    Change default `Image` `FilterMode` to `Linear` (#4465)
    
    # Objective
    
    - Closes #4464
    
    ## Solution
    
    - Specify default mag and min filter types for `Image` instead of using `wgpu`'s defaults.
    
    ---
    
    ## Changelog
    
    ### Changed
    
    - Default `Image` filtering changed from `Nearest` to `Linear`.
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 728d9696d73eef2675cce699fe1896f5c13701bd[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Jun 11 08:56:26 2022 +0000

    fix nightly for miri to 2022-06-08 to avoid timeouts (#4984)
    
    # Objective
    
    - Fix timeout in miri
    
    ## Solution
    
    - Use a nightly version from before the issue happened: 2022-06-08
    - To be checked after https://github.com/rust-lang/miri/issues/2223 is fixed

[33mcommit 57b4620a7dc4acafc7ef00d5466caf4b09f9e3d2[m
Author: LoipesMas <46327403+LoipesMas@users.noreply.github.com>
Date:   Thu Jun 9 21:18:16 2022 +0000

    Fix Good-First-Issue label in  CONTRIBUTING.md (#4979)
    
    # Objective
    - CONTRIBUTING.md references wrong issue label, making it potentially confusing for new contributors.
    
    ## Solution
    - Update  CONTRIBUTING.md.
    
    ---
    I assume the label was changed recently.

[33mcommit e6f34ba47f5d8face2f154dce7bc93bc034017fb[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Thu Jun 9 21:18:15 2022 +0000

    bevy_reflect: Add statically available type info for reflected types (#4042)
    
    # Objective
    
    > Resolves #4504
    
    It can be helpful to have access to type information without requiring an instance of that type. Especially for `Reflect`, a lot of the gathered type information is known at compile-time and should not necessarily require an instance.
    
    ## Solution
    
    Created a dedicated `TypeInfo` enum to store static type information. All types that derive `Reflect` now also implement the newly created `Typed` trait:
    
    ```rust
    pub trait Typed: Reflect {
      fn type_info() -> &'static TypeInfo;
    }
    ```
    
    > Note: This trait was made separate from `Reflect` due to `Sized` restrictions.
    
    If you only have access to a `dyn Reflect`, just call `.get_type_info()` on it. This new trait method on `Reflect` should return the same value as if you had called it statically.
    
    If all you have is a `TypeId` or type name, you can get the `TypeInfo` directly from the registry using the `TypeRegistry::get_type_info` method (assuming it was registered).
    
    ### Usage
    
    Below is an example of working with `TypeInfo`. As you can see, we don't have to generate an instance of `MyTupleStruct` in order to get this information.
    
    ```rust
    #[derive(Reflect)]
    struct MyTupleStruct(usize, i32, MyStruct);
    
    let info = MyTupleStruct::type_info();
    if let TypeInfo::TupleStruct(info) = info {
      assert!(info.is::<MyTupleStruct>());
      assert_eq!(std::any::type_name::<MyTupleStruct>(), info.type_name());
      assert!(info.field_at(1).unwrap().is::<i32>());
    } else {
      panic!("Expected `TypeInfo::TupleStruct`");
    }
    ```
    
    ### Manual Implementations
    
    It's not recommended to manually implement `Typed` yourself, but if you must, you can use the `TypeInfoCell` to automatically create and manage the static `TypeInfo`s for you (which is very helpful for blanket/generic impls):
    
    ```rust
    use bevy_reflect::{Reflect, TupleStructInfo, TypeInfo, UnnamedField};
    use bevy_reflect::utility::TypeInfoCell;
    
    struct Foo<T: Reflect>(T);
    
    impl<T: Reflect> Typed for Foo<T> {
      fn type_info() -> &'static TypeInfo {
        static CELL: TypeInfoCell = TypeInfoCell::generic();
        CELL.get_or_insert::<Self, _>(|| {
          let fields = [UnnamedField::new::<T>()];
          let info = TupleStructInfo::new::<Self>(&fields);
          TypeInfo::TupleStruct(info)
        })
      }
    }
    ```
    
    ## Benefits
    
    One major benefit is that this opens the door to other serialization methods. Since we can get all the type info at compile time, we can know how to properly deserialize something like:
    
    ```rust
    #[derive(Reflect)]
    struct MyType {
      foo: usize,
      bar: Vec<String>
    }
    
    // RON to be deserialized:
    (
      type: "my_crate::MyType", // <- We now know how to deserialize the rest of this object
      value: {
        // "foo" is a value type matching "usize"
        "foo": 123,
        // "bar" is a list type matching "Vec<String>" with item type "String"
        "bar": ["a", "b", "c"]
      }
    )
    ```
    
    Not only is this more compact, but it has better compatibility (we can change the type of `"foo"` to `i32` without having to update our serialized data).
    
    Of course, serialization/deserialization strategies like this may need to be discussed and fully considered before possibly making a change. However, we will be better equipped to do that now that we can access type information right from the registry.
    
    ## Discussion
    
    Some items to discuss:
    
    1. Duplication. There's a bit of overlap with the existing traits/structs since they require an instance of the type while the type info structs do not (for example, `Struct::field_at(&self, index: usize)` and `StructInfo::field_at(&self, index: usize)`, though only `StructInfo` is accessible without an instance object). Is this okay, or do we want to handle it in another way?
    2. Should `TypeInfo::Dynamic` be removed? Since the dynamic types don't have type information available at runtime, we could consider them `TypeInfo::Value`s (or just even just `TypeInfo::Struct`). The intention with `TypeInfo::Dynamic` was to keep the distinction from these dynamic types and actual structs/values since users might incorrectly believe the methods of the dynamic type's info struct would map to some contained data (which isn't possible statically).
    4. General usefulness of this change, including missing/unnecessary parts.
    5. Possible changes to the scene format? (One possible issue with changing it like in the example above might be that we'd have to be careful when handling generic or trait object types.)
    
    ## Compile Tests
    
    I ran a few tests to compare compile times (as suggested [here](https://github.com/bevyengine/bevy/pull/4042#discussion_r876408143)). I toggled `Reflect` and `FromReflect` derive macros using `cfg_attr` for both this PR (aa5178e7736a6f8252e10e543e52722107649d3f) and main (c309acd4322b1c3b2089e247a2d28b938eb7b56d).
    
    <details>
    <summary>See More</summary>
    
    The test project included 250 of the following structs (as well as a few other structs):
    
    ```rust
    #[derive(Default)]
    #[cfg_attr(feature = "reflect", derive(Reflect))]
    #[cfg_attr(feature = "from_reflect", derive(FromReflect))]
    pub struct Big001 {
        inventory: Inventory,
        foo: usize,
        bar: String,
        baz: ItemDescriptor,
        items: [Item; 20],
        hello: Option<String>,
        world: HashMap<i32, String>,
        okay: (isize, usize, /* wesize */),
        nope: ((String, String), (f32, f32)),
        blah: Cow<'static, str>,
    }
    ```
    
    > I don't know if the compiler can optimize all these duplicate structs away, but I think it's fine either way. We're comparing times, not finding the absolute worst-case time.
    
    I only ran each build 3 times using `cargo build --timings` (thank you @devil-ira), each of which were preceeded by a `cargo clean --package bevy_reflect_compile_test`.
    
    Here are the times I got:
    
    | Test                             | Test 1 | Test 2 | Test 3 | Average |
    | -------------------------------- | ------ | ------ | ------ | ------- |
    | Main                             | 1.7s   | 3.1s   | 1.9s   | 2.33s   |
    | Main + `Reflect`                 | 8.3s   | 8.6s   | 8.1s   | 8.33s   |
    | Main + `Reflect` + `FromReflect` | 11.6s  | 11.8s  | 13.8s  | 12.4s   |
    | PR                               | 3.5s   | 1.8s   | 1.9s   | 2.4s    |
    | PR + `Reflect`                   | 9.2s   | 8.8s   | 9.3s   | 9.1s    |
    | PR + `Reflect` + `FromReflect`   | 12.9s  | 12.3s  | 12.5s  | 12.56s  |
    
    </details>
    
    ---
    
    ## Future Work
    
    Even though everything could probably be made `const`, we unfortunately can't. This is because `TypeId::of::<T>()` is not yet `const` (see https://github.com/rust-lang/rust/issues/77125). When it does get stabilized, it would probably be worth coming back and making things `const`.
    
    Co-authored-by: MrGVSV <49806985+MrGVSV@users.noreply.github.com>

[33mcommit 1679a9973825e5241ca91f33919e63667d4eb421[m
Author: Peter Hebden <peterhebden6@gmail.com>
Date:   Thu Jun 9 20:57:43 2022 +0000

    Fix typo in game_menu.rs (#4977)
    
    Should be trivial
    
    # Objective
    
    There is a typo in a comment that is fixed in this commit
    
    ## Solution
    
    Fix the typo
    `positionned` -> `positioned`
    
    ---

[33mcommit c6958b3056edfb7669da41ff9da103c379d97617[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Jun 9 20:34:09 2022 +0000

    add a `SceneBundle` to spawn a scene (#2424)
    
    # Objective
    
    - Spawning a scene is handled as a special case with a command `spawn_scene` that takes an handle but doesn't let you specify anything else. This is the only handle that works that way.
    - Workaround for this have been to add the `spawn_scene` on `ChildBuilder` to be able to specify transform of parent, or to make the `SceneSpawner` available to be able to select entities from a scene by their instance id
    
    ## Solution
    
    Add a bundle
    ```rust
    pub struct SceneBundle {
        pub scene: Handle<Scene>,
        pub transform: Transform,
        pub global_transform: GlobalTransform,
        pub instance_id: Option<InstanceId>,
    }
    ```
    
    and instead of
    ```rust
    commands.spawn_scene(asset_server.load("models/FlightHelmet/FlightHelmet.gltf#Scene0"));
    ```
    you can do
    ```rust
    commands.spawn_bundle(SceneBundle {
        scene: asset_server.load("models/FlightHelmet/FlightHelmet.gltf#Scene0"),
        ..Default::default()
    });
    ```
    
    The scene will be spawned as a child of the entity with the `SceneBundle`
    
    ~I would like to remove the command `spawn_scene` in favor of this bundle but didn't do it yet to get feedback first~
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit cdb62af4bf52f160399bd01936cf3fc5b7afbd81[m
Author: James Liu <contact@jamessliu.com>
Date:   Thu Jun 9 03:34:51 2022 +0000

    Replace ComponentSparseSet's internals with a Column (#4909)
    
    # Objective
    Following #4855, `Column` is just a parallel `BlobVec`/`Vec<UnsafeCell<ComponentTicks>>` pair, which is identical to the dense and ticks vecs in `ComponentSparseSet`, which has some code duplication with `Column`.
    
    ## Solution
    Replace dense and ticks in `ComponentSparseSet` with a `Column`.

[33mcommit f2b545049c9696bdce388e939022190c401a0dbc[m
Author: James Liu <contact@jamessliu.com>
Date:   Thu Jun 9 03:19:31 2022 +0000

    Implement FusedIterator for eligible Iterator types (#4942)
    
    # Objective
    Most of our `Iterator` impls satisfy the requirements of `std::iter::FusedIterator`, which has internal specialization that optimizes `Interator::fuse`. The std lib iterator combinators do have a few that rely on `fuse`, so this could optimize those use cases. I don't think we're using any of them in the engine itself, but beyond a light increase in compile time, it doesn't hurt to implement the trait.
    
    ## Solution
    Implement the trait for all eligible iterators in first party crates. Also add a missing `ExactSizeIterator` on an iterator that could use it.

[33mcommit 012ae07dc87d43a7437bd4200b4a7f04bf99dbf3[m
Author: James Liu <contact@jamessliu.com>
Date:   Thu Jun 9 02:43:24 2022 +0000

    Add global init and get accessors for all newtyped TaskPools (#2250)
    
    Right now, a direct reference to the target TaskPool is required to launch tasks on the pools, despite the three newtyped pools (AsyncComputeTaskPool, ComputeTaskPool, and IoTaskPool) effectively acting as global instances. The need to pass a TaskPool reference adds notable friction to spawning subtasks within existing tasks. Possible use cases for this may include chaining tasks within the same pool like spawning separate send/receive I/O tasks after waiting on a network connection to be established, or allowing cross-pool dependent tasks like starting dependent multi-frame computations following a long I/O load.
    
    Other task execution runtimes provide static access to spawning tasks (i.e. `tokio::spawn`), which is notably easier to use than the reference passing required by `bevy_tasks` right now.
    
    This PR makes does the following:
    
     * Adds `*TaskPool::init` which initializes a `OnceCell`'ed with a provided TaskPool. Failing if the pool has already been initialized.
     * Adds `*TaskPool::get` which fetches the initialized global pool of the respective type or panics. This generally should not be an issue in normal Bevy use, as the pools are initialized before they are accessed.
     * Updated default task pool initialization to either pull the global handles and save them as resources, or if they are already initialized, pull the a cloned global handle as the resource.
    
    This should make it notably easier to build more complex task hierarchies for dependent tasks. It should also make writing bevy-adjacent, but not strictly bevy-only plugin crates easier, as the global pools ensure it's all running on the same threads.
    
    One alternative considered is keeping a thread-local reference to the pool for all threads in each pool to enable the same `tokio::spawn` interface. This would spawn tasks on the same pool that a task is currently running in. However this potentially leads to potential footgun situations where long running blocking tasks run on `ComputeTaskPool`.

[33mcommit 5ace79ff09f47a41934b6efc299891706cf5cc89[m
Author: Cai Bingjun <62678643+C-BJ@users.noreply.github.com>
Date:   Wed Jun 8 17:55:57 2022 +0000

    Let the project page support GitHub's new ability to display open source licenses (#4966)
    
    Change _LICENSE-APACHE_ and _LICENSE-MIT_ file location
    Delete _LICENSE_
    You can make the license in about on bevy's GitHub page display as **Apache-2.0, MIT licenses found** instead of **View license**

[33mcommit f28b92120920f387020f3b3e858f0e7039b9c07e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jun 7 22:22:10 2022 +0000

    Add "depth_load_op" configuration to 3d Cameras (#4904)
    
    # Objective
    
    Users should be able to configure depth load operations on cameras. Currently every camera clears depth when it is rendered. But sometimes later passes need to rely on depth from previous passes.
    
    ## Solution
    
    This adds the `Camera3d::depth_load_op` field with a new `Camera3dDepthLoadOp` value. This is a custom type because Camera3d uses "reverse-z depth" and this helps us record and document that in a discoverable way. It also gives us more control over reflection + other trait impls, whereas `LoadOp` is owned by the `wgpu` crate.
    
    ```rust
    commands.spawn_bundle(Camera3dBundle {
        camera_3d: Camera3d {
            depth_load_op: Camera3dDepthLoadOp::Load,
            ..default()
        },
        ..default()
    });
    ```
    
    ### two_passes example with the "second pass" camera configured to the default (clear depth to 0.0)
    
    ![image](https://user-images.githubusercontent.com/2694663/171743172-46d4fdd5-5090-46ea-abe4-1fbc519f6ee8.png)
    
    
    ### two_passes example with the "second pass" camera configured to "load" the depth
    ![image](https://user-images.githubusercontent.com/2694663/171743323-74dd9a1d-9c25-4883-98dd-38ca0bed8c17.png)
    
    ---
    
    ## Changelog
    
    ### Added
    
    * `Camera3d` now has a `depth_load_op` field, which can configure the Camera's main 3d pass depth loading behavior.

[33mcommit cbf032419d3a04959cc83d2df64c5f53eeda606e[m
Author: Aevyrie <aevyrie@gmail.com>
Date:   Tue Jun 7 15:23:45 2022 +0000

    Refactor `Camera` methods and add viewport rect  (#4948)
    
    While working on a refactor of `bevy_mod_picking` to include viewport-awareness, I found myself writing these functions to test if a cursor coordinate was inside the camera's rendered area.
    
    # Objective
    
    - Simplify conversion from physical to logical pixels
    - Add methods that returns the dimensions of the viewport as a min-max rect
    
    ---
    
    ## Changelog
    
    - Added `Camera::to_logical`
    - Added `Camera::physical_viewport_rect`
    - Added `Camera::logical_viewport_rect`

[33mcommit d51a87cf2868596dffd7bf9cd0f77a4122165769[m
Author: Johan Klokkhammer Helsing <johanhelsing@gmail.com>
Date:   Tue Jun 7 08:14:10 2022 +0000

    Recommend posting new plugins in #crates discord channel (#4956)
    
    # Objective
    
    - Guide people to the right discord channel to post about their new plugin. #showcase was split into multiple channels.
    
    ## Solution
    
    - recommend posting in #crates

[33mcommit 73174730e44a9e2fea7f004e2b78581e8e33bddc[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Jun 7 02:16:47 2022 +0000

    use the default() method in examples instead of Default::default() (#4952)
    
    # Objective
    
    - Use the `..default()` method in examples instead of `..Default::default()`

[33mcommit 649e30de0974fbba8477c5c21e5bea24d3efe4cd[m
Author: Danny <its.danny@hey.com>
Date:   Tue Jun 7 02:02:53 2022 +0000

    update system test example to include using events (#4951)
    
    # Objective
    
    - Adds an example of testing systems that handle events. I had a hard time figuring out how to do it a couple days ago so figured an official example could be useful.
    - Fixes #4936
    
    ## Solution
    
    - Adds a `Score` resource and an `EnemyDied` event. An `update_score` system updates the score when a new event comes through. I'm not sure the example is great, as this probably isn't how you'd do it in a real game, but I didn't want to change the existing example too much.

[33mcommit 39ea1bb9b7f03e9803648b2c28c269ce365e56e4[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Jun 6 20:22:51 2022 +0000

    run examples in wasm in CI (#4818)
    
    # Objective
    
    - Run examples in WASM in CI
    - Fix #4817
    
    ## Solution
    
    - on feature `bevy_ci_testing`
      - add an extra log message before exiting
      - when building for wasm, read CI config file at compile time
    - add a simple [playwright](https://playwright.dev) test script that opens the browser then waits for the success log, and takes a screenshot
    - add a CI job that runs the playwright test for Chromium and Firefox on one example (lighting) and save the screenshots
      - Firefox screenshot is good (with some clusters visible)
      - Chromium screenshot is gray, I don't know why but it's logging `GPU stall due to ReadPixels`
      - Webkit is not enabled for now, to revisit once https://bugs.webkit.org/show_bug.cgi?id=234926 is fixed or worked around
    - the CI job only runs on bors validation
    
    example run: https://github.com/mockersf/bevy/actions/runs/2361673465. The screenshots can be downloaded

[33mcommit 193998b5d4f3f02d690f3b0fc475db9817ee56f6[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Jun 6 20:00:30 2022 +0000

    add NO_STORAGE_BUFFERS_SUPPORT shaderdef when needed (#4949)
    
    # Objective
    
    - fix #4946
    - fix running 3d in wasm
    
    ## Solution
    
    - since #4867, the imports are splitter differently, and this shader def was not always set correctly depending on the shader used
    - add it when needed

[33mcommit 25219a4d18c262a4abf919d9fb73a957da5a028c[m
Author: Wybe Westra <dev@wwestra.nl>
Date:   Mon Jun 6 17:52:09 2022 +0000

    Add transparency examples (#3695)
    
    Adds examples demonstrating transparency for 2d, 3d and UI.
    
    Fixes #3215.

[33mcommit 92ddfe8ad40dc8a0270fe01a1d7dec83850e5ee0[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Mon Jun 6 16:09:16 2022 +0000

    Add methods for querying lists of entities. (#4879)
    
    # Objective
    Improve querying ergonomics around collections and iterators of entities.
    
    Example how queries over Children might be done currently.
    ```rust
    fn system(foo_query: Query<(&Foo, &Children)>, bar_query: Query<(&Bar, &Children)>) {
        for (foo, children) in &foo_query {
            for child in children.iter() {
                if let Ok((bar, children)) = bar_query.get(*child) {
                    for child in children.iter() {
                        if let Ok((foo, children)) = foo_query.get(*child) {
                            // D:
                        }
                    }
                }
            }
        }
    }
    ```
    Answers #4868
    Partially addresses #4864
    Fixes #1470
    ## Solution
    Based on the great work by @deontologician in #2563
    
    Added `iter_many` and `many_for_each_mut` to `Query`.
    These take a list of entities (Anything that implements `IntoIterator<Item: Borrow<Entity>>`).
    
    `iter_many` returns a `QueryManyIter` iterator over immutable results of a query (mutable data will be cast to an immutable form).
    
    `many_for_each_mut` calls a closure for every result of the query, ensuring not aliased mutability.
    This iterator goes over the list of entities in order and returns the result from the query for it. Skipping over any entities that don't match the query.
    
    Also added `unsafe fn iter_many_unsafe`.
    
    ### Examples
    ```rust
    #[derive(Component)]
    struct Counter {
        value: i32
    }
    
    #[derive(Component)]
    struct Friends {
        list: Vec<Entity>,
    }
    
    fn system(
        friends_query: Query<&Friends>,
        mut counter_query: Query<&mut Counter>,
    ) {
        for friends in &friends_query {
            for counter in counter_query.iter_many(&friends.list) {
                println!("Friend's counter: {:?}", counter.value);
            }
    
            counter_query.many_for_each_mut(&friends.list, |mut counter| {
                counter.value += 1;
                println!("Friend's counter: {:?}", counter.value);
            });
        }
    }
    
    ```
    
    Here's how example in the Objective section can be written with this PR.
    ```rust
    fn system(foo_query: Query<(&Foo, &Children)>, bar_query: Query<(&Bar, &Children)>) {
        for (foo, children) in &foo_query {
            for (bar, children) in bar_query.iter_many(children) {
                for (foo, children) in foo_query.iter_many(children) {
                    // :D
                }
            }
        }
    }
    ```
    ## Additional changes
    Implemented `IntoIterator` for `&Children` because why not.
    ## Todo
    - Bikeshed!
    
    Co-authored-by: deontologician <deontologician@gmail.com>
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit b47291264b4d2508e288b4ec122589d3aae7a0e5[m
Author: dataphract <dataphract@gmail.com>
Date:   Mon Jun 6 15:47:52 2022 +0000

    diagnostics: meaningful error when graph node has wrong number of inputs (#4924)
    
    # Objective
    
    Currently, providing the wrong number of inputs to a render graph node triggers this assertion:
    
    ```
    thread 'main' panicked at 'assertion failed: `(left == right)`
      left: `1`,
     right: `2`', /[redacted]/bevy/crates/bevy_render/src/renderer/graph_runner.rs:164:13
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
    ```
    
    This does not provide the user any context.
    
    ## Solution
    
    Add a new `RenderGraphRunnerError` variant to handle this case. The new message looks like this:
    
    ```
    ERROR bevy_render::renderer: Error running render graph:
    ERROR bevy_render::renderer: > node (name: 'Some("outline_pass")') has 2 input slots, but was provided 1 values
    ```
    
    ---
    
    ## Changelog
    
    ### Changed
    
    `RenderGraphRunnerError` now has a new variant, `MismatchedInputCount`.
    
    ## Migration Guide
    
    Exhaustive matches on `RenderGraphRunnerError` will need to add a branch to handle the new `MismatchedInputCount` variant.

[33mcommit c4080c68323c396261ef130d2eece4d8e5732a75[m
Author: Yutao Yuan <infmagic2047reg@outlook.com>
Date:   Mon Jun 6 15:47:51 2022 +0000

    Fix release workflow (#4903)
    
    # Objective
    
    While playing with the code, I found some problems in the recently merged version-bumping workflow:
    - Most importantly, now that we are using `0.8.0-dev` in development, the workflow will try to bump it to `0.9.0` :sob:
    - The crate filter is outdated now that we have more crates in `tools`.
    - We are using `bevy@users.noreply.github.com`, but according to [Github help](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-email-preferences/setting-your-commit-email-address#about-commit-email-addresses), that email address means "old no-reply email format for the user `bevy`". It is currently not associated with any account, but I feel this is still not appropriate here.
    
    ## Solution
    
    - Create a new workflow, `Post-release version bump`, that should be run after a release and bumps version from `0.X.0` to `0.X+1.0-dev`. Unfortunately, cargo-release doesn't have a builtin way to do this, so we need to parse and increment the version manually.
    - Add the new crates in `tools` to exclusion list. Also removes the dependency version specifier from `bevy_ecs_compile_fail_tests`. It is not in the workspace so the dependency version will not get automatically updated by cargo-release.
    - Change the author email to `41898282+github-actions[bot]@users.noreply.github.com`. According to the discussion [here](https://github.com/actions/checkout/issues/13#issuecomment-724415212) and [here](https://github.community/t/github-actions-bot-email-address/17204/6), this is the email address associated with the github-actions bot account.
    - Also add the workflows to our release checklist.
    
    See infmagic2047#5 and infmagic2047#6 for examples of release and post-release PRs.

[33mcommit 85cd0eb445b6fbad6bcff86a37ccb0e59cf948ea[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Mon Jun 6 14:46:41 2022 +0000

    Add ParallelCommands system parameter (#4749)
    
    (follow-up to #4423)
    # Objective
    Currently, it isn't possible to easily fire commands from within par_for_each blocks. This PR allows for issuing commands from within parallel scopes.

[33mcommit 2f5a1c6e1699cae7791f8122598116e233894a72[m
Author: Yoshiera <yoshierahuang@126.com>
Date:   Mon Jun 6 14:24:41 2022 +0000

    remove redundant query parameters (#4945)
    
    # Objective
    
    In the `queue_custom` system in `shader_instancing` example, the query of `material_meshes`  has a redundant `With<Handle<Mesh>>` query filter because `Handle<Mesh>` is included in the component access.
    
    ## Solution
    
    Remove the `With<Handle<Mesh>>` filter

[33mcommit 765bd46c2eb853a6921c4de47c065e4850ede5fe[m
Author: Thierry Berger <contact@thierryberger.com>
Date:   Mon Jun 6 00:06:49 2022 +0000

    add a post-processing example (#4797)
    
    # Objective
    
    - Add an example showing a custom post processing effect, done after the first rendering pass.
    
    ## Solution
    
    - A simple post processing "chromatic aberration" effect. I mixed together examples `3d/render_to_texture`, and `shader/shader_material_screenspace_texture`
    - Reading a bit how https://github.com/bevyengine/bevy/pull/3430 was done gave me pointers to apply the main pass to the 2d render rather than using a 3d quad.
    
    This work might be or not be relevant to https://github.com/bevyengine/bevy/issues/2724
    
    <details>
    
    <summary> â ï¸ Click for a video of the render â ï¸ Iâve been told it might hurt the eyes ð , maybe we should choose another effect just in case ?</summary>
    
    https://user-images.githubusercontent.com/2290685/169138830-a6dc8a9f-8798-44b9-8d9e-449e60614916.mp4
    
    </details>
    
    # Request for feedbacks
    
    - [ ] Is chromatic aberration effect ok ? (Correct term, not a danger for the eyes ?) I'm open to suggestion to make something different.
    - [ ] Is the code idiomatic ? I preferred a "main camera -> **new camera with post processing applied to a quad**" approach to emulate minimum modification to existing code wanting to add global post processing.
    
    ---
    
    ## Changelog
    
    - Add a full screen post processing shader example

[33mcommit 5e2cfb2f19e0e2287fd48d55df92f78617acf831[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 5 00:27:49 2022 +0000

    Camera Driven Viewports (#4898)
    
    # Objective
    
    Users should be able to render cameras to specific areas of a render target, which enables scenarios like split screen, minimaps, etc.
    
    Builds on the new Camera Driven Rendering added here: #4745
    Fixes: #202
    Alternative to #1389 and #3626 (which are incompatible with the new Camera Driven Rendering)
    
    ## Solution
    
    ![image](https://user-images.githubusercontent.com/2694663/171560044-f0694f67-0cd9-4598-83e2-a9658c4fed57.png)
    
    
    Cameras can now configure an optional "viewport", which defines a rectangle within their render target to draw to. If a `Viewport` is defined, the camera's `CameraProjection`, `View`, and visibility calculations will use the viewport configuration instead of the full render target.
    
    ```rust
    // This camera will render to the first half of the primary window (on the left side).
    commands.spawn_bundle(Camera3dBundle {
        camera: Camera {
            viewport: Some(Viewport {
                physical_position: UVec2::new(0, 0),
                physical_size: UVec2::new(window.physical_width() / 2, window.physical_height()),
                depth: 0.0..1.0,
            }),
            ..default()
        },
        ..default()
    });
    ```
    
    To account for this, the `Camera` component has received a few adjustments:
    
    * `Camera` now has some new getter functions:
      * `logical_viewport_size`, `physical_viewport_size`, `logical_target_size`, `physical_target_size`, `projection_matrix`
    *  All computed camera values are now private and live on the `ComputedCameraValues` field (logical/physical width/height, the projection matrix). They are now exposed on `Camera` via getters/setters  This wasn't _needed_ for viewports, but it was long overdue.
    
    ---
    
    ## Changelog
    
    ### Added
    
    * `Camera` components now have a `viewport` field, which can be set to draw to a portion of a render target instead of the full target.
    * `Camera` component has some new functions: `logical_viewport_size`, `physical_viewport_size`, `logical_target_size`, `physical_target_size`, and `projection_matrix`
    * Added a new split_screen example illustrating how to render two cameras to the same scene
    
    ## Migration Guide
    
    `Camera::projection_matrix` is no longer a public field. Use the new `Camera::projection_matrix()` method instead:
    
    ```rust
    
    // Bevy 0.7
    let projection = camera.projection_matrix;
    
    // Bevy 0.8
    let projection = camera.projection_matrix();
    ```

[33mcommit 8e08e26c253192e9d6f23cfbb8b140556bf0c659[m
Author: Henry Sloan <henryksloan@gmail.com>
Date:   Sat Jun 4 20:00:01 2022 +0000

    Update commented vsync code in example to use present_mode (#4926)
    
    # Objective
    
    - To fix the broken commented code in `examples/shader/compute_shader_game_of_life.rs` for disabling frame throttling
    
    ## Solution
    
    - Change the commented code from using the old `WindowDescriptor::vsync` to the new `WindowDescriptor::present_mode`
    
    ### Note
    I chose to use the fully qualified scope `bevy::window::PresentWindow::Immediate` rather than explicitly including `PresentWindow` to avoid an unused import when the code is commented.

[33mcommit 3a9383f9977bf16461565633426777a62cb51356[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Sat Jun 4 14:30:44 2022 +0000

    Revert ndk-glue to 0.5 to synchronize with winit (#4916)
    
    # Objective
    
    - Upgrading ndk-glue (our Android interop layer) desynchronized us from winit
    - This further broke Android builds, see #4905 (oops...)
    - Reverting to 0.5 should help with this, until the new `winit` version releases
    - Fixes #4774 and closes #4529

[33mcommit 1fcb7d0c2e7086f8c3162b8ea5f9db3ff5f829c9[m
Author: Matthias Deiml <matthias@deiml.net>
Date:   Fri Jun 3 20:50:50 2022 +0000

    Set naga capabilities corresponding to wgpu features (#4824)
    
    # Objective
    
    At the moment all extra capabilities are disabled when validating shaders with naga:
    https://github.com/bevyengine/bevy/blob/c7c08f95cb784afc366eb2dcedd21d9d40e72d32/crates/bevy_render/src/render_resource/shader.rs#L146-L149
    This means these features can't be used even if the corresponding wgpu features are active.
    
    ## Solution
    
    With these changes capabilities are now set corresponding to `RenderDevice::features`.
    
    ---
    
    I have validated these changes for push constants with a project I am currently working on. Though bevy does not support creating pipelines with push constants yet, so I was only able to see that shaders are validated and compiled as expected.

[33mcommit f0218b9b2b41eec0c48cb7e41294cd397d95f385[m
Author: Christopher Durham <cad97@cad97.com>
Date:   Fri Jun 3 20:28:44 2022 +0000

    Move primitive type registration into bevy_reflect (#4844)
    
    # Objective
    
    - Users of bevy_reflect probably always want primitive types registered.
    
    ## Solution
    
    - Register them by default.
    
    ---
    
    This is a minor incremental change along the path of [removing catch-all functionality from bevy_core](https://github.com/bevyengine/bevy/issues/2931).

[33mcommit 9976ecb8107b9f289ea95f9d46708b1179996659[m
Author: Alex Saveau <saveau.alexandre@gmail.com>
Date:   Thu Jun 2 19:42:20 2022 +0000

    Fix crash when using Duration::MAX (#4900)
    
    # Objective
    
    If you set the `ReactiveLowPower` max wait to `Duration::MAX`, stuff panics. Fix that.
    
    ## Solution
    
    Wait forever if addition failed.

[33mcommit f487407e07c15af878e0d6886f9cd4c146f1f94f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 2 00:12:17 2022 +0000

    Camera Driven Rendering (#4745)
    
    This adds "high level camera driven rendering" to Bevy. The goal is to give users more control over what gets rendered (and where) without needing to deal with render logic. This will make scenarios like "render to texture", "multiple windows", "split screen", "2d on 3d", "3d on 2d", "pass layering", and more significantly easier.
    
    Here is an [example of a 2d render sandwiched between two 3d renders (each from a different perspective)](https://gist.github.com/cart/4fe56874b2e53bc5594a182fc76f4915):
    ![image](https://user-images.githubusercontent.com/2694663/168411086-af13dec8-0093-4a84-bdd4-d4362d850ffa.png)
    
    Users can now spawn a camera, point it at a RenderTarget (a texture or a window), and it will "just work".
    
    Rendering to a second window is as simple as spawning a second camera and assigning it to a specific window id:
    ```rust
    // main camera (main window)
    commands.spawn_bundle(Camera2dBundle::default());
    
    // second camera (other window)
    commands.spawn_bundle(Camera2dBundle {
        camera: Camera {
            target: RenderTarget::Window(window_id),
            ..default()
        },
        ..default()
    });
    ```
    
    Rendering to a texture is as simple as pointing the camera at a texture:
    
    ```rust
    commands.spawn_bundle(Camera2dBundle {
        camera: Camera {
            target: RenderTarget::Texture(image_handle),
            ..default()
        },
        ..default()
    });
    ```
    
    Cameras now have a "render priority", which controls the order they are drawn in. If you want to use a camera's output texture as a texture in the main pass, just set the priority to a number lower than the main pass camera (which defaults to `0`).
    
    ```rust
    // main pass camera with a default priority of 0
    commands.spawn_bundle(Camera2dBundle::default());
    
    commands.spawn_bundle(Camera2dBundle {
        camera: Camera {
            target: RenderTarget::Texture(image_handle.clone()),
            priority: -1,
            ..default()
        },
        ..default()
    });
    
    commands.spawn_bundle(SpriteBundle {
        texture: image_handle,
        ..default()
    })
    ```
    
    Priority can also be used to layer to cameras on top of each other for the same RenderTarget. This is what "2d on top of 3d" looks like in the new system:
    
    ```rust
    commands.spawn_bundle(Camera3dBundle::default());
    
    commands.spawn_bundle(Camera2dBundle {
        camera: Camera {
            // this will render 2d entities "on top" of the default 3d camera's render
            priority: 1,
            ..default()
        },
        ..default()
    });
    ```
    
    There is no longer the concept of a global "active camera". Resources like `ActiveCamera<Camera2d>` and `ActiveCamera<Camera3d>` have been replaced with the camera-specific `Camera::is_active` field. This does put the onus on users to manage which cameras should be active.
    
    Cameras are now assigned a single render graph as an "entry point", which is configured on each camera entity using the new `CameraRenderGraph` component. The old `PerspectiveCameraBundle` and `OrthographicCameraBundle` (generic on camera marker components like Camera2d and Camera3d) have been replaced by `Camera3dBundle` and `Camera2dBundle`, which set 3d and 2d default values for the `CameraRenderGraph` and projections.
    
    ```rust
    // old 3d perspective camera
    commands.spawn_bundle(PerspectiveCameraBundle::default())
    
    // new 3d perspective camera
    commands.spawn_bundle(Camera3dBundle::default())
    ```
    
    ```rust
    // old 2d orthographic camera
    commands.spawn_bundle(OrthographicCameraBundle::new_2d())
    
    // new 2d orthographic camera
    commands.spawn_bundle(Camera2dBundle::default())
    ```
    
    ```rust
    // old 3d orthographic camera
    commands.spawn_bundle(OrthographicCameraBundle::new_3d())
    
    // new 3d orthographic camera
    commands.spawn_bundle(Camera3dBundle {
        projection: OrthographicProjection {
            scale: 3.0,
            scaling_mode: ScalingMode::FixedVertical,
            ..default()
        }.into(),
        ..default()
    })
    ```
    
    Note that `Camera3dBundle` now uses a new `Projection` enum instead of hard coding the projection into the type. There are a number of motivators for this change: the render graph is now a part of the bundle, the way "generic bundles" work in the rust type system prevents nice `..default()` syntax, and changing projections at runtime is much easier with an enum (ex for editor scenarios). I'm open to discussing this choice, but I'm relatively certain we will all come to the same conclusion here. Camera2dBundle and Camera3dBundle are much clearer than being generic on marker components / using non-default constructors.
    
    If you want to run a custom render graph on a camera, just set the `CameraRenderGraph` component:
    
    ```rust
    commands.spawn_bundle(Camera3dBundle {
        camera_render_graph: CameraRenderGraph::new(some_render_graph_name),
        ..default()
    })
    ```
    
    Just note that if the graph requires data from specific components to work (such as `Camera3d` config, which is provided in the `Camera3dBundle`), make sure the relevant components have been added.
    
    Speaking of using components to configure graphs / passes, there are a number of new configuration options:
    
    ```rust
    commands.spawn_bundle(Camera3dBundle {
        camera_3d: Camera3d {
            // overrides the default global clear color
            clear_color: ClearColorConfig::Custom(Color::RED),
            ..default()
        },
        ..default()
    })
    
    commands.spawn_bundle(Camera3dBundle {
        camera_3d: Camera3d {
            // disables clearing
            clear_color: ClearColorConfig::None,
            ..default()
        },
        ..default()
    })
    ```
    
    Expect to see more of the "graph configuration Components on Cameras" pattern in the future.
    
    By popular demand, UI no longer requires a dedicated camera. `UiCameraBundle` has been removed. `Camera2dBundle` and `Camera3dBundle` now both default to rendering UI as part of their own render graphs. To disable UI rendering for a camera, disable it using the CameraUi component:
    
    ```rust
    commands
        .spawn_bundle(Camera3dBundle::default())
        .insert(CameraUi {
            is_enabled: false,
            ..default()
        })
    ```
    
    ## Other Changes
    
    * The separate clear pass has been removed. We should revisit this for things like sky rendering, but I think this PR should "keep it simple" until we're ready to properly support that (for code complexity and performance reasons). We can come up with the right design for a modular clear pass in a followup pr.
    * I reorganized bevy_core_pipeline into Core2dPlugin and Core3dPlugin (and core_2d / core_3d modules). Everything is pretty much the same as before, just logically separate. I've moved relevant types (like Camera2d, Camera3d, Camera3dBundle, Camera2dBundle) into their relevant modules, which is what motivated this reorganization.
    * I adapted the `scene_viewer` example (which relied on the ActiveCameras behavior) to the new system. I also refactored bits and pieces to be a bit simpler.
    * All of the examples have been ported to the new camera approach. `render_to_texture` and `multiple_windows` are now _much_ simpler. I removed `two_passes` because it is less relevant with the new approach. If someone wants to add a new "layered custom pass with CameraRenderGraph" example, that might fill a similar niche. But I don't feel much pressure to add that in this pr.
    * Cameras now have `target_logical_size` and `target_physical_size` fields, which makes finding the size of a camera's render target _much_ simpler. As a result, the `Assets<Image>` and `Windows` parameters were removed from `Camera::world_to_screen`, making that operation much more ergonomic.
    * Render order ambiguities between cameras with the same target and the same priority now produce a warning. This accomplishes two goals:
        1. Now that there is no "global" active camera, by default spawning two cameras will result in two renders (one covering the other). This would be a silent performance killer that would be hard to detect after the fact. By detecting ambiguities, we can provide a helpful warning when this occurs.
        2. Render order ambiguities could result in unexpected / unpredictable render results. Resolving them makes sense.
    
    ## Follow Up Work
    
    * Per-Camera viewports, which will make it possible to render to a smaller area inside of a RenderTarget (great for something like splitscreen)
    * Camera-specific MSAA config (should use the same "overriding" pattern used for ClearColor)
    * Graph Based Camera Ordering: priorities are simple, but they make complicated ordering constraints harder to express. We should consider adopting a "graph based" camera ordering model with "before" and "after" relationships to other cameras (or build it "on top" of the priority system).
    * Consider allowing graphs to run subgraphs from any nest level (aka a global namespace for graphs). Right now the 2d and 3d graphs each need their own UI subgraph, which feels "fine" in the short term. But being able to share subgraphs between other subgraphs seems valuable.
    * Consider splitting `bevy_core_pipeline` into `bevy_core_2d` and `bevy_core_3d` packages. Theres a shared "clear color" dependency here, which would need a new home.

[33mcommit f2b53de4aa5ba10aa052d0ce1378e2395798ca21[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Jun 1 23:05:30 2022 +0000

    Do not bundle the assets from wasm example in the crate (#4895)
    
    # Objective
    
    - Fix #4881
    
    ## Solution
    
    - Do not bundle the assets from wasm example in the crate; tested with `cargo package` to check the produced crate

[33mcommit 5a1866c13dca42f5230d91564809692760acb14a[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Jun 1 22:31:24 2022 +0000

    Bevy release train - add a workflow to manually create a PR updating Bevy version (#3283)
    
    # Objective
    
    - Ensure future Bevy releases happens smoothly
    
    ## Solution
    
    - Add a workflow that will open a PR updating all Bevy crate that can be created manually
    
    example PR opened: https://github.com/mockersf/bevy/pull/62
    
    The day from this PR does not need to be the release day, it will just open the PR to prepare it. Later if we feel confident, it could push automatically to crates.io.
    
    
    how to trigger the workflow: https://docs.github.com/en/actions/managing-workflow-runs/manually-running-a-workflow

[33mcommit a16ffe6239ed61e6e8df7149706086ebb6b6d7c0[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Jun 1 20:44:30 2022 +0000

    create font atlas that can contains fonts of any size (#3592)
    
    # Objective
    
    - Bevy currently panics when displaying text with a *very* big font size  (with font size greater than 400, the glyph would have a width or height greater than 512)
    ```
    thread 'main' panicked at 'Fatal error when processing text: failed to add glyph to newly-created atlas GlyphId(514).', crates/bevy_ui/src/widget/text.rs:118:21
    ```
    
    ## Solution
    
    - Create font atlas that scales up with the size of the glyphs

[33mcommit cc4062ec4359b80a8c88a63aa45f17c681bb0e71[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Tue May 31 23:23:25 2022 +0000

    Split mesh shader files (#4867)
    
    # Objective
    
    - Split PBR and 2D mesh shaders into types and bindings to prepare the shaders to be more reusable.
    - See #3969 for details. I'm doing this in multiple steps to make review easier.
    
    ---
    
    ## Changelog
    
    - Changed: 2D and PBR mesh shaders are now split into types and bindings, the following shader imports are available: `bevy_pbr::mesh_view_types`, `bevy_pbr::mesh_view_bindings`, `bevy_pbr::mesh_types`, `bevy_pbr::mesh_bindings`, `bevy_sprite::mesh2d_view_types`, `bevy_sprite::mesh2d_view_bindings`, `bevy_sprite::mesh2d_types`, `bevy_sprite::mesh2d_bindings`
    
    ## Migration Guide
    
    - In shaders for 3D meshes:
      - `#import bevy_pbr::mesh_view_bind_group` -> `#import bevy_pbr::mesh_view_bindings`
      - `#import bevy_pbr::mesh_struct` -> `#import bevy_pbr::mesh_types`
        - NOTE: If you are using the mesh bind group at bind group index 2, you can remove those binding statements in your shader and just use `#import bevy_pbr::mesh_bindings` which itself imports the mesh types needed for the bindings.
    - In shaders for 2D meshes:
      - `#import bevy_sprite::mesh2d_view_bind_group` -> `#import bevy_sprite::mesh2d_view_bindings`
      - `#import bevy_sprite::mesh2d_struct` -> `#import bevy_sprite::mesh2d_types`
        - NOTE: If you are using the mesh2d bind group at bind group index 2, you can remove those binding statements in your shader and just use `#import bevy_sprite::mesh2d_bindings` which itself imports the mesh2d types needed for the bindings.

[33mcommit bdef86ea6eae96383d7bbd4818797f7572572090[m
Author: Robert Swain <benny.wasty@gmail.com>
Date:   Tue May 31 22:53:54 2022 +0000

    Generate vertex tangents using mikktspace (#3872)
    
    # Objective
    
    Models can be produced that do not have vertex tangents but do have normal map textures. The tangents can be generated. There is a way that the vertex tangents can be generated to be exactly invertible to avoid introducing error when recreating the normals in the fragment shader.
    
    ## Solution
    
    - After attempts to get https://github.com/gltf-rs/mikktspace to integrate simple glam changes and version bumps, and releases of that crate taking weeks / not being made (no offense intended to the authors/maintainers, bevy just has its own timelines and needs to take care of) it was decided to fork that repository. The following steps were taken:
      - mikktspace was forked to https://github.com/bevyengine/mikktspace in order to preserve the repository's history in case the original is ever taken down
      - The README in that repo was edited to add a note stating from where the repository was forked and explaining why
      - The repo was locked for changes as its only purpose is historical
      - The repo was integrated into the bevy repo using `git subtree add --prefix crates/bevy_mikktspace git@github.com:bevyengine/mikktspace.git master`
      - In `bevy_mikktspace`:
        - The travis configuration was removed
        - `cargo fmt` was run
        - The `Cargo.toml` was conformed to bevy's (just adding bevy to the keywords, changing the homepage and repository, changing the version to 0.7.0-dev - importantly the license is exactly the same)
        - Remove the features, remove `nalgebra` entirely, only use `glam`, suppress clippy.
          - This was necessary because our CI runs clippy with `--all-features` and the `nalgebra` and `glam` features are mutually exclusive, plus I don't want to modify this highly numerically-sensitive code just to appease clippy and diverge even more from upstream.
    - Rebase https://github.com/bevyengine/bevy/pull/1795
      - @jakobhellermann said it was fine to copy and paste but it ended up being almost exactly the same with just a couple of adjustments when validating correctness so I decided to actually rebase it and then build on top of it.
    - Use the exact same fragment shader code to ensure correct normal mapping.
    - Tested with both https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/NormalTangentMirrorTest which has vertex tangents and https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/NormalTangentTest which requires vertex tangent generation
    
    Co-authored-by: alteous <alteous@outlook.com>

[33mcommit 27c321e33f1e7420b909b1a4697de4c0aee6d06b[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue May 31 17:30:31 2022 +0000

    run examples on windows (#4437)
    
    # Objective
    
    - ~~Running examples on Linux in CI timeout~~Linux is back!
    - But hey we can run examples on windows too!
    
    ## Solution
    
    - Run examples on windows daily
    - I also added a 30 minutes timeout so that when it explodes, it doesn't explodes in 6 hours (the default timeout)
    - And simplified the linux examples by not requiring a custom feature set

[33mcommit ae0ccfb4f6d41d2033be03b48e2538d1cf0cd86f[m
Author: Daniikk1012 <daniyarsar@gmail.com>
Date:   Tue May 31 17:14:12 2022 +0000

    Make ScalingMode more flexible (#3253)
    
    Adds ability to specify scaling factor for `WindowSize`, size of the fixed axis for `FixedVertical` and `FixedHorizontal` and a new `ScalingMode` that is a mix of `FixedVertical` and `FixedHorizontal`
    
    # The issue
    
    Currently, only available options are to:
    
    * Have one of the axes fixed to value 1
    * Have viewport size match the window size
    * Manually adjust viewport size
    
    In most of the games these options are not enough and more advanced scaling methods have to be used
    
    ## Solution
    
    The solution is to provide additional parameters to current scaling modes, like scaling factor for `WindowSize`. Additionally, a more advanced `Auto` mode is added, which dynamically switches between behaving like `FixedVertical` and `FixedHorizontal` depending on the window's aspect ratio.
    
    Co-authored-by: Daniikk1012 <49123959+Daniikk1012@users.noreply.github.com>

[33mcommit caef967d149abad9410bbc6a10654383094272ae[m
Author: Alex Saveau <saveau.alexandre@gmail.com>
Date:   Tue May 31 15:54:38 2022 +0000

    Derive default on ReportExecutionOrderAmbiguities (#4873)

[33mcommit cea23b99692ab74a9ac6280df8e9d39bd69b7eb4[m
Author: Chris Dawkins <dawkins.chris.dev@gmail.com>
Date:   Tue May 31 15:37:23 2022 +0000

    Update "C-Bug" label and url in CONTRIBUTING.md (#4880)
    
    'bug' is not a valid label. Changed it to "C-Bug".
    
    Co-authored-by: siph <siph@github>

[33mcommit ee4bcbea3c296bb69c680bf7361ee4b234c100fb[m
Author: robtfm <50659922+robtfm@users.noreply.github.com>
Date:   Tue May 31 02:02:49 2022 +0000

    add depth_bias to SpecializedMaterial (#4101)
    
    # Objective
    
    allow meshes with equal z-depth to be rendered in a chosen order / avoid z-fighting
    
    ## Solution
    
    add a depth_bias to SpecializedMaterial that is added to the mesh depth used for render-ordering.

[33mcommit f000c2b951f4c519416ffda70281b2284d37f9f8[m
Author: FÃ©lix Lescaudey de Maneville <felix.maneville@gmail.com>
Date:   Tue May 31 01:38:07 2022 +0000

    Clippy improvements (#4665)
    
    # Objective
    
    Follow up to my previous MR #3718 to add new clippy warnings to bevy:
    
    - [x] [~~option_if_let_else~~](https://rust-lang.github.io/rust-clippy/master/#option_if_let_else) (reverted)
    - [x] [redundant_else](https://rust-lang.github.io/rust-clippy/master/#redundant_else)
    - [x] [match_same_arms](https://rust-lang.github.io/rust-clippy/master/#match_same_arms)
    - [x] [semicolon_if_nothing_returned](https://rust-lang.github.io/rust-clippy/master/#semicolon_if_nothing_returned)
    - [x] [explicit_iter_loop](https://rust-lang.github.io/rust-clippy/master/#explicit_iter_loop)
    - [x] [map_flatten](https://rust-lang.github.io/rust-clippy/master/#map_flatten)
    
    There is one commit per clippy warning, and the matching flags are added to the CI execution.
    
    To test the CI execution you may run `cargo run -p ci -- clippy` at the root.
    
    I choose the add the flags in the `ci` tool crate to avoid having them in every `lib.rs` but I guess it could become an issue with suprise warnings coming up after a commit/push
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit e543941fb9ffed652f99f96301e28d3d7f6e3e6f[m
Author: Giacomo Stevanato <giaco.stevanato@gmail.com>
Date:   Mon May 30 22:45:09 2022 +0000

    Improve soundness of `CommandQueue` (#4863)
    
    # Objective
    
    This PR aims to improve the soundness of `CommandQueue`. In particular it aims to:
    - make it sound to store commands that contain padding or uninitialized bytes;
    - avoid uses of commands after moving them in the queue's buffer (`std::mem::forget` is technically a use of its argument);
    - remove useless checks: `self.bytes.as_mut_ptr().is_null()` is always `false` because even `Vec`s that haven't allocated use a dangling pointer. Moreover the same pointer was used to write the command, so it ought to be valid for reads if it was for writes.
    
    ## Solution
    
    - To soundly store padding or uninitialized bytes `CommandQueue` was changed to contain a `Vec<MaybeUninit<u8>>` instead of `Vec<u8>`;
    - To avoid uses of the command through `std::mem::forget`, `ManuallyDrop` was used.
    
    ## Other observations
    
    While writing this PR I noticed that `CommandQueue` doesn't seem to drop the commands that weren't applied. While this is a pretty niche case (you would have to be manually using `CommandQueue`/`std::mem::swap`ping one), I wonder if it should be documented anyway.

[33mcommit 48289984ea869b86fbeca2187720ec0a4a597992[m
Author: Niklas Eicker <git@nikl.me>
Date:   Mon May 30 22:28:32 2022 +0000

    Add license files to all published crates (#4828)
    
    # Objective
    
    Add our licenses to every published crate
    
    Fixes #4719
    
    ## Solution
    
    - Copy licenses to every crate before publishing

[33mcommit 53bcecbbfc3218991218c37536607da620bd61ee[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Mon May 30 22:11:44 2022 +0000

    Make bug template more beginner-friendly (#4652)
    
    # Objective
    
    1. "What you expected to happen" and "what actually happened" often involves trivial duplication.
    2. "Please provide full reproduction steps" is not helpful advice to new contributors.
    3. The OS field was commonly useless or inadequate.
    4. The description for "additional information" effectively just repeated the title of the field.
    
    ## Solution
    
    1. Unify these fields into a single "what went wrong" field.
    2. Provide an example of a useful reproduction.
    3. Replace OS field with an optional "Setup Information" field that captures information about other critical setup like Rust version and hardware.
    4. Provide helpful advice about what sort of information may be useful to add.

[33mcommit ef032040dd961177337390326c1660cf9120f792[m
Author: ira <JustTheCoolDude@gmail.com>
Date:   Mon May 30 21:16:48 2022 +0000

    Cargo `--timings` option has been stabilized. Update profiling.md. (#4850)
    
    As of https://github.com/rust-lang/cargo/pull/10245 `--timings` has been stabilized.
    Update profiling.md to reflect this.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit d313ba59bdf750375eec0464dd30b2d111dc817f[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon May 30 21:16:47 2022 +0000

    Don't allocate for ComponentDescriptors of non-dynamic component types (#4725)
    
    # Objective
    Don't allocate memory for Component types known at compile-time. Save a bit of memory.
    
    ## Solution
    Change `ComponentDescriptor::name` from `String` to `Cow<'static, str>` to use the `&'static str` returned by `std::any::type_name`.

[33mcommit c174945208080e8c9b6755957c5009140fa7c670[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon May 30 20:57:33 2022 +0000

    Fix release builds: Move asserts under #[cfg(debug_assertions)] (#4871)
    
    # Objective
    `debug_assert!` macros must still compile properly in release mode due to how they're implemented. This is causing release builds to fail.
    
    ## Solution
    Change them to `assert!` macros inside `#[cfg(debug_assertions)]` blocks.

[33mcommit 4b7f904cfc97ca901d649abe801e5a1e681cb040[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Mon May 30 20:22:57 2022 +0000

    remove `Serialize` impl for dyn Array and friends (#4780)
    
    # Objective
    
    `bevy_reflect` as different kinds of reflected types (each with their own trait), `trait Struct: Reflect`, `trait List: Reflect`, `trait Map: Reflect`, ...
    Types that don't fit either of those are called reflect value types, they are opaque and can't be deconstructed further.
    
    `bevy_reflect` can serialize `dyn Reflect` values. Any container types (struct, list, map) get deconstructed and their elements serialized separately, which can all happen without serde being involved ever (happens [here](https://github.com/bevyengine/bevy/blob/main/crates/bevy_reflect/src/serde/ser.rs#L50-L85=)).
     The only point at which we require types to be serde-serializable is for *value types* (happens [here](https://github.com/bevyengine/bevy/blob/main/crates/bevy_reflect/src/serde/ser.rs#L104=)).
    
    So reflect array serializing is solved, since arrays are container types which don't require serde.
    
    #1213 also introduced added the `serialize` method and `Serialize` impls for `dyn Array` and `DynamicArray` which use their element's `Reflect::serializable` function. This is 1. unnecessary, because it is not used for array serialization, and 2. annoying for removing the `Serialize` bound on container types, because these impls don't have access to the `TypeRegistry`, so we can't move the serialization code there.
    
    # Solution
    
    Remove these impls and `fn serialize`. It's not used and annoying for other changes.

[33mcommit 1e8ca45aebd1522f8fa5d93358f266687b5b2861[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Mon May 30 20:10:26 2022 +0000

    scene_viewer: Make it possible to disable the animation feature (#4849)
    
    # Objective
    
    - The `scene_viewer` example assumes the `animation` feature is enabled, which it is by default. However, animations may have a performance cost that is undesirable when testing performance, for example. Then it is useful to be able to disable the `animation` feature and one would still like the `scene_viewer` example to work.
    
    ## Solution
    
    - Gate animation code in `scene_viewer` on the `animation` feature being enabled.

[33mcommit 575ffa7c0c173d42efd37eaba573f02189b2804d[m
Author: FraserLee <tomatoesneverlie@gmail.com>
Date:   Mon May 30 19:58:16 2022 +0000

    Added `offset` parameter to `TextureAtlas::from_grid_with_padding` (#4836)
    
    # Objective
    Increase compatibility with a fairly common format of padded spritesheets, in which half the padding value occurs before the first sprite box begins. The original behaviour falls out when `Vec2::ZERO` is used for `offset`.
    
    See below unity screenshot for an example of a spritesheet with padding
    
    ![Screen Shot 2022-05-24 at 4 11 49 PM](https://user-images.githubusercontent.com/30442265/170123682-287e5733-b69d-452b-b2e6-46d8d29293fb.png)
    
    ## Solution
    Tiny change to `crates/bevy_sprite/src/texture_atlas.rs`
    
    ## Migration Guide
    
    Calls to `TextureAtlas::from_grid_with_padding` should be modified to include a new parameter, which can be set to `Vec2::ZERO` to retain old behaviour.
    ```rust
    from_grid_with_padding(texture, tile_size, columns, rows, padding)
                                      |
                                      V
    from_grid_with_padding(texture, tile_size, columns, rows, padding, Vec2::ZERO)
    ```
    
    
    Co-authored-by: FraserLee <30442265+FraserLee@users.noreply.github.com>

[33mcommit fb813a3a64cdafdd75f7590a461364bcdf34bf2e[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Mon May 30 19:06:25 2022 +0000

    bevy_reflect: Add `#[reflect(default)]` attribute for `FromReflect` (#4140)
    
    # Objective
    
    Currently, `FromReflect` makes a couple assumptions:
    
    * Ignored fields must implement `Default`
    * Active fields must implement `FromReflect`
    * The reflected must be fully populated for active fields (can't use an empty `DynamicStruct`)
    
    However, one or both of these requirements might be unachievable, such as for external types. In these cases, it might be nice to tell `FromReflect` to use a custom default.
    
    ## Solution
    
    Added the `#[reflect(default)]` derive helper attribute. This attribute can be applied to any field (ignored or not) and will allow a default value to be specified in place of the regular `from_reflect()` call.
    
    It takes two forms: `#[reflect(default)]` and `#[reflect(default = "some_func")]`. The former specifies that `Default::default()` should be used while the latter specifies that `some_func()` should be used. This is pretty much [how serde does it](https://serde.rs/field-attrs.html#default).
    
    ### Example
    
    ```rust
    #[derive(Reflect, FromReflect)]
    struct MyStruct {
      // Use `Default::default()`
      #[reflect(default)]
      foo: String,
    
      // Use `get_bar_default()`
      #[reflect(default = "get_bar_default")]
      #[reflect(ignore)]
      bar: usize,
    }
    
    fn get_bar_default() -> usize {
      123
    }
    ```
    
    ### Active Fields
    
    As an added benefit, this also allows active fields to be completely missing from their dynamic object. This is because the attribute tells `FromReflect` how to handle missing active fields (it still tries to use `from_reflect` first so the `FromReflect` trait is still required).
    
    ```rust
    let dyn_struct = DynamicStruct::default();
    
    // We can do this without actually including the active fields since they have `#[reflect(default)]`
    let my_struct = <MyStruct as FromReflect>::from_reflect(&dyn_struct);
    ```
    
    ### Container Defaults
    
    Also, with the addition of #3733, people will likely start adding `#[reflect(Default)]` to their types now. Just like with the fields, we can use this to mark the entire container as "defaultable". This grants us the ability to completely remove the field markers altogether if our type implements `Default` (and we're okay with fields using that instead of their own `Default` impls):
    
    ```rust
    #[derive(Reflect, FromReflect)]
    #[reflect(Default)]
    struct MyStruct {
      foo: String,
      #[reflect(ignore)]
      bar: usize,
    }
    
    impl Default for MyStruct {
      fn default() -> Self {
        Self {
          foo: String::from("Hello"),
          bar: 123,
        }
      }
    }
    
    // Again, we can now construct this from nothing pretty much
    let dyn_struct = DynamicStruct::default();
    let my_struct = <MyStruct as FromReflect>::from_reflect(&dyn_struct);
    ```
    
    Now if _any_ field is missing when using `FromReflect`, we simply fallback onto the container's `Default` implementation.
    
    This behavior can be completely overridden on a per-field basis, of course, by simply defining those same field attributes like before.
    
    ### Related
    
    * #3733
    * #1395
    * #2377
    
    ---
    
    ## Changelog
    
    * Added `#[reflect(default)]` field attribute for `FromReflect`
      * Allows missing fields to be given a default value when using `FromReflect`
      * `#[reflect(default)]` - Use the field's `Default` implementation
      * `#[reflect(default = "some_fn")]` - Use a custom function to get the default value
    * Allow `#[reflect(Default)]` to have a secondary usage as a container attribute
      * Allows missing fields to be given a default value based on the container's `Default` impl when using `FromReflect`
    
    
    Co-authored-by: Gino Valente <49806985+MrGVSV@users.noreply.github.com>

[33mcommit a0a3d8798bd40e1214e9fbca4a4c189bc6375058[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Mon May 30 18:36:03 2022 +0000

    ExtractResourcePlugin (#3745)
    
    # Objective
    
    - Add an `ExtractResourcePlugin` for convenience and consistency
    
    ## Solution
    
    - Add an `ExtractResourcePlugin` similar to `ExtractComponentPlugin` but for ECS `Resource`s. The system that is executed simply clones the main world resource into a render world resource, if and only if the main world resource was either added or changed since the last execution of the system.
    - Add an `ExtractResource` trait with a `fn extract_resource(res: &Self) -> Self` function. This is used by the `ExtractResourcePlugin` to extract the resource
    - Add a derive macro for `ExtractResource` on a `Resource` with the `Clone` trait, that simply returns `res.clone()`
    - Use `ExtractResourcePlugin` wherever both possible and appropriate

[33mcommit ba53a44956560fd7e6c14c05ddcb9925522fc80c[m
Author: Thomas Hansen <31554741+thomas992@users.noreply.github.com>
Date:   Mon May 30 18:13:36 2022 +0000

    Add Clear Linux OS dependencies (#4852)

[33mcommit aa183ef31a48ceed59134427e0f904e0282756c5[m
Author: Johan Klokkhammer Helsing <johanhelsing@gmail.com>
Date:   Mon May 30 18:13:35 2022 +0000

    Derive thiserror::Error for HexColorError (again) (#4847)
    
    This was first done in 7b4e3a5, but was then reverted when the new
    renderer for 0.6 was merged (ffecb05).
    
    I'm assuming it was simply a mistake when merging.
    
    # Objective
    
    - Same as #2740, I think it was reverted by mistake when merging.
    
    > # Objective
    >
    > - Make it easy to use HexColorError with `thiserror`, i.e. converting it into other error types.
    >
    > Makes this possible:
    >
    > ```rust
    > #[derive(Debug, thiserror::Error)]
    > pub enum LdtkError {
    >     #[error("An error occured while deserializing")]
    >     Json(#[from] serde_json::Error),
    >     #[error("An error occured while parsing a color")]
    >     HexColor(#[from] bevy::render::color::HexColorError),
    > }
    > ```
    >
    > ## Solution
    >
    > - Derive thiserror::Error the same way we do elsewhere (see query.rs for instance)

[33mcommit 80b08ea45dadafd15442eea5d2e508c20a2187b7[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Mon May 30 17:59:20 2022 +0000

    Allow higher order systems (#4833)
    
    # Objective
    
    - Higher order system could not be created by users.
    - However, a simple change to `SystemParamFunction` allows this.
    - Higher order systems in this case mean functions which return systems created using other systems, such as `chain` (which is basically equivalent to map)
    
    ## Solution
    
    - Change `SystemParamFunction` to be a safe abstraction over `FnMut([In<In>,] ...params)->Out`.
    - Note that I believe `SystemParamFunction` should not have been counted as part of our public api before this PR.
        - This is because its only use was an unsafe function without an actionable safety comment.
        - The safety comment was basically 'call this within bevy code'.
        - I also believe that there are no external users in its current form.
            - A quick search on Google and in the discord confirmed this.
    
    ## See also
    
    - https://github.com/bevyengine/bevy/pull/4666, which uses this and subsumes the example here
    
    ---
    
    ## Changelog
    
    ### Added
    
    - `SystemParamFunction`, which can be used to create higher order systems.

[33mcommit c46691c04a67c77b0ed2a3f98e9f8bdcdebf7cf6[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon May 30 17:26:23 2022 +0000

    Update gilrs to v0.9 (#4848)
    
    # Objective
    Fixes #4353. Fixes #4431. Picks up fixes for a panic for `gilrs` when `getGamepads()` is not available.
    
    ## Solution
    Update the `gilrs` to `v0.9.0`. Changelog can be seen here: https://gitlab.com/gilrs-project/gilrs/-/commit/dba36f91869c823fb66f8633d2b650b430682f80
    
    EDIT: Updated `uuid` to 1.1 to avoid duplicate dependencies. Added `nix`'s two dependencies as exceptions until `rodio` updates their deps.

[33mcommit a6eb3fa6d68bb4a70c9c50927b41a70b894a7c50[m
Author: Herbert "TheBracket <herberticus@gmail.com>
Date:   Mon May 30 16:59:45 2022 +0000

    Apply vertex colors to ColorMaterial and Mesh2D (#4812)
    
    # Objective
    
    - Add Vertex Color support to 2D meshes and ColorMaterial. This extends the work from #4528 (which in turn builds on the excellent tangent handling).
    
    ## Solution
    
    - Added `#ifdef` wrapped support for vertex colors in the 2D mesh shader and `ColorMaterial` shader.
    - Added an example, `mesh2d_vertex_color_texture` to demonstrate it in action.
    
    ![image](https://user-images.githubusercontent.com/14896751/169530930-6ae0c6be-2f69-40e3-a600-ba91d7178bc3.png)
    
    
    ---
    
    ## Changelog
    
    - Added optional (ifdef wrapped) vertex color support to the 2dmesh and color material systems.

[33mcommit 1bbd5c25c0e53c51ac4a3bc1dc46fd2f35e72883[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Mon May 30 16:59:44 2022 +0000

    Enforce type safe usage of Handle::get (#4794)
    
    # Objective
    
    - Sometimes, people might load an asset as one type, then use it with an `Asset`s for a different type.
    - See e.g. #4784.
    - This is especially likely with the Gltf types, since users may not have a clear conceptual model of what types the assets will be.
    - We had an instance of this ourselves, in the `scene_viewer` example
    
    ## Solution
    
    - Make `Assets::get` require a type safe handle.
    
    ---
    
    ## Changelog
    
    ### Changed
    
    - `Assets::<T>::get` and `Assets::<T>::get_mut` now require that the passed handles are `Handle<T>`, improving the type safety of handles.
    
    ### Added
    - `HandleUntyped::typed_weak`, a helper function for creating a weak typed version of an exisitng `HandleUntyped`.
    
    ## Migration Guide
    
    `Assets::<T>::get` and `Assets::<T>::get_mut` now require that the passed handles are `Handle<T>`, improving the type safety of handles. If you were previously passing in:
       - a `HandleId`, use `&Handle::weak(id)` instead, to create a weak handle. You may have been able to store a type safe `Handle` instead.
       - a `HandleUntyped`, use `&handle_untyped.typed_weak()` to create a weak handle of the specified type. This is most likely to be the useful when using [load_folder](https://docs.rs/bevy_asset/latest/bevy_asset/struct.AssetServer.html#method.load_folder)
       - a `Handle<U>` of  of a different type, consider whether this is the correct handle type to store. If it is (i.e. the same handle id is used for multiple different Asset types) use `Handle::weak(handle.id)` to cast to a different type.

[33mcommit a02c5ae819001b0d1ceb6cf7dba8b4f0d7975c15[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon May 30 16:59:43 2022 +0000

    Copy TaskPool resoures to subapps (#4792)
    
    # Objective
    Fixes #4791. `ParallelExecutor` inserts a default `CompteTaskPool` if there isn't one stored as a resource, including when it runs on a different world. When spawning the render sub-app, the main world's `ComputeTaskPool` is not cloned and inserted into the render app's, which causes a second `ComputeTaskPool` with the default configuration to be spawned. This results in an excess number of threads being spawned.
    
    ## Solution
    Copy the task pools from the main world to the subapps upon creating them.
    
    ## Alternative
    An alternative to this would be to make the task pools global, as seen in #2250 or bevyengine/rfcs#54.

[33mcommit 6a238377beba9717ecc25a7037ab58b7123d9858[m
Author: Hristo Iliev <capitane71@gmail.com>
Date:   Mon May 30 16:59:41 2022 +0000

    Add documentation to the WindowDescriptor struct. (#4764)
    
    # Objective
    
    Resolves #4753
    
    ## Solution
    
    Using rust doc I added documentation to the struct. Decided to not provide an example in the doc comment but instead refer to the example file that shows the usage.

[33mcommit 8e4e5a5634a22579ff0ce450e4a9eaa173638e47[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon May 30 16:59:40 2022 +0000

    Use u32 over usize for ComponentSparseSet indicies (#4723)
    
    # Objective
    Use less memory to store SparseSet components.
    
    ## Solution
    Change `ComponentSparseSet` to only use `Entity::id` in it's key internally, and change the usize value in it's SparseArray to use u32 instead, as it cannot have more than u32::MAX live entities stored at once.
    
    This should reduce the overhead of storing components in sparse set storage by 50%.

[33mcommit c5e89894f45e694f882a0e2831af1d2452bac257[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon May 30 16:59:38 2022 +0000

    Remove task_pool parameter from par_for_each(_mut) (#4705)
    
    # Objective
    Fixes #3183. Requiring a `&TaskPool` parameter is sort of meaningless if the only correct one is to use the one provided by `Res<ComputeTaskPool>` all the time.
    
    ## Solution
    Have `QueryState` save a clone of the `ComputeTaskPool` which is used for all `par_for_each` functions.
    
    ~~Adds a small overhead of the internal `Arc` clone as a part of the startup, but the ergonomics win should be well worth this hardly-noticable overhead.~~
    
    Updated the docs to note that it will panic the task pool is not present as a resource.
    
    # Future Work
    If https://github.com/bevyengine/rfcs/pull/54 is approved, we can replace these resource lookups with a static function call instead to get the `ComputeTaskPool`.
    
    ---
    
    ## Changelog
    Removed: The `task_pool` parameter of `Query(State)::par_for_each(_mut)`. These calls will use the `World`'s `ComputeTaskPool` resource instead.
    
    ## Migration Guide
    The `task_pool` parameter for `Query(State)::par_for_each(_mut)` has been removed. Remove these parameters from all calls to these functions.
    
    Before:
    ```rust
    fn parallel_system(
       task_pool: Res<ComputeTaskPool>,
       query: Query<&MyComponent>,
    ) {
       query.par_for_each(&task_pool, 32, |comp| {
            ...
       });
    }
    ```
    
    After:
    
    ```rust
    fn parallel_system(query: Query<&MyComponent>) {
       query.par_for_each(32, |comp| {
            ...
       });
    }
    ```
    
    If using `Query(State)` outside of a system run by the scheduler, you may need to manually configure and initialize a `ComputeTaskPool` as a resource in the `World`.

[33mcommit f59ea7e6e8a5c1d08391fa2304992d19150d2953[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon May 30 16:41:34 2022 +0000

    Remove redundant ComponentId in Column (#4855)
    
    # Objective
    The `ComponentId` in `Column` is redundant as it's stored in parallel in the surrounding `SparseSet` all the time.
    
    ## Solution
    Remove it. Add `SparseSet::iter(_mut)` to parallel `HashMap::iter(_mut)` to allow iterating pairs of columns and their IDs.
    
    ---
    
    ## Changelog
    Added: `SparseSet::iter` and `SparseSet::iter_mut`.

[33mcommit c02beabe22b398f918a49ae6b68f05094a64ffd9[m
Author: Hennadii Chernyshchyk <genaloner@gmail.com>
Date:   Mon May 30 16:41:33 2022 +0000

    Add QueryState::get_single_unchecked_manual and its family (#4841)
    
    # Objective
    
    - Rebase of #3159.
    - Fixes https://github.com/bevyengine/bevy/issues/3156
    - add #[inline] to single related functions so that they matches with other function defs
    
    ## Solution
    
    * added functions to QueryState
      *  get_single_unchecked_manual
      *  get_single_unchecked
      *  get_single
      *  get_single_mut
      *  single
      *  single_mut
    * make Query::get_single use QueryState::get_single_unchecked_manual
    * added #[inline]
    
    ---
    
    ## Changelog
    
    ### Added
    
    Functions `QueryState::single`, `QueryState::get_single`, `QueryState::single_mut`, `QueryState::get_single_mut`, `QueryState::get_single_unchecked`, `QueryState::get_single_unchecked_manual`.
    
    ### Changed
    
    `QuerySingleError` is now in the `state` module.
    
    ## Migration Guide
    
    Change `query::QuerySingleError` to `state::QuerySingleError`
    
    
    Co-authored-by: 2ne1ugly <chattermin@gmail.com>
    Co-authored-by: 2ne1ugly <47616772+2ne1ugly@users.noreply.github.com>

[33mcommit e528b63e11f81f7002cc723e9d829063ee0e7df1[m
Author: Boxy <supbscripter@gmail.com>
Date:   Mon May 30 16:41:32 2022 +0000

    merge `matches_archetype` and `matches_table` (#4807)
    
    # Objective
    
    the code in these fns are always identical so stop having two functions
    
    ## Solution
    
    make them the same function
    
    ---
    
    ## Changelog
    
    change `matches_archetype` and `matches_table` to `fn matches_component_set(&self, &SparseArray<ComponentId, usize>) -> bool` then do extremely boring updating of all `FetchState` impls
    
    ## Migration Guide
    
    - move logic of `matches_archetype` and `matches_table` into `matches_component_set` in any manual `FetchState` impls

[33mcommit 2f5591ff8c234f6322e3b8d3d585ba5c88118ffc[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Mon May 30 16:41:31 2022 +0000

    bevy_reflect: Improve debug formatting for reflected types (#4218)
    
    # Objective
    
    Debugging reflected types can be somewhat frustrating since all `dyn Reflect` trait objects return something like `Reflect(core::option::Option<alloc::string::String>)`.
    
    It would be much nicer to be able to see the actual valueâ or even use a custom `Debug` implementation.
    
    ## Solution
    
    Added `Reflect::debug` which allows users to customize the debug output. It sets defaults for all `ReflectRef` subtraits and falls back to `Reflect(type_name)` if no `Debug` implementation was registered.
    
    To register a custom `Debug` impl, users can add `#[reflect(Debug)]` like they can with other traits.
    
    ### Example
    
    Using the following structs:
    
    ```rust
    #[derive(Reflect)]
    pub struct Foo {
        a: usize,
        nested: Bar,
        #[reflect(ignore)]
        _ignored: NonReflectedValue,
    }
    
    #[derive(Reflect)]
    pub struct Bar {
        value: Vec2,
        tuple_value: (i32, String),
        list_value: Vec<usize>,
        // We can't determine debug formatting for Option<T> yet
        unknown_value: Option<String>,
        custom_debug: CustomDebug
    }
    
    #[derive(Reflect)]
    #[reflect(Debug)]
    struct CustomDebug;
    
    impl Debug for CustomDebug {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            write!(f, "This is a custom debug!")
        }
    }
    
    pub struct NonReflectedValue {
        _a: usize,
    }
    ```
    
    We can do:
    
    ```rust
    let value = Foo {
      a: 1,
      _ignored: NonReflectedValue { _a: 10 },
      nested: Bar {
        value: Vec2::new(1.23, 3.21),
        tuple_value: (123, String::from("Hello")),
        list_value: vec![1, 2, 3],
        unknown_value: Some(String::from("World")),
        custom_debug: CustomDebug
      },
    };
    let reflected_value: &dyn Reflect = &value;
    println!("{:#?}", reflected_value)
    ```
    
    Which results in:
    
    ```rust
    Foo {
      a: 2,
      nested: Bar {
        value: Vec2(
          1.23,
          3.21,
        ),
        tuple_value: (
          123,
          "Hello",
        ),
        list_value: [
          1,
          2,
          3,
        ],
        unknown_value: Reflect(core::option::Option<alloc::string::String>),
        custom_debug: This is a custom debug!,
      },
    }
    ```
    
    Notice that neither `Foo` nor `Bar` implement `Debug`, yet we can still deduce it. This might be a concern if we're worried about leaking internal values. If it is, we might want to consider a way to exclude fields (possibly with a `#[reflect(hide)]` macro) or make it purely opt in (as opposed to the default implementation automatically handled by ReflectRef subtraits).
    
    Co-authored-by: Gino Valente <49806985+MrGVSV@users.noreply.github.com>

[33mcommit a764d44f1720b913157d6cc112830f2f6f8ae0d3[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon May 30 16:21:03 2022 +0000

    update xshell to 0.2 (#4789)
    
    # Objective
    
    - Update xshell to 0.2 in ci tool
    - Replace #4205

[33mcommit deeaf648975fb6b1b4f0222c6d7065ae11a89823[m
Author: Thierry Berger <contact@thierryberger.com>
Date:   Mon May 30 15:57:25 2022 +0000

    shader examples wording coherence (#4810)
    
    # Objective
    
    I noticed different examples descriptions were not using the same structure:
    ![different_wordings_examples](https://user-images.githubusercontent.com/2290685/169487055-ab76743e-3400-486f-b672-e8f60455b8e4.png)
    
    This results in sentences that a reader has to read differently each time, which might result in information being hard to find, especially foreign language users.
    
    Original discord discussion: https://discord.com/channels/691052431525675048/976846499889705020
    
    ## Solution
    
    - Use less different words, similar structure and being straight to the point.
    
    ---
    
    ## Changelog
    
    - Examples descriptions more accessible.

[33mcommit 09a3d8abe062984479bf0e99fcc1508bb722baf6[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Mon May 30 15:32:48 2022 +0000

    Allow minimising in 2d (#4527)
    
    # Objective
    
    - We can't minimise if there's a 2d camera because ??? there legally must be a 2d target.
    - Fixes https://github.com/bevyengine/bevy/issues/4526
    - Fixes https://github.com/bevyengine/bevy/issues/4856
    
    ## Solution
    
    - Make it not crash in those cases, just do nothing
    - Seems to work Â¯\\_(ã)_/Â¯
    - See also the companion commit in https://github.com/bevyengine/bevy/pull/3597 - 503c24717321bb2bb2681b358020ad1bcbef510e
    
    Co-authored-by: Asteria <asteria131@outlook.com>

[33mcommit 60584139de7d1d6dcbf4d1ff4d658b8ca59f8cf6[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Mon May 30 15:32:47 2022 +0000

    untyped APIs for components and resources (#4447)
    
    # Objective
    
    Even if bevy itself does not provide any builtin scripting or modding APIs, it should have the foundations for building them yourself.
    For that it should be enough to have APIs that are not tied to the actual rust types with generics, but rather accept `ComponentId`s and `bevy_ptr` ptrs.
    
    ## Solution
    
    Add the following APIs to bevy
    ```rust
    fn EntityRef::get_by_id(ComponentId) -> Option<Ptr<'w>>;
    fn EntityMut::get_by_id(ComponentId) -> Option<Ptr<'_>>;
    fn EntityMut::get_mut_by_id(ComponentId) -> Option<MutUntyped<'_>>;
    
    fn World::get_resource_by_id(ComponentId) -> Option<Ptr<'_>>;
    fn World::get_resource_mut_by_id(ComponentId) -> Option<MutUntyped<'_>>;
    
    // Safety: `value` must point to a valid value of the component
    unsafe fn World::insert_resource_by_id(ComponentId, value: OwningPtr);
    
    fn ComponentDescriptor::new_with_layout(..) -> Self;
    fn World::init_component_with_descriptor(ComponentDescriptor) -> ComponentId;
    ```
    
    ~~This PR would definitely benefit from #3001 (lifetime'd pointers) to make sure that the lifetimes of the pointers are valid and the my-move pointer in `insert_resource_by_id` could be an `OwningPtr`, but that can be adapter later if/when #3001 is merged.~~
    
    ### Not in this PR
    - inserting components on entities (this is very tied to types with bundles and the `BundleInserter`)
    - an untyped version of a query (needs good API design, has a large implementation complexity, can be done in a third-party crate)
    
    Co-authored-by: Jakob Hellermann <hellermann@sipgate.de>

[33mcommit 5256561b7a78f06f687c92f54baf69ed38c436d2[m
Author: Matthias Schiffer <mschiffer@universe-factory.net>
Date:   Mon May 30 15:14:12 2022 +0000

    OrthographicProjection: place origin at integer pixel with WindowSize scaling mode (#4085)
    
    # Objective
    
    One way to avoid texture atlas bleeding is to ensure that every vertex is
    placed at an integer pixel coordinate. This is a particularly appealing
    solution for regular structures like tile maps.
    
    Doing so is currently harder than necessary when the WindowSize scaling
    mode and Center origin are used: For odd window width or height, the
    origin of the coordinate system is placed in the middle of a pixel at
    some .5 offset.
    
    ## Solution
    
    Avoid this issue by rounding the half width and height values.

[33mcommit d353fbc6ea9e0c4fa69fc3b8e646e1ce79fbbc16[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat May 28 02:00:55 2022 +0000

    update image to 0.24 (#4121)
    
    # Objective
    
    - update image to 0.24
    
    ## Solution
    
    - `Bgra*` variants support have been removed from image, remove them from Bevy code
    - replace #4003
    
    changeling: https://github.com/image-rs/image/blob/master/CHANGES.md

[33mcommit 99e689cfd2a8fc328ba0998e2088179dfb5daed9[m
Author: Thierry Berger <contact@thierryberger.com>
Date:   Fri May 27 20:52:12 2022 +0000

    remove unneeded msaa explicit addition from examples (#4830)
    
    # Objective
    
    - Coming from https://github.com/bevyengine/bevy/pull/4797/files/7a596f1910c97c41f195b12d33025999e81dc0e5#r876310734
    - Simplify the examples regarding addition of `Msaa` Resource with default value.
    
    ## Solution
    
    - Remove addition of `Msaa` Resource with default value from examples,

[33mcommit c89af06c6558b80e1ff61e945124625944356cd2[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri May 27 11:54:57 2022 +0000

    Update tracing-tracy requirement from 0.8.0 to 0.9.0 (#4786)
    
    Updates the requirements on [tracing-tracy](https://github.com/nagisa/rust_tracy_client) to permit the latest version.
    <details>
    <summary>Commits</summary>
    <ul>
    <li><a href="https://github.com/nagisa/rust_tracy_client/commit/13b335a7102bbbd6b305bc91ad2a7063789e6ffa"><code>13b335a</code></a> Remove ability to disable the client at runtime</li>
    <li><a href="https://github.com/nagisa/rust_tracy_client/commit/69e44977ee93db94aee1f29592c7b68cfdf1d85a"><code>69e4497</code></a> The upgrades to 0.8.1</li>
    <li><a href="https://github.com/nagisa/rust_tracy_client/commit/c204b60c7adb8334a6ce3c78e71764438e752410"><code>c204b60</code></a> Cancel the old test runs</li>
    <li><a href="https://github.com/nagisa/rust_tracy_client/commit/939bd04c1c5a943674c2213c5c92ec5f10173692"><code>939bd04</code></a> Remove the thread initialization calls</li>
    <li><a href="https://github.com/nagisa/rust_tracy_client/commit/7024e776bb796d3f319575506de5b5e825fa59dd"><code>7024e77</code></a> Update Tracy client bindings to v0.8.1</li>
    <li><a href="https://github.com/nagisa/rust_tracy_client/commit/5c54baa244529c664e3fa03a21af1d2f859582e5"><code>5c54baa</code></a> tracy-client 0.12.7</li>
    <li><a href="https://github.com/nagisa/rust_tracy_client/commit/f183050b20e621f13eca0f70879dab5a84389e26"><code>f183050</code></a> Non-allocating <code>span!</code> macro</li>
    <li><a href="https://github.com/nagisa/rust_tracy_client/commit/15936ea751aad2fa4199ea5be609937691005791"><code>15936ea</code></a> tracy-client 0.12.6</li>
    <li><a href="https://github.com/nagisa/rust_tracy_client/commit/26d0c50542c9bd49c62f1822932b814775167166"><code>26d0c50</code></a> Relax literal the requirement of the create_plot macro so that it can be used...</li>
    <li>See full diff in <a href="https://github.com/nagisa/rust_tracy_client/compare/tracing-tracy-v0.8.0...tracing-tracy-v0.9.0">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit 589c52afe5d434dd339bd2d9d61dd8514dd7a458[m
Author: Christopher Durham <cad97@cad97.com>
Date:   Thu May 26 02:04:22 2022 +0000

    Make bevy_app's optional bevy_reflect dependency actually optional (#4846)
    
    # Objective
    
    - Make bevy_app's optional bevy_reflect dependency actually optional
    - Because bevy_ecs has a default dependency on bevy_reflect, bevy_app includes bevy_reflect transitively even with default-features=false, despite the optional dependency indicating that it was intended to be able to leave out bevy_reflect.
    
    ## Solution
    
    - Make bevy_app not enable bevy_ecs's default features, and then use [the `dep:` syntax](https://doc.rust-lang.org/cargo/reference/features.html#optional-dependencies) introduced in 1.60 to make the default bevy_reflect feature enable bevy_ecs's bevy_reflect feature/dependency.
    
    ---
    
    ## Changelog
    
    - bevy_app no longer enables bevy_ecs's `bevy_reflect` feature when included without its own `bevy_reflect` feature (which is on by default).

[33mcommit 644bd5dbc6c281a4fae65c603f09b6666de8c566[m
Author: Christopher Durham <cad97@cad97.com>
Date:   Thu May 26 00:27:18 2022 +0000

    Split time functionality into bevy_time (#4187)
    
    # Objective
    
    Reduce the catch-all grab-bag of functionality in bevy_core by minimally splitting off time functionality into bevy_time. Functionality like that provided by #3002 would increase the complexity of bevy_time, so this is a good candidate for pulling into its own unit.
    
    A step in addressing #2931 and splitting bevy_core into more specific locations.
    
    ## Solution
    
    Pull the time module of bevy_core into a new crate, bevy_time.
    
    # Migration guide
    
    - Time related types (e.g. `Time`, `Timer`, `Stopwatch`, `FixedTimestep`, etc.) should be imported from `bevy::time::*` rather than `bevy::core::*`.
    - If you were adding `CorePlugin` manually, you'll also want to add `TimePlugin` from `bevy::time`.
    - The `bevy::core::CorePlugin::Time` system label is replaced with `bevy::time::TimeSystem`.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit d683d9b9f57dc1d11c429b2b9dc9b2b1ed2ea4cb[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Thu May 26 00:09:23 2022 +0000

    Improve docs and naming for RawWindowHandle functionality (#4335)
    
    # Objective
    
    - As noticed in #4333 by @x-52, the exact purpose and logic of `HasRawWIndowHandleWrapper` is unclear
    - Unfortunately, there are rather good reasons why this design is needed (and why we can't just `impl HasRawWindowHandle for RawWindowHandleWrapper`
    
    ## Solution
    
    - Rename `HasRawWindowHandleWrapper` to `ThreadLockedRawWindowHandleWrapper`, reflecting the primary distinction
    - Document how this design is intended to be used
    - Leave comments explaining why this design must exist
    
    
    ## Migration Guide
    
    - renamed `HasRawWindowHandleWrapper` to `ThreadLockedRawWindowHandleWrapper`

[33mcommit f271d734e65908d8514da914d2bed7a7bb90696b[m
Author: Niklas Eicker <git@nikl.me>
Date:   Wed May 25 17:46:58 2022 +0000

    Rename Color::as_hlsa_f32 to Color::as_hsla_f32 (#4827)
    
    # Objective
    
    Make the function consistent with returned values and `as_hsla` method
    
    Fixes #4826
    
    ## Solution
    
    - Rename the method
    
    
    ## Migration Guide
    
    - Rename the method

[33mcommit 5dd30b627959bf86fea996e76e98bb0bd7250889[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 25 05:08:34 2022 +0000

    Remove markdown dead link check (#4839)
    
    # Objective
    
    This fails constantly and causes more pain than it is worth.
    
    ## Solution
    
    Remove dead link checks.
    
    Alternative to #4837, which is more granular but ironically still fails to build. I'm in favor of the nuclear option.
    
    Fixes #4575

[33mcommit fed93a0edce9d66586dc70c1207a2092694b9a7d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 20 23:13:48 2022 +0000

    Optionally resize Window canvas element to fit parent element (#4726)
    
    Currently Bevy's web canvases are "fixed size". They are manually set to specific dimensions. This might be fine for some games and website layouts, but for sites with flexible layouts, or games that want to "fill" the browser window, Bevy doesn't provide the tools needed to make this easy out of the box.
    
    There are third party plugins like [bevy-web-resizer](https://github.com/frewsxcv/bevy-web-resizer/) that listen for window resizes, take the new dimensions, and resize the winit window accordingly. However this only covers a subset of cases and this is common enough functionality that it should be baked into Bevy.
    
    A significant motivating use case here is the [Bevy WASM Examples page](https://bevyengine.org/examples/). This scales the canvas to fit smaller windows (such as mobile). But this approach both breaks winit's mouse events and removes pixel-perfect rendering (which means we might be rendering too many or too few pixels).  https://github.com/bevyengine/bevy-website/issues/371
    
    In an ideal world, winit would support this behavior out of the box. But unfortunately that seems blocked for now: https://github.com/rust-windowing/winit/pull/2074. And it builds on the ResizeObserver api, which isn't supported in all browsers yet (and is only supported in very new versions of the popular browsers).
    
    While we wait for a complete winit solution, I've added a `fit_canvas_to_parent` option to WindowDescriptor / Window, which when enabled will listen for window resizes and resize the Bevy canvas/window to fit its parent element. This enables users to scale bevy canvases using arbitrary CSS, by "inheriting" their parents' size. Note that the wrapper element _is_ required because winit overrides the canvas sizing with absolute values on each resize.
    
    There is one limitation worth calling out here: while the majority of  canvas resizes will be triggered by window resizes, modifying element layout at runtime (css animations, javascript-driven element changes, dev-tool-injected changes, etc) will not be detected here. I'm not aware of a good / efficient event-driven way to do this outside of the ResizeObserver api. In practice, window-resize-driven canvas resizing should cover the majority of use cases. Users that want to actively poll for element resizes can just do that (or we can build another feature and let people choose based on their specific needs).
    
    I also took the chance to make a couple of minor tweaks:
    * Made the `canvas` window setting available on all platforms. Users shouldn't need to deal with cargo feature selection to support web scenarios. We can just ignore the value on non-web platforms. I added documentation that explains this.
    *  Removed the redundant "initial create windows" handler. With the addition of the code in this pr, the code duplication was untenable.
    
    This enables a number of patterns:
    
    ## Easy "fullscreen window" mode for the default canvas
    
    The "parent element" defaults to the `<body>` element.
    
    ```rust
    app
      .insert_resource(WindowDescriptor {
        fit_canvas_to_parent: true,
        ..default()
      })
    ```
    And CSS:
    ```css
    html, body {
        margin: 0;
        height: 100%;
    }
    ```
    
    ## Fit custom canvas to "wrapper" parent element
    
    ```rust
    app
      .insert_resource(WindowDescriptor {
        fit_canvas_to_parent: true,
        canvas: Some("#bevy".to_string()),
        ..default()
      })
    ```
    And the HTML:
    ```html
    <div style="width: 50%; height: 100%">
      <canvas id="bevy"></canvas>
    </div>
    ```

[33mcommit b6eededea454cc3c44492f0ff76a0604f2e27921[m
Author: Teodor Tanasoaia <28601907+teoxoy@users.noreply.github.com>
Date:   Fri May 20 22:05:32 2022 +0000

    Use uniform buffer usage for `SkinnedMeshUniform` instead of all usages (#4816)
    
    # Objective
    
    fixes #4811 (caused by #4339 [[exact change](https://github.com/bevyengine/bevy/pull/4339/files#diff-4bf3ed03d4129aad9f5678ba19f9b14ee8e3e61d6f6365e82197b01c74468b10R712-R721)] - where the buffer type has been changed from `UniformVec` to `BufferVec`)
    
    ## Solution
    
    Use uniform buffer usage for `SkinnedMeshUniform` instead of all usages due to the `Default` derive.

[33mcommit 3a93b677a15b0ad4ec979366b0b93377aab1cc3e[m
Author: Gino Valente <gino.valente.code@gmail.com>
Date:   Fri May 20 13:31:49 2022 +0000

    bevy_reflect: Added `get_boxed` method to `reflect_trait` (#4120)
    
    # Objective
    
    Allow `Box<dyn Reflect>` to be converted into a `Box<dyn MyTrait>` using the `#[reflect_trait]` macro. The other methods `get` and `get_mut` only provide a reference to the reflected object.
    
    ## Solution
    
    Add a `get_boxed` method to the `Reflect***` struct generated by the `#[reflect_trait]` macro. This method takes in a `Box<dyn Reflect>` and returns a `Box<dyn MyTrait>`.
    
    
    Co-authored-by: MrGVSV <49806985+MrGVSV@users.noreply.github.com>

[33mcommit 7cb4d3cb43814b917d3d1e5008a638b0631f08c7[m
Author: Teodor Tanasoaia <28601907+teoxoy@users.noreply.github.com>
Date:   Wed May 18 21:09:21 2022 +0000

    Migrate to encase from crevice (#4339)
    
    # Objective
    
    - Unify buffer APIs
    - Also see #4272
    
    ## Solution
    
    - Replace vendored `crevice` with `encase`
    
    ---
    
    ## Changelog
    
    Changed `StorageBuffer`
    Added `DynamicStorageBuffer`
    Replaced `UniformVec` with `UniformBuffer`
    Replaced `DynamicUniformVec` with `DynamicUniformBuffer`
    
    ## Migration Guide
    
    ### `StorageBuffer`
    
    removed `set_body()`, `values()`, `values_mut()`, `clear()`, `push()`, `append()`
    added `set()`, `get()`, `get_mut()`
    
    ### `UniformVec` -> `UniformBuffer`
    
    renamed `uniform_buffer()` to `buffer()`
    removed `len()`, `is_empty()`, `capacity()`, `push()`, `reserve()`, `clear()`, `values()`
    added `set()`, `get()`
    
    ### `DynamicUniformVec` -> `DynamicUniformBuffer`
    
    renamed `uniform_buffer()` to `buffer()`
    removed `capacity()`, `reserve()`
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 1320818f96cc2ea673e726acfcb7441953fad81b[m
Author: Boxy <supbscripter@gmail.com>
Date:   Wed May 18 20:57:24 2022 +0000

    Fix unsoundness with `Or`/`AnyOf`/`Option` component access' (#4659)
    
    # Objective
    
    Fixes #4657
    
    Example code that wasnt panic'ing before this PR (and so was unsound):
    ```rust
        #[test]
        #[should_panic = "error[B0001]"]
        fn option_has_no_filter_with() {
            fn sys(_1: Query<(Option<&A>, &mut B)>, _2: Query<&mut B, Without<A>>) {}
            let mut world = World::default();
            run_system(&mut world, sys);
        }
    
        #[test]
        #[should_panic = "error[B0001]"]
        fn any_of_has_no_filter_with() {
            fn sys(_1: Query<(AnyOf<(&A, ())>, &mut B)>, _2: Query<&mut B, Without<A>>) {}
            let mut world = World::default();
            run_system(&mut world, sys);
        }
    
        #[test]
        #[should_panic = "error[B0001]"]
        fn or_has_no_filter_with() {
            fn sys(_1: Query<&mut B, Or<(With<A>, With<B>)>>, _2: Query<&mut B, Without<A>>) {}
            let mut world = World::default();
            run_system(&mut world, sys);
        }
    ```
    ## Solution
    
    - Only add the intersection of `with`/`without` accesses of all the elements in `Or/AnyOf` to the world query's `FilteredAccess<ComponentId>` instead of the union.
    - `Option`'s fix can be thought of the same way since its basically `AnyOf<T, ()>` but its impl is just simpler as `()` has no `with`/`without` accesses
    ---
    
    ## Changelog
    
    - `Or`/`AnyOf`/`Option` will now report more query conflicts in order to fix unsoundness
    
    ## Migration Guide
    
    - If you are now getting query conflicts from `Or`/`AnyOf`/`Option` rip to you and ur welcome for it now being caught

[33mcommit 2c93b5cf73291a1540c1035a3154aebc8d8aaeb3[m
Author: James Liu <contact@jamessliu.com>
Date:   Wed May 18 18:34:52 2022 +0000

    Reduce code duplication by using QueryIterationCursor in QueryIter (#4733)
    
    # Objective
    We have duplicated code between `QueryIter` and `QueryIterationCursor`. Reuse that code.
    
    ## Solution
     - Reuse `QueryIterationCursor` inside `QueryIter`.
     - Slim down `QueryIter` by removing the `&'w World`. It was only being used by the `size_hint` and `ExactSizeIterator` impls, which can use the QueryState and &Archetypes in the type already.
     - Benchmark to make sure there is no significant regression.
    
    Relevant benchmark results seem to show that there is no tangible difference between the two. Everything seems to be either identical or within a workable margin of error here.
    
    ```
    group                                          embed-cursor                            main
    -----                                          ------------                            ----
    fragmented_iter/base                           1.00   387.4Â±19.70ns        ? ?/sec     1.07   413.1Â±27.95ns        ? ?/sec
    many_maps_iter                                 1.00     27.3Â±0.22ms        ? ?/sec     1.00     27.4Â±0.10ms        ? ?/sec
    simple_iter/base                               1.00     13.8Â±0.07Âµs        ? ?/sec     1.00     13.7Â±0.17Âµs        ? ?/sec
    simple_iter/sparse                             1.00     61.9Â±0.37Âµs        ? ?/sec     1.00     62.2Â±0.64Âµs        ? ?/sec
    simple_iter/system                             1.00     13.7Â±0.34Âµs        ? ?/sec     1.00     13.7Â±0.10Âµs        ? ?/sec
    sparse_fragmented_iter/base                    1.00     11.0Â±0.54ns        ? ?/sec     1.03     11.3Â±0.48ns        ? ?/sec
    world_query_iter/50000_entities_sparse         1.08    105.0Â±2.68Âµs        ? ?/sec     1.00     97.5Â±2.18Âµs        ? ?/sec
    world_query_iter/50000_entities_table          1.00     27.3Â±0.13Âµs        ? ?/sec     1.00     27.3Â±0.37Âµs        ? ?/sec
    ```

[33mcommit 15acd6f45deb3cd21d1f3a9e7d39d135068f09c5[m
Author: MrGVSV <gino.valente.code@gmail.com>
Date:   Wed May 18 12:26:11 2022 +0000

    bevy_reflect: Small refactor and default `Reflect` methods (#4739)
    
    # Objective
    
    Quick followup to #4712.
    
    While updating some [other PRs](https://github.com/bevyengine/bevy/pull/4218), I realized the `ReflectTraits` struct could be improved. The issue with the current implementation is that `ReflectTraits::get_xxx_impl(...)` returns just the _logic_ to the corresponding `Reflect` trait method, rather than the entire function.
    
    This makes it slightly more annoying to manage since the variable names need to be consistent across files. For example, `get_partial_eq_impl` uses a `value` variable. But the name "value" isn't defined in the `get_partial_eq_impl` method, it's defined in three other methods in a completely separate file.
    
    It's not likely to cause any bugs if we keep it as it is since differing variable names will probably just result in a compile error (except in very particular cases). But it would be useful to someone who wanted to edit/add/remove a method.
    
    ## Solution
    
    Made `get_hash_impl`, `get_partial_eq_impl` and `get_serialize_impl` return the entire method implementation for `reflect_hash`, `reflect_partial_eq`, and `serializable`, respectively.
    
    As a result of this, those three `Reflect` methods were also given default implementations. This was fairly simple to do since all three could just be made to return `None`.
    
    ---
    
    ## Changelog
    
    * Small cleanup/refactor to `ReflectTraits` in `bevy_reflect_derive`
    * Gave `Reflect::reflect_hash`, `Reflect::reflect_partial_eq`, and `Reflect::serializable` default implementations

[33mcommit de2b1a4e94fc5e4f16b0b98f5a4280b0646d8fec[m
Author: MrGVSV <gino.valente.code@gmail.com>
Date:   Tue May 17 23:45:09 2022 +0000

    bevy_reflect: Reflected char (#4790)
    
    # Objective
    
    `char` isn't reflected.
    
    ## Solution
    
    Reflected `char`.
    
    ---
    
    ## Changelog
    
    * Reflected `char`
    
    ## Migration Guide
    
    > List too long to display

[33mcommit a0a14aa615336523fb53eabde8a4f395ded96341[m
Author: Alex Saveau <saveau.alexandre@gmail.com>
Date:   Tue May 17 22:37:51 2022 +0000

    Support returning data out of with_children (#4708)
    
    # Objective
    
    Support returning data out of with_children to enable the use case of changing the parent commands with data created inside the child builder.
    
    ## Solution
    
    Change the with_children closure to return T.
    
    Closes https://github.com/bevyengine/bevy/pull/2817.
    
    ---
    
    ## Changelog
    
    `BuildChildren::add_children` was added with the ability to return data to use outside the closure (for spawning a new child builder on a returned entity for example).

[33mcommit 7da21b12f7019d93f2e86a2ae010f57465a9af97[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Tue May 17 22:24:50 2022 +0000

    Add some more documentation to `SystemParam` (#4787)
    
    # Objective
    
    - Fixes https://github.com/bevyengine/bevy/issues/4783
    
    ## Solution
    
    - Add more documentation about the derive, and the obscure failure case for this.
    - Link to [`StaticSystemParam`](https://docs.rs/bevy/latest/bevy/ecs/system/struct.StaticSystemParam.html) in these docs.
    - Also explain the attributes whilst here.

[33mcommit ae0cb549ff1c8ceb3524825351aa01b235bbdac0[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue May 17 19:04:08 2022 +0000

    helper tool to build examples in wasm (#4776)
    
    # Objective
    
    - add an helper to build examples in wasm (from #4700)
    
    ## Solution
    
    - `cargo run -p build-wasm-example -- lighting`

[33mcommit e36bfa21ab4ea3e771c6bafc4149ff22c936d777[m
Author: Matt Wilkinson <mattwilki17@gmail.com>
Date:   Tue May 17 16:00:17 2022 +0000

    Change path to zld on MacOS fast build example (#4778)
    
    # Objective
    Fixes #4751, zld link error.
    
    ## Solution
    
    - Change the `zld` file path in the example to the one homebrew installs to by default, `/usr/local/bin/zld`.

[33mcommit dbd856de71a3a00bfd30bd3113147819b97688a6[m
Author: SarthakSingh31 <ss269@uw.edu>
Date:   Tue May 17 04:38:03 2022 +0000

    Nightly clippy fixes (#3491)
    
    Fixes the following nightly clippy lints:
    - ~~[map_flatten](https://rust-lang.github.io/rust-clippy/master/index.html#map_flatten)~~ (Fixed on main)
    - ~~[needless_borrow](https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow)~~ (Fixed on main)
    - [return_self_not_must_use](https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use) (Added in 1.59.0)
    - ~~[unnecessary_lazy_evaluations](https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_lazy_evaluations)~~ (Fixed on main)
    - [extra_unused_lifetimes](https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_lifetimes) outside of macros
    - [let_unit_value](https://rust-lang.github.io/rust-clippy/master/index.html#let_unit_value)

[33mcommit b1b3bd533bd76d25dfe0371c4bae0f5d31ebcd6c[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Tue May 17 04:16:55 2022 +0000

    Skip `drop` when `needs_drop` is `false` (#4773)
    
    # Objective
    
    - We do a lot of function pointer calls in a hot loop (clearing entities in render). This is slow, since calling function pointers cannot be optimised out. We can avoid that in the cases where the function call is a no-op.
    - Alternative to https://github.com/bevyengine/bevy/pull/2897
    - On my machine, in `many_cubes`, this reduces dropping time from ~150Î¼s to ~80Î¼s.
    
    ## Solution
    -  Make `drop` in `BlobVec` an `Option`, recording whether the given drop impl is required or not.
    - Note that this does add branching in some cases - we could consider splitting this into two fields, i.e. unconditionally call the `drop` fn pointer.
    - My intuition of how often types stored in `World` should have non-trivial drops makes me think that would be slower, however.
    
    N.B. Even once this lands, we should still test having a 'drop_multiple' variant - for types with a real `Drop` impl, the current implementation is definitely optimal.

[33mcommit 85dd291b9da1ef2ea5294af7331666f999de3d0b[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Tue May 17 04:16:54 2022 +0000

    Update `keyboard.rs` docs in `bevy_input` (#4517)
    
    # Objective
    
    - Part of the splitting process of #3692.
    
    ## Solution
    
    - Document `keyboard.rs` inside of `bevy_input`.
    
    Co-authored-by: KDecay <KDecayMusic@protonmail.com>

[33mcommit 0917c49b9bf554bed679fe010053de868ed250a2[m
Author: dataphract <dataphract@gmail.com>
Date:   Tue May 17 04:16:53 2022 +0000

    bench: add `bevy_reflect::{List, Map, Struct}` benchmarks (#3690)
    
    # Objective
    
    Partially addresses #3594.
    
    ## Solution
    
    This adds basic benchmarks for `List`, `Map`, and `Struct` implementors, both concrete (`Vec`, `HashMap`, and defined struct types) and dynamic (`DynamicList`, `DynamicMap` and `DynamicStruct`).
    
    A few insights from the benchmarks (all measurements are local on my machine):
    - Applying a list with many elements to a list with no elements is slower than applying to a list of the same length:
      - 3-4x slower when applying to a `Vec`
      - 5-6x slower when applying to a `DynamicList`
    
      I suspect this could be improved by `reserve()`ing the correct length up front, but haven't tested.
    - Applying a `DynamicMap` to another `Map` is linear in the number of elements, but applying a `HashMap` seems to be at least quadratic. No intuition on this one.
    - Applying like structs (concrete -> concrete, `DynamicStruct` -> `DynamicStruct`) seems to be faster than applying unlike structs.

[33mcommit 1648c89b643a87747173c1b1a671ea86a1fd0fc6[m
Author: Alex Saveau <saveau.alexandre@gmail.com>
Date:   Tue May 17 04:01:54 2022 +0000

    Fix frame count being a float (#4493)
    
    Original reasoning: https://github.com/bevyengine/bevy/pull/678#issuecomment-930602773
    
    That reasoning doesn't seem valid IMO since eventually +1 will do nothing. Using an integer is more intuitive and will wrap around which is probably better than getting stuck.

[33mcommit 84c783b1002d6af6ad1da83d6d15d0dee3bce023[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Mon May 16 21:25:34 2022 +0000

    Ensure that the parent is always the expected entity (#4717)
    
    # Objective
    
    - Transform propogation could stack overflow when there was a cycle.
    - I think https://github.com/bevyengine/bevy/pull/4203 would use all available memory.
    
    ## Solution
    
    - Make sure that the child entity's `Parent`s are their parents.
    
    This is also required for when parallelising, although as noted in the comment, the naÃ¯ve solution would be UB.
    (The best way to fix this would probably be an `&mut UnsafeCell<T>` `WorldQuery`, or wrapper type with the same effect)

[33mcommit 5422a2bc1674cd62956ac22258811a8c8d7c8264[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon May 16 18:32:26 2022 +0000

    Update ndk-glue requirement from 0.5 to 0.6 (#3624)
    
    Updates the requirements on [ndk-glue](https://github.com/rust-windowing/android-ndk-rs) to permit the latest version.
    <details>
    <summary>Release notes</summary>
    <p><em>Sourced from <a href="https://github.com/rust-windowing/android-ndk-rs/releases">ndk-glue's releases</a>.</em></p>
    <blockquote>
    <h2>ndk-glue v0.6.0</h2>
    <ul>
    <li><strong>Breaking:</strong> Update to <code>ndk-sys 0.3.0</code> and <code>ndk 0.6.0</code>. (<a href="https://github-redirect.dependabot.com/rust-windowing/android-ndk-rs/issues/214">#214</a>)</li>
    </ul>
    </blockquote>
    </details>
    <details>
    <summary>Commits</summary>
    <ul>
    <li><a href="https://github.com/rust-windowing/android-ndk-rs/commit/f4dc7265aaa3e51f355ff1cb298e18167685fc7f"><code>f4dc726</code></a> Release ndk-sys-0.3.0, ndk-0.6.0, ndk-glue-0.6.0 (<a href="https://github-redirect.dependabot.com/rust-windowing/android-ndk-rs/issues/214">#214</a>)</li>
    <li><a href="https://github.com/rust-windowing/android-ndk-rs/commit/8e59a347bd154693dc008a769b4df8d7ad66597a"><code>8e59a34</code></a> ndk-sys: Use <code>jni-sys</code> for low-level JNI bindings (<a href="https://github-redirect.dependabot.com/rust-windowing/android-ndk-rs/issues/209">#209</a>)</li>
    <li><a href="https://github.com/rust-windowing/android-ndk-rs/commit/240389f1e281f582b84a8049e2afaa8677d901c2"><code>240389f</code></a> ndk-build,cargo-apk: Default <code>target_sdk_version</code> to 30 or lower (<a href="https://github-redirect.dependabot.com/rust-windowing/android-ndk-rs/issues/203">#203</a>)</li>
    <li><a href="https://github.com/rust-windowing/android-ndk-rs/commit/2d554daa30717f61087ef1bd1e46932d7a477a3d"><code>2d554da</code></a> Update README.md with links to cargo apk README.md (<a href="https://github-redirect.dependabot.com/rust-windowing/android-ndk-rs/issues/195">#195</a>)</li>
    <li><a href="https://github.com/rust-windowing/android-ndk-rs/commit/39d4701cc6485814196ffe1f305dd8adbda8252c"><code>39d4701</code></a> cargo-apk: Use <code>min_sdk_version</code> to select compiler target (<a href="https://github-redirect.dependabot.com/rust-windowing/android-ndk-rs/issues/197">#197</a>)</li>
    <li><a href="https://github.com/rust-windowing/android-ndk-rs/commit/317d71101f2c21bce0aca888e5d6d1bb8a2b8f5e"><code>317d711</code></a> ci emulator: Cache AVD emulator setup to speed up repeated jobs (<a href="https://github-redirect.dependabot.com/rust-windowing/android-ndk-rs/issues/202">#202</a>)</li>
    <li><a href="https://github.com/rust-windowing/android-ndk-rs/commit/6e7658719bdfa8166f54c4c1e47d4e459f287cc1"><code>6e76587</code></a> readme: Use <code>console</code> code blocks for shell commands (<a href="https://github-redirect.dependabot.com/rust-windowing/android-ndk-rs/issues/196">#196</a>)</li>
    <li><a href="https://github.com/rust-windowing/android-ndk-rs/commit/63cbffa77a97206c66bd5b070632a4f462326017"><code>63cbffa</code></a> ndk-sys: Add all missing android-related headers with NDK 23.1.7779620 (<a href="https://github-redirect.dependabot.com/rust-windowing/android-ndk-rs/issues/201">#201</a>)</li>
    <li><a href="https://github.com/rust-windowing/android-ndk-rs/commit/55539dc55547a8cf4ba2ebadacab2dad9593fd3f"><code>55539dc</code></a> Release ndk-build-0.4.3, cargo-apk-0.8.2 (<a href="https://github-redirect.dependabot.com/rust-windowing/android-ndk-rs/issues/192">#192</a>)</li>
    <li>See full diff in <a href="https://github.com/rust-windowing/android-ndk-rs/compare/ndk-glue-0.5.0...ndk-glue-0.6.0">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit 646c7e4c50c82a9ea0d5a65f26ebfe870f5f17d4[m
Author: nihohit <nihohit@gmail.com>
Date:   Mon May 16 18:00:08 2022 +0000

    Fix mouse_clicked check for touches. (#2029)
    
    This seems like a copy-paste from line 72 that was only partially modified.
    
    I don't know how to test this, so please verify me :)

[33mcommit eb2a8b12e925f312764f73a04c2f2352d5f9e40e[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon May 16 17:45:10 2022 +0000

    bevy_ptr works in no_std environments (#4760)
    
    # Objective
    `bevy_ptr` works just fine without `std`. Mark it as `no_std`. This should generally be useful for non-bevy use cases, but it also marginally speeds up compilation by allowing the crate to compile without loading the std-lib.
    
    ## Solution
    Replace `std` with `core`. Added `#![no_std]` to the crate and to the crate's tags.
    
    Also added a missing `#![warn(missing_docs)]` that the other crates have.

[33mcommit 2e8dfc02efef8b95b25c5f2888675296893e8a5c[m
Author: Aron Derenyi <aron.derenyi@gmail.com>
Date:   Mon May 16 16:37:33 2022 +0000

    Fixing confusing near and far fields in Camera (#4457)
    
    # Objective
    
    - Fixes #4456
    
    ## Solution
    
    - Removed the `near` and `far` fields from the camera and the views.
    
    ---
    
    ## Changelog
    
    - Removed the `near` and `far` fields from the camera and the views.
    - Removed the `ClusterFarZMode::CameraFarPlane` far z mode.
    
    ## Migration Guide
    
    - Cameras no longer accept near and far values during initialization
    - `ClusterFarZMode::Constant` should be used with the far value instead of `ClusterFarZMode::CameraFarPlane`

[33mcommit 1ba742937139c049ce5aafc8bc1bb3b9c8f0c201[m
Author: Mark Schmale <masch@masch.it>
Date:   Mon May 16 13:53:20 2022 +0000

    Doc/module style doc blocks for examples (#4438)
    
    # Objective
    
    Provide a starting point for #3951, or a partial solution.
    Providing a few comment blocks to discuss, and hopefully find better one in the process.
    
    ## Solution
    
    Since I am pretty new to pretty much anything in this context, I figured I'd just start with a draft for some file level doc blocks. For some of them I found more relevant details (or at least things I considered interessting), for some others there is less.
    
    ## Changelog
    
    - Moved some existing comments from main() functions in the 2d examples to the file header level
    - Wrote some more comment blocks for most other 2d examples
    
    TODO:
    - [x] 2d/sprite_sheet, wasnt able to come up with something good yet
    - [x] all other example groups...
    
    
    Also: Please let me know if the commit style is okay, or to verbose. I could certainly squash these things, or add more details if needed.
    I also hope its okay to raise this PR this early, with just a few files changed. Took me long enough and I dont wanted to let it go to waste because I lost motivation to do the whole thing. Additionally I am somewhat uncertain over the style and contents of the commets. So let me know what you thing please.

[33mcommit 7462f21be4fed152c5e3fd1b8b92f5d1d8d47df0[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Sun May 15 20:00:55 2022 +0000

    Remove strong language from CONTRIBUTING.md (#4755)
    
    The removed line is a) flippantly discouraging and b) no longer entirely accurate, now that we have more team members with merge rights.

[33mcommit 516e4aaa1050e583134cf49ef863f42d792139b0[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Sat May 14 14:40:09 2022 +0000

    Add Commands::new_from_entities (#4423)
    
    This change allows for creating `Commands` objects from just an entities reference, which allows for creating multiple dynamically in a normal system.
    
    Context: https://discord.com/channels/691052431525675048/774027865020039209/960857605943726142

[33mcommit 947d3f9627d03c061966ede2b6f5ee5c78c961b3[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat May 14 02:01:38 2022 +0000

    add timeout to miri job in CI (#4743)
    
    # Objective
    
    - When Miri is failing, it can be very slow to do so
    
    <img width="1397" alt="Screenshot 2022-05-14 at 03 05 40" src="https://user-images.githubusercontent.com/8672791/168405111-c5e27d63-7a5a-4a5e-b679-abbeeb3201d2.png">
    
    ## Solution
    
    - Set the timeout for Miri to 60 minutes (it's 6 hours by default). It runs in around 10 minutes when successful
    - Fix cache key as it was set to the same as another task that doesn't build with the same parameters

[33mcommit c309acd4322b1c3b2089e247a2d28b938eb7b56d[m
Author: James Liu <contact@jamessliu.com>
Date:   Fri May 13 13:18:53 2022 +0000

    Fail to compile on 16-bit platforms (#4736)
    
    # Objective
    `bevy_ecs` assumes that `u32 as usize` is a lossless operation and in a few cases relies on this for soundness and correctness. The only platforms that Rust compiles to where this invariant is broken are 16-bit systems.
    
    A very clear example of this behavior is in the SparseSetIndex impl for Entity, where it converts a u32 into a usize to act as an index. If usize is 16-bit, the conversion will overflow and provide the caller with the wrong index. This can easily result in previously unforseen aliased mutable borrows (i.e. Query::get_many_mut).
    
    ## Solution
    Explicitly fail compilation on 16-bit platforms instead of introducing UB.
    
    Properly supporting 16-bit systems will likely need a workable use case first.
    
    ---
    
    ## Changelog
    Removed: Ability to compile `bevy_ecs` on 16-bit platforms.
    
    ## Migration Guide
    `bevy_ecs` will now explicitly fail to compile on 16-bit platforms.  If this is required, there is currently no alternative. Please file an issue (https://github.com/bevyengine/bevy/issues) to help detail your use case.

[33mcommit acbee7795d778412d1a6e9daace7c1180eb77a14[m
Author: MrGVSV <gino.valente.code@gmail.com>
Date:   Fri May 13 01:13:30 2022 +0000

    bevy_reflect: Reflect arrays (#4701)
    
    # Objective
    
    > â¹ï¸ **Note**: This is a rebased version of #2383. A large portion of it has not been touched (only a few minor changes) so that any additional discussion may happen here. All credit should go to @NathanSWard for their work on the original PR.
    
    - Currently reflection is not supported for arrays.
    - Fixes #1213
    
    ## Solution
    
    * Implement reflection for arrays via the `Array` trait.
    * Note, `Array` is different from `List` in the way that you cannot push elements onto an array as they are statically sized.
    * Now `List` is defined as a sub-trait of `Array`.
    
    ---
    
    ## Changelog
    
    * Added the `Array` reflection trait
    * Allows arrays up to length 32 to be reflected via the `Array` trait
    
    ## Migration Guide
    
    * The `List` trait now has the `Array` supertrait. This means that `clone_dynamic` will need to specify which version to use:
      ```rust
      // Before
      let cloned = my_list.clone_dynamic();
      // After
      let cloned = List::clone_dynamic(&my_list);
      ```
    * All implementers of `List` will now need to implement `Array` (this mostly involves moving the existing methods to the `Array` impl)
    
    Co-authored-by: NathanW <nathansward@comcast.net>
    Co-authored-by: MrGVSV <49806985+MrGVSV@users.noreply.github.com>

[33mcommit dfee7879c3d0f3f791486edf813950caecf7bdac[m
Author: Charles <c.giguere42@gmail.com>
Date:   Fri May 13 00:57:04 2022 +0000

    Add a clear() method to the EventReader that consumes the iterator (#4693)
    
    # Objective
    
    - It's pretty common to want to check if an EventReader has received one or multiple events while also needing to consume the iterator to "clear" the EventReader.
    - The current approach is to do something like `events.iter().count() > 0` or `events.iter().last().is_some()`. It's not immediately obvious that the purpose of that is to consume the events and check if there were any events. My solution doesn't really solve that part, but it encapsulates the pattern.
    
    ## Solution
    
    - Add a `.clear()` method that consumes the iterator.
            - It takes the EventReader by value to make sure it isn't used again after it has been called.
    
    ---
    
    ## Migration Guide
    
    Not a breaking change, but if you ever found yourself in a situation where you needed to consume the EventReader and check if there was any events you can now use
    
    ```rust
    fn system(events: EventReader<MyEvent>) {
            if !events.is_empty {
                    events.clear();
                    // Process the fact that one or more event was received
            }
    }
    ```
    
    
    Co-authored-by: Charles <IceSentry@users.noreply.github.com>

[33mcommit 0166c4f7fcb074e7e46e2a9de212ef8240b61243[m
Author: James Liu <contact@jamessliu.com>
Date:   Fri May 13 00:33:13 2022 +0000

    Profile par_for_each(_mut) tasks (#4711)
    
    # Objective
    `Query::par_for_each` and it's variants do not show up when profiling using `tracy` or other profilers. Failing to show the impact of changing batch size, the overhead of scheduling tasks, overall thread utilization, etc. other than the effect on the surrounding system.
    
    ## Solution
    Add a child span that is entered on every spawned task.
    
    Example view of the results in `tracy` using a modified `parallel_query`:
    ![image](https://user-images.githubusercontent.com/3137680/167560036-626bd091-344b-4664-b323-b692f4f16084.png)
    
    ---
    
    ## Changelog
    Added: `tracing` spans for `Query::par_for_each` and its variants. Spans should now be visible for all

[33mcommit 3d8d922566b63a521c3511ee5ff2a3e9dbf187c1[m
Author: MrGVSV <gino.valente.code@gmail.com>
Date:   Thu May 12 19:43:23 2022 +0000

    bevy_reflect_derive: Tidying up the code (#4712)
    
    # Objective
    
    The `bevy_reflect_derive` crate is not the cleanest or easiest to follow/maintain. The `lib.rs` file is especially difficult with over 1000 lines of code written in a confusing order. This is just a result of growth within the crate and it would be nice to clean it up for future work.
    
    ## Solution
    
    Split `bevy_reflect_derive` into many more submodules. The submodules include:
    
    * `container_attributes` - Code relating to container attributes
    * `derive_data` - Code relating to reflection-based derive metadata
    * `field_attributes` - Code relating to field attributes
    * `impls` - Code containing actual reflection implementations
    * `reflect_value` - Code relating to reflection-based value metadata
    * `registration` - Code relating to type registration
    * `utility` - General-purpose utility functions
    
    This leaves the `lib.rs` file to contain only the public macros, making it much easier to digest (and fewer than 200 lines).
    
    By breaking up the code into smaller modules, we make it easier for future contributors to find the code they're looking for or identify which module best fits their own additions.
    
    ### Metadata Structs
    
    This cleanup also adds two big metadata structs: `ReflectFieldAttr` and `ReflectDeriveData`. The former is used to store all attributes for a struct field (if any). The latter is used to store all metadata for struct-based derive inputs.
    
    Both significantly reduce code duplication and make editing these macros much simpler. The tradeoff is that we may collect more metadata than needed. However, this is usually a small thing (such as checking for attributes when they're not really needed or creating a `ReflectFieldAttr` for every field regardless of whether they actually have an attribute).
    
    We could try to remove these tradeoffs and squeeze some more performance out, but doing so might come at the cost of developer experience. Personally, I think it's much nicer to create a `ReflectFieldAttr` for every field since it means I don't have to do two `Option` checks. Others may disagree, though, and so we can discuss changing this either in this PR or in a future one.
    
    ### Out of Scope
    
    _Some_ documentation has been added or improved, but ultimately good docs are probably best saved for a dedicated PR.
    
    ## ð Focus Points (for reviewers)
    
    I know it's a lot to sift through, so here is a list of **key points for reviewers**:
    
    - The following files contain code that was mostly just relocated:
      - `reflect_value.rs`
      - `registration.rs`
    - `container_attributes.rs` was also mostly moved but features some general cleanup (reducing nesting, removing hardcoded strings, etc.) and lots of doc comments
    - Most impl logic was moved from `lib.rs` to `impls.rs`, but they have been significantly modified to use the new `ReflectDeriveData` metadata struct in order to reduce duplication.
    - `derive_data.rs` and `field_attributes.rs` contain almost entirely new code and should probably be given the most attention.
    - Likewise, `from_reflect.rs` saw major changes using `ReflectDeriveData` so it should also be given focus.
    - There was no change to the `lib.rs` exports so the end-user API should be the same.
    
    ## Prior Work
    
    This task was initially tackled by @NathanSWard in #2377 (which was closed in favor of this PR), so hats off to them for beating me to the punch by nearly a year!
    
    ---
    
    ## Changelog
    
    * **[INTERNAL]** Split `bevy_reflect_derive` into smaller submodules
    * **[INTERNAL]** Add `ReflectFieldAttr`
    * **[INTERNAL]** Add `ReflectDeriveData`
    * Add `BevyManifest::get_path_direct()` method (`bevy_macro_utils`)
    
    
    Co-authored-by: MrGVSV <49806985+MrGVSV@users.noreply.github.com>

[33mcommit d3b2439c820637b2501bf2bc26807cf2d5fd4078[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Thu May 12 18:39:20 2022 +0000

    fix tracy frame marker placement (after preseting *all* windows) (#4731)
    
    # Objective
    
    The frame marker event was emitted in the loop of presenting all the windows. This would mark the frame as finished multiple times if more than one window is used.
    
    ## Solution
    
    Move the frame marker to after the `for`-loop, so that it gets executed only once.

[33mcommit ae580e58dd1d8539e26a44a4d428e1aa45a3d6f9[m
Author: Troels Jessen <trojes@tuta.io>
Date:   Wed May 11 09:31:39 2022 +0000

    Added keyboard key to mouse control for scene viewer example (#4411)
    
    # Objective
    
    - Added keyboard control for scene_viewer example. Fixes #4407
    
    
    Co-authored-by: Troels Jessen <kairyuka@gmail.com>

[33mcommit 94d941661daa3fb11f7e572a9caa8ccd03eb0647[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Tue May 10 20:18:59 2022 +0000

    Tidy up the code of events (#4713)
    
    # Objective
    
    - The code in `events.rs` was a bit messy. There was lots of duplication between `EventReader` and `ManualEventReader`, and the state management code is not needed.
    
    ## Solution
    
    - Clean it up.
    
    ## Future work
    
    Should we remove the type parameter from `ManualEventReader`?
    It doesn't have any meaning outside of its source `Events`. But there's no real reason why it needs to have a type parameter - it's just plain data. I didn't remove it yet to keep the type safety in some of the users of it (primarily related to `&mut World` usage)

[33mcommit 9a54e2bed636a84691e53f289cc1f55d1ba9e58a[m
Author: Mike <mike.hsu@gmail.com>
Date:   Tue May 10 20:18:58 2022 +0000

    Add a tracing span for run criteria. (#4709)
    
    # Objective
    
    Adds a tracing span for run critieria.
    
    This change will be invalidated by stageless, but it was a simple change.
    
    Fixes #4681.
    
    ## Changelog
    
    Shows how long a run criteria takes to run when tracing is enabled.
    ![image](https://user-images.githubusercontent.com/2180432/167517447-93dba7db-8c85-4686-90e0-30e9636f120f.png)

[33mcommit e503a31048f75ffe893310e888d9e5f94b9b7b52[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Tue May 10 20:01:55 2022 +0000

    fix "unused" warnings when compiling with `render` feature but without `animation` (#4714)
    
    # Objective
    When running `cargo check --no-default-features --features render` I get
    ```rust
    warning: unused import: `Quat`
      --> crates/bevy_gltf/src/loader.rs:11:23
       |
    11 | use bevy_math::{Mat4, Quat, Vec3};
       |                       ^^^^
       |
       = note: `#[warn(unused_imports)]` on by default
    
    warning: function is never used: `paths_recur`
       --> crates/bevy_gltf/src/loader.rs:542:4
        |
    542 | fn paths_recur(
        |    ^^^^^^^^^^^
        |
        = note: `#[warn(dead_code)]` on by default
    ```
    
    ## Solution
    
    Put these items behind `#[cfg(feature = "animation")]`.

[33mcommit aced6aff041555b97d97c96381b551527569881f[m
Author: PROMETHIA-27 <electriccobras@gmail.com>
Date:   Mon May 9 16:32:15 2022 +0000

    Add macro to implement reflect for struct types and migrate glam types (#4540)
    
    # Objective
    
    Relevant issue: #4474
    
    Currently glam types implement Reflect as a value, which is problematic for reflection, making scripting/editor work much more difficult. This PR re-implements them as structs.
    
    ## Solution
    
    Added a new proc macro, `impl_reflect_struct`, which replaces `impl_reflect_value` and `impl_from_reflect_value` for glam types. This macro could also be used for other types, but I don't know of any that would require it. It's specifically useful for foreign types that cannot derive Reflect normally.
    
    ---
    
    ## Changelog
    
    ### Added
    - `impl_reflect_struct` proc macro
    
    ### Changed
    - Glam reflect impls have been replaced with `impl_reflect_struct`
    - from_reflect's `impl_struct` altered to take an optional custom constructor, allowing non-default non-constructible foreign types to use it
    - Calls to `impl_struct` altered to conform to new signature
    - Altered glam types (All vec/mat combinations) have a different serialization structure, as they are reflected differently now.
    
    ## Migration Guide
    
    This will break altered glam types serialized to RON scenes, as they will expect to be serialized/deserialized as structs rather than values now. A future PR to add custom serialization for non-value types is likely on the way to restore previous behavior. Additionally, calls to `impl_struct` must add a `None` parameter to the end of the call to restore previous behavior.
    
    Co-authored-by: PROMETHIA-27 <42193387+PROMETHIA-27@users.noreply.github.com>

[33mcommit 38a940dbbe2b4b27cf2ecced3fd2b1da571d6049[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Mon May 9 16:09:33 2022 +0000

    Make derived SystemParam readonly if possible (#4650)
    
    Required for https://github.com/bevyengine/bevy/pull/4402.
    
    # Objective
    
    - derived `SystemParam` implementations were never `ReadOnlySystemParamFetch`
    - We want them to be, e.g. for `EventReader`
    
    ## Solution
    
    - If possible, 'forward' the impl of `ReadOnlySystemParamFetch`.

[33mcommit 4c878ef7905a83387b8d3f20f2936982fb04fa47[m
Author: Joy <51241057+maniwani@users.noreply.github.com>
Date:   Mon May 9 14:39:22 2022 +0000

    Add comparison methods to FilteredAccessSet  (#4211)
    
    # Objective
    
    - (Eventually) reduce noise in reporting access conflicts between unordered systems.
            - `SystemStage` only looks at unfiltered `ComponentId` access, any conflicts reported are potentially `false`.
                    - the systems could still be accessing disjoint archetypes
            - Comparing systems' filtered access sets can maybe avoid that (for statically known component types).
                    - #4204
    
    ## Solution
    
    - Modify `SparseSetIndex` trait to require `PartialEq`, `Eq`, and `Hash` (all internal types except `BundleId` already did).
    - Add `is_compatible` and `get_conflicts` methods to `FilteredAccessSet<T>`
            - (existing method renamed to `get_conflicts_single`)
    - Add docs for those and all the other methods while I'm at it.

[33mcommit 33a4df8008ce138106a71b047ddef3ba57a0a28b[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Mon May 9 14:18:02 2022 +0000

    Update layout/style when scale factor changes too (#4689)
    
    # Objective
    
    - Fix https://github.com/bevyengine/bevy/issues/4688
    
    ## Solution
    
    - Fixes https://github.com/bevyengine/bevy/issues/4688
    - This raises an interesting question about our change detection system - is filtered queries actually a good UX for this? They're ergonomic in the easy case, but what do we recommend when it's not so.
    - In this case, the system should have been migrated similary to https://github.com/bevyengine/bevy/pull/4180 anyway, so I've done that.

[33mcommit fca1c861d2d6b3c0477f6e96b7644bd32becb254[m
Author: Joy <51241057+maniwani@users.noreply.github.com>
Date:   Mon May 9 14:00:16 2022 +0000

    Make change lifespan deterministic and update docs (#3956)
    
    ## Objective
    
    - ~~Make absurdly long-lived changes stay detectable for even longer (without leveling up to `u64`).~~
    - Give all changes a consistent maximum lifespan.
    - Improve code clarity.
    
    ## Solution
    
    - ~~Increase the frequency of `check_tick` scans to increase the oldest reliably-detectable change.~~
    (Deferred until we can benchmark the cost of a scan.)
    - Ignore changes older than the maximum reliably-detectable age.
    - General refactoringâname the constants, use them everywhere, and update the docs.
    - Update test cases to check for the specified behavior.
    
    ## Related
    
    This PR addresses (at least partially) the concerns raised in:
    
    - #3071
    - #3082 (and associated PR #3084)
    
    ## Background
    
    - #1471
    
    Given the minimum interval between `check_ticks` scans, `N`, the oldest reliably-detectable change is `u32::MAX - (2 * N - 1)` (or `MAX_CHANGE_AGE`). Reducing `N` from ~530 million (current value) to something like ~2 million would extend the lifetime of changes by a billion.
    
    | minimum `check_ticks` interval | oldest reliably-detectable change  | usable % of `u32::MAX` |
    | --- | --- | --- |
    | `u32::MAX / 8`  (536,870,911) | `(u32::MAX / 4) * 3` | 75.0% |
    | `2_000_000` | `u32::MAX - 3_999_999` | 99.9% |
    
    Similarly, changes are still allowed to be between `MAX_CHANGE_AGE`-old and `u32::MAX`-old in the interim between `check_tick` scans. While we prevent their age from overflowing, the test to detect changes still compares raw values. This makes failure ultimately unreliable, since when ancient changes stop being detected varies depending on when the next scan occurs.
    
    ## Open Question
    
    Currently, systems and system states are incorrectly initialized with their `last_change_tick` set to `0`, which doesn't handle wraparound correctly.
    
    For consistent behavior, they should either be initialized to the world's `last_change_tick` (and detect no changes) or to `MAX_CHANGE_AGE` behind the world's current `change_tick` (and detect everything as a change). I've currently gone with the latter since that was closer to the existing behavior.
    
    ## Follow-up Work
    
    (Edited: entire section)
    
    We haven't actually profiled how long a `check_ticks` scan takes on a "large" `World` , so we don't know if it's safe to increase their frequency. However, we are currently relying on play sessions not lasting long enough to trigger a scan and apps not having enough entities/archetypes for it to be "expensive" (our assumption). That isn't a real solution. (Either scanning never costs enough to impact frame times or we provide an option to use `u64` change ticks. Nobody will accept random hiccups.)
    
    To further extend the lifetime of changes, we actually only need to increment the world tick if a system has `Fetch: !ReadOnlySystemParamFetch`. The behavior will be identical because all writes are sequenced, but I'm not sure how to implement that in a way that the compiler can optimize the branch out.
    
    Also, since having no false positives depends on a `check_ticks` scan running at least every `2 * N - 1` ticks, a `last_check_tick` should also be stored in the `World` so that any lull in system execution (like a command flush) could trigger a scan if needed. To be completely robust, all the systems initialized on the world should be scanned, not just those in the current stage.

[33mcommit 7f73666f5391dcadaad2195ed258081ec968f2d6[m
Author: Nathan Stocks <cleancut@github.com>
Date:   Mon May 9 13:37:40 2022 +0000

    Add missing audio/ogg file extensions: .oga, .spx (#4703)
    
    # Objective
    
    - Add two missing ogg vorbis audio extensions.
    
    ## Solution
    
    - Add the two missing extensions to the list
      - The file format is the same, there are simply two other possible extensions files can use.
      - This can be easily (manually) tested by renaming the extension of `assets/sounds/Windless Slopes.ogg` to end in either `.oga` or `.spx` (in both the filesystem and in `examples/audio/audio.rs`) and then running `cargo run --example audio` and observing that the music still plays.
    
    ## More info
    
    From the [wikipedia article for Ogg](https://en.wikipedia.org/wiki/Ogg):
    
    > Ogg audio media is registered as [IANA](https://en.wikipedia.org/wiki/Internet_Assigned_Numbers_Authority) [media type](https://en.wikipedia.org/wiki/Media_type) audio/ogg with file extensions .oga, .ogg, and [.spx](https://en.wikipedia.org/wiki/Speex).
    
    The current workaround is to rename any files ending in `.oga` or `.spx` to end in `.ogg` instead, which complicates tracking assets procured from other organizations.
    
    See also [a corresponding change to bevy_kira_audio](https://github.com/NiklasEi/bevy_kira_audio/pull/8)
    
    
    ---
    
    ## Changelog
    
    ### Added
    - Vorbis audio files may now use the `.oga` and `.spx` filename extensions in addition to the more common `.ogg` filename extension.

[33mcommit 900e339a332fe2640493d54c7e400cdb3c9d2a14[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Mon May 9 13:37:39 2022 +0000

    Add IntoIterator impls for &Query and &mut Query (#4692)
    
    # Objective
    
    These types of IntoIterator impls are a common pattern in Rust, and these implementations make this common pattern work for bevy queries.

[33mcommit a2f966ee9f9cad8fa5b9f221a53e7f1628e72005[m
Author: oddfacade <oddfacade@arson.club>
Date:   Mon May 9 13:37:38 2022 +0000

    create mutable versions of `TypeRegistry` methods (#4484)
    
    # Objective
    
    It is possible to get a mutable reference to a `TypeRegistration` using
    `TypeRegistry::get_mut`. However, none of its other methods
    (`get_mut_with_name`, `get_type_data`, `iter`, etc.) have mutable
    versions.
    
    Besides improving consistency, this change would facilitate use cases
    which involve storing mutable state data in the `TypeRegistry`.
    
    ## Solution
    
    Provides a trivial wrapper around the mutable accessors that the
    `TypeRegistration` already provides. Exactly mirrors the existing
    immutable versions.

[33mcommit 96078c76ebe440667e1adc2a556ac29a02370cf8[m
Author: Joe Ardent <code@ardent.nebcorp.com>
Date:   Mon May 9 13:19:33 2022 +0000

    Make accessors for mesh vertices and indices public. (#3906)
    
    # Objective
    
    Make it easy to get position and index data from Meshes.
    
    ## Solution
    
    It was previously possible to get the mesh data by manually matching on `Mesh::VertexAttributeValues` and `Mesh::Indices`as in the bodies of these two methods (`VertexAttributeValues::as_float3(&self)` and `Indices::iter(&self)`), but that's needless duplication that making these methods `pub` fixes.

[33mcommit 89f49431573ed5399b6318d2c3d6fe84c4cc9a87[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon May 9 13:19:32 2022 +0000

    exact sized event iterators (#3863)
    
    # Objective
    
    - Remove `Resource` binding on events, introduce a new `Event` trait
    - Ensure event iterators are `ExactSizeIterator`
    
    ## Solution
    
    - Builds on #2382 and #2969
    
    ## Changelog
    
    - Events<T>, EventWriter<T>, EventReader<T> and so on now require that the underlying type is Event, rather than Resource. Both of these are trivial supertraits of Send + Sync + 'static with universal blanket implementations: this change is currently purely cosmetic.
    - Event reader iterators now implement ExactSizeIterator

[33mcommit 9cd6025ba172b10a0d6cb323dce28e4aaf7317c2[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon May 9 13:06:22 2022 +0000

    fix re-adding a plugin to a plugin group (#2039)
    
    In a `PluginGroupBuilder`, when adding a plugin that was already in the group (potentially disabled), it was then added twice to the app builder when calling `finish`. As the plugin is kept in an `HashMap`, it is not possible to have the same plugins twice with different configuration.
    
    This PR updates the order of the plugin group so that each plugin is present only once.
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit 76829f938ee85ebac821b5369361a9feceb0a34d[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Sun May 8 02:57:00 2022 +0000

    Add a fun skinned mesh stress test based on the animated_fox example (#4674)
    
    # Objective
    
    - Add a stress test for skinned meshes
    
    https://user-images.githubusercontent.com/302146/167111578-55a7d58a-0ec8-4735-a043-f084f0ff3939.mp4

[33mcommit d867b6168801670e2f1eac2e17ef7673a9152720[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Sat May 7 06:20:13 2022 +0000

    Stop labeling PRs with Needs-Triage (#4686)
    
    # Objective
    
    - New PRs are labeled with Needs-Triage, but this is unhelpful and creates busy work: it's just as easy to check for unlabelled PRs, especially now that we no longer have an unlabelled backlog.
    
    Note: this is not true for issues. Issues start with at least one label based on which template they use, and so there's no good way to filter for issues that need attention from the triage team.
    
    ## Solution
    
    - Remove responsible CI tasks.

[33mcommit 743bd30bc7afd7e88b252de0f839a29cbd91683f[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri May 6 22:05:45 2022 +0000

    use const Vec2 in lights cluster and bounding box when possible (#4602)
    
    # Objective
    
    - noticed a few Vec3 and Vec2 that could be const
    
    ## Solution
    
    - Declared them as const
    - It seems to make a tiny improvement in example `many_light`, but given that the change is not complex at all it could still be worth it

[33mcommit aabc47f290f8f200cefe1b7e1f2bfb9816134354[m
Author: Yutao Yuan <infmagic2047reg@outlook.com>
Date:   Fri May 6 19:29:45 2022 +0000

    Make public macros more robust with $crate (#4655)
    
    # Objective
    
    We have some macros that are public but only used internally for now. They fail on user's code due to the use of crate names like `bevy_utils`, while the user only has `bevy::utils`. There are two affected macros.
    
    - `bevy_utils::define_label`: it may be useful in user's code for defining custom kinds of label traits (this is why I made this PR).
    - `bevy_asset::load_internal_asset`: not useful currently due to limitations of the debug asset server, but this may change in the future.
    
    ## Solution
    
    We can make them work by using `$crate` instead of names of their own crates, which can refer to the macro's defining crate regardless of the user's setup. Even though our objective is rather low-priority here, the solution adds no maintenance cost so it is still worthwhile.

[33mcommit 068e9eaae8591c51f037e7e99a4683b6159e6983[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri May 6 19:29:44 2022 +0000

    simple tool to compare traces between executions (#4628)
    
    # Objective
    
    - Have an easy way to compare spans between executions
    
    ## Solution
    
    - Add a tool to compare spans from chrome traces
    
    ```bash
    > cargo run --release  -p spancmp -- --help
       Compiling spancmp v0.1.0
        Finished release [optimized] target(s) in 1.10s
         Running `target/release/spancmp --help`
    spancmp
    
    USAGE:
        spancmp [OPTIONS] <TRACE> [SECOND_TRACE]
    
    ARGS:
        <TRACE>
        <SECOND_TRACE>
    
    OPTIONS:
        -h, --help                     Print help information
        -p, --pattern <PATTERN>        Filter spans by name matching the pattern
        -t, --threshold <THRESHOLD>    Filter spans that have an average shorther than the threshold
                                       [default: 0]
    ```
    
    for each span, it will display the count, minimum duration, average duration and max duration. It can be filtered by a pattern on the span name or by a minimum average duration.
    
    just displaying a trace
    ![Screenshot 2022-04-28 at 21 56 21](https://user-images.githubusercontent.com/8672791/165835310-f465c6f2-9e6b-4808-803e-884b06e49292.png)
    
    comparing two traces
    ![Screenshot 2022-04-28 at 21 56 55](https://user-images.githubusercontent.com/8672791/165835353-097d266b-a70c-41b8-a8c1-27804011dc97.png)
    
    
    
    Co-authored-by: Robert Swain <robert.swain@gmail.com>

[33mcommit d46cf69b7b76144de060cc3279e259566110cc7b[m
Author: bjorn3 <bjorn3@users.noreply.github.com>
Date:   Fri May 6 19:29:43 2022 +0000

    Add the license for the FiraMono font (#3589)
    
    I copied the license from https://github.com/mozilla/Fira/blob/master/LICENSE. The fact that the license file was missing came up in a discussion on [discord](https://discord.com/channels/691052431525675048/695741366520512563/929332683149017119).

[33mcommit d63b7e9568575e4a76733a5ed8ec6f34dc6e26d8[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Fri May 6 19:15:24 2022 +0000

    some cleanup for `bevy_ptr` (#4668)
    
    1. change `PtrMut::as_ptr(self)` and `OwnedPtr::as_ptr(self)` to take `&self`, otherwise printing the pointer will prevent doing anything else afterwards
    2. make all `as_ptr` methods safe. There's nothing unsafe about obtaining a pointer, these kinds of methods are safe in std as well [str::as_ptr](https://doc.rust-lang.org/stable/std/primitive.str.html#method.as_ptr), [Rc::as_ptr](https://doc.rust-lang.org/stable/std/rc/struct.Rc.html#method.as_ptr)
    3. rename `offset`/`add` to `byte_offset`/`byte_add`. The unprefixed methods in std add in increments of `std::mem::size_of::<T>`, not in bytes. There's a PR for rust to add these byte_ methods https://github.com/rust-lang/rust/pull/95643 and at the call site it makes it much more clear that you need to do `.byte_add(i * layout_size)` instead of `.add(i)`

[33mcommit ec805e9e07229b43e20914e18c75947f720e065a[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Fri May 6 18:52:26 2022 +0000

    Apply buffers in `ParamSet` (#4677)
    
    # Objective
    
    - Fix https://github.com/bevyengine/bevy/issues/4676
    
    ## Solution
    
    - Fixes https://github.com/bevyengine/bevy/issues/4676
    - I have no reason to think this isn't sound, but `ParamSet` is a bit spooky

[33mcommit 96b495612649f7e64a8900ded19e1f6b8a8f40e4[m
Author: Boxy <supbscripter@gmail.com>
Date:   Fri May 6 18:27:37 2022 +0000

    Fix CI (#4675)

[33mcommit b731ebad1be737d2b725a9102daccc829c6725fd[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Thu May 5 13:35:43 2022 +0000

    Allow closing windows at runtime (#3575)
    
    # Objective
    
    Fixes #3180, builds from https://github.com/bevyengine/bevy/pull/2898
    
    ## Solution
    
    Support requesting a window to be closed and closing a window in `bevy_window`, and handle this in `bevy_winit`.
    
    This is a stopgap until we move to windows as entites, which I'm sure I'll get around to eventually.
    
    ## Changelog
    
    ### Added
    
    - `Window::close` to allow closing windows.
    - `WindowClosed` to allow reacting to windows being closed.
    
    ### Changed
    
    Replaced `bevy::system::exit_on_esc_system` with `bevy::window::close_on_esc`.
    
    ## Fixed
    
    The app no longer exits when any window is closed. This difference is only observable when there are multiple windows.
    
    ## Migration Guide
    
    `bevy::input::system::exit_on_esc_system` has been removed. Use `bevy::window::close_on_esc` instead.
    `CloseWindow` has been removed. Use `Window::close` instead.
    The `Close` variant has been added to `WindowCommand`. Handle this by closing the relevant window.

[33mcommit 558530871d0d13debca83773405aa58f121a39dd[m
Author: Nionidh <nionidh@gmail.com>
Date:   Thu May 5 02:12:16 2022 +0000

    StorageBuffer uses wrong type to calculate the buffer size. (#4557)
    
    # Objective
    Fixes #4556
    
    ## Solution
    StorageBuffer must use the Size of the std430 representation to calculate the buffer size, as the std430 representation is the data that will be written to it.

[33mcommit 82d849d3dc4f83a8a02a369b9e636139d96e710f[m
Author: Dusty DeWeese <dustin.deweese@gmail.com>
Date:   Thu May 5 00:46:32 2022 +0000

    Add support for vertex colors (#4528)
    
    # Objective
    
    Add support for vertex colors
    
    ## Solution
    
    This change is modeled after how vertex tangents are handled, so the shader is conditionally compiled with vertex color support if the mesh has the corresponding attribute set.
    
    Vertex colors are multiplied by the base color. I'm not sure if this is the best for all cases, but may be useful for modifying vertex colors without creating a new mesh.
    
    I chose `VertexFormat::Float32x4`, but I'd prefer 16-bit floats if/when support is added.
    
    ## Changelog
    
    ### Added
    - Vertex colors can be specified using the `Mesh::ATTRIBUTE_COLOR` mesh attribute.

[33mcommit f8e0fc190a7e8e085e07e1fbab190093c29e8916[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Thu May 5 00:03:47 2022 +0000

    Add RegularPolygon and Circle meshes (#3730)
    
    # Objective
    
    Bevy users often want to create circles and other simple shapes.
    
    All the machinery is in place to accomplish this, and there are external crates that help. But when writing code for e.g. a new bevy example, it's not really possible to draw a circle without bringing in a new asset, writing a bunch of scary looking mesh code, or adding a dependency.
    
    In particular, this PR was inspired by this interaction in another PR: https://github.com/bevyengine/bevy/pull/3721#issuecomment-1016774535
    
    ## Solution
    
    This PR adds `shape::RegularPolygon` and `shape::Circle` (which is just a `RegularPolygon` that defaults to a large number of sides)
    
    ## Discussion
    
    There's a lot of ongoing discussion about shapes in <https://github.com/bevyengine/rfcs/pull/12> and at least one other lingering shape PR (although it seems incomplete).
    
    That RFC currently includes `RegularPolygon` and `Circle` shapes, so I don't think that having working mesh generation code in the engine for those shapes would add much burden to an author of an implementation.
    
    But if we'd prefer not to add additional shapes until after that's sorted out, I'm happy to close this for now.
    
    ## Alternatives for users
    
    For any users stumbling on this issue, here are some plugins that will help if you need more shapes.
    
    https://github.com/Nilirad/bevy_prototype_lyon
    https://github.com/johanhelsing/bevy_smud
    https://github.com/Weasy666/bevy_svg
    https://github.com/redpandamonium/bevy_more_shapes
    https://github.com/ForesightMiningSoftwareCorporation/bevy_polyline

[33mcommit f02bea5bfc8a6c5ef2a4f418c4cc30ad44410d63[m
Author: David Taralla <davidtaralla@gmail.com>
Date:   Wed May 4 22:28:16 2022 +0000

    Make Wireframe respect visible entities (#4660)
    
    # Objective
    
    - Make meshes with a Wireframe component not render if they are not in the VisibleEntities list of a given camera
    - See [discussion](https://discord.com/channels/691052431525675048/742884593551802431/971392761972527144) on the Bevy Engine Discord
    - Fixes this kind of issues:
    ![image](https://user-images.githubusercontent.com/1733200/166746303-39003d57-8b07-4ae2-9ddf-bacdb04e7d84.png)
    Camera for the RenderTexture in the bottom left is set to only see layer 1 entities. The three colored lines are on the render layer 1, but not the sphere (which has a Wireframe component).
    
    ## Solution
    
    - Mimick what is done in [bevy_pbr/src/material.rs#L307](https://github.com/bevyengine/bevy/blob/479f43bbf34834ad2d4667de43351b6fa51f22d1/crates/bevy_pbr/src/material.rs#L307) for [bevy_pbr/src/wireframe.rs#L106](https://github.com/bevyengine/bevy/blob/2b6e67f4cb441f658cad17486eea9e3485e56709/crates/bevy_pbr/src/wireframe.rs#L106)
    - Credits to beep for finding this out!

[33mcommit 3f4ac65682a7f21f4817958e505500d62bceb9e2[m
Author: Charles <c.giguere42@gmail.com>
Date:   Wed May 4 22:10:20 2022 +0000

    set alpha_mode based on alpha value (#4658)
    
    # Objective
    
    - When spawning a sprite the alpha is used for transparency, but when using the `Color::into()` implementation to spawn a `StandardMaterial`, the alpha is ignored.
    - Pretty much everytime I want to make something transparent I started with a `Color::rgb().into()` and I'm always surprised that it doesn't work when changing it to  `Color::rgba().into()`
    - It's possible there's an issue with this approach I am not thinking of, but I'm not sure what's the point of setting an alpha value without the goal of making a color transparent.
    
    ## Solution
    
    - Set the alpha_mode to AlphaMode::Blend when the alpha is not the default value.
    
    ---
    
    ## Migration Guide
    
    This is not a breaking change, but it can easily be migrated to reduce boilerplate
    
    ```rust
    commands.spawn_bundle(PbrBundle {
        mesh: meshes.add(shape::Cube::default().into()),
        material: materials.add(StandardMaterial {
            base_color: Color::rgba(1.0, 0.0, 0.0, 0.75),
            alpha_mode: AlphaMode::Blend,
            ..default()
        }),
        ..default()
    });
    
    // becomes
    
    commands.spawn_bundle(PbrBundle {
        mesh: meshes.add(shape::Cube::default().into()),
        material: materials.add(Color::rgba(1.0, 0.0, 0.0, 0.75).into()),
        ..default()
    });
    ```
    
    
    Co-authored-by: Charles <IceSentry@users.noreply.github.com>

[33mcommit 1e322d9f763d99fcdb976036811e92b2099c4e07[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Wed May 4 19:16:10 2022 +0000

    `bevy_ptr` standalone crate (#4653)
    
    # Objective
    
    The pointer types introduced in #3001 are useful not just in `bevy_ecs`, but also in crates like `bevy_reflect` (#4475) or even outside of bevy.
    
    ## Solution
    
    Extract `Ptr<'a>`, `PtrMut<'a>`, `OwnedPtr<'a>`, `ThinSlicePtr<'a, T>` and `UnsafeCellDeref` from `bevy_ecs::ptr` into `bevy_ptr`.
    
    **Note:** `bevy_ecs` still reexports the `bevy_ptr` as `bevy_ecs::ptr` so that crates like `bevy_transform` can use the `Bundle` derive without needing to depend on `bevy_ptr` themselves.

[33mcommit 9d440fbcb5f3a71ba333a072cf078fdade16f5bb[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Wed May 4 18:41:37 2022 +0000

    Make `RunOnce` a non-manual `System` impl (#3922)
    
    # Objective
    
    - `RunOnce` was a manual `System` implementation.
    - Adding run criteria to stages was yet to be systemyoten
    
    ## Solution
    
    - Make it a normal function
    - yeet
    
    ##  Changelog
    
    - Replaced `RunOnce` with `ShouldRun::once`
    
    ## Migration guide
    
    The run criterion `RunOnce`, which would make the controlled systems run only once, has been replaced with a new run criterion function `ShouldRun::once`. Replace all instances of `RunOnce` with `ShouldRun::once`.

[33mcommit 3e24b725afe143db5db006b146cd94339e155251[m
Author: James Liu <contact@jamessliu.com>
Date:   Tue May 3 20:07:58 2022 +0000

    Pointerfication followup: Type safety and cleanup (#4621)
    
    # Objective
    The `Ptr` types gives free access to the underlying `NonNull<u8>`, which adds more publicly visible pointer wrangling than there needs to be. There are also a few edge cases where Ptr types could be more readily utilized for properly validating the soundness of ECS operations.
    
    ## Solution
     - Replace `*Ptr(Mut)::inner` with `cast` which requires a concrete type to give the pointer. This function could also have a `debug_assert` with an alignment check to ensure that the pointer is aligned properly, but is currently not included.
     - Use `OwningPtr::read` in ECS macros over casting the inner pointer around.

[33mcommit 4a9932fa8e0a6d0300288db85128b4724e8e4510[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue May 3 19:51:18 2022 +0000

    simplified API to get NDC from camera and world position (#4041)
    
    # Objective
    
    - After #3412, `Camera::world_to_screen` got a little bit uglier to use by needing to provide both `Windows` and `Assets<Image>`, even though only one would be needed https://github.com/bevyengine/bevy/blob/b697e73c3d861c209152ccfb140ae00fbc6e9925/crates/bevy_render/src/camera/camera.rs#L117-L123
    - Some time, exact coordinates are not needed but normalized device coordinates is enough
    
    ## Solution
    
    - Add a function to just get NDC

[33mcommit 2b6e67f4cb441f658cad17486eea9e3485e56709[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Tue May 3 19:20:13 2022 +0000

    add `#[reflect(Default)]` to create default value for reflected types (#3733)
    
    ### Problem
    It currently isn't possible to construct the default value of a reflected type. Because of that, it isn't possible to use `add_component` of `ReflectComponent` to add a new component to an entity because you can't know what the initial value should be.
    
    ### Solution
    
    1. add `ReflectDefault` type
    ```rust
    #[derive(Clone)]
    pub struct ReflectDefault {
        default: fn() -> Box<dyn Reflect>,
    }
    
    impl ReflectDefault {
        pub fn default(&self) -> Box<dyn Reflect> {
            (self.default)()
        }
    }
    
    impl<T: Reflect + Default> FromType<T> for ReflectDefault {
        fn from_type() -> Self {
            ReflectDefault {
                default: || Box::new(T::default()),
            }
        }
    }
    ```
    
    2. add `#[reflect(Default)]` to all component types that implement `Default` and are user facing (so not `ComputedSize`, `CubemapVisibleEntities` etc.)
    
    
    
    This makes it possible to add the default value of a component to an entity without any compile-time information:
    
    ```rust
    fn main() {
        let mut app = App::new();
        app.register_type::<Camera>();
    
        let type_registry = app.world.get_resource::<TypeRegistry>().unwrap();
        let type_registry = type_registry.read();
    
        let camera_registration = type_registry.get(std::any::TypeId::of::<Camera>()).unwrap();
        let reflect_default = camera_registration.data::<ReflectDefault>().unwrap();
        let reflect_component = camera_registration
            .data::<ReflectComponent>()
            .unwrap()
            .clone();
    
        let default = reflect_default.default();
    
        drop(type_registry);
    
        let entity = app.world.spawn().id();
        reflect_component.add_component(&mut app.world, entity, &*default);
    
        let camera = app.world.entity(entity).get::<Camera>().unwrap();
        dbg!(&camera);
    }
    ```
    
    ### Open questions
    - should we have `ReflectDefault` or `ReflectFromWorld` or both?

[33mcommit 479f43bbf34834ad2d4667de43351b6fa51f22d1[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Tue May 3 18:28:04 2022 +0000

    Filter material handles on extraction (#4178)
    
    # Objective
    
    - While optimising many_cubes, I noticed that all material handles are extracted regardless of whether the entity to which the handle belongs is visible or not. As such >100k handles are extracted when only <20k are visible.
    
    ## Solution
    
    - Only extract material handles of visible entities.
    - This improves `many_cubes -- sphere` from ~42fps to ~48fps. It reduces not only the extraction time but also system commands time. `Handle<StandardMaterial>` extraction and its system commands went from 0.522ms + 3.710ms respectively, to 0.267ms + 0.227ms an 88% reduction for this system for this case. It's very view dependent but...

[33mcommit b5feb9ae9b052b47ce40f114a445b39b8a171263[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue May 3 15:35:04 2022 +0000

    can specify chrome tracing file (#4618)
    
    # Objective
    
    - I want to have the trace file at a predictable path
    
    ## Solution
    
    - Adds an environment variable that is used as the path when it's set

[33mcommit 5cb6f7ffd23ae845c029fcc57b18b1f3e8af1062[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Mon May 2 20:22:30 2022 +0000

    Do not create nor execute render passes which have no phase items to draw (#4643)
    
    # Objective
    
    - Creating and executing render passes has GPU overhead. If there are no phase items in the render phase to draw, then this overhead should not be incurred as it has no benefit.
    
    ## Solution
    
    - Check if there are no phase items to draw, and if not, do not construct not execute the render pass
    
    ---
    
    ## Changelog
    
    - Changed: Do not create nor execute empty render passes

[33mcommit 4dbf857393f79b6fad646530f360cd12ac230cce[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon May 2 19:13:34 2022 +0000

    CI tool usage (#3876)
    
    # Objective
    
    - Original objective was to add doc build warning check to the ci local execution
    - I somewhat deviated and changed other things...
    
    ## Solution
    
    `cargo run -p ci` can now take more parameters:
    * `format` - cargo fmt
    * `clippy` - clippy
    * `compile-fail` - bevy_ecs_compile_fail_tests tests
    * `test` - tests but not doc tests and do not build examples
    * `doc-test` - doc tests
    * `doc-check` - doc build and warnings
    * `bench-check` - check that benches build
    * `example-check` - check that examples build
    * `lints` - group - run lints and format and clippy
    * `doc` - group - run doc-test and doc-check
    * `compile` - group - run compile-fail and bench-check and example-check
    * not providing a parameter will run everything
    
    Ci is using those when possible:
    * `build` jobs now don't run doc tests and don't build examples. it makes this job faster, but doc tests and examples are not built for each architecture target
    * `ci` job doesn't run the `compile-fail` part but only format and clippy, taking less time
    * `check-benches` becomes `check-compiles` and runs the `compile` tasks. It takes longer. I also fixed how it was using cache
    * `check-doc` job is now independent and also run the doc tests, so it takes longer. I commented out the deadlinks check as it takes 2.5 minutes (to install) and doesn't work

[33mcommit b863c90fe8021b14866490ebff6d262a9f520249[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon May 2 18:45:02 2022 +0000

    GitHub Actions: don't depend on patch versions (#4646)
    
    # Objective
    
    - don't depend on patch versions in GitHub Actions to avoid dependant frequent updates (like #4641, #4584)

[33mcommit 241a61d2a59e7ad1156dfc1618a03f011277f4ea[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Mon May 2 18:45:00 2022 +0000

    Clean up advice on glob imports in style guide (#4644)
    
    # Objective
    
    - Example was misleading, as we never import `bevy` itself in the engine (except in integration tests).
    
    ## Solution
    
    - Clean up wording.
    
    ## Context
    
    Noticed by @mockersf in #4608.

[33mcommit 5ca78b1e27c13960f54e97c4de1dbceaccd1530d[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Mon May 2 18:44:58 2022 +0000

    Add get_change_ticks method to EntityRef and EntityMut (#2539)
    
    Direct access to the change ticks is useful for integrating the reliable change detection with external stuff.

[33mcommit 3fbe3683d955e52102fca74adb76e0affd5dbc3f[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Mon May 2 18:26:52 2022 +0000

    Improve debugging tools for change detection (#4160)
    
    # Objective
    
    1. Previously, the `change_tick` and `last_change_tick` fields on `SystemChangeTick` [were `pub`](https://docs.rs/bevy/0.6.1/bevy/ecs/system/struct.SystemChangeTick.html).
       1.  This was actively misleading, as while this can be fetched as a `SystemParam`, a copy is returned instead
    2. This information could be useful for debugging, but there was no way to investigate when data was changed.
    3. There were no docs!
    
    ## Solution
    
    1. Move these to a getter method.
    2. Add `last_changed` method to the `DetectChanges` trait to enable inspection of when data was last changed.
    3. Add docs.
    
    # Changelog
    
     `SystemChangeTick` now provides getter methods for the current and previous change tick, rather than public fields.
     This can be combined with `DetectChanges::last_changed()` to debug the timing of changes.
    
    # Migration guide
    
    The `change_tick` and `last_change_tick` fields on `SystemChangeTick` are now private, use the corresponding getter method instead.

[33mcommit b9f738da8d885bece87561bd53accea62f850c6e[m
Author: robtfm <50659922+robtfm@users.noreply.github.com>
Date:   Mon May 2 18:26:50 2022 +0000

    move system_param fetch struct into anonymous scope to avoid name collisions (#4100)
    
    # Objective
    
    avoid naming collisions with user structs when deriving ``system_param``.
    
    ## Solution
    
    ~rename the fetch struct created by ``#[derive(system_param)]`` from ``{}State`` to ``{}SysParamState``.~
    place the fetch struct into an anonymous scope.
    
    ## Migration Guide
    
    For code that was using a system param's fetch struct, such as ``EventReader``'s ``EventReaderState``, the fetch struct can now be identified via the SystemParam trait associated type ``Fetch``, e.g. for ``EventReader<T>`` it can be identified as ``<EventReader<'static, 'static, T> as SystemParam>::Fetch``

[33mcommit a011f4d53cdfc3e779ac6500a60e70cabf652956[m
Author: Daniel McNab <yilin@kebab-ca.se>
Date:   Mon May 2 18:04:49 2022 +0000

    Make `Transform` propagation correct in the presence of updated children (#4608)
    
    Supercedes https://github.com/bevyengine/bevy/pull/3340, and absorbs the test from there.
    
    # Objective
    
    - Fixes #3329
    
    ## Solution
    
    - If the `Children` component has changed, we currently do not have a way to know how it has changed.
    - Therefore, we must update the hierarchy downwards  from that point to be correct.
    
    Co-authored-by: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>

[33mcommit 4c194084b48808f2a564bbdb6eda44cccbb8c3fe[m
Author: MrGVSV <gino.valente.code@gmail.com>
Date:   Mon May 2 18:04:48 2022 +0000

    bevy_reflect: Add `GetTypeRegistration` impl for reflected tuples (#4226)
    
    # Objective
    
    Reflected tuples do not implement `GetTypeRegistration`, preventing us from registering our tuples, like:
    
    ```rust
    app.register_type::<(i32, i32)>();
    ```
    
    This is especially important for things like using #4042 to improve the scene format or implementing #4154 to recursively register fields.
    
    ## Solution
    
    Added an implementation to the tuple macro:
    
    ```rust
    impl<$($name: Reflect + for<'de> Deserialize<'de>),*> GetTypeRegistration for ($($name,)*) {
      fn get_type_registration() -> TypeRegistration {
        let mut registration = TypeRegistration::of::<($($name,)*)>();
        registration.insert::<ReflectDeserialize>(FromType::<($($name,)*)>::from_type());
        registration
      }
    }
    ```
    
    This requires that the tuple's types implement `Deserialize`. This is exactly how `Vec` and `HashMap` handle it:
    
    ```rust
    impl<T: FromReflect + for<'de> Deserialize<'de>> GetTypeRegistration for Vec<T> {
      fn get_type_registration() -> TypeRegistration {
        let mut registration = TypeRegistration::of::<Vec<T>>();
        registration.insert::<ReflectDeserialize>(FromType::<Vec<T>>::from_type());
        registration
      }
    }
    ```

[33mcommit e29bd50de878f8a3699c63f2eb9d071061990a33[m
Author: Johannes Hackel <jo.hackel@web.de>
Date:   Mon May 2 18:04:47 2022 +0000

    Add file metadata to AssetIo (#2123)
    
    This is a replacement for #2106
    
    This adds a `Metadata` struct which contains metadata information about a file, at the moment only the file type.
    It also adds a `get_metadata` to `AssetIo` trait and an `asset_io` accessor method to `AssetServer` and `LoadContext`
    
    I am not sure about the changes in `AndroidAssetIo ` and `WasmAssetIo`.

[33mcommit 8283db69b45a369249a9772a712231183fcce4b2[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Mon May 2 16:04:49 2022 +0000

    Remind users to initialize their systems before running them (#3947)
    
    # Objective
    
    - Manually running systems is a somewhat obscure process: systems must be initialized before they are run
    - The unwrap is rather hard to debug.
    
    ## Solution
    
    - Replace unwraps in `FunctionSystem` methods with expects (progress towards #3892).
    - Briefly document this requirement.

[33mcommit 61a3494a065673314c6f59374ca9f52a7566ceea[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Mon May 2 13:20:56 2022 +0000

    Add 3d shapes example (#4613)
    
    # Objective
    
    - As requested here: https://github.com/bevyengine/bevy/pull/4520#issuecomment-1109302039
    - Make it easier to spot issues with built-in shapes
    
    ## Solution
    
    https://user-images.githubusercontent.com/200550/165624709-c40dfe7e-0e1e-4bd3-ae52-8ae66888c171.mp4
    
    - Add an example showcasing the built-in 3d shapes with lighting/shadows
    - Rotate objects in such a way that all faces are seen by the camera
    - Add a UV debug texture
    
    ## Discussion
    
    I'm not sure if this is what @alice-i-cecile had in mind, but I adapted the little "torus playground" from the issue linked above to include all built-in shapes.
    
    This exact arrangement might not be particularly scalable if many more shapes are added. Maybe a slow camera pan, or cycling with the keyboard or on a timer, or a sidebar with buttons would work better. If one of the latter options is used, options for showing wireframes or computed flat normals might add some additional utility.
    
    Ideally, I think we'd have a better way of visualizing normals.
    
    Happy to rework this or close it if there's not a consensus around it being useful.

[33mcommit 51509a9a3ecc36e38d15faaf3430b220ac7f11b6[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Mon May 2 13:20:55 2022 +0000

    Change `gamepad.rs` tuples to normal structs (#4519)
    
    # Objective
    
    - Part of the splitting process of #3692.
    
    ## Solution
    
    - Remove / change the tuple structs inside of `gamepad.rs` of `bevy_input` to normal structs.
    
    ## Reasons
    
    - It made the `gamepad_connection_system` cleaner.
    - It made the `gamepad_input_events.rs` example cleaner (which is probably the most notable change for the user facing API).
    - Tuple structs are not descriptive (`.0`, `.1`).
    - Using tuple structs for more than 1 field is a bad idea (This means that the `Gamepad` type might be fine as a tuple struct, but I still prefer normal structs over tuple structs).
    
    Feel free to discuss this change as this is more or less just a matter of taste.
    
    ## Changelog
    
    ### Changed
    
    - The `Gamepad`, `GamepadButton`, `GamepadAxis`, `GamepadEvent` and `GamepadEventRaw` types are now normal structs instead of tuple structs and have a `new()` function.
    
    ## Migration Guide
    
    - The `Gamepad`, `GamepadButton`, `GamepadAxis`, `GamepadEvent` and `GamepadEventRaw` types are now normal structs instead of tuple structs and have a `new()` function. To migrate change every instantiation to use the `new()` function instead and use the appropriate field names instead of `.0` and `.1`.

[33mcommit e9db69af811df4a8aa8f722dfc2672b3e190a6dd[m
Author: Ian Johnson <ianjohnson9042@gmail.com>
Date:   Mon May 2 13:20:54 2022 +0000

    Tidy up PluginGroupBuilder by moving Plugin index retrieval to it's own function (#4446)
    
    # Objective
    
    - Clean up duplicate code in the add_before/add_after functions in PluginGroupBuilder.
    
    ## Solution
    
    - moved index retrieval code to a private function index_of() for the PluginGroupBuilder.
    - change is just tidying up. No real change to functionality.

[33mcommit 2c145826a35d0059b79688c7a8aaae1aaeec7f42[m
Author: Yutao Yuan <infmagic2047reg@outlook.com>
Date:   Mon May 2 11:58:51 2022 +0000

    Fix type parameter name conflicts of derive(Bundle) (#4636)
    
    # Objective
    
    This code currently fails to compile with error ``the name `T` is already used for a generic parameter in this item's generic parameters``, because `T` is also used in code generated by `derive(Bundle)`.
    
    ```rust
    #[derive(Bundle)]
    struct MyBundle<T: Component> {
        component: T,
    }
    ```
    
    ## Solution
    
    Add double underscores to type parameter names in `derive(Bundle)`.

[33mcommit e49542b0263d4131c584790062b2700f5ded7f92[m
Author: ç ç©¶ç¤¾äº¤ <cryscan@umich.edu>
Date:   Mon May 2 04:11:55 2022 +0000

    Rename `transparent_phase` to `opaque_phase` in `wireframe.rs` (#4639)
    
    # Objective
    
    - Meshes are queued in opaque phase instead of transparent phase when drawing wireframes.
    - There is a name mismatch.
    
    ## Solution
    
    - Rename `transparent_phase` to `opaque_phase` in `wireframe.rs`.

[33mcommit 7d21ca37446b04ae68f7ee092f545fb6dc2a40fb[m
Author: Thomas Hansen <31554741+thomas992@users.noreply.github.com>
Date:   Sun May 1 01:00:27 2022 +0000

    Add alsa-lib-devel to OpenSUSE dependencies (#4635)
    
    Needed for compilation, tumbleweed. This PR adds the needed alsa package for OpenSUSE to the documentation.

[33mcommit b9102b8836bd2aa07df2732f5364b9ac90accb66[m
Author: Boxy <supbscripter@gmail.com>
Date:   Thu Apr 28 21:06:20 2022 +0000

    Introduce tests for `derive(WorldQuery)` (#4625)
    
    The only tests we had for `derive(WorldQuery)` checked that the derive doesnt panic/emit a `compiler_error!`. This PR adds tests that actually assert the returned values of a query using the derived `WorldQuery` impl. Also adds a compile fail test to check that we correctly error on read only world queries containing mutable world queries.

[33mcommit 990d5c0879e359d78c24c0b702b330fb759e102c[m
Author: Olexorus <olexorus@gmail.com>
Date:   Wed Apr 27 23:44:06 2022 +0000

    Make AnimationClip::duration return value instead of reference (#4617)
    
    Tiny follow-up to https://github.com/bevyengine/bevy/pull/4615 as discussed on Discord here: https://discord.com/channels/691052431525675048/692572690833473578/968945307767414855
    
    Since f32 is `Copy` and smaller than a reference on most systems (or at least not larger), there's no reason not to copy it, which should be more convenient to use.

[33mcommit 73c78c3667a1b7b7f65d3d16329183429549c868[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Wed Apr 27 23:44:06 2022 +0000

    Use lifetimed, type erased pointers in bevy_ecs (#3001)
    
    # Objective
    
    `bevy_ecs` has large amounts of unsafe code which is hard to get right and makes it difficult to audit for soundness.
    
    ## Solution
    
    Introduce lifetimed, type-erased pointers: `Ptr<'a>` `PtrMut<'a>` `OwningPtr<'a>'` and `ThinSlicePtr<'a, T>` which are newtypes around a raw pointer with a lifetime and conceptually representing strong invariants about the pointee and validity of the pointer.
    
    The process of converting bevy_ecs to use these has already caught multiple cases of unsound behavior.
    
    ## Changelog
    
    TL;DR for release notes: `bevy_ecs` now uses lifetimed, type-erased pointers internally, significantly improving safety and legibility without sacrificing performance. This should have approximately no end user impact, unless you were meddling with the (unfortunately public) internals of `bevy_ecs`.
    
    - `Fetch`, `FilterFetch` and `ReadOnlyFetch` trait no longer have a `'state` lifetime
        - this was unneeded
    - `ReadOnly/Fetch` associated types on `WorldQuery` are now on a new `WorldQueryGats<'world>` trait
        - was required to work around lack of Generic Associated Types (we wish to express `type Fetch<'a>: Fetch<'a>`)
    - `derive(WorldQuery)` no longer requires `'w` lifetime on struct
        - this was unneeded, and improves the end user experience
    - `EntityMut::get_unchecked_mut` returns `&'_ mut T` not `&'w mut T`
        - allows easier use of unsafe API with less footguns, and can be worked around via lifetime transmutery as a user
    - `Bundle::from_components` now takes a `ctx` parameter to pass to the `FnMut` closure
        - required because closure return types can't borrow from captures
    - `Fetch::init` takes `&'world World`, `Fetch::set_archetype` takes `&'world Archetype` and `&'world Tables`, `Fetch::set_table` takes `&'world Table`
        - allows types implementing `Fetch` to store borrows into world
    - `WorldQuery` trait now has a `shrink` fn to shorten the lifetime in `Fetch::<'a>::Item`
        - this works around lack of subtyping of assoc types, rust doesnt allow you to turn `<T as Fetch<'static>>::Item'` into `<T as Fetch<'a>>::Item'`
        - `QueryCombinationsIter` requires this
    - Most types implementing `Fetch` now have a lifetime `'w`
        - allows the fetches to store borrows of world data instead of using raw pointers
    
    ## Migration guide
    
    - `EntityMut::get_unchecked_mut` returns a more restricted lifetime, there is no general way to migrate this as it depends on your code
    - `Bundle::from_components` implementations must pass the `ctx` arg to `func`
    - `Bundle::from_components` callers have to use a fn arg instead of closure captures for borrowing from world
    - Remove lifetime args on `derive(WorldQuery)` structs as it is nonsensical
    - `<Q as WorldQuery>::ReadOnly/Fetch` should be changed to either `RO/QueryFetch<'world>` or `<Q as WorldQueryGats<'world>>::ReadOnly/Fetch`
    - `<F as Fetch<'w, 's>>` should be changed to `<F as Fetch<'w>>`
    - Change the fn sigs of `Fetch::init/set_archetype/set_table` to match respective trait fn sigs
    - Implement the required `fn shrink` on any `WorldQuery` implementations
    - Move assoc types `Fetch` and `ReadOnlyFetch` on `WorldQuery` impls to `WorldQueryGats` impls
    - Pass an appropriate `'world` lifetime to whatever fetch struct you are for some reason using
    
    ### Type inference regression
    
    in some cases rustc may give spurrious errors when attempting to infer the `F` parameter on a query/querystate this can be fixed by manually specifying the type, i.e. `QueryState::new::<_, ()>(world)`. The error is rather confusing:
    
    ```rust=
    error[E0271]: type mismatch resolving `<() as Fetch<'_>>::Item == bool`
        --> crates/bevy_pbr/src/render/light.rs:1413:30
         |
    1413 |             main_view_query: QueryState::new(world),
         |                              ^^^^^^^^^^^^^^^ expected `bool`, found `()`
         |
         = note: required because of the requirements on the impl of `for<'x> FilterFetch<'x>` for `<() as WorldQueryGats<'x>>::Fetch`
    note: required by a bound in `bevy_ecs::query::QueryState::<Q, F>::new`
        --> crates/bevy_ecs/src/query/state.rs:49:32
         |
    49   |     for<'x> QueryFetch<'x, F>: FilterFetch<'x>,
         |                                ^^^^^^^^^^^^^^^ required by this bound in `bevy_ecs::query::QueryState::<Q, F>::new`
    ```
    
    ---
    
    Made with help from @BoxyUwU and @alice-i-cecile
    
    Co-authored-by: Boxy <supbscripter@gmail.com>

[33mcommit ddce22b61429036400c64ce20f4264cf82813a13[m
Author: bjorn3 <bjorn3@users.noreply.github.com>
Date:   Wed Apr 27 19:08:11 2022 +0000

    Decouple some dependencies (#3886)
    
    # Objective
    
    Reduce from scratch build time.
    
    ## Solution
    
    Reduce the size of the critical path by removing dependencies between crates where not necessary. For `cargo check --no-default-features` this reduced build time from ~51s to ~45s. For some commits I am not completely sure if the tradeoff between build time reduction and convenience caused by the commit is acceptable. If not, I can drop them.

[33mcommit f1aae380ab165605cf5b197a9020eb42deca594b[m
Author: Nathan Pinard <bytemuck@gmail.com>
Date:   Wed Apr 27 18:02:07 2022 +0000

    Added example of creating a system from a closure (#4327)
    
    Fixes #4262

[33mcommit 71a246ce9e4d25c98e3cadc246e0735e98fe8f41[m
Author: Nicola Papale <nico@nicopap.ch>
Date:   Wed Apr 27 18:02:06 2022 +0000

    Improve QueryIter size_hint hints (#4244)
    
    ## Objective
    
    This fixes #1686.
    
    `size_hint` can be useful even if a little niche. For example,
    `collect::<Vec<_>>()` uses the `size_hint` of Iterator it collects from
    to pre-allocate a memory slice large enough to not require re-allocating
    when pushing all the elements of the iterator.
    
    ## Solution
    
    To this effect I made the following changes:
    * Add a `IS_ARCHETYPAL` associated constant to the `Fetch` trait,
      this constant tells us when it is safe to assume that the `Fetch`
      relies exclusively on archetypes to filter queried entities
    * Add `IS_ARCHETYPAL` to all the implementations of `Fetch`
    * Use that constant in `QueryIter::size_hint` to provide a more useful
    
    ## Migration guide
    
    The new associated constant is an API breaking change. For the user,
    if they implemented a custom `Fetch`, it means they have to add this
    associated constant to their implementation. Either `true` if it doesn't limit
    the number of entities returned in a query beyond that of archetypes, or
    `false` for when it does.

[33mcommit 3d4e0066f4c9ae95ed2591ac4c171c780a88dca3[m
Author: Christopher Durham <cad97@cad97.com>
Date:   Wed Apr 27 18:02:05 2022 +0000

    Move float_ord from bevy_core to bevy_utils (#4189)
    
    # Objective
    
    Reduce the catch-all grab-bag of functionality in bevy_core by moving FloatOrd to bevy_utils.
    
    A step in addressing #2931 and splitting bevy_core into more specific locations.
    
    ## Solution
    
    Move FloatOrd into bevy_utils. Fix the compile errors.
    
    As a result, bevy_core_pipeline, bevy_pbr, bevy_sprite, bevy_text, and bevy_ui no longer depend on bevy_core (they were only using it for `FloatOrd` previously).

[33mcommit 8e036344575b4c218f853731eacc7cdea66fc9f6[m
Author: Spooky Th Ghost <Colin@wildheartinteractive.com>
Date:   Wed Apr 27 17:37:30 2022 +0000

    Public access for AnimationClip.duration (#4615)
    
    # Objective
    
    - Small change that better facilitates custom animation systems
    
    ## Solution
    
    - Added a public access function to `bevy::animation::AnimationClip`, making duration publicly readable
    
    ---

[33mcommit 328c26d02c50de0bc77f0d24a376f43ba89517b1[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Tue Apr 26 22:15:24 2022 +0000

    Add an example to test small window sizes (#3597)
    
    # Objective
    
    We keep getting issues where things break at small window sizes, e.g #3368 (caused by #3153), #3596 ('caused' by #3545)
    
    ## Solution
    
    - Add a test that we can make small windows.
    
    
    Currently, this fails on my machine with some quite scary vulkan errors:
    ```
    2022-01-08T22:55:13.770261Z ERROR wgpu_hal::vulkan::instance: VALIDATION [VUID-VkSwapchainCreateInfoKHR-imageExtent-01274 (0x7cd0911d)]
            Validation Error: [ VUID-VkSwapchainCreateInfoKHR-imageExtent-01274 ] Object 0: handle = 0x1adbd410a60, type = VK_OBJECT_TYPE_DEVICE; | MessageID = 0x7cd0911d | vkCreateSwapchainKHR() called with imageExtent = (225,60), which is outside the bounds returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR(): currentExtent = (225,56), minImageExtent = (225,56), maxImageExtent = (225,56). The Vulkan spec states: imageExtent must be between minImageExtent and maxImageExtent, inclusive, where minImageExtent and maxImageExtent are members of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface (https://vulkan.lunarg.com/doc/view/1.2.198.1/windows/1.2-extensions/vkspec.html#VUID-VkSwapchainCreateInfoKHR-imageExtent-01274)
    2022-01-08T22:55:13.770808Z ERROR wgpu_hal::vulkan::instance:   objects: (type: DEVICE, hndl: 0x1adbd410a60, name: ?)
    2022-01-08T22:55:13.787403Z ERROR wgpu_hal::vulkan::instance: VALIDATION [VUID-VkSwapchainCreateInfoKHR-imageExtent-01274 (0x7cd0911d)]
            Validation Error: [ VUID-VkSwapchainCreateInfoKHR-imageExtent-01274 ] Object 0: handle = 0x1adbd410a60, type = VK_OBJECT_TYPE_DEVICE; | MessageID = 0x7cd0911d | vkCreateSwapchainKHR() called with imageExtent = (225,56), which is outside the bounds returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR(): currentExtent = (225,52), minImageExtent = (225,52), maxImageExtent = (225,52). The Vulkan spec states: imageExtent must be between minImageExtent and maxImageExtent, inclusive, where minImageExtent and maxImageExtent are members of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface (https://vulkan.lunarg.com/doc/view/1.2.198.1/windows/1.2-extensions/vkspec.html#VUID-VkSwapchainCreateInfoKHR-imageExtent-01274)
    ```
    etc.
    
    This might be a new issue here, although I'm surprised it's vulkan giving this error; wgpu should stop it if this is illegal.

[33mcommit 87991c50f1d4d02a0bdc2683e1a55ba17ce6aa1f[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Tue Apr 26 21:20:13 2022 +0000

    Add a random access get_component benchmark (#4607)
    
    # Objective
    
    Add a benchmark to measure the performance of get_component, particularly for cases involving random access.
    
    Enables #2965

[33mcommit 4e547ded11b03e56cca048243861ed7e413bcb8b[m
Author: MiniaczQ <MiniaczQ@gmail.com>
Date:   Tue Apr 26 21:20:12 2022 +0000

    Remove unused `CountdownEvent` (#4290)
    
    # Objective
    
    Fixes:
    #4287
    
    ## Solution
    
    I removed it.

[33mcommit bc7293e9222ef5b6fd78531a55f34009dd0198eb[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Tue Apr 26 20:47:16 2022 +0000

    Some minor cleanups of asset_server (#4604)
    
    # Objective
    
    - Code quality bad
    
    ## Solution
    
    - Code quality better
    - Using rust-analyzer's inline function and inline variable quick assists, I validated that the call to `AssetServer::new` is exactly the same code as the previous version.

[33mcommit 45d2c789491fa7226ca4258bf689dae3f4faadf3[m
Author: Mike <mike.hsu@gmail.com>
Date:   Tue Apr 26 19:59:19 2022 +0000

    add benches for simple run criteria (#4196)
    
    # Objective
    
    - Add benches for run criteria. This is in anticipation of run criteria being redone in stageless.
    
    ## Solution
    
    - Benches run criteria that don't access anything to test overhead
    - Test run criteria that use a query
    - Test run criteria that use a resource

[33mcommit 361686a09c65080aa41d3e5419f5ea4ea8834946[m
Author: MrGVSV <gino.valente.code@gmail.com>
Date:   Tue Apr 26 19:41:26 2022 +0000

    bevy_reflect: Added `PartialEq` to reflected `f32` & `f64` (#4217)
    
    # Objective
    
    Comparing two reflected floating points would always fail:
    
    ```rust
    let a: &dyn Reflect = &1.23_f32;
    let b: &dyn Reflect = &1.23_f32;
    
    // Panics:
    assert!(a.reflect_partial_eq(b).unwrap_or_default());
    ```
    
    The comparison returns `None` since `f32` (and `f64`) does not have a reflected `PartialEq` implementation.
    
    ## Solution
    
    Include `PartialEq` in the `impl_reflect_value!` macro call for both `f32` and `f64`.
    
    `Hash` is still excluded since neither implement `Hash`.
    
    Also added equality tests for some of the common types from `std` (including `f32`).

[33mcommit 3d36ec41dcbfe7d5ead2a9dc5777c933f7f37e09[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Tue Apr 26 19:41:25 2022 +0000

    re-enable `#[derive(TypeUuid)]` for generics (#4118)
    
    Support for deriving `TypeUuid` for types with generics was initially added in https://github.com/bevyengine/bevy/pull/2044 but later reverted https://github.com/bevyengine/bevy/pull/2204 because it lead to `MyStruct<A>` and `MyStruct<B>` having the same type uuid.
    
    This PR fixes this by generating code like
    ```rust
    #[derive(TypeUuid)]
    #[uuid = "69b09733-a21a-4dab-a444-d472986bd672"]
    struct Type<T>(T);
    
    impl<T: TypeUuid> TypeUuid for Type<T> {
      const TYPE_UUID: TypeUuid = generate_compound_uuid(Uuid::from_bytes([/* 69b0 uuid */]), T::TYPE_UUID);
    }
    ```
    
    where `generate_compound_uuid` will XOR the non-metadata bits of the two UUIDs.
    
    Co-authored-by: XBagon <xbagon@outlook.de>
    Co-authored-by: Jakob Hellermann <hellermann@sipgate.de>

[33mcommit d5e770dfcb09860a89cc501fc1bb2feb5e5a7f10[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Apr 26 18:42:44 2022 +0000

    use elapsed on instant (#4599)
    
    # Objective
    
    - reopen #4497 on main
    - Make the example a tiny bit more elegant

[33mcommit dafd7a14c9875f7ee31686746af44af75bca1b4c[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Tue Apr 26 18:42:43 2022 +0000

    Fix torus normals (#4520)
    
    # Objective
    
    Fix wonky torus normals.
    
    ## Solution
    
    I attempted this previously in #3549, but it looks like I botched it. It seems like I mixed up the y/z axes. Somehow, the result looked okay from that particular camera angle.
    
    This video shows toruses generated with
    - [left, orange] original torus mesh code
    - [middle, pink] PR 3549
    - [right, purple] This PR
    
    https://user-images.githubusercontent.com/200550/164093183-58a7647c-b436-4512-99cd-cf3b705cefb0.mov

[33mcommit 3f423074bfbac85fe08fd4bee0a0fc8b5bac83d2[m
Author: devil ira <JustTheCoolDude@gmail.com>
Date:   Tue Apr 26 18:42:42 2022 +0000

    Make paused timers update `just_finished` on tick (#4445)
    
    # Objective
    Make timers update `just_finished` on tick, even if paused.
    Fixes #4436
    
    ## Solution
    `just_finished()` returns `times_finished > 0`. So I:
     * Renamed `times_finished` to `times_finished_this_tick` to reduce confusion.
     * Set `times_finished_this_tick` to `0` on tick when paused.
     * Additionally set `finished` to `false` if the timer is repeating.
    
    Notably this change broke none of the existing tests, so I added a couple for this.
    
    Files changed shows a lot of noise because of the rename. Check the first commit for the relevant changes.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit 18b27269c0ee414a045dffdd07a8aa624de439aa[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Tue Apr 26 18:23:29 2022 +0000

    Document `bevy_math` (#4591)
    
    # Objective
    
    - Part of #3492
    
    ## Solution
    
    - Document the `bevy_math` crate and add the `#![warn(missing_docs)]` lint.

[33mcommit 50a14703ea79a4b91d49dc4d7ba300150eaf5fec[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Tue Apr 26 17:32:54 2022 +0000

    Update `mouse.rs` docs in `bevy_input` (#4518)
    
    # Objective
    
    - Part of the splitting process of #3692.
    
    ## Solution
    
    - Document `mouse.rs` inside of `bevy_input`.
    
    Co-authored-by: KDecay <KDecayMusic@protonmail.com>

[33mcommit 00f83941b16e7a175c5c1503be81a648e23d81df[m
Author: MrGVSV <gino.valente.code@gmail.com>
Date:   Tue Apr 26 00:17:38 2022 +0000

    bevy_reflect: `IntoIter` for `DynamicList` and `DynamicMap` (#4108)
    
    # Objective
    
    In some cases, you may want to take ownership of the values in `DynamicList` or `DynamicMap`.
    
    I came across this need while trying to implement a custom deserializer, but couldn't get ownership of the values in the list.
    
    ## Solution
    
    Implemented `IntoIter` for both `DynamicList` and `DynamicMap`.

[33mcommit 4aa56050b6c27e6e6cd93a32d667f0a5064b5f9c[m
Author: Aevyrie <aevyrie@gmail.com>
Date:   Mon Apr 25 23:19:13 2022 +0000

    Add infallible resource getters for `WorldCell` (#4104)
    
    # Objective
    
    - Eliminate all `worldcell.get_resource().unwrap()` cases.
    - Provide helpful messages on panic.
    
    ## Solution
    
    - Adds infallible resource getters to `WorldCell`, mirroring `World`.

[33mcommit 989fb8a78d2ca6e3fe6fb1ccd7d79ea88868b8c7[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Mon Apr 25 19:20:38 2022 +0000

    Move `Rect` to `bevy_ui` and rename it to `UiRect` (#4276)
    
    # Objective
    
    - Closes #335.
    - Related #4285.
    - Part of the splitting process of #3503.
    
    ## Solution
    
    - Move `Rect` to `bevy_ui` and rename it to `UiRect`.
    
    ## Reasons
    
    - `Rect` is only used in `bevy_ui` and therefore calling it `UiRect` makes the intent clearer.
    - We have two types that are called `Rect` currently and it's missleading (see `bevy_sprite::Rect` and #335).
    - Discussion in #3503.
    
    ## Changelog
    
    ### Changed
    
    - The `Rect` type got moved from `bevy_math` to `bevy_ui` and renamed to `UiRect`.
    
    ## Migration Guide
    
    - The `Rect` type got renamed to `UiRect`. To migrate you just have to change every occurrence of `Rect` to `UiRect`.
    
    Co-authored-by: KDecay <KDecayMusic@protonmail.com>

[33mcommit 91f2b5108359c308271f10ce710f575feba3043d[m
Author: David Taralla <davidtaralla@gmail.com>
Date:   Mon Apr 25 17:40:44 2022 +0000

    Document that AppExit can be read by Bevy apps (#4587)
    
    Explain it's safe to subscribe to this event to detect an exit before it happens. For instance, to clean-up and release system resources.

[33mcommit 4bcb3100083fc6e1d4443a97c39c3836563f714e[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Mon Apr 25 14:32:57 2022 +0000

    Basic EntityRef and EntityMut docs (#3388)
    
    # Objective
    
    - `EntityRef` and `EntityMut` are surpisingly important public types when working directly with the `World`.
    - They're undocumented.
    
    ## Solution
    
    - Just add docs!

[33mcommit 5155034a58fd38a165414d27ba83b7f7669366aa[m
Author: SarthakSingh31 <ss269@uw.edu>
Date:   Mon Apr 25 14:32:56 2022 +0000

    Converted exclusive systems to parallel systems wherever possible (#2774)
    
    Closes #2767.
    
    Converted:
    - `play_queued_audio_system`
    - `change_window`

[33mcommit 9b1651afa1271fa3b2bbd504eea4f79b3a94c9e6[m
Author: ImDanTheDev <dmott248@gmail.com>
Date:   Mon Apr 25 13:54:50 2022 +0000

    UI - keep color as 4 f32 (#4494)
    
    # Objective
    
    - Fixes inaccurate UI colors similar to this [Sprite color fix](https://github.com/bevyengine/bevy/pull/4361).
    
    ## Solution
    
    - Do not reduce the color of UI quads to 4 u8.
    
     Left is the displayed color. Right is the input color(#202225).
    | Before Fix | After Fix |
    |--------|--------|
    |![before](https://user-images.githubusercontent.com/2303421/163661335-7f970a43-1f8b-45af-ae0a-cd74424aa9fb.png)|![after](https://user-images.githubusercontent.com/2303421/163661342-d8d56c08-924b-4bce-8bc8-a8de85aadc97.png)|

[33mcommit 5047e1f08eab40647a4cf8cacc29ffb92621931d[m
Author: MrGVSV <gino.valente.code@gmail.com>
Date:   Mon Apr 25 13:54:48 2022 +0000

    bevy_reflect: Add `as_reflect` and `as_reflect_mut` (#4350)
    
    # Objective
    
    Trait objects that have `Reflect` as a supertrait cannot be upcast to a `dyn Reflect`.
    
    Attempting something like:
    
    ```rust
    trait MyTrait: Reflect {
      // ...
    }
    
    fn foo(value: &dyn MyTrait) {
      let reflected = value as &dyn Reflect; // Error!
      // ...
    }
    ```
    
    Results in `error[E0658]: trait upcasting coercion is experimental`.
    
    The reason this is important is that a lot of `bevy_reflect` methods require a `&dyn Reflect`. This is trivial with concrete types, but if we don't know the concrete type (we only have the trait object), we can't use these methods. For example, we couldn't create a `ReflectSerializer` for the type since it expects a `&dyn Reflect` valueâ even though we should be able to.
    
    ## Solution
    
    Add `as_reflect` and `as_reflect_mut` to `Reflect` to allow upcasting to a `dyn Reflect`:
    
    ```rust
    trait MyTrait: Reflect {
      // ...
    }
    
    fn foo(value: &dyn MyTrait) {
      let reflected = value.as_reflect();
      // ...
    }
    ```
    
    ## Alternatives
    
    We could defer this type of logic to the crate/user. They can add these methods to their trait in the same exact way we do here. The main benefit of doing it ourselves is it makes things convenient for them (especially when using the derive macro).
    
    We could also create an `AsReflect` trait with a blanket impl over all reflected types, however, I could not get that to work for trait objects since they aren't sized.
    
    ---
    
    ## Changelog
    
    - Added trait method `Reflect::as_reflect(&self)`
    - Added trait method `Reflect::as_reflect_mut(&mut self)`
    
    ## Migration Guide
    
    - Manual implementors of `Reflect` will need to add implementations for the methods above (this should be pretty easy as most cases just need to return `self`)

[33mcommit 7a7f0974850e351373e618b96cd2cac9bd46ac68[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Mon Apr 25 13:54:46 2022 +0000

    Move `Size` to `bevy_ui` (#4285)
    
    # Objective
    
    - Related #4276.
    - Part of the splitting process of #3503.
    
    ## Solution
    
    - Move `Size` to `bevy_ui`.
    
    ## Reasons
    
    - `Size` is only needed in `bevy_ui` (because it needs to use `Val` instead of `f32`), but it's also used as a worse `Vec2`  replacement in other areas.
    - `Vec2` is more powerful than `Size` so it should be used whenever possible.
    - Discussion in #3503.
    
    ## Changelog
    
    ### Changed
    
    - The `Size` type got moved from `bevy_math` to `bevy_ui`.
    
    ## Migration Guide
    
    - The `Size` type got moved from `bevy::math` to `bevy::ui`. To migrate you just have to import `bevy::ui::Size` instead of `bevy::math::Math` or use the `bevy::prelude` instead.
    
    Co-authored-by: KDecay <KDecayMusic@protonmail.com>

[33mcommit 08509751925091f99065ffc21e5a6d7d277fbf36[m
Author: nsarlin <nico.sarlin@gmail.com>
Date:   Mon Apr 25 13:54:44 2022 +0000

    Add the possibility to create custom 2d orthographic cameras (#4048)
    
    # Objective
    
    - The `OrthographicCameraBundle` constructor for 2d cameras uses a hardcoded value for Z position and scale of the camera. It could be useful to be able to customize these values.
    
    ## Solution
    
    - Add a new constructor `custom_2d` that takes `far` (Z position) and `scale` as parameters. The default constructor `new_2d` uses this constructor with `far = 1000.0` and `scale = 1.0`.

[33mcommit ec30822517a3e06292eed18725ca147c0db16e31[m
Author: bjorn3 <bjorn3@users.noreply.github.com>
Date:   Mon Apr 25 13:16:27 2022 +0000

    Misc dependency improvements (#4545)
    
    A couple more uncontroversial changes extracted from #3886.
    
    * Enable full feature of syn
    
       It is necessary for the ItemFn and ItemTrait type. Currently it is indirectly
       enabled through the tracing dependency of bevy_utils, but this may no
       longer be the case in the future.
    * Remove unused function from bevy_macro_utils

[33mcommit c64f2a1866aa357147c5899d44132d43c6eeef7c[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Mon Apr 25 13:16:24 2022 +0000

    Add more tests to `input.rs` (#4522)
    
    # Objective
    
    - Part of the splitting process of #3692.
    
    ## Solution
    
    - Add more tests to `input.rs` inside of `bevy_input`.
    
    ## Note
    
    - The tests would now catch a change like #4410 and fail accordingly.

[33mcommit 46ff9fef98fa0a1da3c83283cfd9570cb0cbcb22[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Mon Apr 25 13:16:21 2022 +0000

    Update `input.rs` docs in `bevy_input` (#4521)
    
    # Objective
    
    - Part of the splitting process of #3692.
    
    ## Solution
    
    - Document `input.rs` inside of `bevy_input`.

[33mcommit 2a5202637f1aef74e1f13a0aa4e0039e666b3ac0[m
Author: Ferenc TamÃ¡s <me@tamasfe.dev>
Date:   Mon Apr 25 12:55:03 2022 +0000

    bevy_utils: remove hardcoded log level limit (#4580)
    
    # Objective
    
    - Debug logs are useful in release builds, but `tracing` logs are hard-capped (`release_max_level_info`) at the `info` level by `bevy_utils`.
    
    ## Solution
    
    - This PR simply removes the limit in `bevy_utils` with no further actions.
    - If any out-of-the box performance regressions arise, the steps to enable this `tracing` feature should be documented in a user guide in the future.
    
    This PR closes #4069 and closes #1206.
    
    ## Alternatives considered
    
    - Instruct the user to build with `debug-assertions` enabled: this is just a workaround, as it obviously enables all `debug-assertions` that affect more than logging itself.
    - Re-exporting the feature from `tracing` and enabling it by default: I believe it just adds complexity and confusion, the `tracing` feature can also be re-enabled with one line in userland.
    
    ---
    
    ## Changelog
    
    ### Fixed
    
    - Log level is not hard capped at `info` for release builds anymore.
    
    ## Migration Guide
    
    - Maximum log levels for release builds is not enforced by Bevy anymore, to omit "debug" and "trace" level logs entirely from release builds, `tracing` must be added as a dependency with its `release_max_level_info` feature enabled in `Cargo.toml`. (`tracing = { version = "0.1", features = ["release_max_level_info"] }`)

[33mcommit 93cee3b3c980679513c380641210035d9e3372af[m
Author: Martin Dickopp <carl@ostwilkens.se>
Date:   Sun Apr 24 23:15:27 2022 +0000

    Make `Time::update_with_instant` public for use in tests (#4469)
    
    # Objective
    
    To test systems that implement frame rate-independent update logic, one needs to be able to mock `Time`. By mocking time, it's possible to write tests that confirm systems are frame rate-independent.
    
    This is a follow-up PR to #2549 by @ostwilkens and based on his work.
    
    ## Solution
    
    To mock `Time`, one needs to be able to manually update the Time resource with an `Instant` defined by the developer. This can be achieved by making the existing `Time::update_with_instant` method public for use in tests.
    
    ## Changelog
    
    - Make `Time::update_with_instant` public
    - Add doc to `Time::update_with_instant` clarifying that the method should not be called outside of tests.
    - Add doc test to `Time` demonstrating how to use `update_with_instant` in tests.
    
    
    Co-authored-by: Martin Dickopp <martin@zero-based.org>

[33mcommit 1cd17e903ff259f08136b9c99632c61810a82658[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sun Apr 24 22:57:04 2022 +0000

    document the single threaded wasm task pool (#4571)
    
    # Objective
    
    - The single threaded task pool is not documented
    - This doesn't warn in CI as it's feature gated for wasm, but I'm tired of seeing the warnings when building in wasm
    
    ## Solution
    
    - Document it

[33mcommit 291ec00c9dbd9767ae573dc04318b256973e819c[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Sun Apr 24 22:57:03 2022 +0000

    Describe new delegation strategy (#4562)
    
    # Objective
    
    - The strategy for delegation has changed!
    - Figuring out exactly where the "controversial" line is can be challenging
    
    ## Solution
    
    - Update the CONTRIBUTING.md
    - Specify rough guidelines for what makes a PR controversial.
    - BONUS: yeet references to old roadmap.

[33mcommit 00c6acc0cc115ffc9d2dc1fbc910083f217d83e2[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Sun Apr 24 22:57:02 2022 +0000

    Rename `ElementState` to `ButtonState` (#4314)
    
    # Objective
    
    - Part of the splitting process of #3692.
    
    ## Solution
    
    - Rename `ElementState` to `ButtonState`
    
    ## Reasons
    
    - The old name was too generic.
    - If something can be pressed it is automatically button-like (thanks to @alice-i-cecile for bringing it up in #3692).
    - The reason it is called `ElementState` is because that's how `winit` calls it.
    - It is used to define if a keyboard or mouse **button** is pressed or not.
    - Discussion in #3692.
    
    ## Changelog
    
    ### Changed
    
    - The `ElementState` type received a rename and is now called `ButtonState`.
    
    ## Migration Guide
    
    - The `ElementState` type received a rename and is now called `ButtonState`. To migrate you just have to change every occurrence of `ElementState` to `ButtonState`.
    
    Co-authored-by: KDecay <KDecayMusic@protonmail.com>

[33mcommit dd57a94155722fe50986744bfd6aa6ad09bf5bd7[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sun Apr 24 18:57:20 2022 +0000

    do not check links on docs.github.com (#4578)
    
    # Objective
    
    - related to #4575, but not a complete fix
    - links to GitHub.com can't be checked from inside a GitHub Actions as GitHub is protecting itself from being flooded by an action execution
    - it seems they added that protection to GitHub doc site
    
    ## Solution
    
    - Ignore links to docs.github.com

[33mcommit 46acb7753c94bc83bdf9dc10f4ed9199a39491a6[m
Author: SpecificProtagonist <vincentjunge@posteo.net>
Date:   Sat Apr 23 06:03:50 2022 +0000

    SystemSet::before and after: take AsSystemLabel (#4503)
    
    # Objective
    
    `AsSystemLabel` has been introduced on system descriptors to make ordering systems more convenient, but `SystemSet::before` and `SystemSet::after` still take `SystemLabels` directly:
    
        use bevy::ecs::system::AsSystemLabel;
        /*â¦*/ SystemSet::new().before(foo.as_system_label()) /*â¦*/
    
    is currently necessary instead of
    
        /*â¦*/ SystemSet::new().before(foo) /*â¦*/
    
    ## Solution
    
    Use `AsSystemLabel` for `SystemSet`

[33mcommit 0fdb45ce90ffa75dabf9208b3f6158ad3950b429[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Fri Apr 22 20:06:41 2022 +0000

    Remove EntityMut::get_unchecked (#4547)
    
    The only way to soundly use this API is already encapsulated within `EntityMut::get`, so this api is removed.
    
    # Migration guide
    
    Replace calls to `EntityMut::get_unchecked` with calls to `EntityMut::get`.

[33mcommit 7a0f46c21b3b96b33c9612e480f662aabcfd1e84[m
Author: CGMossa <cgmossa@gmail.com>
Date:   Fri Apr 22 08:45:04 2022 +0000

    fixes complaints about missing docs (#4551)
    
    # Objective
    
    When using `derive(WorldQuery)`, then clippy complains with the following:
    
    ```rust
    warning: missing documentation for a struct
      --> src\wild_boar_type\marker_vital_status.rs:35:17
       |
    35 | #[derive(Debug, WorldQuery)]
       |                 ^^^^^^^^^^
       |
       = note: this warning originates in the derive macro `WorldQuery` (in Nightly builds, run with -Z macro-backtrace for more info)
    ```
    
    ## Solution
    
    * Either `#[doc(hidden)]` or
    * Add a generic documentation line to it.
    
    I don't know what is preferred, but I'd gladly add it in here.

[33mcommit 18c6a7b40e3988eb60b33be13c50e8bba7c06b20[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Apr 22 06:29:38 2022 +0000

    do not impl Component for Task (#4113)
    
    # Objective
    
    - `Task` are `Component`.
    - They should not.
    
    ## Solution
    
    - Remove the impl, and update the example to show a wrapper.
    
    #4052 for reference

[33mcommit 26c3b20f1ce1e04fcd37816d35fdff4d8433064f[m
Author: bjorn3 <bjorn3@users.noreply.github.com>
Date:   Wed Apr 20 11:46:34 2022 +0000

    Remove some unused dependencies (#4544)
    
    This a commit I think would be uncontroversial that has been cherry-picked from https://github.com/bevyengine/bevy/pull/3886

[33mcommit 80c6babd97e45fb0a07bd9f1a5a0df0ee00a3409[m
Author: MrGVSV <49806985+MrGVSV@users.noreply.github.com>
Date:   Wed Apr 20 11:46:33 2022 +0000

    Remove nonexistent `WgpuResourceDiagnosticsPlugin` (#4541)
    
    # Objective
    
    Uncommenting the following results in a compile error: https://github.com/bevyengine/bevy/blob/7557f4db83b8e9d3049f242bd4b58f8546bb1510/examples/diagnostics/log_diagnostics.rs#L14-L15
    
    ## Solution
    
    Remove the commented line.

[33mcommit e65f28d8d73d4e84cbc72298dc3fdc629b773d60[m
Author: bjorn3 <bjorn3@users.noreply.github.com>
Date:   Wed Apr 20 11:26:38 2022 +0000

    Remove parking_lot dependency from bevy_ecs (#4543)
    
    It is only used in some tests so any potential performance regressions don't matter.

[33mcommit 46321930f21fab76f315926d842f95e194c3ec14[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Wed Apr 20 03:06:31 2022 +0000

    Update `system.rs` docs in `bevy_input` (#4524)
    
    # Objective
    
    - Part of the splitting process of #3692.
    
    ## Solution
    
    - Document `system.rs` inside of `bevy_input`.

[33mcommit 7557f4db83b8e9d3049f242bd4b58f8546bb1510[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Mon Apr 18 21:26:54 2022 +0000

    Update `axis.rs` docs in `bevy_input` (#4525)
    
    # Objective
    
    - Part of the splitting process of #3692.
    
    ## Solution
    
    - Document `axis.rs` inside of `bevy_input`.

[33mcommit b3e39d0a19f13477836ddaa34504219fdaf0e674[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Mon Apr 18 18:25:44 2022 +0000

    Update `touch.rs` docs (#4523)
    
    # Objective
    
    - Part of the splitting process of #3692.
    
    ## Solution
    
    - Document `touch.rs` inside of `bevy_input`.

[33mcommit 06d709b178fba687288a81f8c406db454c8f593c[m
Author: Hennadii Chernyshchyk <genaloner@gmail.com>
Date:   Mon Apr 18 10:11:14 2022 +0000

    Make MaterialPipelineKey<T> fields public (#4508)
    
    # Objective
    
    Fixes #4507. This comment provides a very good explanation: https://github.com/bevyengine/bevy/issues/4507#issuecomment-1100905685.
    
    ## Solution
    
    Make `MaterialPipelineKey` fields public.

[33mcommit 8d67832dfab867b934105c9ee982df6a94082d18[m
Author: Yutao Yuan <infmagic2047reg@outlook.com>
Date:   Sun Apr 17 23:04:52 2022 +0000

    Bump Bevy to 0.8.0-dev (#4505)
    
    # Objective
    
    We should bump our version to 0.8.0-dev after releasing 0.7.0, according to our release checklist.
    
    ## Solution
    
    Do it.

[33mcommit afbce46adef65cdf30c3432244c4714c493f34ff[m
Author: Charles <c.giguere42@gmail.com>
Date:   Sun Apr 17 18:17:49 2022 +0000

    improve Commands doc comment (#4490)
    
    # Objective
    
    - The current API docs of `Commands` is very short and is very opaque to newcomers.
    
    ## Solution
    
    - Try to explain what it is without requiring knowledge of other parts of `bevy_ecs` like `World` or `SystemParam`.
    
    
    Co-authored-by: Charles <IceSentry@users.noreply.github.com>

[33mcommit 639fec20d6c132a8f5a16c17b927bd7456154045[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Sat Apr 16 21:33:51 2022 +0000

    Remove `.system()` (#4499)
    
    Free at last!
    
    # Objective
    
    - Using `.system()` is no longer needed anywhere, and anyone using it will have already gotten a deprecation warning.
    - https://github.com/bevyengine/bevy/pull/3302 was a super special case for `.system()`, since it was so prevelant. However, that's no reason.
    - Despite it being deprecated, another couple of uses of it have already landed, including in the deprecating PR.
       - These have all been because of doc examples having warnings not breaking CI - ðï¸?
    
    ## Solution
    
    - Remove it.
    - It's gone
    
    ---
    
    ## Changelog
    
    - You can no longer use `.system()`
    
    ## Migration Guide
    
    - You can no longer use `.system()`. It was deprecated in 0.7.0, and you should have followed the deprecation warning then. You can just remove the method call.
    
    ![image](https://user-images.githubusercontent.com/36049421/163688197-3e774a04-6f8f-40a6-b7a4-1330e0b7acf0.png)
    
    - Thanks to the @TheRawMeatball  for producing

[33mcommit af63d4048aa86ff41742084d654858f4a4041ef6[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Sat Apr 16 18:57:51 2022 +0000

    Let contributors know it's okay to delete optional template sections (#4498)
    
    # Objective
    
    We are currently asking contributors to "skip" optional sections, which is a bit confusing. "Skip" can be taken to mean that you should "leave that section alone" and result in these bits of template being left in the PR description.
    
    ## Solution
    
    Let contributors know that it's okay to delete the section if it's not needed.

[33mcommit 83c6ffb73c4a91182cda10141f824987ef3fba2f[m[33m ([m[1;33mtag: v0.7.0[m[33m)[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Apr 15 18:05:37 2022 +0000

    release 0.7.0 (#4487)

[33mcommit c6156e3d7637fd20bf3c7afef1a4a349b3362a2c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Apr 15 17:19:39 2022 +0000

    Add changelog for 0.7 (#4480)

[33mcommit b809e8e9312af5c8b7a7a0631aef1c16bc0edcf1[m
Author: Robert Swain <50659922+robtfm@users.noreply.github.com>
Date:   Fri Apr 15 16:05:59 2022 +0000

    bevy_pbr: Fix ClusterConfig::None (#4483)
    
    # Objective
    
    - Fix `ClusterConfig::None`
    - This fix is from @robtfm but they didn't have time to submit it, so I am.
    
    ## Solution
    
    - Always clear clusters and skip processing when `ClusterConfig::None`
    - Conditionally remove `VisiblePointLights` from the view if it is present

[33mcommit 424d4d26f1ec53a443dea5e9c0afbc1d3e74a8f4[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Fri Apr 15 11:22:48 2022 +0000

    A hack to work around minimising still being broken (#4481)
    
    # Objective
    
    - https://github.com/bevyengine/bevy/pull/4098 still hasn't fixed minimisation on Windows.
    - `Clusters.lights` is assumed to have the number of items given by the product of `Clusters.dimensions`'s axes.
    
    ## Solution
    
    - Make that true in `clear`.

[33mcommit 0d2b527faf853946fda6cb8ed21d5e2e86f0dadf[m
Author: Dusty DeWeese <dustin.deweese@gmail.com>
Date:   Fri Apr 15 07:32:21 2022 +0000

    Avoid windows with a physical size of zero (#4098)
    
    # Objective
    
    Fix #4097
    
    ## Solution
    
    Return `None` from `RenderTarget::get_physical_size` if either dimension is zero.

[33mcommit 3b81a50a1a445c919194fc73f9f5549198f74a09[m
Author: Hennadii Chernyshchyk <genaloner@gmail.com>
Date:   Fri Apr 15 07:13:37 2022 +0000

    Fix crash in headless mode (#4476)
    
    # Objective
    
    Fixes #4440.
    
    ## Solution
    
    Check if `RenderDevice` exists and add CI validation.

[33mcommit c2a9d5843d63c14030165a4700fdc2de3a1fb8fc[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Fri Apr 15 02:53:20 2022 +0000

    Faster assign lights to clusters (#4345)
    
    # Objective
    
    - Fixes #4234
    - Fixes #4473
    - Built on top of #3989
    - Improve performance of `assign_lights_to_clusters`
    
    ## Solution
    
    - Remove the OBB-based cluster light assignment algorithm and calculation of view space AABBs
    - Implement the 'iterative sphere refinement' algorithm used in Just Cause 3 by Emil Persson as documented in the Siggraph 2015 Practical Clustered Shading talk by Persson, on pages 42-44 http://newq.net/dl/pub/s2015_practical.pdf
    - Adapt to also support orthographic projections
    - Add `many_lights -- orthographic` for testing many lights using an orthographic projection
    
    ## Results
    
    - `assign_lights_to_clusters` in `many_lights` before this PR on an M1 Max over 1500 frames had a median execution time of 1.71ms. With this PR it is 1.51ms, a reduction of 0.2ms or 11.7% for this system.
    
    ---
    
    ## Changelog
    
    - Changed: Improved cluster light assignment performance
    
    Co-authored-by: robtfm <50659922+robtfm@users.noreply.github.com>
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit d37cde8f1ad46241df2ee45f5e4b10fa7e4d44c2[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Apr 14 21:16:03 2022 +0000

    fix feature location from #3851 (#4477)
    
    # Objective
    
    - in #3851, a feature for tracing was added to bevy_transform
    - usage of that feature was moved to bevy_hierarchy, but the feature was not updated
    
    ## Solution
    
    - add the feature to bevy_hierarchy, remove it from bevy_transform

[33mcommit 6e5955f162ebdd324eae43f8c19c219dcb8ab407[m
Author: Charles <c.giguere42@gmail.com>
Date:   Thu Apr 14 20:20:38 2022 +0000

    Add simple collision sound to breakout (#4331)
    
    # Objective
    
    - Add sound effect to the breakout example
    
    ## Solution
    
    - Add a collision event and a system that listens to the event and plays a sound
    
    I only added a single sound for all collisions for the sake of simplicity, but this could easily be extended to play a different sound depending on the type of entity hit.
    
    The sound was generated randomly by using https://sfxr.me
    
    https://sfxr.me/#11111GA9soYREjtsWhzjPrpMDEYSjX8Fo1E6PnKhxdw6tu869XW4EAc3nzpKVAYLMzToNcHQtQjeBqjZukqPmMDToGdYQQCWBnC3nEYfp53se5ep9btxRdLK
    
    Closes #4326
    
    https://user-images.githubusercontent.com/8348954/160154727-00e30743-3385-4c2f-97f0-1aaaf9a4dcc5.mp4
    
    For some reason the video has a lot of delay in the sound, but when playing it locally there's no delay
    
    ---
    
    ## Changelog
    
    - Added sound to breakout example
    - Added bevy_audio and vorbis to the feature list ran for examples in CI
    
    ## Migration Guide
    
    N/A

[33mcommit e1c2ace1f27d2c11fec9036053ddfbcac38c060c[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Thu Apr 14 19:30:36 2022 +0000

    More tidying of contributors example (#4443)
    
    # Objective
    
    Continue the effort to clean up this example
    
    ## Solution
    
    - Store contributor name as component to avoid awkward vec of tuples
    - Name the variable storing the Random Number Generator "rng"
    - Use init_resource for resource implementing default
    - Fix a few spots where an Entity was unnecessarily referenced and immediately dereferenced
    - Fix up an awkward comment

[33mcommit 8630b194dc63a18f16effc8d4feb9eda31d4280a[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Apr 13 23:35:28 2022 +0000

    add more logs when despawning entities (#3851)
    
    # Objective
    
    - Provide more information when despawning an entity
    
    ## Solution
    
    - Add a debug log when despawning an entity
    - Add spans to the recursive ways of despawning an entity
    
    ```sh
    RUST_LOG=debug cargo run --example panic --features trace
    # RUST_LOG=debug needed to show debug logs from bevy_ecs
    # --features trace needed to have the extra spans
    ...
    
    DEBUG bevy_app:frame:stage{name=Update}:system_commands{name="panic::despawn_parent"}:command{name="DespawnRecursive" entity=0v0}: bevy_ecs::world: Despawning entity 1v0
    DEBUG bevy_app:frame:stage{name=Update}:system_commands{name="panic::despawn_parent"}:command{name="DespawnRecursive" entity=0v0}: bevy_ecs::world: Despawning entity 0v0
    ```

[33mcommit 16133de8cd7612dc4715ffdac2345817877e9e5e[m
Author: Christian Hughes <xdotdash@gmail.com>
Date:   Wed Apr 13 21:50:45 2022 +0000

    WorldQuery derive macro now respects visibility (#4125)
    
    ## Objective
    
    Fixes #4122.
    
    ## Solution
    
    Inherit the visibility of the struct being derived for the `xxItem`, `xxFetch`, `xxState` structs.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 995f85e157a274a2b2d9c0bfd16f1bcbb586fa1b[m
Author: Martin Dickopp <martin@zero-based.org>
Date:   Wed Apr 13 21:34:21 2022 +0000

    Fix typos in `Time::last_update` and `Time::time_since_startup` documentation (#4470)
    
    # Objective
    
    The documentation of the `Time::last_update` and `Time::time_since_startup` methods contains typos. It uses apostrophe instead of backtick characters around `Instant` and `Duration`, so that these words are not recognized as identifiers in the generated API documentation. This should be fixed.
    
    ## Solution
    
    Fix the typos.

[33mcommit 621f3969c7e4e575d1f3bbbffbb5c2ccca8aca34[m
Author: Johannes Hackel <jo.hackel@web.de>
Date:   Wed Apr 13 20:05:34 2022 +0000

    Switch render order to 2d-on-top-of-3d (#4467)
    
    Because #3552 got merged only switching the render order is left to fix #3902

[33mcommit 8783fae7de3144ea5466ea3fd1f77738c9f70f4d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Apr 13 00:35:47 2022 +0000

    Use "many" instead of "multiple" consistently (#4463)
    
    We missed a couple of these renames in #4384

[33mcommit 5a297d7903d9ddb20051bd346a72aa77a7dc78b2[m
Author: Dusty DeWeese <dustin.deweese@gmail.com>
Date:   Tue Apr 12 19:27:30 2022 +0000

    Reuse texture when resolving multiple passes (#3552)
    
    # Objective
    
    Fixes https://github.com/bevyengine/bevy/issues/3499
    
    ## Solution
    
    Uses a `HashMap` from `RenderTarget` to sampled textures when preparing `ViewTarget`s to ensure that two passes with the same render target get sampled to the same texture.
    
    This builds on and depends on https://github.com/bevyengine/bevy/pull/3412, so this will be a draft PR until #3412 is merged. All changes for this PR are in the last commit.

[33mcommit 193e8c4ada2c324b5222735b0c558398bbbea196[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Mon Apr 11 22:56:06 2022 +0000

    scene_viewer: load cameras (#4425)
    
    # Objective
    
    glTF files can contain cameras. Currently the scene viewer example uses _a_ camera defined in the file if possible, otherwise it spawns a new one. It would be nice if instead it could load all the cameras and cycle through them, while also having a separate user-controller camera.
    
    ## Solution
    
    - instead of just a camera that is already defined, always spawn a new separate user-controller camera
    - maintain a list of loaded cameras and cycle through them (wrapping to the user-controller camera) when pressing `C`
    
    This matches the behavious that https://github.khronos.org/glTF-Sample-Viewer-Release/ has.
    
    ## Implementation notes
    
    - The gltf scene asset loader just spawns the cameras into the world, but does not return a mapping of camera index to bevy entity. So instead the scene_viewer example just collects all spawned cameras with a good old `query.iter().collect()`, so the order is unspecified and may change between runs.
    
    ## Demo
    
    https://user-images.githubusercontent.com/22177966/161826637-40161482-5b3b-4df5-aae8-1d5e9b918393.mp4
    
    
    using the virtual city glTF sample file: https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/VC
    
    Co-authored-by: Jakob Hellermann <hellermann@sipgate.de>

[33mcommit 612a5ba3a9257df55c7508d8f3bab0056701aeac[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Apr 11 22:35:26 2022 +0000

    Bump JamesIves/github-pages-deploy-action from 4.1.7 to 4.3.0 (#4455)
    
    Bumps [JamesIves/github-pages-deploy-action](https://github.com/JamesIves/github-pages-deploy-action) from 4.1.7 to 4.3.0.
    <details>
    <summary>Release notes</summary>
    <p><em>Sourced from <a href="https://github.com/JamesIves/github-pages-deploy-action/releases">JamesIves/github-pages-deploy-action's releases</a>.</em></p>
    <blockquote>
    <h2>v4.3.0</h2>
    <h2>Changes</h2>
    <ul>
    <li>Implements a new option available behind a flag, <code>force</code>. If set to <code>false</code> the action will no longer force push, instead attempting 3 times to resolve rejected commits when making parallel/subsequent deployments. In a future version <code>false</code> will be set as the default. Massive thanks to <a href="https://github.com/rossjrw"><code>@ârossjrw</code></a> for this feature addition.</li>
    <li>Modified the Node version which the action is developed/tested against from <code>14</code> to <code>16</code>.</li>
    </ul>
    <h2>Minor Changes</h2>
    <ul>
    <li>Third-party dependency updates.</li>
    <li>Test coverage improvements.</li>
    </ul>
    <h2>v4.2.5</h2>
    <h2>Minor Changes</h2>
    <ul>
    <li>Corrects an issue in the publishing pipeline that was causing workflow failures.</li>
    </ul>
    <h2>v4.2.4</h2>
    <h2>Minor Changes</h2>
    <ul>
    <li>Modified how workflow notices get displayed.  (<a href="https://github-redirect.dependabot.com/JamesIves/github-pages-deploy-action/issues/1033">#1033</a> Thanks to <a href="https://github.com/hemberger"><code>@âhemberger</code></a>)</li>
    <li>Dependency upgrades.</li>
    </ul>
    <h2>v4.2.3</h2>
    <h2>Minor Changes</h2>
    <ul>
    <li>Improved action logging. This is part 1 or 2 updates that will make the logs easier to traverse. Warnings and notices are now provided so you don't need to expand the logs to get the termination message.</li>
    <li>Dependency bumps across the board.</li>
    </ul>
    <h2>v4.2.2</h2>
    <h2>Minor Changes</h2>
    <ul>
    <li>Introduces major version tags. You can now point your workflow to <code>JamesIves/github-pages-deploy-action@v4</code> if you'd like to always have the most cutting edge changes outside of using the release branch directly.</li>
    <li>The version tags for this project now include a <code>v</code> to be consistent with other officially provided actions by GitHub. You can use <code>JamesIves/github-pages-deploy-action@v4.2.2</code> for instance. Dependabot should pick up this change automatically.</li>
    </ul>
    <h2>4.2.1</h2>
    <h2>Minor Changes</h2>
    <ul>
    <li>Resolves an issue where the operating system warning was showing incorrectly.</li>
    </ul>
    <h2>4.2.0</h2>
    <h1>Happy New Year 2022!</h1>
    <p><img src="https://media.giphy.com/media/pYhFb0kn2GhQQ/giphy.gif" alt="London" /></p>
    <h2>Minor Changes</h2>
    <ul>
    <li>Implements a warning if you're using an unsupported operating system. This will occur if the workflow runs within MacOS or Windows. The workflow will not be cancelled.</li>
    <li>The action is now case insensitive, allowing you to make casing changes to files so long as you commit them using the <code>git mv</code> command prior to the workflow running. (<a href="https://github-redirect.dependabot.com/JamesIves/github-pages-deploy-action/issues/895">#895</a>)</li>
    <li>Fixes an issue that was causing <code>single-commit</code> to fail when using <code>repository-name</code> if the branch name was equal from the origin to destination. (<a href="https://github-redirect.dependabot.com/JamesIves/github-pages-deploy-action/issues/665">#665</a>)</li>
    <li>Enabled Dependabot updates for the GitHub Actions that are used as part of the projects integration tests.</li>
    </ul>
    <!-- raw HTML omitted -->
    </blockquote>
    <p>... (truncated)</p>
    </details>
    <details>
    <summary>Commits</summary>
    <ul>
    <li><a href="https://github.com/JamesIves/github-pages-deploy-action/commit/360c8e75d0ee81732d0a5675c71e51b569df2ee8"><code>360c8e7</code></a> Merge branch 'dev' into releases/v4</li>
    <li><a href="https://github.com/JamesIves/github-pages-deploy-action/commit/6ae28917838299f2ab7dcb8665610d4412641bef"><code>6ae2891</code></a> Update integration.yml</li>
    <li><a href="https://github.com/JamesIves/github-pages-deploy-action/commit/e6c302f2978abd3a27e5446195102b84aac98de0"><code>e6c302f</code></a> Update README.md</li>
    <li><a href="https://github.com/JamesIves/github-pages-deploy-action/commit/cf0ab8fab51c41ceacaa9250340cc1f5dd71868d"><code>cf0ab8f</code></a> Deploy Production Code for Commit 7598e9b3fc39a35565f529abe095d4dfe75d52e4 ð</li>
    <li><a href="https://github.com/JamesIves/github-pages-deploy-action/commit/7598e9b3fc39a35565f529abe095d4dfe75d52e4"><code>7598e9b</code></a> Merge branch 'dev' into releases/v4</li>
    <li><a href="https://github.com/JamesIves/github-pages-deploy-action/commit/36e9415933ca0543efe62b99bec6e98fef706b74"><code>36e9415</code></a> Improe coverage</li>
    <li><a href="https://github.com/JamesIves/github-pages-deploy-action/commit/e71f256f1c999a1cd5e6ee1710f6d7064a46ffe1"><code>e71f256</code></a> Bump prettier from 2.6.1 to 2.6.2 (<a href="https://github-redirect.dependabot.com/JamesIves/github-pages-deploy-action/issues/1068">#1068</a>)</li>
    <li><a href="https://github.com/JamesIves/github-pages-deploy-action/commit/95f8a2cd0538e5294f02739809feab9376f85b16"><code>95f8a2c</code></a> Resolve simultaneous deployments with rebase (<a href="https://github-redirect.dependabot.com/JamesIves/github-pages-deploy-action/issues/1054">#1054</a>)</li>
    <li><a href="https://github.com/JamesIves/github-pages-deploy-action/commit/cd846deedd8f37f71cf69e21172ce96f445ab1ca"><code>cd846de</code></a> Bump <code>@âactions/github</code> from 5.0.0 to 5.0.1 (<a href="https://github-redirect.dependabot.com/JamesIves/github-pages-deploy-action/issues/1067">#1067</a>)</li>
    <li><a href="https://github.com/JamesIves/github-pages-deploy-action/commit/7117b56a560708d64a264e91aa83a845ed19bcf9"><code>7117b56</code></a> Bump prettier from 2.6.0 to 2.6.1 (<a href="https://github-redirect.dependabot.com/JamesIves/github-pages-deploy-action/issues/1065">#1065</a>)</li>
    <li>Additional commits viewable in <a href="https://github.com/JamesIves/github-pages-deploy-action/compare/4.1.7...v4.3.0">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=JamesIves/github-pages-deploy-action&package-manager=github_actions&previous-version=4.1.7&new-version=4.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit 08eaa13c81a7674c0a7d5a6cfcd7c4091388f307[m
Author: Yutao Yuan <infmagic2047reg@outlook.com>
Date:   Mon Apr 11 04:20:25 2022 +0000

    Add animation feature to cargo_features.md (#4450)
    
    # Objective
    
    The new feature `animation` is not documented in `cargo_features.md`.
    
    ## Solution
    
    Add it there.

[33mcommit c747cc526bdc381e6eec817203aee8e3c2f8127a[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Sun Apr 10 02:05:21 2022 +0000

    Group stress test examples (#4289)
    
    # Objective
    
    - Several examples are useful for qualitative tests of Bevy's performance
    - By contrast, these are less useful for learning material: they are often relatively complex and have large amounts of setup and are performance optimized.
    
    ## Solution
    
    - Move bevymark, many_sprites and many_cubes into the new stress_tests example folder
    - Move contributors into the games folder: unlike the remaining examples in the 2d folder, it is not focused on demonstrating a clear feature.

[33mcommit e8cd2fc7275d0799115d6db57090c2f99d9a99a5[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Apr 8 23:12:30 2022 +0000

    Audio control at start of playback (#4110)
    
    # Objective
    
    - While playing with volume, I noticed that when setting the volume just after playback start, I still get a few milliseconds at normal volume
    
    ## Solution
    
    - Replace `play_in_loop` with `play_with_settings` that allows from more controls
    - Adds a `PlaybackSettings` to specify the settings from start. Can be used: `PlaybackSettings::LOOP.with_volume(0.75)`

[33mcommit c12ee81822d553b61d846286d123cf8a28556c48[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Fri Apr 8 22:50:23 2022 +0000

    bevy_app: add tracing event with `tracy.frame_mark` (#4320)
    
    Currently `tracy` interprets the entire trace as one frame because the marker for frames isn't being recorded.
    
    ~~When an event with `tracy.trace_marker=true` is recorded, `tracing-tracy` will mark the frame as finished:
    <https://github.com/nagisa/rust_tracy_client/blob/aa0b96b2ae2aee6f3831994f9a3a8c29bcc85fae/tracing-tracy/src/lib.rs#L240>~~
    
    ~~Unfortunately this leads to~~
    ```rs
    INFO bevy_app:frame: bevy_app::app: finished frame tracy.frame_mark=true
    ```
    ~~being printed every frame (we can't use DEBUG because bevy_log sets `max_release_level_info`.~~
    
    Instead of emitting an event that gets logged every frame, we can depend on tracy-client itself and call `finish_continuous_frame!();`

[33mcommit 3756181e23e6fd7420e8fe908ecd8d64c25eed49[m
Author: Kirillov Kirill <kirusfg@gmail.com>
Date:   Fri Apr 8 17:28:32 2022 +0000

    Change scaling mode to FixedHorizontal (#4055)
    
    # Objective
    
    - Fixes the issue with orthographic camera imported from glTF not displaying anything (mentioned in #4005).
    
    ## Solution
    
    - This was due to wrong scaling mode being used. This PR simply changes WindowSize scaling mode to FixedHorizontal.
    
    ## Important Note
    
    Currently, othographic scale in Blender, three.js, and possibly other software does not translate to Bevy (via glTF) because their developers have [misinterpreted the spec](https://github.com/KhronosGroup/glTF/issues/1663#issuecomment-618194015). The camera parameters have been clarified in glTF 2.0, which was released on October of 2021. In Blender 3.0.1 this issue has **not** been fixed yet. If you are importing orthographic cameras from Blender, you have to divide the scale by 2.

[33mcommit f23ae104bd5b82c52eb2deeca181cbc2a4f14faf[m
Author: Alex Saveau <saveau.alexandre@gmail.com>
Date:   Fri Apr 8 04:02:14 2022 +0000

    Slight perf improvements and tidy for contributors example (#3764)

[33mcommit 64d217823dfc3208963703ee2b12f4e4e9fad347[m
Author: harudagondi <giogdeasis@gmail.com>
Date:   Fri Apr 8 00:21:24 2022 +0000

    Allow iter combinations on queries with filters (#3656)
    
    # Objective
    
    - Previously, `iter_combinations()` does not work on queries that have filters.
    - Fixes #3651
    
    ## Solution
    
    - Derived Copy on all `*Fetch<T>` structs, and manually implemented `Clone` to allow the test to pass (`.count()` does not work on `QueryCombinationIter` when `Clone` is derived)
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 3555603df158f3aa27448a766609ef5ecf9837e0[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Apr 7 23:53:43 2022 +0000

    example on how to create an animation in code (#4399)
    
    # Objective
    
    - Animation can be used outside of glTF, but are not obvious on how to create them
    
    ## Solution
    
    - Add an example creating an animation

[33mcommit 01bdf67c33e631aa462fafc366ed6cae89906838[m
Author: Kirillov Kirill <kirusfg@gmail.com>
Date:   Thu Apr 7 23:30:47 2022 +0000

    Improve the `set_active_camera` system (#4251)
    
    # Objective
    
    - Make `set_active_camera` system correctly respond to camera deletion, while preserving its correct behavior on first ever frame and any consequent frame, and with multiple cameras of the same type available in the world.
    - Fixes #4227
    
    ## Solution
    
    - Add a check that the entity referred to by `ActiveCamera` still exists in the world.

[33mcommit d478723e199258987c492966e7aa53eb19817058[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Apr 7 22:19:32 2022 +0000

    insert the gltf mesh name on the entity if there is one (#4119)
    
    # Objective
    
    - In glTF, mesh can be named. This named is used to be able to reference the mesh, but not as a component on the entity
    - Bevy only added the node name to the parent node.
    
    
    ## Solution
    
    - Also adds the name on the mesh entity if there is one.
    
    Limitation: In glTF, it's possible to have one mesh (which can be named) corresponding to several primitives (which can't, but are the actual mesh). I added the mesh name to the entity with the `PbrBundle` matching the primitives, which means that a mesh with several primitives would all have the same name. I think this is acceptable...

[33mcommit 4feb0d520ae778ae40419c00fc8543b96c2a8dd3[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Apr 7 21:55:31 2022 +0000

    increase the maximum number of point lights with shadows to the max supported by the device (#4435)
    
    # Objective
    
    - Being limited to 10 pointlights with shadow is very limiting
    
    ## Solution
    
    - Raise the limit

[33mcommit 8268e7fa9e9be1bba2ee10dac7185906e87d78f6[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Apr 7 21:30:52 2022 +0000

    expose extras from gltf nodes (#2154)
    
    fixes #2153
    
    expose the `extras` field value as a string

[33mcommit b1afe2dcca52fc28c8f412e2e2ee01e2192c9191[m
Author: Torne Wuff <torne@wolfpuppy.org.uk>
Date:   Thu Apr 7 20:50:43 2022 +0000

    Make `System` responsible for updating its own archetypes (#4115)
    
    # Objective
    
    - Make it possible to use `System`s outside of the scheduler/executor without having to define logic to track new archetypes and call `System::add_archetype()` for each.
    
    ## Solution
    
    - Replace `System::add_archetype(&Archetype)` with `System::update_archetypes(&World)`, making systems responsible for tracking their own most recent archetype generation the way that `SystemState` already does.
    
    This has minimal (or simplifying) effect on most of the code with the exception of `FunctionSystem`, which must now track the latest `ArchetypeGeneration` it saw instead of relying on the executor to do it.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 6f16580b8a23a14704627f28164c2b06f80422df[m
Author: Gabriel Bourgeois <gabriel.bourgeoisv4si@gmail.com>
Date:   Thu Apr 7 19:08:09 2022 +0000

    Fix clicked UI nodes getting reset when hovering child nodes (#4194)
    
    # Objective
    
    Fixes #4193
    
    ## Solution
    
    When resetting a node's `Interaction` to `None`, ignore any `Clicked` node because that should be handled by the mouse release check exclusively.

[33mcommit 21a875d67b401c36edb9ca2cc0c3f646c2fefbd2[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Thu Apr 7 19:08:08 2022 +0000

    Some small changes related to run criteria piping (#3923)
    
    Remove the 'chaining' api, as it's peculiar
    
    ~~Implement the label traits for `Box<dyn ThatTrait>` (n.b. I'm not confident about this change, but it was the quickest path to not regressing)~~
    
    Remove the need for '`.system`' when using run criteria piping

[33mcommit 9d54f33974a11977cfa65b478228177c99b76879[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Apr 7 16:16:36 2022 +0000

    Skinned extraction speedup (#4428)
    
    # Objective
    
    - While animating 501 https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/BrainStem, I noticed things were getting a little slow
    - Looking in tracy, the system `extract_skinned_meshes` is taking a lot of time, with a mean duration of 15.17ms
    
    ## Solution
    
    - ~~Use `Vec` instead of a `SmallVec`~~
    - ~~Don't use an temporary variable~~
    - Compute the affine matrix as an `Affine3A` instead
    - Remove the `temp` vec
    
    | |mean|
    |---|---|
    |base|15.17ms|
    |~~vec~~|~~9.31ms~~|
    |~~no temp variable~~|~~11.31ms~~|
    |removing the temp vector|8.43ms|
    |affine|13.21ms|
    |all together|7.23ms|

[33mcommit c5963b4fd5e37040b927fa19ea55be7653e1ce15[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Thu Apr 7 16:16:35 2022 +0000

    Use storage buffers for clustered forward point lights (#3989)
    
    # Objective
    
    - Make use of storage buffers, where they are available, for clustered forward bindings to support far more point lights in a scene
    - Fixes #3605
    - Based on top of #4079
    
    This branch on an M1 Max can keep 60fps with about 2150 point lights of radius 1m in the Sponza scene where I've been testing. The bottleneck is mostly assigning lights to clusters which grows faster than linearly (I think 1000 lights was about 1.5ms and 5000 was 7.5ms). I have seen papers and presentations leveraging compute shaders that can get this up to over 1 million. That said, I think any further optimisations should probably be done in a separate PR.
    
    ## Solution
    
    - Add `RenderDevice` to the `Material` and `SpecializedMaterial` trait `::key()` functions to allow setting flags on the keys depending on feature/limit availability
    - Make `GpuPointLights` and `ViewClusterBuffers` into enums containing `UniformVec` and `StorageBuffer` variants. Implement the necessary API on them to make usage the same for both cases, and the only difference is at initialisation time.
    - Appropriate shader defs in the shader code to handle the two cases
    
    ## Context on some decisions / open questions
    
    - I'm using `max_storage_buffers_per_shader_stage >= 3` as a check to see if storage buffers are supported. I was thinking about diving into 'binding resource management' but it feels like we don't have enough use cases to understand the problem yet, and it is mostly a separate concern to this PR, so I think it should be handled separately.
    - Should `ViewClusterBuffers` and `ViewClusterBindings` be merged, duplicating the count variables into the enum variants?
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 579928e8e024adae2b4befcbcc155af2acd48e44[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Thu Apr 7 15:50:14 2022 +0000

    bevy_pbr: Support flipping tangent space normal map y for DirectX normal maps (#4433)
    
    # Objective
    
    - Normal maps authored for DirectX use a left-handed convention and have their tangent space normal in the texture inverted from what we need. Support this.
    - Details here: https://doc.babylonjs.com/divingDeeper/materials/advanced/normalMaps
    
    ## Solution
    
    - Add a `StandardMaterial` `flip_normal_map_y` boolean field
    - Add a `STANDARDMATERIAL_FLIP_NORMAL_MAP_Y` flag to `StandardMaterialFlags` and in the PBR shader
    - Flip the y-component of the tangent space normal just after sampling it from the normal map texture
    
    ## Screenshots
    
    ### Before
    
    <img width="1392" alt="Screenshot 2022-04-06 at 21 04 44" src="https://user-images.githubusercontent.com/302146/162050314-e7bfaaf6-9ee1-4756-9821-f6f5ff78f508.png">
    
    ### After
    
    <img width="1392" alt="Screenshot 2022-04-06 at 21 03 39" src="https://user-images.githubusercontent.com/302146/162050255-36ee0745-1d79-4fd2-9a1c-18085376b643.png">
    
    ---
    
    ## Changelog
    
    - Added: Support for flipping the normal map texture y component for normal maps authored for use with DirectX

[33mcommit e7e74457c7f798064882ce8d24c9dd1680b2cd7e[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Apr 7 15:18:20 2022 +0000

    scene viewer improvements: animation reset (#4420)
    
    # Objective
    
    - Changing animation mid animation can leave the model not in its original position
    - ~~The movement speed is fixed, no matter the size of the model~~
    
    ## Solution
    
    - when changing animation, set it to its initial state and wait for one frame before changing the animation
    - ~~when settings the camera controller, use the camera transform to know how far it is from the origin and use the distance for the speed~~

[33mcommit f907d67d7ed5cfd8b11b2ad78e9dfd6eeb913cea[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Tue Apr 5 22:36:02 2022 +0000

    Fix formatting, spelling, phrasing and consistency (#4275)
    
    # Objective
    
    The `bevy_app` crate has a lot of inconsistencies in the documentation (formatting, spelling, phrasing, consistency).
    
    ## Solution
    
    Make it more consistent.

[33mcommit 30878e3a7db29a244228d9540f4101f36a9e4ff5[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Apr 5 21:52:00 2022 +0000

    add AnimationPlayer component only on scene roots that are also animation roots (#4417)
    
    # Objective
    
    - Fix #4416
    - The scene has two root nodes, with the second one being the animation root
    
    ## Solution
    
    - Check all scene root nodes, and add the `AnimationPlayer` component to nodes that are also animation roots

[33mcommit 7e3637c36fab1f95ad31731dd75d5242a02db471[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Tue Apr 5 20:45:06 2022 +0000

    fix scene_viewer example on wasm (#4426)
    
    The scene viewer example doesn't run on wasm because it sets the asset folder to `std::env::var("CARGO_MANIFEST_DIR").unwrap()`, which isn't supported on the web.
    
    Solution: set the asset folder to `"."` instead.

[33mcommit 73edb11db6d3a1ddd215d36f5b37dfec5583109c[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Tue Apr 5 20:04:34 2022 +0000

    Add more FromWorld implementations (#3945)
    
    # Objective
    
    Make `FromWorld` more useful for abstractions with a form similar to
    ```rs
    trait FancyAbstraction {
      type PreInitializedData: FromWorld;
    }
    ```
    
    ## Solution
    
    Add a `FromWorld` implementation for `SystemState` as well as a way to group together multiple `FromWorld` implementing types as one.
    
    Note: I plan to follow up this PR with another to add `Local` support to exclusive systems, which should get a fair amount of use from the `FromWorld` implementation on `SystemState`.

[33mcommit ea6e6f7db2469c33601b7eb5bb7c09db7bdccaf6[m
Author: Hennadii Chernyshchyk <genaloner@gmail.com>
Date:   Tue Apr 5 19:37:23 2022 +0000

    Do not crash if RenderDevice doesn't exist (#4427)
    
    # Objective
    
    Avoid crashing if `RenderDevice` doesn't exist (required for headless mode).
    Fixes #4392.
    
    ## Solution
    
    Use `CompressedImageFormats::all()` if there is no `RenderDevice`.

[33mcommit dbb2fcb6770cc10e46eec1af3a240e6bf9b68a6b[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Tue Apr 5 18:34:27 2022 +0000

    Re-enable test_property_type_registration() (#4419)
    
    # Objective
    
    - This test was mysteriously commented out
    
    ## Solution
    
    - Re-enable it
    - Also done in #4299, but this is better as its own PR.

[33mcommit cf831d518539d8f51de3b5b756c996506af82e2d[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Apr 4 22:10:00 2022 +0000

    input clear should not clear pressed (#4418)
    
    # Objective
    
    - Revert #4410
    - `Input<T>.clear()` is the method call at the end of each frame for inputs. Clearing `pressed` in it mean that checking if a key is pressed will always return false

[33mcommit 8e864fdd18df5881cf89d3e86c416b48214cd226[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Apr 4 22:09:59 2022 +0000

    can specify an anchor for a sprite (#3463)
    
    # Objective
    
    - Fixes #1616, fixes #2225
    - Let user specify an anchor for a sprite
    
    ## Solution
    
    - Add an enum for an anchor point for most common values, with a variant for a custom point
    - Defaults to Center to not change current behaviour
    
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit dba7790012b4d9cb2ef8c96e4dd754fc38913ca8[m
Author: Boxy <supbscripter@gmail.com>
Date:   Mon Apr 4 21:33:33 2022 +0000

    REMOVE unsound lifetime annotations on `EntityMut` (#4096)
    
    Fixes #3408
    #3001 also solves this but I dont see it getting merged any time soon so...
    # Objective
    make bevy ecs a lil bit less unsound
    
    ## Solution
    make `EntityMut::get_component_mut` return borrows from self instead of `'w`

[33mcommit 99a2dc50a6643f30caa8f06c1fcbfef87ec06fe7[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Mon Apr 4 21:16:36 2022 +0000

    Cleanup some outdated parts of ecs_guide (#4342)
    
    # Objective
    
    - `Local`s can no longer be accessed outside of their creating system, but these docs say they can be.
    - There's also little reason to have a pure wrapper type for `Local`s; they can just use the real type. The parameter name should be sufficiently documenting.

[33mcommit 703ae5df5d99a5508a74ff7cc3f7514c57304169[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Apr 4 20:26:11 2022 +0000

    gltf: add a name to nodes without names (#4396)
    
    # Objective
    
    - Animation is using `Name` to be able to address nodes in an entity free way
    - When loading random animated gltf files, I noticed some had animations without names sometimes
    
    ## Solution
    
    - Add default names to all nodes

[33mcommit d9d2fb640969b7a7249f74387bc34909092df013[m
Author: Troels Jessen <trojes@tuta.io>
Date:   Mon Apr 4 20:09:55 2022 +0000

    Added pressed state to input clear so it clears everything (#4410)
    
    # Objective
    
    Adds `pressed` state to Input::clear(). Fixes #3383

[33mcommit 39d89fe0df70da0e4e7909100d9187cc59919977[m
Author: Lukas Wirth <lukastw97@gmail.com>
Date:   Mon Apr 4 20:09:54 2022 +0000

    Enable drag-and-drop events on windows (#3772)
    
    # Objective
    
    - Fixes https://github.com/bevyengine/bevy/issues/2096
    
    ## Solution
    
    - This PR enables the drag-and-drop feature for winit on windows again, as the collision issue between cpal and winit has been fixed in https://github.com/RustAudio/cpal/pull/597. I confirmed the drag and drop example working on windows 10 with this change.
    - ~~It also bumps the rodio version, though this is not strictly necessary.~~

[33mcommit 5e70ad96c68fc64d478cbbd8c20a02f7233b9e92[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Apr 4 19:45:51 2022 +0000

    animations: don't ignore curves with one keyframe (#4406)
    
    # Objective
    
    - While playing with animated models, I noticed some were a little off
    
    ## Solution
    
    - Some animations curves only have one keyframe, they are used to set a transform to a given value
    - Those were ignored as we're never exactly at the ts 0.0 of an animation. going there explicitly (`.set_elapsed(0.0).pause()`) would crash
    - Special case this as there isn't much to animate in this case

[33mcommit 032b0f4bac9d9d7ea9820b774d4a9124ae46e33b[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Mon Apr 4 19:22:28 2022 +0000

    Fix derive(SystemParam) macro (#4400)
    
    Fixes the issue seen in #4398

[33mcommit dbd5e7ab6b3d1d115bd022063840a1d7d97f1db5[m
Author: Francesco Giordana <fra.giordana@gmail.com>
Date:   Mon Apr 4 18:59:00 2022 +0000

    Fixed case of R == G, following original conversion formula (#4383)
    
    https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB
    
    # Objective
    Fixes #4382
    
    ## Solution
    
    - Describe the solution used to achieve the objective above.
    Fixed conversion formula to account for red and green component being max and equal
    ---
    
    ## Changelog
    Fixed RGB -> HSL colorspace conversion
    
    ## Migration Guide
    
    
    Co-authored-by: Francesco Giordana <fgiordana@netflix.com>

[33mcommit 28d0a400288862e344cd16baae0dfd04f358a806[m
Author: Charles <c.giguere42@gmail.com>
Date:   Sun Apr 3 21:42:23 2022 +0000

    Only enable mouse movement when pressed in scene_viewer (#4405)
    
    # Objective
    
    - Only move the camera when explicitly wanted, otherwise the camera goes crazy if the cursor isn't already in the middle of the window when it opens.
    
    ## Solution
    
    - Check if the Left mouse button is pressed before updating the mouse delta
    - Input is configurable

[33mcommit ac29cbecf76f0d1d8346f87abbadac934115fcd8[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Sun Apr 3 19:35:05 2022 +0000

    add support for loading animations in `scene_viewer` example (#4403)
    
    The `scene_viewer` example can be used to load and display glTF scenes. This PR also adds the ability to play animations in the file and cycle through them.
    
    https://user-images.githubusercontent.com/22177966/161443011-0365c7de-c49e-44c4-b0f7-44330a015a4f.mp4

[33mcommit f90da74e32d65dbe9bfa1be9e89dc051bba400ff[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Sun Apr 3 14:40:46 2022 +0000

    Remove `face_toward.rs` (#4277)
    
    # Objective
    
    - Part of the splitting process of #3503.
    
    ## Solution
    
    - Remove the `face_toward.rs` file containing the `FaceToward` trait.
    
    ## Reasons
    
    - It is unused inside of `bevy`.
    - The method `Mat4::face_toward` of the trait is identical to `Mat4::look_at_rh` (see https://docs.rs/glam/latest/glam/f32/struct.Mat4.html#method.look_at_rh).
    - Discussion in #3503.
    
    ## Changelog
    
    ### Removed
    
    - The `FaceToward` trait got removed.
    
    ## Migration Guide
    
    -  The `FaceToward` trait got removed. To migrate you just have to change every occurrence of `Mat4::face_toward` to `Mat4::look_at_rh`.

[33mcommit 449a1d223c170cf22b4034217774c47bcaf93482[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Apr 2 22:36:02 2022 +0000

    animation player (#4375)
    
    # Objective
    
    - Add a basic animation player
      - Single track
      - Not generic, can only animate `Transform`s
      - With plenty of possible optimisations available
      - Close-ish to https://github.com/bevyengine/rfcs/pull/49
    - https://discord.com/channels/691052431525675048/774027865020039209/958820063148929064
    
    ## Solution
    
    - Can play animations
      - looping or not
    - Can pause animations
    - Can seek in animation
    - Can alter speed of animation
    - I also removed the previous gltf animation example
    
    https://user-images.githubusercontent.com/8672791/161051887-e79283f0-9803-448a-93d0-5f7a62acb02d.mp4

[33mcommit 0ed08d6a15f48e5030fcfdcb5d417a84d315e69b[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Fri Apr 1 21:11:07 2022 +0000

    fix multiple_windows example (#4389)
    
    The example was broken in #3635 when the `ActiveCamera` logic was introduced, after which there could only be one active `Camera3d` globally.
    Ideally there could be one `Camera3d` per render target, not globally, but that isn't the case yet.
    
    To fix the example, we need to
    - don't use `Camera3d` twice, add a new `SecondWindowCamera3d` marker
    - add the `CameraTypePlugin::<SecondWindowCamera3d>`
    - extract the correct `RenderPhase`s
    - add a 3d pass driver node for the secondary camera
    
    Fixes #4378
    
    Co-authored-by: Jakob Hellermann <hellermann@sipgate.de>

[33mcommit c26be3971955a16af88e53b4f9805fb14cab2de7[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Fri Apr 1 21:11:05 2022 +0000

    Remove unnecessary system labels (#4340)
    
    # Objective
    
    - Since #4224, using labels which only refer to one system doesn't make sense.
    
    ## Solution
    
    - Remove some of those.
    
    ## Future work
    
    - We should remove the ability to use strings as system labels entirely. I haven't in this PR because there are tests which use this, and that's a lot of code to change.
       - The only use cases for labels are either intra-crate, which use #4224, or inter-crate, which should either use #4224 or explicit types. Neither of those should use strings.

[33mcommit dd2001f2f1828096fd45cca9294b7ca2861f44e9[m
Author: Light Ning <lightning1141@gmail.com>
Date:   Fri Apr 1 20:52:22 2022 +0000

    bevy_render: add a small color box to each color (#4387)
    
    # Objective
    
    - bevy_render: add a small color box to each color
    
    ## Solution
    
    ![bevy_color_doc](https://user-images.githubusercontent.com/1318472/161241226-e7632a90-f526-44de-a68e-ff63b848164b.png)
    
    ---
    
    ## Changelog

[33mcommit 648544faf1c50dd1599ea9409e265fe4b3bf40c3[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Mar 31 21:22:16 2022 +0000

    Bump actions/cache from 2 to 3 (#4348)
    
    Bumps [actions/cache](https://github.com/actions/cache) from 2 to 3.
    <details>
    <summary>Release notes</summary>
    <p><em>Sourced from <a href="https://github.com/actions/cache/releases">actions/cache's releases</a>.</em></p>
    <blockquote>
    <h2>v3.0.0</h2>
    <ul>
    <li>
    <p>This change adds a minimum runner version(node12 -&gt; node16), which can break users using an out-of-date/fork of the runner. This would be most commonly affecting users on GHES 3.3 or before, as those runners do not support node16 actions and they can use actions from github.com via <a href="https://docs.github.com/en/enterprise-server@3.0/admin/github-actions/managing-access-to-actions-from-githubcom/enabling-automatic-access-to-githubcom-actions-using-github-connect">github connect</a> or manually copying the repo to their GHES instance.</p>
    </li>
    <li>
    <p>Few dependencies and cache action usage examples have also been updated.</p>
    </li>
    </ul>
    <h2>v2.1.7</h2>
    <p>Support 10GB cache upload using the latest version <code>1.0.8</code> of <a href="https://www.npmjs.com/package/@actions/cache"><code>@actions/cache</code> </a></p>
    <h2>v2.1.6</h2>
    <ul>
    <li>Catch unhandled &quot;bad file descriptor&quot; errors that sometimes occurs when the cache server returns non-successful response (<a href="https://github-redirect.dependabot.com/actions/cache/pull/596">actions/cache#596</a>)</li>
    </ul>
    <h2>v2.1.5</h2>
    <ul>
    <li>Fix permissions error seen when extracting caches with GNU tar that were previously created using BSD tar (<a href="https://github-redirect.dependabot.com/actions/cache/issues/527">actions/cache#527</a>)</li>
    </ul>
    <h2>v2.1.4</h2>
    <ul>
    <li>Make caching more verbose <a href="https://github-redirect.dependabot.com/actions/toolkit/pull/650">#650</a></li>
    <li>Use GNU tar on macOS if available <a href="https://github-redirect.dependabot.com/actions/toolkit/pull/701">#701</a></li>
    </ul>
    <h2>v2.1.3</h2>
    <ul>
    <li>Upgrades <code>@actions/core</code> to v1.2.6 for <a href="https://github.com/advisories/GHSA-mfwh-5m23-j46w">CVE-2020-15228</a>. This action was not using the affected methods.</li>
    <li>Fix error handling in <code>uploadChunk</code> where 400-level errors were not being detected and handled correctly</li>
    </ul>
    <h2>v2.1.2</h2>
    <ul>
    <li>Adds input to limit the chunk upload size, useful for self-hosted runners with slower upload speeds</li>
    <li>No-op when executing on GHES</li>
    </ul>
    <h2>v2.1.1</h2>
    <ul>
    <li>Update <code>@actions/cache</code> package to <code>v1.0.2</code> which allows cache action to use posix format when taring files.</li>
    </ul>
    <h2>v2.1.0</h2>
    <ul>
    <li>Replaces the <code>http-client</code> with the Azure Storage SDK for NodeJS when downloading cache content from Azure.  This should help improve download performance and reliability as the SDK downloads files in 4 MB chunks, which can be parallelized and retried independently</li>
    <li>Display download progress and speed</li>
    </ul>
    </blockquote>
    </details>
    <details>
    <summary>Commits</summary>
    <ul>
    <li><a href="https://github.com/actions/cache/commit/4b0cf6cc4619e737324ddfcec08fff2413359514"><code>4b0cf6c</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/actions/cache/issues/769">#769</a> from actions/users/ashwinsangem/bump_major_version</li>
    <li><a href="https://github.com/actions/cache/commit/60c606a2b4c5358e11c2ca7b4694e59049d008d1"><code>60c606a</code></a> Update licensed files</li>
    <li><a href="https://github.com/actions/cache/commit/b6e9a919a7da3606e9b2db756823ee1c39c7b48d"><code>b6e9a91</code></a> Revert &quot;Updated to the latest version.&quot;</li>
    <li><a href="https://github.com/actions/cache/commit/c8425035834f98c304ecf92f5d50f41d433885c1"><code>c842503</code></a> Updated to the latest version.</li>
    <li><a href="https://github.com/actions/cache/commit/2b7da2a62c3af9fa2692cd8d2d117da76faf31ac"><code>2b7da2a</code></a> Bumped up to a major version.</li>
    <li><a href="https://github.com/actions/cache/commit/deae296ab340574da1ec86242984dfc91f0a7b81"><code>deae296</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/actions/cache/issues/651">#651</a> from magnetikonline/fix-golang-windows-example</li>
    <li><a href="https://github.com/actions/cache/commit/c7c46bcb6db3c571021a3a2dc2d2557b512ecace"><code>c7c46bc</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/actions/cache/issues/707">#707</a> from duxtland/main</li>
    <li><a href="https://github.com/actions/cache/commit/6535c5fb5fe2870754afba7bd4e514867ac9cb98"><code>6535c5f</code></a> Regenerated <code>examples.md</code> TOC</li>
    <li><a href="https://github.com/actions/cache/commit/3fdafa472e0db16435add384585aa138ffdd16d3"><code>3fdafa4</code></a> Update GitHub Actions status badge markdown in <code>README.md</code></li>
    <li><a href="https://github.com/actions/cache/commit/341e6d75d9826beb2fa659263d862f6aec63a064"><code>341e6d7</code></a> Merge branch 'actions:main' into fix-golang-windows-example</li>
    <li>Additional commits viewable in <a href="https://github.com/actions/cache/compare/v2...v3">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/cache&package-manager=github_actions&previous-version=2&new-version=3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit b33dae31ec16915989496728b16160974bcc0fc7[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Thu Mar 31 20:59:26 2022 +0000

    Rename get_multiple APIs to get_many (#4384)
    
    
    # Objective
    
    -  std's new APIs do the same thing as `Query::get_multiple_mut`, but are called `get_many`: https://github.com/rust-lang/rust/pull/83608
    
    ## Solution
    
    - Find and replace `get_multiple` with `get_many`

[33mcommit 48ac955afd10a5b73380851eb535062154782030[m
Author: devil ira <JustTheCoolDude@gmail.com>
Date:   Thu Mar 31 20:43:01 2022 +0000

    Fix loading non-TriangleList meshes without normals in gltf loader (#4376)
    
    # Objective
    Make it so that loading in a mesh without normals that is not a `TriangleList` succeeds.
    
    ## Solution
    Flat normals can only be calculated on a mesh made of triangles.
    Check whether the mesh is a `TriangleList` before trying to compute missing normals.
    
    ## Additional changes
    The panic condition in `duplicate_vertices` did not make sense to me. I moved it to `compute_flat_normals` where the algorithm would produce incorrect results if the mesh is not a `TriangleList`.
    
    Co-authored-by: devil-ira <justthecooldude@gmail.com>

[33mcommit aca7fc1854175a6bdc3fd0cc4fd3452633238d41[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Thu Mar 31 20:43:00 2022 +0000

    Remove outdated perf comments (#4374)
    
    # Objective
    
    - The perf comments, added (by me) in https://github.com/bevyengine/bevy/pull/1349, became outdated once the initialisation call started to take an exclusive reference, (presumably in https://github.com/bevyengine/bevy/pull/1525).
    - They have been naÃ¯vely transferred along ever since
    
    ## Solution
    
    - Remove them

[33mcommit 3af90b67a69358199b27bc94af996ddbe47983e3[m
Author: SecretPocketCat <jiridexterhanc@gmail.com>
Date:   Thu Mar 31 20:24:32 2022 +0000

    Update RemovedComponents doc comment (#4373)
    
    # Objective
    
    - Clarify `RemovedComponents` are flushed in `CoreStage::Last` and systems relying on that should run before that stage
    
    ## Solution
    
    - Update `RemovedComponents` doc comment

[33mcommit 4480b36bf3063ede0ed3410f9645d0167308427c[m
Author: devil ira <JustTheCoolDude@gmail.com>
Date:   Thu Mar 31 00:09:30 2022 +0000

    Replace confusing links from CONTRIBUTING.md with short instruction (#4369)
    
    # Objective
    CONTRIBUTING.md contains links to pages that are restricted to Bevy Engine Org members.
    First time contributors who read CONTRIBUTING.md will end up on a confusing 404 page if they try to follow the link.
    
    Relevant discussion: #4365
    
    ## Solution
    
    Replace links with directions to the Triage Team page.
    
    ### Note
    
    I'm not sure if `assign themselves as a member` is accurate. I think that is what `automatically request membership` was referring to, but i can't check for myself :wink:
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 637a14991087d442c0b8d3c38bee3de7a285858e[m
Author: Boxy <supbscripter@gmail.com>
Date:   Wed Mar 30 23:52:45 2022 +0000

    unsafeify `World::entities_mut` (#4093)
    
    # Objective
    make bevy ecs a lil bit less unsound
    
    ## Solution
    make unsound API unsafe so that there is an unsafe block to blame:
    
    ```rust
    use bevy_ecs::prelude::*;
    
    #[derive(Debug, Component)]
    struct Foo(u8);
    
    fn main() {
        let mut world = World::new();
        let e1 = world.spawn().id();
        let e2 = world.spawn().insert(Foo(2)).id();
        world.entities_mut().meta[0] = world.entities_mut().meta[1].clone();
        let foo = world.entity(e1).get::<Foo>().unwrap();
        // whoo i love having components i dont have
        dbg!(foo);
    }
    ```
    
    This is not _strictly_ speaking UB, however:
    - `Query::get_multiple` cannot work if this is allowed
    - bevy_ecs is a pile of unsafe code whose soundness generally depends on the world being in a "correct" state with "no funny business" so it seems best to disallow this
    - it is trivial to get bevy to panic inside of functions with safety invariants that have been violated (the entity location is not valid)
    - it seems to violate what the safety invariant on `Entities::flush` is trying to ensure

[33mcommit 2b35dbabfd170dba9423f459e97948afd8270512[m
Author: Chris Russell <8494645+chescock@users.noreply.github.com>
Date:   Wed Mar 30 19:56:17 2022 +0000

    impl Reflect and Debug for Mesh2dHandle (#4368)
    
    # Objective
    
    An entity spawned with `MaterialMesh2dBundle<M>` cannot be saved and spawned using `DynamicScene` because the `Mesh2dHandle` component does not `impl Reflect`.
    
    ## Solution
    
    Add `#[derive(Reflect)]` and `#[reflect(Component)]` to `Mesh2dHandle`, and call `register_type` in `SpritePlugin`.  Also add `#[derive(Debug)]` since I'm touching the `derive`s anyway.

[33mcommit 3537c6ae2d0d9af35bf7aa4cb31c4378ecf49c57[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Mar 30 19:56:16 2022 +0000

    Fix animation: shadow and wireframe support (#4367)
    
    # Objective
    
    Animation with shadows crashes with:
    ```
    thread 'main' panicked at 'wgpu error: Validation Error
    
    Caused by:
        In Device::create_render_pipeline
          note: label = `shadow_pipeline`
        error matching VERTEX shader requirements against the pipeline
        shader global ResourceBinding { group: 1, binding: 1 } is not available in the layout pipeline layout
        visibility flags don't include the shader stage
    ```
    
    
    Animation with wireframe crashes with:
    ```
    thread 'main' panicked at 'wgpu error: Validation Error
    
    Caused by:
        In Device::create_render_pipeline
          note: label = `opaque_mesh_pipeline`
        error matching VERTEX shader requirements against the pipeline
        shader global ResourceBinding { group: 2, binding: 0 } is not available in the layout pipeline layout
        binding is missing from the pipeline layout
    ```
    
    ## Solution
    
    - Fix the bindings

[33mcommit f6bc9a022d534c4f54b54385787098e4be21f636[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Mar 30 19:38:24 2022 +0000

    Sprites - keep color as 4 f32 (#4361)
    
    # Objective
    
    - Fix #4356
    
    ## Solution
    
    - Do not reduce the color of sprites to 4 u8

[33mcommit 509548190bec15d725e806649d2446189e860768[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Wed Mar 30 19:16:48 2022 +0000

    Add get_multiple and get_multiple_mut APIs for Query and QueryState (#4298)
    
    # Objective
    
    - The inability to have multiple active mutable borrows into a query is a common source of borrow-checker pain for users.
    - This is a pointless restriction if and only if we can guarantee that the entities they are accessing are unique.
    - This could already by bypassed with get_unchecked, but that is an extremely unsafe API.
    - Closes https://github.com/bevyengine/bevy/issues/2042.
    
    ## Solution
    
    - Add `get_multiple`, `get_multiple_mut` and their unchecked equivalents (`multiple` and `multiple_mut`) to `Query` and `QueryState`.
    - Improve the `QueryEntityError` type to provide more useful error information.
    
    ## Changelog
    
    - Added `get_multiple`, `get_multiple_mut` and their unchecked equivalents (`multiple` and `multiple_mut`) to Query and QueryState.
    
    ## Migration Guide
    
    - The `QueryEntityError` enum now has a `AliasedMutability variant, and returns the offending entity.
    
    ## Context
    
    This is a fresh attempt at #3333; rebasing was behaving very badly and it was important to rebase on top of the recent query soundness fixes. Many thanks to all the reviewers in that thread, especially @BoxyUwU for the help with lifetimes.
    
    ## To-do
    
    - [x] Add compile fail tests
    - [x] Successfully deduplicate code
    - [x] Decide what to do about failing doc tests
    - [x] Get some reviews for lifetime soundness

[33mcommit 63fee2572b017deb9edcfd110bdcedc50c5153f7[m
Author: bilsen <ivar.kallstrom@gmail.com>
Date:   Tue Mar 29 23:39:38 2022 +0000

    `ParamSet` for conflicting `SystemParam`:s (#2765)
    
    # Objective
    Add a system parameter `ParamSet` to be used as container for conflicting parameters.
    
    ## Solution
    Added two methods to the SystemParamState trait, which gives the access used by the parameter. Did the implementation. Added some convenience methods to FilteredAccessSet. Changed `get_conflicts` to return every conflicting component instead of breaking on the first conflicting `FilteredAccess`.
    
    
    Co-authored-by: bilsen <40690317+bilsen@users.noreply.github.com>

[33mcommit 7ff3d876fa66f0519d8a3ad2b9e5e9437ef52139[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Tue Mar 29 23:03:22 2022 +0000

    Clean up duplicated color conversion code (#4360)
    
    # Objective
    
    Cleans up some duplicated color -> u32 conversion code in `bevy_sprite` and `bevy_ui`
    
    ## Solution
    
    Use `as_linear_rgba_u32` which was added recently by #4088

[33mcommit 954022c79945d9258fe3f2dcd26cfabfe23f67b7[m
Author: Yutao Yuan <infmagic2047reg@outlook.com>
Date:   Tue Mar 29 23:03:20 2022 +0000

    Add text wrapping support to Text2d (#4347)
    
    # Objective
    
    Fixes #4344.
    
    ## Solution
    
    Add a new component `Text2dBounds` to `Text2dBundle` that specifies the maximum width and height of text. Text will wrap according to this size.

[33mcommit c7c08f95cb784afc366eb2dcedd21d9d40e72d32[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Tue Mar 29 22:39:21 2022 +0000

    Fix gamepad connection system ordering (#4313)
    
    # Objective
    
    - Part of the splitting process of #3692.
    
    ## Solution
    
    - Change the `gamepad_connection_system` to run after the `InputSystem` label.
    
    ## Reasons
    
    I changed the `gamepad_connection_system` to run after the `InputSystem` instead of in parallel, because this system checks the `GamepadEvent`s which get send inside of the `gamepad_event_system`. This means that the `gamepad_connection_system` could respond to the events one frame later, instead of instantly resulting in one frame lag.
    
    Old possible case:
    1. `gamepad_connection_system` (reacts to the `GamepadEvent`s too early)
    2. `gamepad_event_system` (sends the `GamepadEvent`s)
    
    New fixed ordering:
    1. `gamepad_event_system` (sends the `GamepadEvent`s)
    2. `gamepad_connection_system` (reacts to the `GamepadEvent`s)

[33mcommit f3a61327a4d2eade2a5ee4f1a983d6b0737a4796[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Tue Mar 29 22:39:18 2022 +0000

    Remove `margins.rs` (#4284)
    
    # Objective
    
    - Closes #335.
    - Part of the splitting process of #3503.
    
    ## Solution
    
    - Remove the `margins.rs` file containing the `Margins` type.
    
    ## Reasons
    
    - It is unused inside of `bevy`.
    - The `Rect`/`UiRect` is identical to the `Margins` type and is also used for margins inside of `bevy` (rename of `Rect` happens in #4276)
    - Discussion in #3503.
    
    ## Changelog
    
    ### Removed
    
    - The `Margins` type got removed.
    
    ## Migration Guide
    
    - The `Margins` type got removed. To migrate you just have to change every occurrence of `Margins` to `UiRect`.

[33mcommit f5e53ba6f5bc1e0b9ab9f3e1de591fdcd522cee9[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Tue Mar 29 22:39:16 2022 +0000

    Only insert or remove input if needed (#4273)
    
    # Objective
    
    We are currently inserting an `input` into `pressed` even if it is already pressed. This also applies to releasing an input. This is not a big deal, but since we are already checking if the `input` is pressed or not we might as well remove the cost of the value update caused by the `pressed.insert` method.
    
    Related to #4209
    
    ## Solution
    
    Only insert or remove input if needed.

[33mcommit 551d9f6cd74ed1869d9c119983d6d37ec139551d[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Tue Mar 29 22:39:14 2022 +0000

    use error scope to handle errors on shader module creation (#3675)
    
    related: https://github.com/bevyengine/bevy/pull/3289
    
    In addition to validating shaders early when debug assertions are enabled, use the new [error scopes](https://gpuweb.github.io/gpuweb/#error-scopes) API when creating a shader module.
    
    I chose to keep the early validation (and thereby parsing twice) when debug assertions are enabled in, because it lets as handle errors ourselves and display them with pretty colors, while the error scopes API just gives us a string we can display.
    
    
    
    This change pulls in `futures-util` as a new dependency for `future.now_or_never()`. I can inline that part of futures-lite into `bevy_render` to keep the compilation time lower if that's preferred.

[33mcommit 1b63d949ea511d287414d0b563d6dc77a2308092[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Tue Mar 29 22:18:07 2022 +0000

    Re-add ECS benchmark suite (#4332)
    
    # Objective
    
    - Benchmarks are good.
    - Licensing situation appears to be [cleared up](https://github.com/bevyengine/bevy/pull/4225#issuecomment-1078710209).
    
    ## Solution
    
    - Add the benchmark suite back in
    - Suggested PR title: "Revert "Revert "Add cart's fork of ecs_bench_suite (#4225)" (#4252)"
    
    
    Co-authored-by: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>

[33mcommit 6844a6f4fde56e76156b62eedf0c4630b198aecd[m
Author: Mika <blaind@blaind.net>
Date:   Tue Mar 29 19:44:45 2022 +0000

    Introduce `SystemLabel`'s for `RenderAssetPlugin`, and change `Image` preparation system to run before others (#3917)
    
    # Objective
    
    Fixes `StandardMaterial` texture update (see sample code below).
    
    Most probably fixes #3674 (did not test)
    
    ## Solution
    
    Material updates, such as PBR update, reference the underlying `GpuImage`. Like here: https://github.com/bevyengine/bevy/blob/9a7852db0f22eb41f259a1afbb4926eb73863a10/crates/bevy_pbr/src/pbr_material.rs#L177
    
    However, currently the `GpuImage` update may actually happen *after* the material update fetches the gpu image. Resulting in the material actually not being updated for the correct gpu image.
    
    In this pull req, I introduce new systemlabels for the renderassetplugin. Also assigned the RenderAssetPlugin::<Image> to the `PreAssetExtract` stage, so that it is executed before any material updates.
    
    Code to test.
    
    Expected behavior:
    * should update to red texture
    
    Unexpected behavior (before this merge):
    * texture stays randomly as green one (depending on the execution order of systems)
    
    ```rust
    use bevy::{
        prelude::*,
        render::render_resource::{Extent3d, TextureDimension, TextureFormat},
    };
    
    fn main() {
        App::new()
            .add_plugins(DefaultPlugins)
            .add_startup_system(setup)
            .add_system(changes)
            .run();
    }
    
    struct Iteration(usize);
    
    #[derive(Component)]
    struct MyComponent;
    
    fn setup(
        mut commands: Commands,
        mut meshes: ResMut<Assets<Mesh>>,
        mut materials: ResMut<Assets<StandardMaterial>>,
        mut images: ResMut<Assets<Image>>,
    ) {
        commands.spawn_bundle(PointLightBundle {
            point_light: PointLight {
                ..Default::default()
            },
            transform: Transform::from_xyz(4.0, 8.0, 4.0),
            ..Default::default()
        });
    
        commands.spawn_bundle(PerspectiveCameraBundle {
            transform: Transform::from_xyz(-2.0, 0.0, 5.0)
                .looking_at(Vec3::new(0.0, 0.0, 0.0), Vec3::Y),
            ..Default::default()
        });
    
        commands.insert_resource(Iteration(0));
    
        commands
            .spawn_bundle(PbrBundle {
                mesh: meshes.add(Mesh::from(shape::Quad::new(Vec2::new(3., 2.)))),
                material: materials.add(StandardMaterial {
                    base_color_texture: Some(images.add(Image::new(
                        Extent3d {
                            width: 600,
                            height: 400,
                            depth_or_array_layers: 1,
                        },
                        TextureDimension::D2,
                        [0, 255, 0, 128].repeat(600 * 400), // GREEN
                        TextureFormat::Rgba8Unorm,
                    ))),
                    ..Default::default()
                }),
                ..Default::default()
            })
            .insert(MyComponent);
    }
    
    fn changes(
        mut materials: ResMut<Assets<StandardMaterial>>,
        mut images: ResMut<Assets<Image>>,
        mut iteration: ResMut<Iteration>,
        webview_query: Query<&Handle<StandardMaterial>, With<MyComponent>>,
    ) {
        if iteration.0 == 2 {
            let material = materials.get_mut(webview_query.single()).unwrap();
    
            let image = images
                .get_mut(material.base_color_texture.as_ref().unwrap())
                .unwrap();
    
            image
                .data
                .copy_from_slice(&[255, 0, 0, 255].repeat(600 * 400));
        }
    
        iteration.0 += 1;
    }
    ```
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 31bd4ecbbc81521340991a82f8f725cce7bdf79b[m
Author: James Liu <duclong120995@gmail.com>
Date:   Tue Mar 29 18:31:13 2022 +0000

    Mesh Skinning. Attempt #3 (#4238)
    
    # Objective
    Load skeletal weights and indices from GLTF files. Animate meshes.
    
    ## Solution
     - Load skeletal weights and indices from GLTF files.
     - Added `SkinnedMesh` component and ` SkinnedMeshInverseBindPose` asset
     - Added `extract_skinned_meshes` to extract joint matrices.
     - Added queue phase systems for enqueuing the buffer writes.
    
    Some notes:
    
     -  This ports part of # #2359 to the current main.
     -  This generates new `BufferVec`s and bind groups every frame. The expectation here is that the number of `Query::get` calls during extract is probably going to be the stronger bottleneck, with up to 256 calls per skinned mesh. Until that is optimized, caching buffers and bind groups is probably a non-concern.
     - Unfortunately, due to the uniform size requirements, this means a 16KB buffer is allocated for every skinned mesh every frame. There's probably a few ways to get around this, but most of them require either compute shaders or storage buffers, which are both incompatible with WebGL2.
    
    Co-authored-by: james7132 <contact@jamessliu.com>
    Co-authored-by: FranÃ§ois <mockersf@gmail.com>
    Co-authored-by: James Liu <contact@jamessliu.com>

[33mcommit 54d2e86afcb65db33558968fe1f838d939587dc6[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Tue Mar 29 03:05:01 2022 +0000

    bevy_transform: Use Changed in the query for much faster transform_propagate_system (#4180)
    
    # Objective
    
    - Improve transform propagation performance
    
    ## Solution
    
    - Use `Changed<Transform>` as part of the `root_query` and `transform_query` to avoid the indirection of having to look up the `Entity` in the `changed_transform_query`
    - Get rid of the `changed_transform_query` entirely
    - `transform_propagate_system` execution time for `many_cubes -- sphere` dropped from 1.07ms to 0.159ms, an 85% reduction for this system. Frame rate increased from ~42fps to ~44fps

[33mcommit f16768d868bebf4c6ed53c23e06ac21d5ad1a7e8[m
Author: MrGVSV <gino.valente.code@gmail.com>
Date:   Tue Mar 29 02:10:06 2022 +0000

    bevy_derive: Add derives for `Deref` and `DerefMut` (#4328)
    
    # Objective
    
    A common pattern in Rust is the [newtype](https://doc.rust-lang.org/rust-by-example/generics/new_types.html). This is an especially useful pattern in Bevy as it allows us to give common/foreign types different semantics (such as allowing it to implement `Component` or `FromWorld`) or to simply treat them as a "new type" (clever). For example, it allows us to wrap a common `Vec<String>` and do things like:
    
    ```rust
    #[derive(Component)]
    struct Items(Vec<String>);
    
    fn give_sword(query: Query<&mut Items>) {
      query.single_mut().0.push(String::from("Flaming Poisoning Raging Sword of Doom"));
    }
    ```
    
    > We could then define another struct that wraps `Vec<String>` without anything clashing in the query.
    
    However, one of the worst parts of this pattern is the ugly `.0` we have to write in order to access the type we actually care about. This is why people often implement `Deref` and `DerefMut` in order to get around this.
    
    Since it's such a common pattern, especially for Bevy, it makes sense to add a derive macro to automatically add those implementations.
    
    
    ## Solution
    
    Added a derive macro for `Deref` and another for `DerefMut` (both exported into the prelude). This works on all structs (including tuple structs) as long as they only contain a single field:
    
    ```rust
    #[derive(Deref)]
    struct Foo(String);
    
    #[derive(Deref, DerefMut)]
    struct Bar {
      name: String,
    }
    ```
    
    This allows us to then remove that pesky `.0`:
    
    ```rust
    #[derive(Component, Deref, DerefMut)]
    struct Items(Vec<String>);
    
    fn give_sword(query: Query<&mut Items>) {
      query.single_mut().push(String::from("Flaming Poisoning Raging Sword of Doom"));
    }
    ```
    
    ### Alternatives
    
    There are other alternatives to this such as by using the [`derive_more`](https://crates.io/crates/derive_more) crate. However, it doesn't seem like we need an entire crate just yet since we only need `Deref` and `DerefMut` (for now).
    
    ### Considerations
    
    One thing to consider is that the Rust std library recommends _not_ using `Deref` and `DerefMut` for things like this: "`Deref` should only be implemented for smart pointers to avoid confusion" ([reference](https://doc.rust-lang.org/std/ops/trait.Deref.html)). Personally, I believe it makes sense to use it in the way described above, but others may disagree.
    
    ### Additional Context
    
    Discord: https://discord.com/channels/691052431525675048/692572690833473578/956648422163746827 (controversiality discussed [here](https://discord.com/channels/691052431525675048/692572690833473578/956711911481835630))
    
    ---
    
    ## Changelog
    
    - Add `Deref` derive macro (exported to prelude)
    - Add `DerefMut` derive macro (exported to prelude)
    - Updated most newtypes in examples to use one or both derives
    
    Co-authored-by: MrGVSV <49806985+MrGVSV@users.noreply.github.com>

[33mcommit 28ba87e6c8f48a6b41b6743b748a72d41728523c[m
Author: Boxy <supbscripter@gmail.com>
Date:   Fri Mar 25 00:26:07 2022 +0000

    CI runs `cargo miri test -p bevy_ecs` (#4310)
    
    # Objective
    
    Fixes #1529
    Run bevy_ecs in miri
    
    ## Solution
    
    - Don't set thread names when running in miri rust-lang/miri/issues/1717
    - Update `event-listener` to `2.5.2` as previous versions have UB that is detected by miri: [event-listener commit](https://github.com/smol-rs/event-listener/commit/1fa31c553e37003cb116d9ed7bc40f36845ac8b5)
    - Ignore memory leaks when running in miri as they are impossible to track down rust-lang/miri/issues/1481
    - Make `table_add_remove_many` test less "many" because miri is really quite slow :)
    - Make CI run `RUSTFLAGS="-Zrandomize-layout" MIRIFLAGS="-Zmiri-ignore-leaks -Zmiri-tag-raw-pointers -Zmiri-disable-isolation" cargo +nightly miri test -p bevy_ecs`

[33mcommit 8570b651f9a78807c68f2210124a9e2e00eedd08[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Thu Mar 24 23:57:36 2022 +0000

    Clean up Breakout logic (#4311)
    
    # Objective
    
    1. Spawning walls in the Breakout example was hard to follow and error-prone.
    2. The strategy used in `paddle_movement_system` was somewhat convoluted.
    3. Correctly modifying the size of the arena was hard, due to implicit coupling between the bounds and the bounds that the paddle can move in.
    
    ## Solution
    
    1. Refactor this to use a WallBundle struct with a builder; neatly demonstrating some essential patterns along the way.
    2. Use clamp and avoid using weird &mut strategies.
    3. Refactor logic to allow users to tweak the brick size, and automatically adjust the number of rows and columns to match.
    4. Make the brick layout more like classic breakout!
    
    ![image](https://user-images.githubusercontent.com/3579909/160019864-06747361-3b5b-4944-b3fd-4978604e2ef5.png)

[33mcommit a190cd59dbfd00f57e1e07e04a450415ef77cea1[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Thu Mar 24 22:15:58 2022 +0000

    Revert changes to colors in Breakout game (#4325)
    
    # Objective
    
    - existing Breakout colors are too dark and saturated in places
    
    ## Solution
    
    - Revert colors in Breakout examples to original values.

[33mcommit ab83336f51d509a2741c305573cb0d0c7fe2f073[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Thu Mar 24 17:54:40 2022 +0000

    Replace `_system` system names in Breakout examples (#4312)
    
    # Objective
    
    - The Breakout example uses system names like `paddle_movement_system`
    - _system syntax is redundant
    - the [community has spoken](https://github.com/bevyengine/bevy/discussions/2804), and prefers to avoid `_system` system names by a more than 2:1 ratio
    - existing system names were not terribly descriptive
    
    ## Solution
    
    - rename the systems to take the form of `verb`, rather than `noun_system` to better capture the behavior they are implenting
    - yeet `_system`

[33mcommit 207ebde0200d763725569feb8547cd6a5e18c327[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Mar 24 00:20:27 2022 +0000

    Always update clusters and remove per-frame allocations (#4169)
    
     * Refactor assign_lights_to_clusters to always clear + update clusters, even if the screen size isn't available yet / is zero. This fixes #4167. We still avoid the "expensive" per-light work when the screen size isn't available yet. I also consolidated some logic to eliminate some redundancies.
    * Removed _a ton_ of (potentially very large) per-frame reallocations
      * Removed `Res<VisiblePointLights>` (a vec) in favor of  `Res<GlobalVisiblePointLights>` (a hashmap). We were allocating a new hashmap every frame, the collecting it into a vec every frame, then in another system _re-generating the hashmap_. It is always used like a hashmap, might as well embrace that. We now reuse the same hashmap every frame and dont use any intermediate collections.
      * We were re-allocating Clusters aabb and light vectors every frame by re-constructing Clusters every frame. We now re-use the existing collections.
      * Reuse per-camera VisiblePointLight vecs when possible instead of allocating them every frame. We now only insert VisiblePointLights if the component doesn't exist yet.

[33mcommit b1c3e9862d06f5d8ec0fca3ce20d7318cff2d456[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Mar 23 22:53:56 2022 +0000

    Auto-label function systems with SystemTypeIdLabel (#4224)
    
    This adds the concept of "default labels" for systems (currently scoped to "parallel systems", but this could just as easily be implemented for "exclusive systems"). Function systems now include their function's `SystemTypeIdLabel` by default.
    
    This enables the following patterns:
    
    ```rust
    // ordering two systems without manually defining labels
    app
      .add_system(update_velocity)
      .add_system(movement.after(update_velocity))
    
    // ordering sets of systems without manually defining labels
    app
      .add_system(foo)
      .add_system_set(
        SystemSet::new()
          .after(foo)
          .with_system(bar)
          .with_system(baz)
      )
    ```
    
    Fixes: #4219
    Related to: #4220
    
    Credit to @aevyrie @alice-i-cecile @DJMcNab (and probably others) for proposing (and supporting) this idea about a year ago. I was a big dummy that both shut down this (very good) idea and then forgot I did that. Sorry. You all were right!

[33mcommit d51b54a6580431ca2fa1e154b8162aa53bc3d430[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Wed Mar 23 21:17:50 2022 +0000

    Break out Breakout components into a more sensible organization (#4261)
    
    # Objective
    
    - The components in the Breakout game are defined in a strange fashion.
       - Components should decouple behavior wherever possible.
       - Systems should be as general as possible, to make extending behavior easier.
       - Marker components are idiomatic and useful, but marker components and query filters were not used.
    - The existing design makes it challenging for beginners to extend the example into a high-quality game.
    
    ## Solution
    
    - Refactor component definitions in the Breakout example to reflect principles above.
    
    ## Context
    
    A small portion of the changes made in #2094. Interacts with changes in #4255; merge conflicts will have to be resolved.

[33mcommit 9e450f2827bdaa88257ca3024dd53ddf262925a9[m
Author: Kurt KÃ¼hnert <kuehnertku95@gmail.com>
Date:   Wed Mar 23 00:27:26 2022 +0000

    Compute Pipeline Specialization (#3979)
    
    # Objective
    
    - Fixes #3970
    - To support Bevy's shader abstraction(shader defs, shader imports and hot shader reloading) for compute shaders, I have followed carts advice and change the `PipelinenCache` to accommodate both compute and render pipelines.
    
    ## Solution
    
    - renamed `RenderPipelineCache` to `PipelineCache`
    - Cached Pipelines are now represented by an enum (render, compute)
    - split the `SpecializedPipelines` into `SpecializedRenderPipelines` and `SpecializedComputePipelines`
    - updated the game of life example
    
    ## Open Questions
    
    - should `SpecializedRenderPipelines` and `SpecializedComputePipelines` be merged and how would we do that?
    - should the `get_render_pipeline` and `get_compute_pipeline` methods be merged?
    - is pipeline specialization for different entry points a good pattern
    
    
    
    
    Co-authored-by: Kurt KÃ¼hnert <51823519+Ku95@users.noreply.github.com>
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 0a4136d2661a2258ea63904dae0159fe23a896b5[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Tue Mar 22 21:23:50 2022 +0000

    Add a helper for storage buffers similar to `UniformVec` (#4079)
    
    # Objective
    
    - Add a helper for storage buffers similar to `UniformVec`
    
    ## Solution
    
    - Add a `StorageBuffer<T, U>` where `T` is the main body of the shader struct without any final variable-sized array member, and `U` is the type of the items in a variable-sized array.
    - Use `()` as the type for unwanted parts, e.g. `StorageBuffer<(), Vec4>::default()` would construct a binding that would work with `struct MyType { data: array<vec4<f32>>; }` in WGSL and `StorageBuffer<MyType, ()>::default()` would work with `struct MyType { ... }` in WGSL as long as there are no variable-sized arrays.
    - Std430 requires that there is at most one variable-sized array in a storage buffer, that if there is one it is the last member of the binding, and that it has at least one item. `StorageBuffer` handles all of these constraints.

[33mcommit 024d98457c80d25f9d5269f214d31e9967cc734a[m
Author: Boxy <supbscripter@gmail.com>
Date:   Tue Mar 22 02:49:41 2022 +0000

    yeet unsound lifetime annotations on `Query` methods (#4243)
    
    # Objective
    Continuation of #2964 (I really should have checked other methods when I made that PR)
    
    yeet unsound lifetime annotations on `Query` methods.
    Example unsoundness:
    ```rust
    use bevy::prelude::*;
    
    fn main() {
        App::new().add_startup_system(bar).add_system(foo).run();
    }
    
    pub fn bar(mut cmds: Commands) {
        let e = cmds.spawn().insert(Foo { a: 10 }).id();
        cmds.insert_resource(e);
    }
    
    #[derive(Component, Debug, PartialEq, Eq)]
    pub struct Foo {
        a: u32,
    }
    pub fn foo(mut query: Query<&mut Foo>, e: Res<Entity>) {
        dbg!("hi");
        {
            let data: &Foo = query.get(*e).unwrap();
            let data2: Mut<Foo> = query.get_mut(*e).unwrap();
            assert_eq!(data, &*data2); // oops UB
        }
    
        {
            let data: &Foo = query.single();
            let data2: Mut<Foo> = query.single_mut();
            assert_eq!(data, &*data2); // oops UB
        }
    
        {
            let data: &Foo = query.get_single().unwrap();
            let data2: Mut<Foo> = query.get_single_mut().unwrap();
            assert_eq!(data, &*data2); // oops UB
        }
    
        {
            let data: &Foo = query.iter().next().unwrap();
            let data2: Mut<Foo> = query.iter_mut().next().unwrap();
            assert_eq!(data, &*data2); // oops UB
        }
    
        {
            let mut opt_data: Option<&Foo> = None;
            let mut opt_data_2: Option<Mut<Foo>> = None;
            query.for_each(|data| opt_data = Some(data));
            query.for_each_mut(|data| opt_data_2 = Some(data));
            assert_eq!(opt_data.unwrap(), &*opt_data_2.unwrap()); // oops UB
        }
        dbg!("bye");
    }
    
    ```
    
    ## Solution
    yeet unsound lifetime annotations on `Query` methods
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit fbe7a49d5bc8965483725235617516867eadb7d3[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Mar 22 02:26:34 2022 +0000

    Gltf animations (#3751)
    
    # Objective
    
    - Load informations for animations from GLTF
    - Make experimenting on animations easier
    
    # Non Objective
    
    - Implement a solutions for all animations in Bevy. This would need a discussion / RFC. The goal here is only to have the information available to try different APIs
    
    ## Solution
    
    - Load animations with a representation close to the GLTF spec
    - Add an example to display animations. There is an animation driver in the example, not in Bevy code, to show how it can be used. The example is cycling between examples from the official gltf sample ([AnimatedTriangle](https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/AnimatedTriangle), [BoxAnimated](https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/BoxAnimated)), and one from me with some cases not present in the official examples.
    
    
    https://user-images.githubusercontent.com/8672791/150696656-073403f0-d921-43b6-beaf-099c7aee16ed.mp4
    
    
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 6c085cba4759237d0fb6b9a9f99d2b2d589dbc0f[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Mon Mar 21 23:58:37 2022 +0000

    bevy_render: Support removal of nodes, edges, subgraphs (#3048)
    
    Add support for removing nodes, edges, and subgraphs. This enables live re-wiring of the render graph.
    
    This was something I did to support the MSAA implementation, but it turned out to be unnecessary there. However, it is still useful so here it is in its own PR.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 050d2b7f008d1d023b6df5a4a61de94d7834aebb[m
Author: Boxy <supbscripter@gmail.com>
Date:   Mon Mar 21 23:43:08 2022 +0000

    yeet `World::components_mut` >:( (#4092)
    
    # Objective
    make bevy ecs a lil bit less unsound
    ## Solution
    yeet unsound API `World::components_mut`:
    ```rust
    use bevy_ecs::prelude::*;
    
    #[derive(Component)]
    struct Foo(u8);
    
    #[derive(Debug, Component)]
    struct Bar([u8; 100]);
    
    fn main() {
        let mut world = World::new();
        let e = world.spawn().insert(Foo(0)).id();
        *world.components_mut() = Default::default();
        let bar = world.entity_mut(e).remove::<Bar>().unwrap();
        // oopsies reading memory copied from outside allocation
        dbg!(bar);
    }
    ```

[33mcommit 54fbaf4b4cc497503ec1af2e40488b582586ba60[m
Author: Alex <3957610+CptPotato@users.noreply.github.com>
Date:   Mon Mar 21 20:36:46 2022 +0000

    Add transform hierarchy stress test (#4170)
    
    ## Objective
    
    There recently was a discussion on Discord about a possible test case for stress-testing transform hierarchies.
    
    ## Solution
    
    Create a test case for stress testing transform propagation.
    
    *Edit:* I have scrapped my previous example and built something more functional and less focused on visuals.
    
    There are three test setups:
    
    - `TestCase::Tree` recursively creates a tree with a specified depth and branch width
    - `TestCase::NonUniformTree` is the same as `Tree` but omits nodes in a way that makes the tree "lean" towards one side, like this:
      <details>
      <summary></summary>
    
      ![image](https://user-images.githubusercontent.com/3957610/158069737-2ddf4e4a-7d5c-4ee5-8566-424a54a06723.png)
      </details>
    - `TestCase::Humanoids` creates one or more separate hierarchies based on the structure of common humanoid rigs
      - this can both insert `active` and `inactive` instances of the human rig
    
    It's possible to parameterize which parts of the hierarchy get updated (transform change) and which remain unchanged. This is based on @james7132 suggestion:
    There's a probability to decide which entities should remain static. On top of that these changes can be limited to a certain range in the hierarchy (min_depth..max_depth).

[33mcommit fa791d6bb81a166c1f502da1ce55ebac520d131f[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Mon Mar 21 16:20:34 2022 +0000

    Make a note about the MSRV (#4274)
    
    # Objective
    
    - Users occasionally ask about the latest supported Rust version.
    - Fixes #288 (kinda).
    
    ## Solution
    
    - We use "latest stable release".
    - Document this information in the README.

[33mcommit 4c1678c78dd28cf39062856ddbf4aa42527a859f[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon Mar 21 05:23:36 2022 +0000

    Hide docs for concrete impls of Fetch, FetchState, and SystemParamState (#4250)
    
    # Objective
     The following pages in the docs are rather noisy, and the types they point to are not particularly useful by themselves:
    
     - http://dev-docs.bevyengine.org/bevy/ecs/query/index.html
     - http://dev-docs.bevyengine.org/bevy/ecs/system/index.html
    
    ## Solution
    
    - Replace docs on these types with `#[doc(hidden)]`.
    - Hide `InputMarker`  too.

[33mcommit 31636a350429207117d145323e6a08fc0df5f91c[m
Author: persik <yroslav541@gmail.com>
Date:   Mon Mar 21 04:15:37 2022 +0000

    Update linux_dependencies for Gentoo. (#4195)
    
    # Objective
    
    - Add dependencies installation instructions for Gentoo for `linux_dependencies.md`.
    
    ## Solution
    
    - Edit the `linux_dependencies.md`.

[33mcommit 685b6e59be0e4d27543f167929897f73fff24b5e[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Sun Mar 20 21:54:11 2022 +0000

    register `Camera{2,3}d` components for reflection (#4269)
    
    # Objective
    
    When loading a gltf scene with a camera, bevy will panic at ``thread 'main' panicked at 'scene contains the unregistered type `bevy_render::camera::bundle::Camera3d`. consider registering the type using `app.register_type::<T>()`', /home/jakob/dev/rust/contrib/bevy/bevy/crates/bevy_scene/src/scene_spawner.rs:332:35``.
    
    ## Solution
    
    Register the camera types to fix the panic.

[33mcommit cd694c0d08e8623c5d354348f26a74bf542b4c76[m
Author: Mathis <mk@thepeaklab.com>
Date:   Sun Mar 20 21:54:10 2022 +0000

    Prevent event from getting registered twice (#4258)
    
    # Objective
    
    As described in  #4257, registering an Event twice would cause some systems to miss events on some starts, since the event buffer is cleared + swapped multiple times.
    
    Fixes #4257
    
    ## Solution
    
    A simple check whether the event is already registered is added, making adding an Event a second time a no-op.

[33mcommit b0ddce36bd49b0f3cf89b29dd0dbf3f25505ba09[m
Author: Chris Foster <cdbfoster@gmail.com>
Date:   Sun Mar 20 21:54:09 2022 +0000

    Check an `Input`'s `pressed` set before adding to `just_released`. (#4209)
    
    # Objective
    
    - Fixes #4208
    
    ## Solution
    
    - Adds a check before inserting into an `Input`'s `just_released` set, in the same way that one exists for adding into the `just_pressed` set.

[33mcommit 3e631e6234067921e359fc90ae13aec8b9048922[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Sun Mar 20 21:32:38 2022 +0000

    gltf-loader: disable backface culling if material is double-sided (#4270)
    
    # Objective
    
    The  [glTF spec](https://github.com/KhronosGroup/glTF/blob/8e798b02d254cea97659a333cfcb20875b62bdd4/specification/2.0/Specification.adoc#395-double-sided) the `doubleSided` has the following to say about the `doubleSided` boolean:
    
    > When this value is false, back-face culling is enabled, i.e., only front-facing triangles are rendered.
    > When this value is true, back-face culling is disabled and double sided lighting is enabled. The back-face MUST have its normals reversed before the lighting equation is evaluated.
    
    ## Solution
    Disable backface culling when `doubleSided: true`.

[33mcommit af24576b966b6ab7b31f32fa2bccc97e1445c361[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Sat Mar 19 23:05:02 2022 +0000

    Move magic numbers into constants in Breakout example (#4255)
    
    # Objective
    
    - The Breakout example has a lot of configurable constant values for setup, but these are buried in the source code.
    - Magic numbers scattered in the source code are hard to follow.
    - Providing constants up front makes tweaking examples very approachable.
    
    ## Solution
    
    - Move magic numbers into constants
    
    ## Context
    
    Part of the changes made in #2094; split out for easier review.

[33mcommit 738cd5e7409f5e59274de7dcdeca0a3ccf5b73f2[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Sat Mar 19 19:14:13 2022 +0000

    Add a scene viewer tool (#4183)
    
    # Objective
    
    - Allow quick and easy testing of scenes
    
    ## Solution
    
    - Add a `scene-viewer` tool based on `load_gltf`.
      - Run it with e.g. `cargo run --release --example scene_viewer --features jpeg -- ../some/path/assets/models/Sponza/glTF/Sponza.gltf#Scene0`
    - Configure the asset path as pointing to the repo root for convenience (paths specified relative to current working directory)
    - Copy over the camera controller from the `shadow_biases` example
    - Support toggling the light animation
    - Support toggling shadows
    - Support adjusting the directional light shadow projection (cascaded shadow maps will remove the need for this later)
    
    I don't want to do too much on it up-front. Rather we can add features over time as we need them.

[33mcommit fee7a26137689248733b64ce84f17316921c2ab5[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Sat Mar 19 12:57:47 2022 +0000

    Tracy spans around main 3D passes (#4182)
    
    # Objective
    
    - Make visible how much time is spent building the Opaque3d, AlphaMask3d, and Transparent3d passes
    
    ## Solution
    
    - Add a `trace` feature to `bevy_core_pipeline`
    - Add tracy spans around the three passes
    - I didn't do this for shadows, sprites, etc as they are only one pass in the node. Perhaps it should be split into 3 nodes to allow insertion of other nodes between...?

[33mcommit 95d3f32b9bedef58686c481db7c23c33b1298417[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Sat Mar 19 11:12:24 2022 +0000

    Revert "Add cart's fork of ecs_bench_suite (#4225)" (#4252)
    
    This reverts commit 08ef2f0a2841bd5aa0ef01ed711744a7ede9eb42.
    
    # Objective
    
    - #4225 was merged without considering the licensing considerations.
    - It merges in code taken from https://github.com/cart/ecs_bench_suite/tree/bevy-benches/src/bevy.
    - We can safely assume that we do have a license to cart's contributions. However, these build upon https://github.com/cart/ecs_bench_suite/commit/377e96e69ab99e3de270fc9a158aafa1ca3ad3a3, for which we have no license.
    - This has been verified by looking in the Cargo.toml, the root folder and the readme, none of which mention a license. Additionally, the string "license" [doesn't appear](https://github.com/rust-gamedev/ecs_bench_suite/search?q=license) in the repository.
    - This means the code is all rights reserved.
    - (The author of these commits also hasn't commented in #2373, though even if they had, it would be legally *dubious* to rely on that to license any code they ever wrote)
    - (Note that the latest commit on the head at https://github.com/rust-gamedev/ecs_bench_suite hasn't had a license added either.)
    - We are currently incorrectly claiming to be able to give an MIT/Apache 2.0 license to this code.
    
    ## Solution
    
    - Revert it

[33mcommit 08ef2f0a2841bd5aa0ef01ed711744a7ede9eb42[m
Author: James Liu <contact@jamessliu.com>
Date:   Sat Mar 19 04:41:30 2022 +0000

    Add cart's fork of ecs_bench_suite (#4225)
    
    # Objective
    Better benchmarking for ECS. Fix #2062.
    
    ## Solution
    Port @cart's fork of ecs_bench_suite to the official bench suite for bevy_ecs, replace cgmath with glam, update to latest bevy.

[33mcommit ac8bbafc5caae72e6dcf78fe012294ccf6a0f160[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Sat Mar 19 04:41:28 2022 +0000

    Faster view frustum culling (#4181)
    
    # Objective
    
    - Reduce time spent in the `check_visibility` system
    
    ## Solution
    
    - Use `Vec3A` for all bounding volume types to leverage SIMD optimisations and to avoid repeated runtime conversions from `Vec3` to `Vec3A`
    - Inline all bounding volume intersection methods
    - Add on-the-fly calculated `Aabb` -> `Sphere` and do `Sphere`-`Frustum` intersection tests before `Aabb`-`Frustum` tests. This is faster for `many_cubes` but could be slower in other cases where the sphere test gives a false-positive that the `Aabb` test discards. Also, I tested precalculating the `Sphere`s and inserting them alongside the `Aabb` but this was slower.
    - Do not test meshes against the far plane. Apparently games don't do this anymore with infinite projections, and it's one fewer plane to test against. I made it optional and still do the test for culling lights but that is up for discussion.
    - These collectively reduce `check_visibility` execution time in `many_cubes -- sphere` from 2.76ms to 1.48ms and increase frame rate from ~42fps to ~44fps

[33mcommit e7a9420443b204c154731b5c86167d09023612cf[m
Author: Boxy <supbscripter@gmail.com>
Date:   Sat Mar 19 04:14:27 2022 +0000

    Change `Cow<[ComponentId]>` to `Box<[ComponentId]>` (#4185)
    
    `Cow::Borrowed` was never used

[33mcommit 7ce3ae43e33849b1c20058a08badaa771cfc14eb[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Sat Mar 19 03:54:15 2022 +0000

    Bump Bevy to 0.7.0-dev (#4230)
    
    # Objective
    
    - The [dev docs](https://dev-docs.bevyengine.org/bevy/index.html#) show version 0.6.0, which is actively misleading.
    
    [Image of the problem](https://cdn.discordapp.com/attachments/695741366520512563/953513612943704114/Screenshot_20220316-154100_Firefox-01.jpeg)
    
    Noticed by @ickk, fix proposed by @mockersf.
    
    ## Solution
    
    - Bump the version across all Bevy crates to 0.7.0 dev.
    - Set a reminder in the Release Checklist to remember to do this each release.

[33mcommit de677dbfc9dacf1724367024fc1965dae27325a4[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Mar 18 04:19:21 2022 +0000

    Use more ergonomic span syntax (#4246)
    
    Tracing added support for "inline span entering", which cuts down on a lot of complexity:
    
    ```rust
    let span = info_span!("my_span").entered();
    ```
    
    This adapts our code to use this pattern where possible, and updates our docs to recommend it.
    
    This produces equivalent tracing behavior. Here is a side by side profile of "before" and "after" these changes.
    ![image](https://user-images.githubusercontent.com/2694663/158912137-b0aa6dc8-c603-425f-880f-6ccf5ad1b7ef.png)

[33mcommit c1a237879041628d2aefab8326e8b3c4d09b2358[m
Author: MrGVSV <gino.valente.code@gmail.com>
Date:   Wed Mar 16 20:48:42 2022 +0000

    Add "Changelog" and "Migration Guide" to PR template (#4143)
    
    # Objective
    
    Context: [Discord Discussion](https://discord.com/channels/691052431525675048/745355529777315850/950532143325519902)
    
    Improve the PR template by adding "Changelog" and "Migration Guide" sections. These sections should hopefully help speed up the review/merge process, as well as help make release notes and migration guides.
    
    ## Solution
    
    Added the "Changelog" section template which suggests listing out the changes of the PR. This also acts as a sort of tl;dr for reviewers (especially for larger PRs).
    
    Added the "Migration Guide" section template which suggests describing how a user might need to migrate their codebase to account for the changes by the PR. This also helps authors/contributors keep the end-user in mind when adding or changing the API.
    
    Both sections are optionalâ an author does not _need_ to fill these out. Hopefully they will, though, as it provides a handful of really great benefits.
    
    Co-authored-by: MrGVSV <49806985+MrGVSV@users.noreply.github.com>

[33mcommit 026563cb1e89de30af5b801c89e8fb51a83e4970[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Mar 16 02:08:25 2022 +0000

    Deploy dev docs - install dependencies (#4222)
    
    # Objective
    
    - #3535 introduced deploying docs without installing dependencies
    - https://github.com/bevyengine/bevy/runs/5562769081?check_suite_focus=true
    
    ## Solution
    
    - copied https://github.com/bevyengine/bevy/blob/6ff17eaab8aad54bcb3d79055846c27ca0251fcc/.github/workflows/ci.yml#L270-L271

[33mcommit 21f6760b2adbbcca4720db47ac5c79b8cfa7df2e[m
Author: Chris Foster <cdbfoster@gmail.com>
Date:   Wed Mar 16 01:53:04 2022 +0000

    Render to texture example: No need to create an image handle manually. (#4223)
    
    # Objective
    
    - Make the example a little easier to follow by removing unnecessary steps.
    
    ## Solution
    
    - `Assets<Image>` will give us a handle for our render texture if we call `add()` instead of `set()`.  No need to set it manually; one less thing to think about while reading the example.

[33mcommit 6ff17eaab8aad54bcb3d79055846c27ca0251fcc[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Mar 15 23:52:44 2022 +0000

    Deploy dev docs - fix sed command (#4221)
    
    # Objective
    
    - #3535 introduced deploying docs with an error in sed command
    
    ## Solution
    
    - fix sed command
    - make the command cross platform

[33mcommit e020c572111e759e438c2c880b474b087bd78dc3[m
Author: James Liu <contact@jamessliu.com>
Date:   Tue Mar 15 23:00:49 2022 +0000

    Add automatic docs deployment to GitHub Pages (#3535)
    
    # Objective
    
    Partially address #407 by setting up automated deployments of `bevy`'s API reference to GitHub Pages.
    
    ## Solution
    
    Set up a GitHub Actions workflow that builds the docs on every push to `main` and pushes a new commit to a `gh-pages` (or `docs` branch).
    
    A few smaller additions to better address #407:
    
     - A top level redirect was added to take "docs.bevyengine.org" directly to the `bevy` crate docs.
     - A GitHub Pages CNAME file for supporting a publicly viewable domain instead of `github.io`
     - A robots.txt file is added to disable all search engine crawlers that respect it from crawling it (avoid having conflicting Google search results)
     - A .nojekyl file to speed up deployments since there is no Jekyll templating in the output.
    
    This may require configuration of the  `GITHUB_TOKEN` of the CI to successfully run this.
    
    ## Followup
    
    For this to completely resolve #407, a subdomain of https://bevyengine.org/ needs to be set up to point to the CNAME location. This is initially set to "dev-docs.bevyengine.org".
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 0529f633f9e6f4633b9f2c54fb99ef99427d1ec5[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Tue Mar 15 22:26:46 2022 +0000

    KTX2/DDS/.basis compressed texture support (#3884)
    
    # Objective
    
    - Support compressed textures including 'universal' formats (ETC1S, UASTC) and transcoding of them to
    - Support `.dds`, `.ktx2`, and `.basis` files
    
    ## Solution
    
    - Fixes https://github.com/bevyengine/bevy/issues/3608 Look there for more details.
    - Note that the functionality is all enabled through non-default features. If it is desirable to enable some by default, I can do that.
    - The `basis-universal` crate, used for `.basis` file support and for transcoding, is built on bindings against a C++ library. It's not feasible to rewrite in Rust in a short amount of time. There are no Rust alternatives of which I am aware and it's specialised code. In its current state it doesn't support the wasm target, but I don't know for sure. However, it is possible to build the upstream C++ library with emscripten, so there is perhaps a way to add support for web too with some shenanigans.
    - There's no support for transcoding from BasisLZ/ETC1S in KTX2 files as it was quite non-trivial to implement and didn't feel important given people could use `.basis` files for ETC1S.

[33mcommit 9dfd4e4b08aba146e4d14e457b7b2ac6560e8ea3[m
Author: Mizu <5565979+l4desu-mizu@users.noreply.github.com>
Date:   Tue Mar 15 05:49:49 2022 +0000

    Add examples for Transforms (#2441)
    
    # Add Transform Examples
    
    - Adding examples for moving/rotating entities (with its own section) to resolve #2400
    
    I've stumbled upon this project and been fiddling around a little. Saw the issue and thought I might just add some examples for the proposed transformations.
    Mind to check if I got the gist correctly and suggest anything I can improve?

[33mcommit 6e61fef67d63acecb44b3c4eb61f2fc38086d3c8[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Tue Mar 15 02:16:55 2022 +0000

    Obviate the need for `RunSystem`, and remove it (#3817)
    
    # Objective
    
    - Fixes #3300
    - `RunSystem` is messy
    
    ## Solution
    
    - Adds the trick theorised in https://github.com/bevyengine/bevy/issues/3300#issuecomment-991791234
    
    P.S. I also want this for an experimental refactoring of `Assets`, to remove the duplication of `Events<AssetEvent<T>>`
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit a304fd9a9956bffb97ea2097be91cfcddb13ed6b[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Tue Mar 15 01:54:05 2022 +0000

    Split bevy_hierarchy out from bevy_transform (#4168)
    
    # Objective
    
    - Hierarchy tools are not just used for `Transform`: they are also used for scenes.
    - In the future there's interest in using them for other features, such as visiibility inheritance.
    - The fact that these tools are found in `bevy_transform` causes a great deal of user and developer confusion
    - Fixes #2758.
    
    ## Solution
    
    - Split `bevy_transform` into two!
    - Make everything work again.
    
    Note that this is a very tightly scoped PR: I *know* there are code quality and docs issues that existed in bevy_transform that I've just moved around. We should fix those in a seperate PR and try to merge this ASAP to reduce the bitrot involved in splitting an entire crate.
    
    ## Frustrations
    
    The API around `GlobalTransform` is a mess: we have massive code and docs duplication, no link between the two types and no clear way to extend this to other forms of inheritance.
    
    In the medium-term, I feel pretty strongly that `GlobalTransform` should be replaced by something like `Inherited<Transform>`, which lives in `bevy_hierarchy`:
    
    - avoids code duplication
    - makes the inheritance pattern extensible
    - links the types at the type-level
    - allows us to remove all references to inheritance from `bevy_transform`, making it more useful as a standalone crate and cleaning up its docs
    
    ## Additional context
    
    - double-blessed by @cart in https://github.com/bevyengine/bevy/issues/4141#issuecomment-1063592414 and https://github.com/bevyengine/bevy/issues/2758#issuecomment-913810963
    - preparation for more advanced / cleaner hierarchy tools: go read https://github.com/bevyengine/rfcs/pull/53 !
    - originally attempted by @finegeometer in #2789. It was a great idea, just needed more discussion!
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit a291b5aaedb4affcb31df2e2e63cb0c665ffb24a[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Sat Mar 12 02:38:46 2022 +0000

    Ignore duplicate wasi crate in dependency tree (#4190)
    
    # Objective
    
    - CI is giving a warning about duplicate dependency because of a differing versions between `winit` and `ahash` of https://github.com/bytecodealliance/wasi
    - PRs that are mergeable look like they're not.
    
    ## Solution
    
    - Add this crate to the list of ignored duplicates

[33mcommit bf6de8962287050369cd98605490bdd7770c87b4[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Sat Mar 12 00:41:06 2022 +0000

    use marker components for cameras instead of name strings (#3635)
    
    **Problem**
    - whenever you want more than one of the builtin cameras (for example multiple windows, split screen, portals), you need to add a render graph node that executes the correct sub graph, extract the camera into the render world and add the correct `RenderPhase<T>` components
    - querying for the 3d camera is annoying because you need to compare the camera's name to e.g. `CameraPlugin::CAMERA_3d`
    
    **Solution**
    - Introduce the marker types `Camera3d`, `Camera2d` and `CameraUi`
    -> `Query<&mut Transform, With<Camera3d>>` works
    - `PerspectiveCameraBundle::new_3d()` and `PerspectiveCameraBundle::<Camera3d>::default()` contain the `Camera3d` marker
    - `OrthographicCameraBundle::new_3d()` has `Camera3d`, `OrthographicCameraBundle::new_2d()` has `Camera2d`
    - remove `ActiveCameras`, `ExtractedCameraNames`
    - run 2d, 3d and ui passes for every camera of their respective marker
    -> no custom setup for multiple windows example needed
    
    **Open questions**
    - do we need a replacement for `ActiveCameras`? What about a component `ActiveCamera { is_active: bool }` similar to `Visibility`?
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 0e821da7045852ff677c2b8ee945dc85a899b181[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Fri Mar 11 23:20:18 2022 +0000

    bevy_render: Batch insertion for prepare_uniform_components (#4179)
    
    # Objective
    
    - Make insertion of uniform components faster
    
    ## Solution
    
    - Use batch insertion in the prepare_uniform_components system
    - Improves `many_cubes -- sphere` from ~42fps to ~43fps
    
    
    Co-authored-by: FranÃ§ois <mockersf@gmail.com>

[33mcommit 5af746457efd6ee8ab4180081ee0762cdc339f8c[m
Author: robtfm <50659922+robtfm@users.noreply.github.com>
Date:   Thu Mar 10 01:14:21 2022 +0000

    fix cluster tiling calculations (#4148)
    
    # Objective
    
    fix cluster tilesize and tilecount calculations.
    Fixes https://github.com/bevyengine/bevy/issues/4127 & https://github.com/bevyengine/bevy/issues/3596
    
    ## Solution
    
    - calculate tilesize as smallest integers such that dimensions.xy() tiles will cover the screen
    - calculate final dimensions as smallest integers such that final dimensions * tilesize will cover the screen
    
    there is more cleanup that could be done in these functions. a future PR will likely remove the tilesize completely, so this is just a minimal change set to fix the current bug at small screen sizes
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit b493165bfec341136180ce114d67b1aeac2d425b[m
Author: Aevyrie <aevyrie@gmail.com>
Date:   Wed Mar 9 21:59:57 2022 +0000

    Use reactive rendering for ui examples. (#4164)
    
    # Objective
    
    - Use the low power, reactive rendering settings for UI examples.
    - Make the feature more discoverable by using it in an applicable context.

[33mcommit 1a85fb5ea3e30bf5ffca6a82c06c0c73b37bd93e[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Tue Mar 8 17:50:44 2022 +0000

    Fix mesh2d_manual example (#4037)
    
    # Objective
    
    Fixes #4036
    
    ## Solution
    
    - Use `VertexBufferLayout::from_vertex_formats`
    - Actually put a u32 into `ATTRIBUTE_COLOR` and convert it in the shader
    
    I'm not 100% sure about the color stuff. It seems like `ATTRIBUTE_COLOR` has been `Uint32` this whole time, but this example previously worked with `[f32; 4]` somehow, perhaps because the vertex layout was manually specified.
    
    Let me know if that can be improved, or feel free to close for an alternative fix.

[33mcommit 6ce8e5006867b5f11dd408eba66b221480e4b99b[m
Author: Emerson MX <emersonmx@gmail.com>
Date:   Tue Mar 8 17:14:08 2022 +0000

    Add mouse grab example (#4114)
    
    Fixes #4094

[33mcommit 2b112026147a8b6780759b32f0ea04dc7d7d8548[m
Author: Roman <rskbox@gmail.com>
Date:   Tue Mar 8 05:47:36 2022 +0000

    fix mul_vec3 tranformation order: should be scale -> rotate -> translate (#3811)
    
    # Objective
    
    Lets say we need to rotate stretched object for this purpose we can created stretched `Child` and add as child to `Parent`, later we can rotate `Parent`, `Child` in this situation should rotate keeping it form, it is not the case with `SpriteBundle` currently. If you try to do it with `SpriteBundle` it will deform.
    
    ## Solution
    
    My pull request fixes order of transformations to scale -> rotate -> translate, with this fix `SpriteBundle` behaves as expected in described rotation, without deformation. Here is quote from "Essential Mathematics for Games":
    
    > Generally, the desired order we wish to use for these transforms is to scale first, then rotate, then translate. Scaling first gives us the scaling along the axes we expect. We can then rotate around the origin of the frame, and then translate it into place.
    
    I'm must say when I was using `MaterialMesh2dBundle` it behaves correctly in both cases with `bevy main` and with my fix, don't know why, was not able to figure it out why there is difference.
    
    here is code I was using for testing:
    ```rust
    use bevy::{
        prelude::*,
        render::render_resource::{Extent3d, TextureDimension, TextureFormat},
        sprite::{MaterialMesh2dBundle, Mesh2dHandle},
    };
    
    fn main() {
        let mut app = App::new();
        app.insert_resource(ClearColor(Color::rgb(0.1, 0.2, 0.3)))
            .add_plugins(DefaultPlugins)
            .add_startup_system(setup);
        app.run();
    }
    
    fn setup(
        mut commands: Commands,
        mut images: ResMut<Assets<Image>>,
        mut meshes: ResMut<Assets<Mesh>>,
        mut materials: ResMut<Assets<ColorMaterial>>,
    ) {
        let mut c = OrthographicCameraBundle::new_2d();
        c.orthographic_projection.scale = 1.0 / 10.0;
        commands.spawn_bundle(c);
        // note: mesh somehow works for both variants
        // let quad: Mesh2dHandle = meshes.add(Mesh::from(shape::Quad::default())).into();
        // let child = commands
        //     .spawn_bundle(MaterialMesh2dBundle {
        //         mesh: quad.clone(),
        //         transform: Transform::from_translation(Vec3::new(0.0, 0.0, -1.0))
        //             .with_scale(Vec3::new(10.0, 1.0, 1.0)),
        //         material: materials.add(ColorMaterial::from(Color::BLACK)),
        //         ..Default::default()
        //     })
        //     .id();
        // commands
        //     .spawn_bundle(MaterialMesh2dBundle {
        //         mesh: quad,
        //         transform: Transform::from_rotation(Quat::from_rotation_z(0.78))
        //             .with_translation(Vec3::new(0.0, 0.0, 10.0)),
        //         material: materials.add(ColorMaterial::from(Color::WHITE)),
        //         ..Default::default()
        //     })
        //     .push_children(&[child]);
    
        let white = images.add(get_image(Color::rgb(1.0, 1.0, 1.0)));
        let black = images.add(get_image(Color::rgb(0.0, 0.0, 0.0)));
        let child = commands
            .spawn_bundle(SpriteBundle {
                texture: black,
                transform: Transform::from_translation(Vec3::new(0.0, 0.0, -1.0))
                    .with_scale(Vec3::new(10.0, 1.0, 1.0)),
                ..Default::default()
            })
            .id();
        commands
            .spawn_bundle(SpriteBundle {
                texture: white,
                transform: Transform::from_rotation(Quat::from_rotation_z(0.78))
                    .with_translation(Vec3::new(0.0, 0.0, 10.0)),
                ..Default::default()
            })
            .push_children(&[child]);
    }
    
    fn get_image(color: Color) -> Image {
        let mut bytes = Vec::with_capacity((1 * 1 * 4 * 4) as usize);
        let color = color.as_rgba_f32();
        bytes.extend(color[0].to_le_bytes());
        bytes.extend(color[1].to_le_bytes());
        bytes.extend(color[2].to_le_bytes());
        bytes.extend(1.0_f32.to_le_bytes());
        Image::new(
            Extent3d {
                width: 1,
                height: 1,
                depth_or_array_layers: 1,
            },
            TextureDimension::D2,
            bytes,
            TextureFormat::Rgba32Float,
        )
    }
    
    ```
    
    here is screenshot with `bevy main` and my fix:
    ![examples](https://user-images.githubusercontent.com/816292/151708304-c07c891e-da70-43f4-9c41-f85fa166a96d.png)

[33mcommit 244687a0bb99ebadda6f4608b3d09dbad0a2c0f0[m
Author: robtfm <50659922+robtfm@users.noreply.github.com>
Date:   Tue Mar 8 04:56:42 2022 +0000

    Dynamic light clusters (#3968)
    
    # Objective
    
    provide some customisation for default cluster setup
    avoid "cluster index lists is full" in all cases (using a strategy outlined by @superdump)
    
    ## Solution
    
    Add ClusterConfig enum (which can be inserted into a view at any time) to allow specifying cluster setup with variants:
    - None (do not do any light assignment - for views which do not require light info, e.g. minimaps etc)
    - Single (one cluster)
    - XYZ (explicit cluster counts in each dimension)
    - FixedZ (most similar to current - specify Z-slices and total, then x and y counts are dynamically determined to give approximately square clusters based on current aspect ratio)
    Defaults to FixedZ { total: 4096, z: 24 } which is similar to the current setup.
    
    Per frame, estimate the number of indices that would be required for the current config and decrease the cluster counts / increase the cluster sizes in the x and y dimensions if the index list would be too small.
    
    notes:
    
    - I didn't put ClusterConfig in the camera bundles to avoid introducing a dependency from bevy_render to bevy_pbr. the ClusterConfig enum comes with a pbr-centric impl block so i didn't want to move that into bevy_render either.
    - ~Might want to add None variant to cluster config for views that don't care about lights?~
    - Not well tested for orthographic
    - ~there's a cluster_muck branch on my repo which includes some diagnostics / a modified lighting example which may be useful for tyre-kicking~ (outdated, i will bring it up to date if required)
    
    anecdotal timings:
    
    FPS on the lighting demo is negligibly better (~5%), maybe due to a small optimisation constraining the light aabb to be in front of the camera
    FPS on the lighting demo with 100 extra lights added is ~33% faster, and also renders correctly as the cluster index count is no longer exceeded

[33mcommit a188babce2b53b0520f69ee3d96dc9d0a0536c1c[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Tue Mar 8 04:39:52 2022 +0000

    many_cubes: Add a cube pattern suitable for benchmarking culling changes (#4126)
    
    # Objective
    
    - Add a cube pattern to `many_cubes` suitable for benchmarking culling changes
    
    ## Solution
    
    - Use a 'golden spiral' mapped to a sphere with the strategy of optimising for average nearest neighbour distance, as per: http://extremelearning.com.au/how-to-evenly-distribute-points-on-a-sphere-more-effectively-than-the-canonical-fibonacci-lattice/

[33mcommit 4add96b1bebffd23c0ea424662b6ae658a76d77b[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Mar 8 02:11:59 2022 +0000

    Cleanup doc / comments about changed defaults (#4144)
    
    # Objective
    
    - Update comment about default audio format
    - remove doc about msaa in wasm

[33mcommit de2a47c2bafaf920a5e462aeac902a69dda7469f[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Mar 8 01:54:36 2022 +0000

    export TaskPoolThreadAssignmentPolicy (#4145)
    
    # Objective
    
    - Fix #2163
    - Allow configuration of thread pools through `DefaultTaskPoolOptions`
    
    ## Solution
    
    - `TaskPoolThreadAssignmentPolicy` was already public but not exported. Export it.

[33mcommit e41c5c212cf1c79ba76b7975339912d981a080ec[m
Author: Gabriel Bourgeois <gabriel.bourgeoisv4si@gmail.com>
Date:   Tue Mar 8 01:00:23 2022 +0000

    Fix UI node Transform change detection (#4138)
    
    # Objective
    
    Fixes #4133
    
    ## Solution
    
    Add comparisons to make sure we don't dereference `Mut<>` in the two places where `Transform` is being mutated. `GlobalTransform` implementation already works properly so fixing Transform automatically fixed that as well.

[33mcommit b4483dbfc89926d47b56f23754794e6770c76630[m
Author: dataphract <dataphract@gmail.com>
Date:   Tue Mar 8 01:00:22 2022 +0000

    perf: only recalculate frusta of changed lights (#4086)
    
    ## Objective
    
    Currently, all directional and point lights have their viewing frusta recalculated every frame, even if they have not moved or been disabled/enabled.
    
    ## Solution
    
    The relevant systems now make use of change detection to only update those lights whose viewing frusta may have changed.

[33mcommit fb02b842244ae562a1e939a471ea6cc108e8c5f0[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Mar 8 00:46:07 2022 +0000

    Bump actions/checkout from 2 to 3 (#4136)
    
    Bumps [actions/checkout](https://github.com/actions/checkout) from 2 to 3.
    <details>
    <summary>Release notes</summary>
    <p><em>Sourced from <a href="https://github.com/actions/checkout/releases">actions/checkout's releases</a>.</em></p>
    <blockquote>
    <h2>v3.0.0</h2>
    <ul>
    <li>Update default runtime to node16</li>
    </ul>
    <h2>v2.4.0</h2>
    <ul>
    <li>Convert SSH URLs like <code>org-&lt;ORG_ID&gt;@github.com:</code> to <code>https://github.com/</code> - <a href="https://github-redirect.dependabot.com/actions/checkout/pull/621">pr</a></li>
    </ul>
    <h2>v2.3.5</h2>
    <p>Update dependencies</p>
    <h2>v2.3.4</h2>
    <ul>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/379">Add missing <code>await</code>s</a></li>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/360">Swap to Environment Files</a></li>
    </ul>
    <h2>v2.3.3</h2>
    <ul>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/345">Remove Unneeded commit information from build logs</a></li>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/326">Add Licensed to verify third party dependencies</a></li>
    </ul>
    <h2>v2.3.2</h2>
    <p><a href="https://github-redirect.dependabot.com/actions/checkout/pull/320">Add Third Party License Information to Dist Files</a></p>
    <h2>v2.3.1</h2>
    <p><a href="https://github-redirect.dependabot.com/actions/checkout/pull/284">Fix default branch resolution for .wiki and when using SSH</a></p>
    <h2>v2.3.0</h2>
    <p><a href="https://github-redirect.dependabot.com/actions/checkout/pull/278">Fallback to the default branch</a></p>
    <h2>v2.2.0</h2>
    <p><a href="https://github-redirect.dependabot.com/actions/checkout/pull/258">Fetch all history for all tags and branches when fetch-depth=0</a></p>
    <h2>v2.1.1</h2>
    <p>Changes to support GHES (<a href="https://github-redirect.dependabot.com/actions/checkout/pull/236">here</a> and <a href="https://github-redirect.dependabot.com/actions/checkout/pull/248">here</a>)</p>
    <h2>v2.1.0</h2>
    <ul>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/191">Group output</a></li>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/199">Changes to support GHES alpha release</a></li>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/184">Persist core.sshCommand for submodules</a></li>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/163">Add support ssh</a></li>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/179">Convert submodule SSH URL to HTTPS, when not using SSH</a></li>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/157">Add submodule support</a></li>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/144">Follow proxy settings</a></li>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/141">Fix ref for pr closed event when a pr is merged</a></li>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/128">Fix issue checking detached when git less than 2.22</a></li>
    </ul>
    </blockquote>
    </details>
    <details>
    <summary>Changelog</summary>
    <p><em>Sourced from <a href="https://github.com/actions/checkout/blob/main/CHANGELOG.md">actions/checkout's changelog</a>.</em></p>
    <blockquote>
    <h1>Changelog</h1>
    <h2>v2.3.1</h2>
    <ul>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/284">Fix default branch resolution for .wiki and when using SSH</a></li>
    </ul>
    <h2>v2.3.0</h2>
    <ul>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/278">Fallback to the default branch</a></li>
    </ul>
    <h2>v2.2.0</h2>
    <ul>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/258">Fetch all history for all tags and branches when fetch-depth=0</a></li>
    </ul>
    <h2>v2.1.1</h2>
    <ul>
    <li>Changes to support GHES (<a href="https://github-redirect.dependabot.com/actions/checkout/pull/236">here</a> and <a href="https://github-redirect.dependabot.com/actions/checkout/pull/248">here</a>)</li>
    </ul>
    <h2>v2.1.0</h2>
    <ul>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/191">Group output</a></li>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/199">Changes to support GHES alpha release</a></li>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/184">Persist core.sshCommand for submodules</a></li>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/163">Add support ssh</a></li>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/179">Convert submodule SSH URL to HTTPS, when not using SSH</a></li>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/157">Add submodule support</a></li>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/144">Follow proxy settings</a></li>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/141">Fix ref for pr closed event when a pr is merged</a></li>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/128">Fix issue checking detached when git less than 2.22</a></li>
    </ul>
    <h2>v2.0.0</h2>
    <ul>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/108">Do not pass cred on command line</a></li>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/107">Add input persist-credentials</a></li>
    <li><a href="https://github-redirect.dependabot.com/actions/checkout/pull/104">Fallback to REST API to download repo</a></li>
    </ul>
    </blockquote>
    </details>
    <details>
    <summary>Commits</summary>
    <ul>
    <li><a href="https://github.com/actions/checkout/commit/a12a3943b4bdde767164f792f33f40b04645d846"><code>a12a394</code></a> update readme for v3 (<a href="https://github-redirect.dependabot.com/actions/checkout/issues/708">#708</a>)</li>
    <li><a href="https://github.com/actions/checkout/commit/8f9e05e482293f862823fcca12d9eddfb3723131"><code>8f9e05e</code></a> Update to node 16 (<a href="https://github-redirect.dependabot.com/actions/checkout/issues/689">#689</a>)</li>
    <li><a href="https://github.com/actions/checkout/commit/230611dbd0eb52da1e1f4f7bc8bb0c3a339fc8b7"><code>230611d</code></a> Change secret name for PAT to not start with GITHUB_ (<a href="https://github-redirect.dependabot.com/actions/checkout/issues/623">#623</a>)</li>
    <li>See full diff in <a href="https://github.com/actions/checkout/compare/v2...v3">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/checkout&package-manager=github_actions&previous-version=2&new-version=3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit a88a59c9e1901ab091f09b88491170a587ab7a73[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Mar 8 00:46:06 2022 +0000

    Bump actions/upload-artifact from 1 to 3 (#4135)
    
    Bumps [actions/upload-artifact](https://github.com/actions/upload-artifact) from 1 to 3.
    <details>
    <summary>Release notes</summary>
    <p><em>Sourced from <a href="https://github.com/actions/upload-artifact/releases">actions/upload-artifact's releases</a>.</em></p>
    <blockquote>
    <h2>v3.0.0</h2>
    <h2>What's Changed</h2>
    <ul>
    <li>Update default runtime to node16 (<a href="https://github-redirect.dependabot.com/actions/upload-artifact/issues/293">#293</a>)</li>
    <li>Update package-lock.json file version to 2 (<a href="https://github-redirect.dependabot.com/actions/upload-artifact/issues/302">#302</a>)</li>
    </ul>
    <h3>Breaking Changes</h3>
    <p>With the update to Node 16, all scripts will now be run with Node 16 rather than Node 12.</p>
    <h2>v2.3.1</h2>
    <p>Fix for empty fails on Windows failing on upload <a href="https://github-redirect.dependabot.com/actions/upload-artifact/issues/281">#281</a></p>
    <h2>v2.3.0 Upload Artifact</h2>
    <ul>
    <li>Optimizations for faster uploads of larger files that are already compressed</li>
    <li>Significantly improved logging when there are chunked uploads</li>
    <li>Clarifications in logs around the upload size and prohibited characters that aren't allowed in the artifact name or any uploaded files</li>
    <li>Various other small bugfixes &amp; optimizations</li>
    </ul>
    <h2>v2.2.4</h2>
    <ul>
    <li>Retry on HTTP 500 responses from the service</li>
    </ul>
    <h2>v2.2.3</h2>
    <ul>
    <li>Fixes for proxy related issues</li>
    </ul>
    <h2>v2.2.2</h2>
    <ul>
    <li>Improved retryability and error handling</li>
    </ul>
    <h2>v2.2.1</h2>
    <ul>
    <li>Update used actions/core package to the latest version</li>
    </ul>
    <h2>v2.2.0</h2>
    <ul>
    <li>Support for artifact retention</li>
    </ul>
    <h2>v2.1.4</h2>
    <ul>
    <li>Add Third Party License Information</li>
    </ul>
    <h2>v2.1.3</h2>
    <ul>
    <li>Use updated version of the <code>@action/artifact</code> NPM package</li>
    </ul>
    <h2>v2.1.2</h2>
    <ul>
    <li>Increase upload chunk size from 4MB to 8MB</li>
    <li>Detect case insensitive file uploads</li>
    </ul>
    <h2>v2.1.1</h2>
    <ul>
    <li>Fix for certain symlinks not correctly being identified as directories before starting uploads</li>
    </ul>
    <h2>v2.1.0</h2>
    <ul>
    <li>Support for uploading artifacts with multiple paths</li>
    <li>Support for using exclude paths</li>
    <li>Updates to dependencies</li>
    </ul>
    <!-- raw HTML omitted -->
    </blockquote>
    <p>... (truncated)</p>
    </details>
    <details>
    <summary>Commits</summary>
    <ul>
    <li><a href="https://github.com/actions/upload-artifact/commit/6673cd052c4cd6fcf4b4e6e60ea986c889389535"><code>6673cd0</code></a> Update <code>lockfileVersion</code> in <code>package-lock.json</code> (<a href="https://github-redirect.dependabot.com/actions/upload-artifact/issues/302">#302</a>)</li>
    <li><a href="https://github.com/actions/upload-artifact/commit/2244c8200304ec9588bf9399eac622d9fadc28c4"><code>2244c82</code></a> Update to node16 (<a href="https://github-redirect.dependabot.com/actions/upload-artifact/issues/293">#293</a>)</li>
    <li><a href="https://github.com/actions/upload-artifact/commit/87348cee5fefa95e42e9b4804b4d68e130304158"><code>87348ce</code></a> Add 503 warning when uploading to the same artifact</li>
    <li><a href="https://github.com/actions/upload-artifact/commit/82c141cc518b40d92cc801eee768e7aafc9c2fa2"><code>82c141c</code></a> Bump <code>@âactions/artifact</code> to version 0.6.1 (<a href="https://github-redirect.dependabot.com/actions/upload-artifact/issues/286">#286</a>)</li>
    <li><a href="https://github.com/actions/upload-artifact/commit/da838ae9595ac94171fa2d4de5a2f117b3e7ac32"><code>da838ae</code></a> Bump <code>@âactions/artifact</code> to version 0.6.0 (<a href="https://github-redirect.dependabot.com/actions/upload-artifact/issues/280">#280</a>)</li>
    <li><a href="https://github.com/actions/upload-artifact/commit/f4ac36d2052d09212226799b513ca60c91a09bfc"><code>f4ac36d</code></a> Improve readme (<a href="https://github-redirect.dependabot.com/actions/upload-artifact/issues/278">#278</a>)</li>
    <li><a href="https://github.com/actions/upload-artifact/commit/5f375cca4b67e6d6865358725f7b3016adc11dd4"><code>5f375cc</code></a> Document how to correctly use environment variables for path input (<a href="https://github-redirect.dependabot.com/actions/upload-artifact/issues/274">#274</a>)</li>
    <li><a href="https://github.com/actions/upload-artifact/commit/a009a665852a6c3bc5ab565a11a018832fe15091"><code>a009a66</code></a> Create release-new-action-version.yml (<a href="https://github-redirect.dependabot.com/actions/upload-artifact/issues/277">#277</a>)</li>
    <li><a href="https://github.com/actions/upload-artifact/commit/b9bb65708e7331a369b0937a0897fb742d432b56"><code>b9bb657</code></a> Bump tmpl from 1.0.4 to 1.0.5 (<a href="https://github-redirect.dependabot.com/actions/upload-artifact/issues/250">#250</a>)</li>
    <li><a href="https://github.com/actions/upload-artifact/commit/0b3de3e43bf7f3b625fa089190db4b56f80bb1d1"><code>0b3de3e</code></a> Fix <code>README.md</code> links and some formatting updates (<a href="https://github-redirect.dependabot.com/actions/upload-artifact/issues/273">#273</a>)</li>
    <li>Additional commits viewable in <a href="https://github.com/actions/upload-artifact/compare/v1...v3">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/upload-artifact&package-manager=github_actions&previous-version=1&new-version=3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit ce871d16fa1b83482f46492e10a213e8df36e350[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Mar 8 00:46:05 2022 +0000

    Bump actions/labeler from 3 to 4 (#4134)
    
    Bumps [actions/labeler](https://github.com/actions/labeler) from 3 to 4.
    <details>
    <summary>Release notes</summary>
    <p><em>Sourced from <a href="https://github.com/actions/labeler/releases">actions/labeler's releases</a>.</em></p>
    <blockquote>
    <h2>v4.0.0</h2>
    <ul>
    <li><a href="https://github-redirect.dependabot.com/actions/labeler/pull/319"> Update to node 16 runtime</a></li>
    </ul>
    <h2>v3.1.0</h2>
    <p>Dependency upgrades, docs updates, and behind-the-scenes maintenance.</p>
    <p>See the full list of changes since 3.0.2 here: <a href="https://github.com/actions/labeler/compare/v3.0.2...v3.1.0">https://github.com/actions/labeler/compare/v3.0.2...v3.1.0</a></p>
    <p>Thanks to <a href="https://github.com/GisoBartels"><code>@âGisoBartels</code></a> and <a href="https://github.com/Muhammed-Rahif"><code>@âMuhammed-Rahif</code></a> for their contributions!</p>
    <h2>v3.0.2</h2>
    <p>No API changes, but lots of behind-the-scenes upgrades, mostly to internal dependencies, tooling, and surrounding infrastructure.</p>
    <h2>v3.0.1</h2>
    <p>No user-facing changes.</p>
    <p>That said, there were more than enough behind-the-scenes changes to warrant a new release: <a href="https://github.com/actions/labeler/compare/v3.0.0...v3.0.1">https://github.com/actions/labeler/compare/v3.0.0...v3.0.1</a></p>
    </blockquote>
    </details>
    <details>
    <summary>Commits</summary>
    <ul>
    <li><a href="https://github.com/actions/labeler/commit/9fd24f1f9d6ceb64ba34d181b329ee72f99978a0"><code>9fd24f1</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/actions/labeler/issues/334">#334</a> from actions/thboop/updatetov4</li>
    <li><a href="https://github.com/actions/labeler/commit/abae52fa24965b9661a9e5373a1e3c01b61aafac"><code>abae52f</code></a> Update to new v4 release</li>
    <li><a href="https://github.com/actions/labeler/commit/e1132f5ed516839cc28f34344afe002ec7459e2b"><code>e1132f5</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/actions/labeler/issues/319">#319</a> from actions/thboop/node16update</li>
    <li><a href="https://github.com/actions/labeler/commit/b0cc574b251761587383a97da71a63ee7eeca099"><code>b0cc574</code></a> Update build_test.yml</li>
    <li><a href="https://github.com/actions/labeler/commit/c48e531900c0329e56a5b5dde78302064c0fbab0"><code>c48e531</code></a> Update default runtime to node16</li>
    <li>See full diff in <a href="https://github.com/actions/labeler/compare/v3...v4">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/labeler&package-manager=github_actions&previous-version=3&new-version=4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit b3aff9a7b150fcadeab6592bd6ac7ec9afcbbc96[m
Author: Aevyrie <aevyrie@gmail.com>
Date:   Tue Mar 8 00:46:04 2022 +0000

    Add docs and common helper functions to `Windows` (#4107)
    
    # Objective
    
    - Improve documentation.
    - Provide helper functions for common uses of `Windows` relating to getting the primary `Window`.
    - Reduce repeated `Window` code.
    
    # Solution
    
    - Adds infallible `primary()` and `primary_mut()` functions with standard error text. This replaces the commonly used `get_primary().unwrap()` seen throughout bevy which has inconsistent or nonexistent error messages.
    - Adds `scale_factor(WindowId)` to replace repeated code blocks throughout.
    
    # Considerations
    
    - The added functions can panic if the primary window does not exist.
        - It is very uncommon for the primary window to not exist, as seen by the regular use of `get_primary().unwrap()`. Most users will have a single window and will need to reference the primary window in their code multiple times.
        - The panic provides a consistent error message to make this class of error easy to spot from the panic text.
        - This follows the established standard of short names for infallible-but-unlikely-to-panic functions in bevy.
    - Removes line noise for common usage of `Windows`.

[33mcommit e36c9b6cf0f85f0fc6004eafbc40f7c12ba7d642[m
Author: Alix Bott <bott.alix@gmail.com>
Date:   Tue Mar 8 00:46:03 2022 +0000

    Add conversions from Color to u32 (#4088)
    
    # Objective
    
    - `Mesh::ATTRIBUTE_COLOR` expects colors as `u32`s but there is no function for easy conversion.
    - See https://github.com/bevyengine/bevy/pull/4037#pullrequestreview-894448677
    
    ## Solution
    
    - Added `Color::as_rgba_u32` and `Color::as_linear_rgba_u32`

[33mcommit e3a3b5b9c2583f67bcb926e23f3f9c6a9636f220[m
Author: josh65536 <josh4820@gmail.com>
Date:   Tue Mar 8 00:30:41 2022 +0000

    Fixed the frustum-sphere collision and added tests (#4035)
    
    # Objective
    
    Fixes #3744
    
    ## Solution
    
    The old code used the formula `normal . center + d + radius <= 0` to determine if the sphere with center `center` and radius `radius` is outside the plane with normal `normal` and distance from origin `d`. This only works if `normal` is normalized, which is not necessarily the case. Instead, `normal` and `d` are both multiplied by some factor that `radius` isn't multiplied by. So the additional code multiplied `radius` by that factor.

[33mcommit c05ba23703d9edbbc0177a64be57c5e5de9a6274[m
Author: Christian Hughes <xdotdash@gmail.com>
Date:   Tue Mar 8 00:14:21 2022 +0000

    Add Reflect support for DMat3, DMat4, DQuat (#4128)
    
    ## Objective
    
    A step towards `f64` `Transform`s (#1680). For now, I am rolling my own `Transform`. But in order to derive Reflect, I specifically need `DQuat` to be reflectable.
    
    ```rust
    #[derive(Component, Reflect, Copy, Clone, PartialEq, Debug)]
    #[reflect(Component, PartialEq)]
    pub struct Transform {
        pub translation: DVec3,
        pub rotation: DQuat, // error: the trait `bevy::prelude::Reflect` is not implemented for `DQuat`
        pub scale: DVec3,
    }
    ```
    
    ## Solution
    
    I have added a `DQuat` impl for `Reflect` alongside the other glam impls. I've also added impls for `DMat3` and `DMat4` to match.

[33mcommit 2d674e7c3e75c36995e7e291b173af9821b53ff6[m
Author: Aevyrie <aevyrie@gmail.com>
Date:   Mon Mar 7 23:32:05 2022 +0000

    Reduce power usage with configurable event loop (#3974)
    
    # Objective
    
    - Reduce power usage for games when not focused.
    - Reduce power usage to ~0 when a desktop application is minimized (opt-in).
    - Reduce power usage when focused, only updating on a `winit` event, or the user sends a redraw request. (opt-in)
    
    https://user-images.githubusercontent.com/2632925/156904387-ec47d7de-7f06-4c6f-8aaf-1e952c1153a2.mp4
    
    Note resource usage in the Task Manager in the above video.
    
    ## Solution
    
    - Added a type `UpdateMode` that allows users to specify how the winit event loop is updated, without exposing winit types.
    - Added two fields to `WinitConfig`, both with the `UpdateMode` type. One configures how the application updates when focused, and the other configures how the application behaves when it is not focused. Users can modify this resource manually to set the type of event loop control flow they want.
    - For convenience, two functions were added to `WinitConfig`, that provide reasonable presets: `game()` (default) and `desktop_app()`.
        - The `game()` preset, which is used by default, is unchanged from current behavior with one exception: when the app is out of focus the app updates at a minimum of 10fps, or every time a winit event is received. This has a huge positive impact on power use and responsiveness on my machine, which will otherwise continue running the app at many hundreds of fps when out of focus or minimized.
        - The `desktop_app()` preset is fully reactive, only updating when user input (winit event) is supplied or a `RedrawRequest` event is sent. When the app is out of focus, it only updates on `Window` events - i.e. any winit event that directly interacts with the window. What this means in practice is that the app uses *zero* resources when minimized or not interacted with, but still updates fluidly when the app is out of focus and the user mouses over the application.
    - Added a `RedrawRequest` event so users can force an update even if there are no events. This is useful in an application when you want to, say, run an animation even when the user isn't providing input.
    - Added an example `low_power` to demonstrate these changes
    
    ## Usage
    
    Configuring the event loop:
    ```rs
    use bevy::winit::{WinitConfig};
    // ...
    .insert_resource(WinitConfig::desktop_app()) // preset
    // or
    .insert_resource(WinitConfig::game()) // preset
    // or
    .insert_resource(WinitConfig{ .. }) // manual
    ```
    
    Requesting a redraw:
    ```rs
    use bevy::window::RequestRedraw;
    // ...
    fn request_redraw(mut event: EventWriter<RequestRedraw>) {
        event.send(RequestRedraw);
    }
    ```
    
    ## Other details
    
    - Because we have a single event loop for multiple windows, every time I've mentioned "focused" above, I more precisely mean, "if at least one bevy window is focused".
    - Due to a platform bug in winit (https://github.com/rust-windowing/winit/issues/1619), we can't simply use `Window::request_redraw()`. As a workaround, this PR will temporarily set the window mode to `Poll` when a redraw is requested. This is then reset to the user's `WinitConfig` setting on the next frame.

[33mcommit cba9bcc7ba8c7b5b41491e79b30939c9d2f4889f[m
Author: dataphract <dataphract@gmail.com>
Date:   Mon Mar 7 09:09:24 2022 +0000

    improve error messages for render graph runner (#3930)
    
    # Objective
    
    Currently, errors in the render graph runner are exposed via a `Result::unwrap()` panic message, which dumps the debug representation of the error.
    
    ## Solution
    
    This PR updates `render_system` to log the chain of errors, followed by an explicit panic:
    
    ```
    ERROR bevy_render::renderer: Error running render graph:
    ERROR bevy_render::renderer: > encountered an error when running a sub-graph
    ERROR bevy_render::renderer: > tried to pass inputs to sub-graph "outline_graph", which has no input slots
    thread 'main' panicked at 'Error running render graph: encountered an error when running a sub-graph', /[redacted]/bevy/crates/bevy_render/src/renderer/mod.rs:44:9
    ```
    
    Some errors' `Display` impls (via `thiserror`) have also been updated to provide more detail about the cause of the error.

[33mcommit 159fe527a85ab2137b456af2c9efdc6f49544f94[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Mar 5 22:59:54 2022 +0000

    Slow down the many_cubes example (#4117)
    
    # Objective
    
    - After #4015, the `many_cubes` example could introduce discomfort in some cases
    
    ## Solution
    
    - Slow down the camera, add space between the cubes
    
    https://user-images.githubusercontent.com/8672791/156898412-0fcd29b4-63b1-4e11-bf52-7ec40cb8f932.mp4

[33mcommit cf46baa1723e78a6feb2956200666a22496f604b[m
Author: Harry Barber <harrybarber@protonmail.com>
Date:   Sat Mar 5 21:53:17 2022 +0000

    Add clear_schedule (#3941)
    
    # Objective
    
    Adds `clear_schedule` method to `State`.
    
    Closes #3932

[33mcommit baae97d002e6c84be9a656b8ab7405d234b15fb2[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Mar 5 21:25:30 2022 +0000

    `iter_mut` on Assets: send modified event only when asset is iterated over (#3565)
    
    # Objective
    
    - `Assets<T>::iter_mut` sends `Modified` event for all assets first, then returns the iterator
    - This means that events could be sent for assets that would not have been mutated if iteration was stopped before
    
    ## Solution
    
    - Send `Modified` event when assets are iterated over.
    
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit 6c95b582a5dcf9471b18319e9cc02dc5e3c1f7fe[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Mar 5 13:23:04 2022 +0000

    Make many_cubes example more interesting (#4015)
    
    # Objective
    
    - Make the many_cubes example more interesting (and look more like many_sprites)
    
    ## Solution
    
    - Actually display many cubes
    - Move the camera around

[33mcommit 0eec2ea0d69a49f6ab689723a171dc9796411df9[m
Author: Reinis <35471680+reinismu@users.noreply.github.com>
Date:   Sat Mar 5 03:53:34 2022 +0000

    Slight changes from the book (#4077)
    
    Not sure if this is the new format, but quickly looking I couldn't wind a easy way to update it in the book
    
    # Objective
    
    * For sample project to compile after first pages of book
    
    got:
    
    ```
      = note: clang: error: invalid linker name in argument '-fuse-ld=/usr/local/bin/zld'
    
    
    error: linking with `cc` failed: exit status: 1
    ```
    
    ## Solution
    
    FIx to correct zld path

[33mcommit 1d5145fd64679544ea730565860d8e8e589322a5[m
Author: Robert Bragg <robert@sixbynine.org>
Date:   Sat Mar 5 03:37:23 2022 +0000

    StandardMaterial: expose a cull_mode option (#3982)
    
    This makes it possible for materials to configure front or
    back face culling, or disable culling.
    
    Initially I looked at specializing the Mesh which currently
    controls this state but conceptually it seems more appropriate
    to control this at the material level, not the mesh level.
    
    _Just for reference this also seems to be consistent with Unity
    where materials/shaders can configure the culling mode between
    front/back/off - as opposed to configuring any culling state
    when importing a mesh._
    
    After some archaeology, trying to understand how this might
    relate to the existing 'double_sided' option, it was determined
    that double_sided is a more high level lighting option originally
    from Filament that will cause the normals for back faces to be
    flipped.
    
    For sake of avoiding complexity, but keeping control this
    currently keeps the options orthogonal, and adds some clarifying
    documentation for `double_sided`. This won't affect any existing
    apps since there hasn't been a way to disable backface culling
    up until now, so the option was essentially redundant.
    
    double_sided support could potentially be updated to imply
    disabling of backface culling.
    
    For reference https://github.com/bevyengine/bevy/pull/3734/commits also looks at exposing cull mode control. I think the main difference here is that this patch handles RenderPipelineDescriptor specialization directly within the StandardMaterial implementation instead of communicating info back to the Mesh via the `queue_material_meshes` system.
    
    With the way material.rs builds up the final RenderPipelineDescriptor first by calling specialize for the MeshPipeline followed by specialize for the material then it seems like we have a natural place to override anything in the descriptor that's first configured for the mesh state.

[33mcommit 575ea81d7bb61a7f3f62678d4ba48bcacb63ccef[m
Author: robtfm <50659922+robtfm@users.noreply.github.com>
Date:   Sat Mar 5 03:23:01 2022 +0000

    add Visibility for lights (#3958)
    
    # Objective
    
    Add Visibility for lights
    
    ## Solution
    
    - add Visibility to PointLightBundle and DirectionLightBundle
    - filter lights used by Visibility.is_visible
    
    note: includes changes from #3916 due to overlap, will be cleaner after that is merged

[33mcommit 72bb38cad5dcd69c898e4d95bd360e849ba7c92e[m
Author: Mika <blaind@blaind.net>
Date:   Sat Mar 5 03:00:31 2022 +0000

    Example of module-level log usage and RUST_LOG usage in main doc (#3919)
    
    # Objective
    
    When developing plugins, I very often come up to the need to have logging information printed out. The exact syntax is a bit cryptic, and takes some time to find the documentation.
    
    Also a minor typo fix in `It has the same syntax as` part
    
    ## Solution
    
    Adding a direct example in the module level information for both:
    
    1. Enabling a specific level (`trace` in the example) for a module and all its subsystems at App init
    2. Doing the same from console, when launching the application

[33mcommit b6a647cc013861b182be5f4c85b60b2709388210[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Mar 1 20:52:09 2022 +0000

    default() shorthand (#4071)
    
    Adds a `default()` shorthand for `Default::default()` ... because life is too short to constantly type `Default::default()`.
    
    ```rust
    use bevy::prelude::*;
    
    #[derive(Default)]
    struct Foo {
      bar: usize,
      baz: usize,
    }
    
    // Normally you would do this:
    let foo = Foo {
      bar: 10,
      ..Default::default()
    };
    
    // But now you can do this:
    let foo = Foo {
      bar: 10,
      ..default()
    };
    ```
    
    The examples have been adapted to use `..default()`. I've left internal crates as-is for now because they don't pull in the bevy prelude, and the ergonomics of each case should be considered individually.

[33mcommit caf6611c62fddf1477e74a5cbe7c3e757446fbba[m
Author: pubrrr <pubr@posteo.de>
Date:   Tue Mar 1 19:33:56 2022 +0000

    remove Events from bevy_app, they now live in bevy_ecs (#4066)
    
    # Objective
    
    Fixes #4064.
    
    ## Solution
    
    - remove Events from bevy_app

[33mcommit 3f6068da3db8038ab69706a40ba714cfd836238d[m
Author: robtfm <50659922+robtfm@users.noreply.github.com>
Date:   Tue Mar 1 10:17:41 2022 +0000

    fix issues with too many point lights (#3916)
    
    # Objective
    
    fix #3915
    
    ## Solution
    
    the issues are caused by
    - lights are assigned to clusters before being filtered down to MAX_POINT_LIGHTS, leading to cluster counts potentially being too high
    - after fixing the above, packing the count into 8 bits still causes overflow with exactly 256 lights affecting a cluster
    
    to fix:
    
    ```assign_lights_to_clusters```
    - limit extracted lights to MAX_POINT_LIGHTS, selecting based on shadow-caster & intensity (if required)
    - warn if MAX_POINT_LIGHT count is exceeded
    
    ```prepare_lights```
    - limit the lights assigned to a cluster to CLUSTER_COUNT_MASK (which is 1 less than MAX_POINT_LIGHTS) to avoid overflowing into the offset bits
    
    notes:
    - a better solution to the overflow may be to use more than 8 bits for cluster_count (the comment states only 14 of the remaining 24 bits are used for the offset). this would touch more of the code base but i'm happy to try if it has some benefit.
    - intensity is only one way to select lights. it may be worth allowing user configuration of the light filtering, but i can't see a clean way to do that

[33mcommit b21c69c60ea821be57053ce38bca0b25de0df493[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Mar 1 01:12:11 2022 +0000

    Audio control - play, pause, volume, speed, loop (#3948)
    
    # Objective
    
    - Add ways to control how audio is played
    
    ## Solution
    
    - playing a sound will return a (weak) handle to an asset that can be used to control playback
    - if the asset is dropped, it will detach the sink (same behaviour as now)

[33mcommit 1ba9818a7843cfff7a44d14178268b86d7200834[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Tue Mar 1 00:51:07 2022 +0000

    Significantly reduce the amount of building required for benchmarks (#4067)
    
    # Objective
    
    - Release mode. Many time
    
    ## Solution
    
    - Less things, less time

[33mcommit 3ffa655cdd3786119ffe42b1c4bae8ebd165eeb5[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Mon Feb 28 22:55:14 2022 +0000

    examples: add screenspace texture shader example (#4063)
    
    Adds a new shader example showing how to sample a texture with screenspace coordinates, similar to the end [portal in minecraft](https://bugs.mojang.com/secure/attachment/163759/portal_frame_112.gif).
    
    https://user-images.githubusercontent.com/22177966/156031195-33d14ed8-733f-4d9e-b1da-0fc807c994a5.mp4
    
    I just used the already existent `models/FlightHelmet/FlightHelmet_Materials_LensesMat_OcclusionRoughMetal.png` texture but maybe we should use a dedicated texture for the example. Suggestions welcome.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 258f49535278a524ed8e6d82fd1721703fb26287[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Feb 28 22:27:20 2022 +0000

    log spans on panic when trace is enabled (#3848)
    
    # Objective
    
    - Help debug panics
    
    ## Solution
    
    - Insert a custom panic hook when trace is enabled that will log spans
    
    example when running a command on a despawned entity
    
    before:
    ```
    thread 'main' panicked at 'Could not add a component (of type `panic::Marker`) to entity 1v0 because it doesn't exist in this World.
    If this command was added to a newly spawned entity, ensure that you have not despawned that entity within the same stage.
    This may have occurred due to system order ambiguity, or if the spawning system has multiple command buffers', /bevy/crates/bevy_ecs/src/system/commands/mod.rs:664:13
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
    ```
    
    
    after:
    ```
       0: bevy_ecs::schedule::stage::system_commands
               with name="panic::my_bad_system"
                 at crates/bevy_ecs/src/schedule/stage.rs:871
       1: bevy_ecs::schedule::stage
               with name=Update
                 at crates/bevy_ecs/src/schedule/mod.rs:340
       2: bevy_app::app::frame
                 at crates/bevy_app/src/app.rs:111
       3: bevy_app::app::bevy_app
                 at crates/bevy_app/src/app.rs:126
    thread 'main' panicked at 'Could not add a component (of type `panic::Marker`) to entity 1v0 because it doesn't exist in this World.
    If this command was added to a newly spawned entity, ensure that you have not despawned that entity within the same stage.
    This may have occurred due to system order ambiguity, or if the spawning system has multiple command buffers', /bevy/crates/bevy_ecs/src/system/commands/mod.rs:664:13
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
    ```

[33mcommit 786654307d4142cfd19fd385b004f75420e024aa[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Mon Feb 28 22:02:06 2022 +0000

    bevy_pbr: Optimize assign_lights_to_clusters (#3984)
    
    # Objective
    
    - Optimize assign_lights_to_clusters
    
    ## Solution
    
    - Avoid inserting entities into hash sets in inner loops when it is known they will be inserted in at least one iteration of the loop.
    - Use a Vec instead of a hash set where the set is not needed
    - Avoid explicit calculation of the cluster_index from x,y,z coordinates, instead using row and column offsets and just adding z in the inner loop
    - These changes cut the time spent in the system roughly in half

[33mcommit 40b36927f51e2b12a6810b069acb3b7ab73c3dca[m
Author: Kurt KÃ¼hnert <kurt@kuehnert.dev>
Date:   Mon Feb 28 10:26:49 2022 +0000

    Expose draw indirect (#4056)
    
    # Objective
    
    - Currently there is now way of making an indirect draw call from a tracked render pass.
    - This is a very useful feature for GPU based rendering.
    
    ## Solution
    
    - Expose the `draw_indirect` and `draw_indexed_indirect` methods from the wgpu `RenderPass` in the `TrackedRenderPass`.
    
    ## Alternative
    
    - #3595: Expose the underlying `RenderPass` directly

[33mcommit 461cf536b1a2c777f00f759b74a733029f925e6f[m
Author: Alex Saveau <saveau.alexandre@gmail.com>
Date:   Mon Feb 28 01:27:38 2022 +0000

    Slight perf improvements and tidy for bevymark (#3765)
    
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 557ab9897ae7d59782a7eed0ac2e2aff4c532205[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Sun Feb 27 22:37:18 2022 +0000

    Make get_resource (and friends) infallible (#4047)
    
    # Objective
    
    - In the large majority of cases, users were calling `.unwrap()` immediately after `.get_resource`.
    - Attempting to add more helpful error messages here resulted in endless manual boilerplate (see #3899 and the linked PRs).
    
    ## Solution
    
    - Add an infallible variant named `.resource` and so on.
    - Use these infallible variants over `.get_resource().unwrap()` across the code base.
    
    ## Notes
    
    I did not provide equivalent methods on `WorldCell`, in favor of removing it entirely in #3939.
    
    ## Migration Guide
    
    Infallible variants of `.get_resource` have been added that implicitly panic, rather than needing to be unwrapped.
    
    Replace `world.get_resource::<Foo>().unwrap()` with `world.resource::<Foo>()`.
    
    ## Impact
    
    - `.unwrap` search results before: 1084
    - `.unwrap` search results after: 942
    - internal `unwrap_or_else` calls added: 4
    - trivial unwrap calls removed from tests and code: 146
    - uses of the new `try_get_resource` API: 11
    - percentage of the time the unwrapping API was used internally: 93%

[33mcommit 44bf66e436086bc9382ebdea4ad6c86c6463a75a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Feb 27 02:09:42 2022 +0000

    Minor Dark/Light Logo Tweak (#4051)
    
    One more very minor tweak to the dark/light logo to make it render nicely on light themes (by using pure white for the outlines).

[33mcommit 371c90f6faecf318ff66e3c6efa6f9f48781f63f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Feb 27 01:38:17 2022 +0000

    Minor Bevy Logo Tweaks (#4050)
    
    @BlackPhlox kindly pointed out and resolved a couple of inconsistencies in the bevy logo:
    * The arc of the first bird's back had three vertices right next to each other, which created a noticeable sharp edge. This replaces them with a single vertex.
    * The bottom part of the tail had a sharp edge, which was inconsistent with the top part of the tail. This was rounded out to mirror the top part.
    
    I also took the chance to clean up some of the variants and (hopefully) improve the "bevy_logo_light_dark_and_dimmed" variant to improve how it renders on dark themes.

[33mcommit b697e73c3d861c209152ccfb140ae00fbc6e9925[m
Author: Jupp56 <nick.gruessner@outlook.de>
Date:   Fri Feb 25 23:57:01 2022 +0000

    Enhanced par_for_each and par_for_each_mut docs (#4039)
    
    # Objective
    Continuation of  #2663 due to git problems - better documentation for Query::par_for_each and par_for_each_mut
    
    ## Solution
    Going into more detail about the function parameters

[33mcommit c4e88fe4b087da7ad3f966e0ff608ec2bd3433c7[m
Author: Oleg Bogdanov <boguscoder@users.noreply.github.com>
Date:   Fri Feb 25 15:54:03 2022 +0000

    Rename "2d rotation" example name to "rotation" (#3965)
    
    All other examples dont have "2d" prefix in their names (even though they are in 2d folder) and reading README makes user think that example is named "rotation" not "2d_rotation" hence rename PR
    
    # Objective
    
    - Remove discrepancy between example name in documentation and in cargo
    
    ## Solution
    
    - Rename example in cargo file

[33mcommit 1fa54c200fb5e4b50ee9d71ab4d16728405cac65[m
Author: MrGVSV <gino.valente.code@gmail.com>
Date:   Fri Feb 25 07:05:51 2022 +0000

    Updated visibility of reflected trait (#4034)
    
    # Objective
    
    The `#[reflect_trait]` macro did not maintain the visibility of its trait. It also did not make its accessor methods public, which made them inaccessible outside the current module.
    
    ## Solution
    
    Made the `Reflect***` struct match the visibility of its trait and made both the `get` and `get_mut` methods always public.

[33mcommit c1a4a2f6c50f1879b57be281af18399d8d17757b[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Fri Feb 25 03:10:59 2022 +0000

    Remove the config api (#3633)
    
    # Objective
    
    - Fix the ugliness of the `config` api.
    - Supercedes #2440, #2463, #2491
    
    ## Solution
    
    - Since #2398, capturing closure systems have worked.
    - Use those instead where we needed config before
    - Remove the rest of the config api.
    - Related: #2777

[33mcommit 519148275d7e1298b5085ef4fa68adfcd69fdaee[m
Author: Charles <c.giguere42@gmail.com>
Date:   Thu Feb 24 22:38:55 2022 +0000

    Rename rg3d to Fyrox in README (#4032)
    
    # Objective
    
     rg3d has been renamed to Fyrox for a little while now and we should reflect that. It's not particularly urgent since the old link redirects to Fyrox.
    
    ## Solution
    
    Rename rg3d to Fyrox in the README

[33mcommit 95bc99fd3723cf338c67c0035242e053fe10ccdb[m
Author: James Liu <contact@jamessliu.com>
Date:   Thu Feb 24 08:12:27 2022 +0000

    Implement Reflect for missing Vec* types (#4028)
    
    # Objective
    `Vec3A` is does not implement `Reflect`. This is generally useful for `Reflect` derives using `Vec3A` fields, and may speed up some animation blending use cases.
    
    ## Solution
    Extend the existing macro uses to include `Vec3A`.

[33mcommit a2d49f4a6978ee9ddb9f7b1bcaf614dd91fca928[m
Author: Aevyrie <aevyrie@gmail.com>
Date:   Thu Feb 24 01:40:02 2022 +0000

    Make `WinitWindows` non send (#4027)
    
    # Objective
    
    - Fixes #4010, as well as any similar issues in this class.
    - Winit functions used outside of the main thread can cause the application to unexpectedly hang.
    
    ## Solution
    
    - Make the `WinitWindows` resource `!Send`.
    - This ensures that any systems that use `WinitWindows` must either be exclusive (run on the main thread), or the resource is explicitly marked with the `NonSend` parameter in user systems.

[33mcommit 81d57e129b507047ab165b1cee1975cd54ba100f[m
Author: Dusty DeWeese <dustin.deweese@gmail.com>
Date:   Thu Feb 24 00:40:24 2022 +0000

    Add capability to render to a texture (#3412)
    
    # Objective
    
    Will fix #3377 and #3254
    
    ## Solution
    
    Use an enum to represent either a `WindowId` or `Handle<Image>` in place of `Camera::window`.
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit ba6b74ba2075d07049f36739192519674e35aa13[m
Author: Vladyslav Batyrenko <mvlabat@gmail.com>
Date:   Thu Feb 24 00:19:49 2022 +0000

    Implement `WorldQuery` derive macro (#2713)
    
    # Objective
    
    - Closes #786
    - Closes #2252
    - Closes #2588
    
    This PR implements a derive macro that allows users to define their queries as structs with named fields.
    
    ## Example
    
    ```rust
    #[derive(WorldQuery)]
    #[world_query(derive(Debug))]
    struct NumQuery<'w, T: Component, P: Component> {
        entity: Entity,
        u: UNumQuery<'w>,
        generic: GenericQuery<'w, T, P>,
    }
    
    #[derive(WorldQuery)]
    #[world_query(derive(Debug))]
    struct UNumQuery<'w> {
        u_16: &'w u16,
        u_32_opt: Option<&'w u32>,
    }
    
    #[derive(WorldQuery)]
    #[world_query(derive(Debug))]
    struct GenericQuery<'w, T: Component, P: Component> {
        generic: (&'w T, &'w P),
    }
    
    #[derive(WorldQuery)]
    #[world_query(filter)]
    struct NumQueryFilter<T: Component, P: Component> {
        _u_16: With<u16>,
        _u_32: With<u32>,
        _or: Or<(With<i16>, Changed<u16>, Added<u32>)>,
        _generic_tuple: (With<T>, With<P>),
        _without: Without<Option<u16>>,
        _tp: PhantomData<(T, P)>,
    }
    
    fn print_nums_readonly(query: Query<NumQuery<u64, i64>, NumQueryFilter<u64, i64>>) {
        for num in query.iter() {
            println!("{:#?}", num);
        }
    }
    
    #[derive(WorldQuery)]
    #[world_query(mutable, derive(Debug))]
    struct MutNumQuery<'w, T: Component, P: Component> {
        i_16: &'w mut i16,
        i_32_opt: Option<&'w mut i32>,
    }
    
    fn print_nums(mut query: Query<MutNumQuery, NumQueryFilter<u64, i64>>) {
        for num in query.iter_mut() {
            println!("{:#?}", num);
        }
    }
    ```
    
    ## TODOs:
    - [x] Add support for `&T` and `&mut T`
      - [x] Test
    - [x] Add support for optional types
      - [x] Test
    - [x] Add support for `Entity`
      - [x] Test
    - [x] Add support for nested `WorldQuery`
      - [x] Test
    - [x] Add support for tuples
      - [x] Test
    - [x] Add support for generics
      - [x] Test
    - [x] Add support for query filters
      - [x] Test
    - [x] Add support for `PhantomData`
      - [x] Test
    - [x] Refactor `read_world_query_field_type_info`
    - [x] Properly document `readonly` attribute for nested queries and the static assertions that guarantee safety
      - [x] Test that we never implement `ReadOnlyFetch` for types that need mutable access
      - [x] Test that we insert static assertions for nested `WorldQuery` that a user marked as readonly

[33mcommit e369a8ad5138af28a7e760fac3f07b278c27ebb4[m
Author: Carter Anderson <jay@kodewerx.org>
Date:   Wed Feb 23 23:21:13 2022 +0000

    Mesh vertex buffer layouts (#3959)
    
    This PR makes a number of changes to how meshes and vertex attributes are handled, which the goal of enabling easy and flexible custom vertex attributes:
    * Reworks the `Mesh` type to use the newly added `VertexAttribute` internally
      * `VertexAttribute` defines the name, a unique `VertexAttributeId`, and a `VertexFormat`
      *  `VertexAttributeId` is used to produce consistent sort orders for vertex buffer generation, replacing the more expensive and often surprising "name based sorting"
      * Meshes can be used to generate a `MeshVertexBufferLayout`, which defines the layout of the gpu buffer produced by the mesh. `MeshVertexBufferLayouts` can then be used to generate actual `VertexBufferLayouts` according to the requirements of a specific pipeline. This decoupling of "mesh layout" vs "pipeline vertex buffer layout" is what enables custom attributes. We don't need to standardize _mesh layouts_ or contort meshes to meet the needs of a specific pipeline. As long as the mesh has what the pipeline needs, it will work transparently.
    * Mesh-based pipelines now specialize on `&MeshVertexBufferLayout` via the new `SpecializedMeshPipeline` trait (which behaves like `SpecializedPipeline`, but adds `&MeshVertexBufferLayout`). The integrity of the pipeline cache is maintained because the `MeshVertexBufferLayout` is treated as part of the key (which is fully abstracted from implementers of the trait ... no need to add any additional info to the specialization key).
    * Hashing `MeshVertexBufferLayout` is too expensive to do for every entity, every frame. To make this scalable, I added a generalized "pre-hashing" solution to `bevy_utils`: `Hashed<T>` keys and `PreHashMap<K, V>` (which uses `Hashed<T>` internally) . Why didn't I just do the quick and dirty in-place "pre-compute hash and use that u64 as a key in a hashmap" that we've done in the past? Because its wrong! Hashes by themselves aren't enough because two different values can produce the same hash. Re-hashing a hash is even worse! I decided to build a generalized solution because this pattern has come up in the past and we've chosen to do the wrong thing. Now we can do the right thing! This did unfortunately require pulling in `hashbrown` and using that in `bevy_utils`, because avoiding re-hashes requires the `raw_entry_mut` api, which isn't stabilized yet (and may never be ... `entry_ref` has favor now, but also isn't available yet). If std's HashMap ever provides the tools we need, we can move back to that. Note that adding `hashbrown` doesn't increase our dependency count because it was already in our tree. I will probably break these changes out into their own PR.
    * Specializing on `MeshVertexBufferLayout` has one non-obvious behavior: it can produce identical pipelines for two different MeshVertexBufferLayouts. To optimize the number of active pipelines / reduce re-binds while drawing, I de-duplicate pipelines post-specialization using the final `VertexBufferLayout` as the key.  For example, consider a pipeline that needs the layout `(position, normal)` and is specialized using two meshes: `(position, normal, uv)` and `(position, normal, other_vec2)`. If both of these meshes result in `(position, normal)` specializations, we can use the same pipeline! Now we do. Cool!
    
    To briefly illustrate, this is what the relevant section of `MeshPipeline`'s specialization code looks like now:
    
    ```rust
    impl SpecializedMeshPipeline for MeshPipeline {
        type Key = MeshPipelineKey;
    
        fn specialize(
            &self,
            key: Self::Key,
            layout: &MeshVertexBufferLayout,
        ) -> RenderPipelineDescriptor {
            let mut vertex_attributes = vec![
                Mesh::ATTRIBUTE_POSITION.at_shader_location(0),
                Mesh::ATTRIBUTE_NORMAL.at_shader_location(1),
                Mesh::ATTRIBUTE_UV_0.at_shader_location(2),
            ];
    
            let mut shader_defs = Vec::new();
            if layout.contains(Mesh::ATTRIBUTE_TANGENT) {
                shader_defs.push(String::from("VERTEX_TANGENTS"));
                vertex_attributes.push(Mesh::ATTRIBUTE_TANGENT.at_shader_location(3));
            }
    
            let vertex_buffer_layout = layout
                .get_layout(&vertex_attributes)
                .expect("Mesh is missing a vertex attribute");
    ```
    
    Notice that this is _much_ simpler than it was before. And now any mesh with any layout can be used with this pipeline, provided it has vertex postions, normals, and uvs. We even got to remove `HAS_TANGENTS` from MeshPipelineKey and `has_tangents` from `GpuMesh`, because that information is redundant with `MeshVertexBufferLayout`.
    
    This is still a draft because I still need to:
    
    * Add more docs
    * Experiment with adding error handling to mesh pipeline specialization (which would print errors at runtime when a mesh is missing a vertex attribute required by a pipeline). If it doesn't tank perf, we'll keep it.
    * Consider breaking out the PreHash / hashbrown changes into a separate PR.
    * Add an example illustrating this change
    * Verify that the "mesh-specialized pipeline de-duplication code" works properly
    
    Please dont yell at me for not doing these things yet :) Just trying to get this in peoples' hands asap.
    
    Alternative to #3120
    Fixes #3030
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit b3a2cbbc98115dd90a10efdd9d603a0b67683031[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Feb 22 23:21:39 2022 +0000

    remove external_type_uuid macro (#4018)
    
    # Objective
    
    - Macro `external_type_uuid` seems unused
    - https://docs.rs/bevy/latest/bevy/reflect/macro.external_type_uuid.html
    
    ## Solution
    
    - Remove it and see if it was? There is a derive for the same trait that is used everywhere (`#[derive(TypeUuid)]`) and is a better api

[33mcommit e4203c39258a55ec3f598cce845e4dcdfcdd69bf[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Feb 22 20:21:04 2022 +0000

    shader preprocessor - do not import if scope is not valid (#4012)
    
    # Objective
    
    - fix #4011
    - imports are not limited by the current `ifdef` they are in
    
    ## Solution
    
    - process imports only if the current scope is enabled

[33mcommit 5afda8df6f04f8e7879464c8e9fe9873ab73f70e[m
Author: James Liu <contact@jamessliu.com>
Date:   Mon Feb 21 23:49:08 2022 +0000

    Fix all_tuples macro for non-0/1 starts (#4002)
    
    # Objective
    `all_tuples` panics when the start count is set to anything other than 0 or 1. Fix this bug.
    
    ## Solution
    Originally part of #2381, this PR fixes the slice indexing used by the proc macro.

[33mcommit fb8af3aec39065ed534a2e9a82393069adcafb08[m
Author: Patrik Buhring <patrikbuhring@gmail.com>
Date:   Mon Feb 21 23:49:07 2022 +0000

    Update Hexasphere to 7.0.0 (#4001)
    
    The new update includes wireframe generation capabilities.
    
    I didn't integrate that in this PR, however with some guidance, I'd be happy to do so.

[33mcommit b4bf5b5d872ad17ba7c81a8d4229887b609ce09f[m
Author: Kirillov Kirill <kirusfg@gmail.com>
Date:   Mon Feb 21 23:29:32 2022 +0000

    Fix glTF perspective camera projection (#4006)
    
    # Objective
    
    - Fixes #4005
    
    ## Solution
    
    - Include the `near` and `far` clipping values from the perspective projection in the `Camera` struct; before that, they were both being defaulted to 0.

[33mcommit 544b6dfb8662f589658445ac4c9387918e3e6c1a[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Sat Feb 19 22:12:13 2022 +0000

    Change default `ColorMaterial` color to white (#3981)
    
    # Context
    
    I wanted to add a `texture` to my `ColorMaterial` without explicitly adding a `color`. To do this I used `..Default::default()` which in turn gave me unexpected results. I was expecting that my texture would render without any color modifications, but to my surprise it got rendered in a purple tint (`Color::rgb(1.0, 0.0, 1.0)`). To fix this I had to explicitly define the `color` using `color: Color::WHITE`.
    
    ## What I wanted to use
    
    ```rust
    commands
        .spawn_bundle(MaterialMesh2dBundle {
            mesh: mesh_handle.clone().into(),
            transform: Transform::default().with_scale(Vec3::splat(8.)),
            material: materials.add(ColorMaterial {
                texture: Some(texture_handle.clone()),
                ..Default::default() // here
            }),
            ..Default::default()
        })
    ```
    
    ![image](https://user-images.githubusercontent.com/75334794/154765141-4a8161ce-4ec8-4687-b7d5-18ddf1b58660.png)
    
    ## What I had to use instead
    
    ```rust
    commands
        .spawn_bundle(MaterialMesh2dBundle {
            mesh: mesh_handle.clone().into(),
            transform: Transform::default().with_scale(Vec3::splat(8.)),
            material: materials.add(ColorMaterial {
                texture: Some(texture_handle.clone()),
                color: Color::WHITE, // here
            }),
            ..Default::default()
        })
    ```
    
    ![image](https://user-images.githubusercontent.com/75334794/154765225-f1508b41-9d5b-4f0c-af7b-e89c1a82d85b.png)

[33mcommit 98938a8555eb414ee5e9b023c45fe3b5f202edc8[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Feb 18 22:56:57 2022 +0000

    Internal Asset Hot Reloading (#3966)
    
    Adds "hot reloading" of internal assets, which is normally not possible because they are loaded using `include_str` / direct Asset collection access.
    
    This is accomplished via the following:
    * Add a new `debug_asset_server` feature flag
    * When that feature flag is enabled, create a second App with a second AssetServer that points to a configured location (by default the `crates` folder). Plugins that want to add hot reloading support for their assets can call the new `app.add_debug_asset::<T>()` and `app.init_debug_asset_loader::<T>()` functions.
    * Load "internal" assets using the new `load_internal_asset` macro. By default this is identical to the current "include_str + register in asset collection" approach. But if the `debug_asset_server` feature flag is enabled, it will also load the asset dynamically in the debug asset server using the file path. It will then set up a correlation between the "debug asset" and the "actual asset" by listening for asset change events.
    
    This is an alternative to #3673. The goal was to keep the boilerplate and features flags to a minimum for bevy plugin authors, and allow them to home their shaders near relevant code.
    
    This is a draft because I haven't done _any_ quality control on this yet. I'll probably rename things and remove a bunch of unwraps. I just got it working and wanted to use it to start a conversation.
    
    Fixes #3660

[33mcommit e9f52b9dd2b8c12799c95096f82ece78701f3709[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Feb 18 21:54:03 2022 +0000

    Move import_path definitions into shader source (#3976)
    
    This enables shaders to (optionally) define their import path inside their source. This has a number of benefits:
    
    1. enables users to define their own custom paths directly in their assets
    2. moves the import path "close" to the asset instead of centralized in the plugin definition, which seems "better" to me.
    3. makes "internal hot shader reloading" way more reasonable (see #3966)
    4. logically opens the door to importing "parts" of a shader by defining "import_path blocks".
    
    ```rust
    #define_import_path bevy_pbr::mesh_struct
    
    struct Mesh {
        model: mat4x4<f32>;
        inverse_transpose_model: mat4x4<f32>;
        // 'flags' is a bit field indicating various options. u32 is 32 bits so we have up to 32 options.
        flags: u32;
    };
    
    let MESH_FLAGS_SHADOW_RECEIVER_BIT: u32 = 1u;
    ```

[33mcommit b3a1db60f296b01d5da3369a5daca34ed97e92af[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Feb 18 03:26:01 2022 +0000

    Proper prehashing (#3963)
    
    For some keys, it is too expensive to hash them on every lookup. Historically in Bevy, we have regrettably done the "wrong" thing in these cases (pre-computing hashes, then re-hashing them) because Rust's built in hashed collections don't give us the tools we need to do otherwise. Doing this is "wrong" because two different values can result in the same hash. Hashed collections generally get around this by falling back to equality checks on hash collisions. You can't do that if the key _is_ the hash. Additionally, re-hashing a hash increase the odds of collision!
    
    #3959 needs pre-hashing to be viable, so I decided to finally properly solve the problem. The solution involves two different changes:
    
    1. A new generalized "pre-hashing" solution in bevy_utils: `Hashed<T>` types, which store a value alongside a pre-computed hash. And `PreHashMap<K, V>` (which uses `Hashed<T>` internally) . `PreHashMap` is just an alias for a normal HashMap that uses `Hashed<T>` as the key and a new `PassHash` implementation as the Hasher.
    2. Replacing the `std::collections` re-exports in `bevy_utils` with equivalent `hashbrown` impls. Avoiding re-hashes requires the `raw_entry_mut` api, which isn't stabilized yet (and may never be ... `entry_ref` has favor now, but also isn't available yet). If std's HashMap ever provides the tools we need, we can move back to that. The latest version of `hashbrown` adds support for the `entity_ref` api, so we can move to that in preparation for an std migration, if thats the direction they seem to be going in. Note that adding hashbrown doesn't increase our dependency count because it was already in our tree.
    
    In addition to providing these core tools, I also ported the "table identity hashing" in `bevy_ecs` to `raw_entry_mut`, which was a particularly egregious case.
    
    The biggest outstanding case is `AssetPathId`, which stores a pre-hash. We need AssetPathId to be cheaply clone-able (and ideally Copy), but `Hashed<AssetPath>` requires ownership of the AssetPath, which makes cloning ids way more expensive. We could consider doing `Hashed<Arc<AssetPath>>`, but cloning an arc is still a non-trivial expensive that needs to be considered. I would like to handle this in a separate PR. And given that we will be re-evaluating the Bevy Assets implementation in the very near future, I'd prefer to hold off until after that conversation is concluded.

[33mcommit c4f132afbfe5688afd13f9b05040dfdf98b65489[m
Author: Thomas Versteeg <thomas@versteeg.email>
Date:   Thu Feb 17 18:51:43 2022 +0000

    Fix call with features in docs/profiling.md (#3967)
    
    Features must be called with the crate, otherwise the following error is thrown:
    
    > error: none of the selected packages contains these features: trace_chrome

[33mcommit b0768a583db8ab10fac508cf8d78dec6b63b411d[m
Author: Marius Cobzarenco <marius@reinfer.io>
Date:   Wed Feb 16 22:57:15 2022 +0000

    Fix custom material glsl example using incorrect CameraViewProj (#3962)
    
    # Objective
    
    The `custom_material.vert` shader used by the `shader_material_glsl` example is missing a `mat4 View` in `CameraViewProj` (added in [#3885](https://github.com/bevyengine/bevy/pull/3885))
    
    ## Solution
    
    Update the definition of `CameraViewProj`

[33mcommit 936468aa1eb132b152279602c3a0a9e23dc272e9[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Wed Feb 16 21:17:37 2022 +0000

    bevy_render: Use RenderDevice to get limits/features and expose AdapterInfo (#3931)
    
    # Objective
    
    - `WgpuOptions` is mutated to be updated with the actual device limits and features, but this information is readily available to both the main and render worlds through the `RenderDevice` which has .limits() and .features() methods
    - Information about the adapter in terms of its name, the backend in use, etc were not being exposed but have clear use cases for being used to take decisions about what rendering code to use. For example, if something works well on AMD GPUs but poorly on Intel GPUs. Or perhaps something works well in Vulkan but poorly in DX12.
    
    ## Solution
    
    - Stop mutating `WgpuOptions `and don't insert the updated values into the main and render worlds
    - Return `AdapterInfo` from `initialize_renderer` and insert it into the main and render worlds
    - Use `RenderDevice` limits in the lighting code that was using `WgpuOptions.limits`.
    - Renamed `WgpuOptions` to `WgpuSettings`

[33mcommit d3e526bfc09c58ff5996e3b1e70e3310ded4f578[m
Author: Sliman4 <4sliman4@gmail.com>
Date:   Tue Feb 15 22:31:51 2022 +0000

    Add FocusPolicy to NodeBundle and ImageBundle (#3952)
    
    # Objective
    `FocusPolicy` allows tracking `Interaction` of a parent node when a player hovers/clicks at the child node, and I see no reason why it shouldn't exist in these 2 nodes.
    
    Resolves #2488
    
    ## Solution
    Add it!
    
    In the tracking system it's used as `Option`: https://github.com/bevyengine/bevy/blob/e749ee786c3a3ca11718b08f0545aa90e4b5aae6/crates/bevy_ui/src/focus.rs#L71 and then it treats it as `Block` if it's not present: https://github.com/bevyengine/bevy/blob/e749ee786c3a3ca11718b08f0545aa90e4b5aae6/crates/bevy_ui/src/focus.rs#L162 and the default value is https://github.com/bevyengine/bevy/blob/e749ee786c3a3ca11718b08f0545aa90e4b5aae6/crates/bevy_ui/src/focus.rs#L47-L51 so it should be compatible with all existing UIs that use `..Default::default()`

[33mcommit 5104397683c8430b93b411bff466413419e10cb5[m
Author: RedlineTriad <39059512+RedlineTriad@users.noreply.github.com>
Date:   Tue Feb 15 22:14:58 2022 +0000

    Alien cake addict: Allow holding movement keys (#2072)
    
    I wanted to try one of the new examples but it felt so clunky that I wanted to improve it.
    
    It did make me feel like maybe some input axes abstraction like Unity has might be useful.
    
    Also, eating cake should probably be a separate system from movement.

[33mcommit 330160cf14dcc29ecdeb0c7a5a1fceadadcd6473[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Tue Feb 15 21:53:52 2022 +0000

    SystemState usage docs (#3783)
    
    # Objective
    
    - `SystemStates` rock for dealing with exclusive world access, but are hard to figure out how to use.
    - Fixes #3341.
    
    ## Solution
    
    - Clearly document how to use `SystemState`, and why they're useful as an end-user.

[33mcommit d8974e7c3d84189313268f475ceeff9393cedffa[m
Author: danieleades <danieleades@hotmail.com>
Date:   Sun Feb 13 22:33:55 2022 +0000

    small and mostly pointless refactoring (#2934)
    
    What is says on the tin.
    
    This has got more to do with making `clippy` slightly more *quiet* than it does with changing anything that might greatly impact readability or performance.
    
    that said, deriving `Default` for a couple of structs is a nice easy win

[33mcommit 803e8cdf80ea481c7ffd127b7d6480b0ccc58830[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Sun Feb 13 04:24:52 2022 +0000

    bevy_render: Support overriding wgpu features and limits (#3912)
    
    # Objective
    
    - Support overriding wgpu features and limits that were calculated from default values or queried from the adapter/backend.
    - Fixes #3686
    
    ## Solution
    
    - Add `disabled_features: Option<wgpu::Features>` to `WgpuOptions`
    - Add `constrained_limits: Option<wgpu::Limits>` to `WgpuOptions`
    - After maybe obtaining updated features and limits from the adapter/backend in the case of `WgpuOptionsPriority::Functionality`, enable the `WgpuOptions` `features`, disable the `disabled_features`, and constrain the `limits` by `constrained_limits`.
      - Note that constraining the limits means for `wgpu::Limits` members named `max_.*` we take the minimum of that which was configured/queried for the backend/adapter and the specified constrained limit value. This means the configured/queried value is used if the constrained limit is larger as that is as much as the device/API supports, or the constrained limit value is used if it is smaller as we are imposing an artificial constraint. For members named `min_.*` we take the maximum instead. For example, a minimum stride might be 256 but we set constrained limit value of 1024, then 1024 is the more conservative value. If the constrained limit value were 16, then 256 would be the more conservative.

[33mcommit e749ee786c3a3ca11718b08f0545aa90e4b5aae6[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Feb 13 01:49:34 2022 +0000

    Fix ui interactions when cursor disappears suddenly (#3926)
    
    On platforms like wasm (on mobile) the cursor can disappear suddenly (ex: the user releases their finger from the screen). This causes the undesirable behavior in #3752. These changes make the UI handler properly handle this case.
    
    Fixes #3752
    Alternative to #3599

[33mcommit 5bb4201f2e0afd3962648c05221c8d401d8c583c[m
Author: dataphract <dataphract@gmail.com>
Date:   Sun Feb 13 00:14:37 2022 +0000

    add informative panic message when adding render commands to a DrawFunctions that does not exist (#3924)
    
    # Objective
    
    If a user attempts to `.add_render_command::<P, C>()` on a world that does not contain `DrawFunctions<P>`, the engine panics with a generic `Option::unwrap` message:
    
    ```
    thread 'main' panicked at 'called `Option::unwrap()` on a `None` value', /[redacted]/bevy/crates/bevy_render/src/render_phase/draw.rs:318:76
    ```
    
    ## Solution
    
    This PR adds a panic message describing the problem:
    
    ```
    thread 'main' panicked at 'DrawFunctions<outline::MeshStencil> must be added to the world as a resource before adding render commands to it', /[redacted]/bevy/crates/bevy_render/src/render_phase/draw.rs:322:17
    ```

[33mcommit d305e4f026b36c287df1d70cdbe7064ee70f3ff9[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Sat Feb 12 19:58:02 2022 +0000

    only use unique type UUIDs (#3579)
    
    Out of curiosity I ran `rg -F -I '#[uuid = "' | sort` to see if there were any duplicate UUIDs, and they were. Now there aren't any.

[33mcommit 62329f7fdaaea80747048276832e105aa4f0c624[m
Author: ShadowCurse <shadowcurse57@gmail.com>
Date:   Sat Feb 12 19:41:35 2022 +0000

    Useful error message when two assets have the save UUID (#3739)
    
    # Objective
    Fixes #2610 and #3731
    
    ## Solution
    
    Added check for TYPE_UUID duplication in  `register_asset_type` with an error message

[33mcommit 0ccb9dd07e8c2c1663ad80272706aa3d2aa53cfd[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Sat Feb 12 00:46:04 2022 +0000

    bevy_render: Fix Quad flip (#3741)
    
    # Objective
    
    The documentation was unclear but it seemed like it was intended to _only_ flip the texture coordinates of the quad. However, it was also swapping the vertex positions, which resulted in inverted winding order so the front became a back face, and the normal was pointing into the face instead of out of it.
    
    ## Solution
    
    - This change makes the only difference the UVs being horizontally flipped.

[33mcommit 647526835180cbb98c2bc8562c912f15b53d1723[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Sat Feb 12 00:22:10 2022 +0000

    Fix hardcoded texture bind group index in bevy_ui (#3905)
    
    # Objective
    
    While looking at #3896, I noticed the same error in the equivalent location in `bevy_ui`.
    
    ## Solution
    
    Fix it in the same way.

[33mcommit 9a7852db0f22eb41f259a1afbb4926eb73863a10[m
Author: devjobe <contact@devjobe.com>
Date:   Tue Feb 8 23:18:11 2022 +0000

    Fix SetSpriteTextureBindGroup to use index (#3896)
    
    # Objective
    
    Fix `SetSpriteTextureBindGroup` to use index instead of hard coded 1.
    Fixes #3895
    
    ## Solution
    
    1 -> I
    
    
    Co-authored-by: devjobe <git@devjobe.com>

[33mcommit bdbf626341a35582350711f87fa17dea4ec129f6[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Tue Feb 8 23:04:19 2022 +0000

    Implement init_resource for `Commands` and `World` (#3079)
    
    # Objective
    
    - Fixes #3078
    - Fixes #1397
    
    ## Solution
    
    - Implement Commands::init_resource.
    - Also implement for World, for consistency and to simplify internal structure.
    - While we're here, clean up some of the docs for Command and World resource modification.

[33mcommit 38f6da5a85a8037de5eb4ea8531902ea1269ede1[m
Author: B-Janson <bjanson28@gmail.com>
Date:   Tue Feb 8 16:24:46 2022 +0000

    Add generic systems example (#2636)
    
    # Objective
    My attempt at fixing #2142. My very first attempt at contributing to Bevy so more than open to any feedback.
    I borrowed heavily from the [Bevy Cheatbook page](https://bevy-cheatbook.github.io/patterns/generic-systems.html?highlight=generic#generic-systems).
    
    ## Solution
    Fairly straightforward example using a clean up system to delete entities that are coupled with app state after exiting that state.
    
    
    Co-authored-by: B-Janson <brandon@canva.com>

[33mcommit 56b0e88b5331a2df31b757ff91b5ef30853bb5c5[m
Author: Loch Wansbrough <lochie@live.com>
Date:   Tue Feb 8 04:14:34 2022 +0000

    Add view transform to view uniform (#3885)
    
    (cherry picked from commit de943381bd2a8b242c94db99e6c7bbd70006d7c3)
    
    # Objective
    
    The view uniform lacks view transform information. The inverse transform is currently provided but this is not sufficient if you do not have access to an `inverse` function (such as in WGSL).
    
    ## Solution
    
    Grab the view transform, put it in the view uniform, use the same matrix to compute the inverse as well.

[33mcommit 1e049a651b13021653c31ec5903212936d585241[m
Author: Ryo Hirayama <ryo12redstone@gmail.com>
Date:   Tue Feb 8 04:14:33 2022 +0000

    Fix type mismatch error with latest winit (#3883)
    
    # Objective
    
    When I use the latest winit with bevy main, I got this error.
    ```
    error[E0308]: mismatched types
       --> /Users/ryo/.cargo/git/checkouts/bevy-f7ffde730c324c74/b13f238/crates/bevy_winit/src/lib.rs:191:5
        |
    191 |     event_loop.run_return(event_handler)
        |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `i32`
        |
    help: consider using a semicolon here
        |
    191 |     event_loop.run_return(event_handler);
        |                                         +
    help: try adding a return type
        |
    187 | -> i32 where
        | ++++++
    ```
    
    In [this commit](https://github.com/rust-windowing/winit/commit/a52f755ce8dfffe53329163364908937c780057d), the signature of `run_return` was changed in winit.
    
    ## Solution
    
    This tiny PR does not add support for exit code, but makes compilation successful.

[33mcommit 6615b7bf6439c9bcaf59982b2713e1c1564bf0f5[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Tue Feb 8 04:00:58 2022 +0000

    Deprecate `.system` (#3302)
    
    # Objective
    
    - Using `.system()` is no longer idiomatic.
    
    ## Solution
    
    - Give a warning when using it

[33mcommit 2f11c9dca84902423d37c887f941e835dad66ff7[m
Author: Gingeh <39150378+Gingeh@users.noreply.github.com>
Date:   Tue Feb 8 03:37:34 2022 +0000

    Add Query::contains (#3090)
    
    # Objective
    
    - Fixes #3089

[33mcommit 1468211e2bb91c528098fbe1c7f9c3d8bbb072c7[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Feb 8 02:59:54 2022 +0000

    fix unreachable macro calls for rust 2021 (#3889)
    
    # Objective
    
    - It was decided in Rust 2021 to make macro like `panic` require a string literal to format instead of directly an object
    - `unreachable` was missed during the first pass but it was decided to go for it anyway now: https://github.com/rust-lang/rust/issues/92137#issuecomment-1019519285
    - this is making Bevy CI fail now: https://github.com/bevyengine/bevy/runs/5102586734?check_suite_focus=true
    
    ## Solution
    
    - Fix calls to `unreachable`

[33mcommit b3462428c9e65865499cd3739c0ab3459a2c30d9[m
Author: MinerSebas <scherthan_sebastian@web.de>
Date:   Tue Feb 8 00:03:50 2022 +0000

    Move the CoreStage::Startup to a seperate StartupSchedule label (#2434)
    
    # Objective
    
    - `CoreStage::Startup` is unique in the `CoreStage` enum, in that it represents a `Schedule` and not a `SystemStage`.
    - This can lead to confusion about how `CoreStage::Startup` and the `StartupStage` enum are related.
    - Beginners sometimes try `.add_system_to_stage(CoreStage::Startup, setup.system())` instead of `.add_startup_system(setup.system())`, which causes a Panic:
    ```
    thread 'main' panicked at 'Stage 'Startup' does not exist or is not a SystemStage', crates\bevy_ecs\src\schedule\mod.rs:153:13
    stack backtrace:
       0: std::panicking::begin_panic_handler
                 at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\/library\std\src\panicking.rs:493
       1: std::panicking::begin_panic_fmt
                 at /rustc/53cb7b09b00cbea8754ffb78e7e3cb521cb8af4b\/library\std\src\panicking.rs:435
       2: bevy_ecs::schedule::{{impl}}::add_system_to_stage::stage_not_found
                 at .\crates\bevy_ecs\src\schedule\mod.rs:153
       3: bevy_ecs::schedule::{{impl}}::add_system_to_stage::{{closure}}<tuple<bevy_ecs::system::function_system::IsFunctionSystem, tuple<bevy_ecs::system::commands::Commands, bevy_ecs::change_detection::ResMut<bevy_asset::assets::Assets<bevy_render::mesh::mesh::Me
                 at .\crates\bevy_ecs\src\schedule\mod.rs:161
       4: core::option::Option<mut bevy_ecs::schedule::stage::SystemStage*>::unwrap_or_else<mut bevy_ecs::schedule::stage::SystemStage*,closure-0>
                 at C:\Users\scher\.rustup\toolchains\stable-x86_64-pc-windows-msvc\lib\rustlib\src\rust\library\core\src\option.rs:427
       5: bevy_ecs::schedule::Schedule::add_system_to_stage<tuple<bevy_ecs::system::function_system::IsFunctionSystem, tuple<bevy_ecs::system::commands::Commands, bevy_ecs::change_detection::ResMut<bevy_asset::assets::Assets<bevy_render::mesh::mesh::Mesh>>, bevy_ec
                 at .\crates\bevy_ecs\src\schedule\mod.rs:159
       6: bevy_app::app_builder::AppBuilder::add_system_to_stage<tuple<bevy_ecs::system::function_system::IsFunctionSystem, tuple<bevy_ecs::system::commands::Commands, bevy_ecs::change_detection::ResMut<bevy_asset::assets::Assets<bevy_render::mesh::mesh::Mesh>>, be
                 at .\crates\bevy_app\src\app_builder.rs:196
       7: 3d_scene::main
                 at .\examples\3d\3d_scene.rs:4
       8: core::ops::function::FnOnce::call_once<fn(),tuple<>>
                 at C:\Users\scher\.rustup\toolchains\stable-x86_64-pc-windows-msvc\lib\rustlib\src\rust\library\core\src\ops\function.rs:227
    ```
    
    ## Solution
    
    - Replace the `CoreStage::Startup` Label with the new `StartupSchedule` unit type.
    
    
    Resolves #2229

[33mcommit f7478f448ab1493986a4fcb60f7567c95a8dba4d[m
Author: dataphract <dataphract@gmail.com>
Date:   Mon Feb 7 22:07:43 2022 +0000

    doc: remove mention of void return type in entry_point docs (#3881)
    
    # Objective
    
    The docs for `{VertexState, FragmentState}::entry_point` stipulate that the entry point function in the shader must return void. This seems to be specific to GLSL; WGSL has no `void` type and its entry point functions return values that describe their output.
    
    ## Solution
    
    Remove the mention of the `void` return type.

[33mcommit 3d6e4893f66bec6e6cfba8c76cf28c81bf92ea17[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Feb 7 21:50:52 2022 +0000

    reverse how diagnostic values are saved (#3056)
    
    # Objective
    
    - Currently, when getting a diagnostic value, the oldest value is returned. This is not the best for a diagnostic with a large history, as you could get a value from several frames away
    
    ## Solution
    
    - I changed the order in which the history is used to follow ["The âdefaultâ usage of this type as a queue is to use push_back to add to the queue, and pop_front to remove from the queue."](https://doc.rust-lang.org/std/collections/vec_deque/struct.VecDeque.html)

[33mcommit b13f238fc73692741ff87f804117770b1f42933c[m
Author: Delphine <delphine@lp0onfire.io>
Date:   Sun Feb 6 04:16:16 2022 +0000

    allow Entity to be deserialized with serde_json (#3873)
    
    # Objective
    
    - `serde_json` assumes that numbers being deserialized are either u64 or i64.
    - `Entity` serializes and deserializes as a u32.
    - Deserializing an `Entity` with `serde_json` fails with: `Error("invalid type: integer 10947, expected expected Entity"`
    
    ## Solution
    
    - Implemented a visitor for u64 that allows an `Entity` to be deserialized in this case.
    - While I was here, also fixed the redundant "expected expected Entity" in the error message
    - Tested the change in a local project which now correctly deserializes `Entity` structs with `serde_json` when it couldn't before

[33mcommit 75286b8540dc5795270465ed4584321f1a8dc3eb[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sun Feb 6 01:07:56 2022 +0000

    check if resource for asset already exists before adding it (#3560)
    
    # Objective
    
    - Fix #3559
    - Avoid erasing existing resource `Assets<T>` when adding it twice
    
    ## Solution
    
    - Before creating a new `Assets<T>`, check if it has already been added to the world
    
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>
    Co-authored-by: Aevyrie Roessler <aevyrie@gmail.com>

[33mcommit 59ee512292ab5e3b4be1ed6a32e6601413096857[m
Author: MinerSebas <scherthan_sebastian@web.de>
Date:   Sun Feb 6 01:07:55 2022 +0000

    Add TransformBundle (#3054)
    
    # Objective
    
    - Bevy currently has no simple way to make an "empty" Entity work correctly in a Hierachy.
      - The current Solution is to insert a Tuple instead:
    
    ```rs
    .insert_bundle((Transform::default(), GlobalTransform::default()))
    ```
    
    ## Solution
    
    * Add a `TransformBundle` that combines the Components:
    
    ```rs
    .insert_bundle(TransformBundle::default())
    ```
    
    * The code is based on #2331, except for missing the more controversial usage of `TransformBundle` as a Sub-bundle in preexisting Bundles.
    
    Co-authored-by: MinerSebas <66798382+MinerSebas@users.noreply.github.com>
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 7604665880204e0aea79611c4ce0ff9d70a55755[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Sun Feb 6 00:52:47 2022 +0000

    Implement AnyOf queries (#2889)
    
    Implements a new Queryable called AnyOf, which will return an item as long as at least one of it's requested Queryables returns something. For example, a `Query<AnyOf<(&A, &B, &C)>>` will return items with type `(Option<&A>, Option<&B>, Option<&C>)`, and will guarantee that for every element at least one of the option s is Some. This is a shorthand for queries like `Query<(Option<&A>, Option<&B>, Option<&C>), Or<(With<A>, With<B>, With&C>)>>`.
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit a0af066af7dabf40457777504d2c5e323250b000[m
Author: Pocket7878 <poketo7878@gmail.com>
Date:   Sat Feb 5 17:21:00 2022 +0000

    fix typo in bevy_ecs/README.md (#3869)
    
    # Objective
    
    Fixes #3866
    
    ## Solution
    
    Fix comment in bevy_ecs/README.md

[33mcommit 385a2b189528d0c6c706f7d25969414b61450774[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Feb 5 01:52:47 2022 +0000

    add examples on how to have a data source running in another thread / in a task pool thread (#2915)
    
    Add two examples on how to communicate with a task that is running either in another thread or in a thread from `AsyncComputeTaskPool`.
    
    Loosely based on https://github.com/bevyengine/bevy/discussions/1150

[33mcommit 865698548f23fa13a03202442bf114f5c01b8f46[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Fri Feb 4 21:22:12 2022 +0000

    Fix HDR asset support (#3795)
    
    The HDR texture loader was never added to the app, this PR makes sure it is added when the relevant feature is enabled.

[33mcommit 3431335ee9a2e3cfda81485d8080f85c0bc50461[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Fri Feb 4 03:37:45 2022 +0000

    add missing `into_inner` to `ReflectMut` (#3841)
    
    `Mut<T>`, `ResMut<T>` etc. have `.into_inner()` methods, but `ReflectMut` doesn't for some reason.

[33mcommit 1477765f626b39c4a52d42f567acfa9efb0e8123[m
Author: aloucks <aloucks@cofront.net>
Date:   Fri Feb 4 03:37:44 2022 +0000

    Replace VSync with PresentMode (#3812)
    
    # Objective
    
    Enable the user to specify any presentation modes (including `Mailbox`).
    
    Fixes #3807
    
    ## Solution
    
    I've added a new `PresentMode` enum in `bevy_window` that mirrors the `wgpu` enum 1:1. Alternatively, I could add a new dependency on `wgpu-types` if that would be preferred.

[33mcommit fe0e5580db9e32f344605f598f7e2b056f2afc96[m
Author: Mika <blaind@blaind.net>
Date:   Fri Feb 4 03:37:42 2022 +0000

    Fix node update (#3785)
    
    # Objective
    
    Fixes #3784
    
    ## Solution
    
    Check if the node size is actually different from previous

[33mcommit b11ee3ffb83864a989b329585e1f2ff5b368c1af[m
Author: Gwen <Gwen@Lofman.io>
Date:   Fri Feb 4 03:37:40 2022 +0000

    Remove duplicate call to set_vertex_buffer(0, ...) in shader_instancing example (#3738)
    
    ## Objective
    
    The [`DrawMeshInstanced`] command in the example sets vertex buffer 0 twice, with two identical calls to:
    
    ```rs
    pass.set_vertex_buffer(0, gpu_mesh.vertex_buffer.slice(..));
    ```
    
    ## Solution
    
    Remove the second call as it is unecessary.
    
    [`DrawMeshInstanced`]: https://github.com/bevyengine/bevy/blob/f3de12bc5e03c58a9b863943b8db84a321422bec/examples/shader/shader_instancing.rs#L217-L258

[33mcommit b7dfe1677fd8f92d3bbf0af658515e077b96cd1a[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Fri Feb 4 03:37:38 2022 +0000

    include sources in shader validation error (#3724)
    
    ## Objective
    
    When print shader validation error messages, we didn't print the sources and error message text, which led to some confusing error messages.
    
    ```cs
    error:
       ââ wgsl:15:11
       â
    15 â     return material.color + 1u;
       â           ^^^^^^^^^^^^^^^^^^^^ naga::Expression [11]
    ```
    
    ## Solution
    
    New error message:
    ```cs
    error: Entry point fragment at Vertex is invalid
       ââ wgsl:15:11
       â
    15 â     return material.color + 1u;
       â           ^^^^^^^^^^^^^^^^^^^^ naga::Expression [11]
       â
       = Expression [11] is invalid
       = Operation Add can't work with [8] and [10]
    ```

[33mcommit aa7b15889303244ebb732e6f5663051a71d5555e[m
Author: Boutillier <boris.boutillier@gmail.com>
Date:   Fri Feb 4 03:21:33 2022 +0000

    Add a size method on Image. (#3696)
    
    # Objective
    
    Add a simple way for user to get the size of a loaded texture in an Image object.
    Aims to solve #3689
    
    ## Solution
    
    Add a `size() -> Vec2` method
    Add two simple tests for this method.
    
    Updates:
    . method named changed from `size_2d` to `size`

[33mcommit 142e7f3c5058f498f263c24d94604e5e6521d358[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Fri Feb 4 03:21:31 2022 +0000

    Backport soundness fix (#3685)
    
    #3001 discovered a soundness bug in World::resource_scope, this PR backports the fix with a smaller PR to patch out the bug sooner.
    
    Fixes #3147

[33mcommit e928acb9ff12230893f696f1e2e6d5f6a17f69ac[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Fri Feb 4 03:21:29 2022 +0000

    bevy_asset: Add AssetServerSettings watch_for_changes member (#3643)
    
    # Objective
    
    - `asset_server.watch_for_changes().unwrap()` only watches changes for assets loaded **_after_** that call.
    - Technically, the `hot_asset_reloading` example is racey as the watch on the asset path is set up in an async task scheduled from the asset `load()`, but the filesystem watcher is only constructed in a call that comes **_after_** the call to `load()`.
    
    ## Solution
    
    -  It feels safest to allow enabling watching the filesystem for changes on the asset server from the point of its construction. Therefore, adding such an option to `AssetServerSettings` seemed to be the correct solution.
    - Fix `hot_asset_reloading` by inserting the `AssetServerSettings` resource with `watch_for_changes: true` instead of calling `asset_server.watch_for_changes().unwrap()`.
    - Document the shortcomings of `.watch_for_changes()`

[33mcommit ca83e8a6debce99656989df2656dd6e1926352d8[m
Author: dataphract <dataphract@gmail.com>
Date:   Fri Feb 4 03:07:22 2022 +0000

    fix: remove unneeded filter in check_light_mesh_visibility (#3861)
    
    # Objective
    
    The query for `VisiblePointLights` in `check_light_mesh_visibility` has a `Without<DirectionalLight>` filter. However, because `VisiblePointLights` is no longer an alias for `VisibleEntities`, the query won't conflict with the query for `DirectionalLight`s and thus the filter is unnecessary.
    
    ## Solution
    
    Remove the filter and the outdated comment explaining its purpose.

[33mcommit fe4a42a6485df4e441424dc6e66ae083dac52a3b[m
Author: Daniel Bearden <danbear0@gmail.com>
Date:   Fri Feb 4 03:07:21 2022 +0000

    Mut to immut impls (#3621)
    
    # Objective
    - Provide impls for mutable types to relevant immutable types.
    - Closes #2005
    
    ## Solution
    
    - impl From<ResMut> for Res
    - impl From<NonSendMut> for NonSend
    - Mut to &/&mut already impl'd in change_detection_impl! macro

[33mcommit 6b8d64cd019ad9a1dbe53752fed50c87c178af61[m
Author: JoJoJet <joe102000@gmail.com>
Date:   Fri Feb 4 03:07:20 2022 +0000

    impl more traits for bevy_core::Name (#3611)
    
    # Objective
    
    - `Name` component is missing some useful trait impls.
    
    ## Solution
    
    - Implement the missing traits. `Display`, `AsRef<str>`, and several other conversions to and from strings.

[33mcommit f00aec2454dff63a992dcef30256b8663c38ac5b[m
Author: MrGVSV <gino.valente.code@gmail.com>
Date:   Fri Feb 4 03:07:18 2022 +0000

    Added method to restart the current state (#3328)
    
    # Objective
    
    It would be useful to be able to restart a state (such as if an operation fails and needs to be retried from `on_enter`). Currently, it seems the way to restart a state is to transition to a dummy state and then transition back.
    
    ## Solution
    
    The solution is to add a `restart` method on `State<T>` that allows for transitioning to the already-active state.
    
    ## Context
    
    Based on [this](https://discord.com/channels/691052431525675048/742884593551802431/920335041756815441) question from the Discord.
    
    Closes #2385
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit e2cce092d7d00d71c3643b02105e9c96879631dd[m
Author: rezural <rezural@protonmail.com>
Date:   Fri Feb 4 02:42:59 2022 +0000

    derive clone for Input (#3569)
    
    # Objective
    
    - As part of exploring input event suppression in bevy_egui here: https://github.com/mvlabat/bevy_egui/pull/50/commits/53c1773583f2dfc2a8f8bc2aa93de1c9c5fd05ec
    - I found that the only way to suppress events properly, is to allow to clone the relevant Input<Whatever>, and update with events manually from within the system. This cloned Input then is discarded, the Events<*> structs are cleared, and bevy_input's normal update of Input proceeds, without the events that have been suppressed.
    
    ## Solution
    
    - This enables Input to be cloned, allowing it to be manually updated with events.

[33mcommit ef65548fbaf104c7627c696a21843e41f6ca425e[m
Author: ickk <git@ickk.io>
Date:   Fri Feb 4 02:42:58 2022 +0000

    Change default window title to "app" (#3417)
    
    Implements the changes cart decided on in https://github.com/bevyengine/bevy/pull/3404#issuecomment-999806086
    
    > - The default title should be changed to app so we don't leak the "bevy context" by default. app is generic enough that most people building real games will probably want to change it, but also generic enough that if someone doesn't manually set it, users won't bat an eye. I prefer this to binary names because they won't be consistent on all platforms / setups. A user (or developer) renaming a binary would implicitly rename the window title, which feels odd to me.
    > - No debug info in the title by default. An opt in plugin for that would be nice though.
    
    closes #3404 ?

[33mcommit bb1538a13926327ad7996a1e7ba9c12c5784ac9a[m
Author: Kevin King <4kevinking@gmail.com>
Date:   Fri Feb 4 02:26:18 2022 +0000

    improve error message for attempting to add systems using add_system_to_stage (#3287)
    
    # Objective
    
    Fixes #3250
    
    ## Solution
    
    Since this panic occurs in bevy_ecs, and StartupStage is part of
    bevy_app, we really only have access to the Debug string of the
    `stage_label` parameter.  This led me to the hacky solution of
    comparing the debug output of the label the user provides with the known
    variants of StartupStage.
    
    An alternative would be to do this error handling further up in
    bevy_app, where we can access StartupStage's typeid, but I don't think
    it is worth having a panic in 2 places (_ecs, and _app).

[33mcommit f584e729537262cb0166586933396763f353784d[m
Author: James Beilby <jamesbeilby@gmail.com>
Date:   Fri Feb 4 02:09:24 2022 +0000

    Add Transform::rotate_around method (#3107)
    
    # Objective
    
    - Missing obvious way to rotate a transform around a point. This is popularly used for rotation of an object in world space ("orbiting" a point), or for local rotation of an object around a pivot point on that object.
    - Present in other (not to be named) game engines
    - Was question from user on Discord today (thread "object rotation")
    
    ## Solution
    
    - Added Transform::rotate_around method where point is specified in reference frame of the parent (if any) or in world space.

[33mcommit 37a7be56dbfcac13cede6df3c06c53ba79aedcb6[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Feb 4 01:46:35 2022 +0000

    Make transform builder methods const (#3045)
    
    # Objective
    
    - Make transform builder methods `const`
    
    ## Solution
    
    - I made them `const`

[33mcommit 7d712406fe661c79c828753db6fb20210a3d93c1[m
Author: Charles <c.giguere42@gmail.com>
Date:   Fri Feb 4 01:24:47 2022 +0000

    Simplify sending empty events (#2935)
    
    # Objective
    
    When using empty events, it can feel redundant to have to specify the type of the event when sending it.
    
    ## Solution
    
    Add a new `fire()` function that sends the default value of the event. This requires that the event derives Default.
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 6f111136b9f2ebd5ab0975389f4c810242d1645d[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Thu Feb 3 23:56:57 2022 +0000

    Cleanup some things which shouldn't be components (#2982)
    
    # Objective
    
    - Using `Stopwatch` and `Timer` as raw components is a footgun.
    
    ## Solution
    
    - Stop them from being components

[33mcommit 1f99363de90cafc596f162e100511c2356cabd67[m
Author: bilsen <ivar.kallstrom@gmail.com>
Date:   Thu Feb 3 23:43:25 2022 +0000

    Add &World as SystemParam (#2923)
    
    # Objective
    Make it possible to use `&World` as a system parameter
    
    ## Solution
    It seems like all the pieces were already in place, very simple impl
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit c216738b33d7a38aee08e885dc03f43f6b13a6f1[m
Author: Garett Cooper <garett@garettcooper.com>
Date:   Thu Feb 3 23:22:08 2022 +0000

    Implement len and is_empty for EventReaders (#2969)
    
    # Objective
    
    Provide a non-consuming method of checking if there are events in an `EventReader`.
    
    Fixes #2967
    
    ## Solution
    
    Implements the `len` and `is_empty` functions for `EventReader` and `ManualEventReader`, giving users the ability to check for the presence of new events without consuming any.
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit af22cc1dc3713a24115e1cf8088cf7d4703f6d34[m
Author: bjorn3 <bjorn3@users.noreply.github.com>
Date:   Thu Feb 3 22:34:31 2022 +0000

    Use ManuallyDrop instead of forget in insert_resource_with_id (#2947)
    
    # Objective
    
    Calling forget would invalidate the data pointer before it is used.
    
    ## Solution
    
    Use `ManuallyDrop` to prevent the value from being dropped without moving it.

[33mcommit 6ac9d6876f7c0b71b1f84ec3e5df3460acba9449[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Thu Feb 3 22:34:29 2022 +0000

    Make ECS benchmark more representative (#2941)
    
    # Objective
    
    - The addition was being optimised out in the `for_each` loop, but not the `for` loop
    - Previously this meant that the `for_each` loop looked 3 times as fast - it's actually only 2 times as fast
    - Effectively, the addition take one unit of time, the for_each takes one unit of time, and the for loop version takes two units of time.
    
    ## Solution
    
    - `black_box` the count in each loop
    
    Note that this does not fix `for_each` being faster than `for`, unfortunately.

[33mcommit c44f8b2b68dfece1183c2ec7abb26b5fde746304[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Thu Feb 3 04:25:45 2022 +0000

    Run tests (including doc tests) in `cargo run -p ci` command (#3849)
    
    # Objective
    
    - Using the `cargo run -p ci` command locally is unreliable, as it does not run tests.
    - This is particularly unreliable for doc tests, as they are not run as part of `cargo test`.
    
    ## Solution
    
    - add more steps to the appropriate Rust file.
    
    ## Known Problems
    
    This duplicates work done to run tests when run on Github. @mockersf, suggestions on if we care / how we can mitigate it?

[33mcommit 19bd6b9c320c34d55f7e5f8bd16f51f0bb8831b2[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Feb 3 04:25:44 2022 +0000

    Update rodio 0.15 (#3846)
    
    # Objective
    
    - Update rodio to 0.15
    - Replace #3828

[33mcommit 21ac4bc0ae24e519896f997bcfe9c215c5f78901[m
Author: Stefan Seemayer <stefan@seemayer.de>
Date:   Thu Feb 3 04:11:19 2022 +0000

    impl Command for <impl FnOnce(&mut World)> (#2996)
    
    This is my first contribution to this exciting project! Thanks so much for your wonderful work. If there is anything that I can improve about this PR, please let me know :)
    
    # Objective
    
    - Fixes #2899
    - If a simple one-off command is needed to be added within a System, this simplifies that process so that we can simply do `commands.add(|world: &mut World| { /* code here */ })` instead of defining a custom type implementing `Command`.
    
    ## Solution
    
    - This is achieved by `impl Command for F where F: FnOnce(&mut World) + Send + Sync + 'static` as just calling the function.
    
    I am not sure if the bounds can be further relaxed but needed the whole `Send`, `Sync`, and `'static` to get it to compile.

[33mcommit 69e9a47d92ff8599c270d77a6ce2917c97059d8c[m
Author: MinerSebas <scherthan_sebastian@web.de>
Date:   Thu Feb 3 03:32:02 2022 +0000

    SystemParam Derive fixes (#2838)
    
    # Objective
    
    A user on Discord couldn't derive SystemParam for this Struct:
    
    ```rs
    #[derive(SystemParam)]
    pub struct SpatialQuery<'w, 's, Q: WorldQuery + Send + Sync + 'static, F: WorldQuery + Send + Sync + 'static = ()>
    where
        F::Fetch: FilterFetch,
    {
        query: Query<'w, 's, (C, &'static Transform), F>,
    }
    ```
    
    ## Solution
    
    1. The `where`-clause is now also copied to the `SystemParamFetch` impl Block.
    2. The `SystemParamState` impl Block no longer gets any defaults for generics
    
    
    Co-authored-by: MinerSebas <66798382+MinerSebas@users.noreply.github.com>

[33mcommit b506c30cd39742385e48e742ab464023ef3c6689[m
Author: dataphract <dataphract@gmail.com>
Date:   Thu Feb 3 00:43:37 2022 +0000

    fix: only init_resource() once for AmbientLight (#3853)
    
    # Objective
    
    `PbrPlugin` calls `app.init_resource::<AmbientLight>()` twice. The second call won't do anything.
    
    ## Solution
    
    Remove the second call.

[33mcommit 506642744c1839b76e3286b6885c467d80bdc71a[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Wed Feb 2 21:47:29 2022 +0000

    docs: Fix private doc links and enable CI test (#3743)
    
    # Objective
    
    Fixes #3566
    
    ## Solution
    
    - [x] Fix broken links in private docs.
    - [x] Add the `--document-private-items` flag to the CI.
    
    ## Note
    
    The following was said by @killercup in #3566:
    
    > I don't have time to confirm this but I assume that linking to private items throws an error/warning when just running cargo doc, and --document-private-item might actually hide that warning. So to test this, you'd have to run it twice.
    
    I tested this and this is thankfully not the case. If you are linking to a private item you will get a warning no matter if you run `cargo doc` or `cargo doc --document-private-items`.
    
    ### Example
    
    I added `struct Test;` to `bevy_core/src/name.rs` and linked to it inside of a doc comment using ``[`Test`]``. After that I ran `cargo doc -p bevy_core --document-private-items` using `RUSTDOCFLAGS="-D warnings"` and got the following output (note the last sentence):
    
    ```rust
    error: public documentation for `Name` links to private item `Test`
      --> crates/bevy_core/src/name.rs:11:82
       |
    11 | /// Component used to identify an entity. Stores a hash for faster comparisons [`Test`]
       |                                                                                  ^^^^ this item is private
       |
       = note: `-D rustdoc::private-intra-doc-links` implied by `-D warnings`
       = note: this link resolves only because you passed `--document-private-items`, but will break without
    ```

[33mcommit 6cab36165f93fa240ae88298e897e687fee892aa[m
Author: Andrew Jackson <andrew.c.j1995@gmail.com>
Date:   Wed Feb 2 21:29:48 2022 +0000

    Update ClearColor Resource docs (#3842)
    
    # Objective
    - Update the `ClearColor` resource docs as described in #3837  so new users (like me) understand it better
    
    ## Solution
    - Update the docs to use what @alice-i-cecile described in #3837
    
    
    I took this one up because I got confused by it this weekend. I didn't understand why the  "background" was being set by a `ClearColor` resource.

[33mcommit f991c73bdf2b3fa9ec5987ac5ecce67edafb99dd[m
Author: jak6jak <jacobedie1@gmail.com>
Date:   Wed Feb 2 02:44:51 2022 +0000

    Add move sprite example.  (#2414)
    
    ## Objective
    There is no bevy example that shows how to transform a sprite. At least as its singular purpose. This creates an example of how to use transform.translate to move a sprite up and down. The last pull request had issues that I couldn't fix so I created a new one
    
    ### Solution
    I created move_sprite example.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit ce752d25228f2982546f02566ed5bdceb8fc3184[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Wed Feb 2 02:29:33 2022 +0000

    Increment last event count on next instead of iter (#2382)
    
    # Objective
    
    Currently, simply calling `iter` on an event reader will mark all of it's events as read, even if the returned iterator is never used
    
    ## Solution
    
    With this, the cursor will simply move to the last unread, but available event when iter is called, and incremented by one per `next` call.
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 6a499b125bf2f37e2f95bf7936da382bc3571622[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Feb 2 00:25:39 2022 +0000

    Update gltf requirement from 0.16.0 to 1.0.0 (#3826)
    
    Updates the requirements on [gltf](https://github.com/gltf-rs/gltf) to permit the latest version.
    <details>
    <summary>Changelog</summary>
    <p><em>Sourced from <a href="https://github.com/gltf-rs/gltf/blob/master/CHANGELOG.md">gltf's changelog</a>.</em></p>
    <blockquote>
    <h2>[1.0.0] - 2022-01-29</h2>
    <h3>Added</h3>
    <ul>
    <li>Support for the <code>KHR_materials_specular</code> extension.</li>
    <li>Support for the <code>KHR_materials_variants</code> extension.</li>
    <li>Support for the <code>KHR_materials_volume</code> extension.</li>
    <li><code>ExactSizeIterator</code> implementation for <code>Joints</code> iterator.</li>
    </ul>
    <h3>Changed</h3>
    <ul>
    <li>The <code>mesh.primitives</code> property is now always serialized.</li>
    </ul>
    <h3>Fixed</h3>
    <ul>
    <li>Incorrect implementation of <code>Normalize&lt;u16&gt;</code> and <code>Normalize&lt;f32&gt;</code> for <code>u16</code>.</li>
    </ul>
    <h2>[0.16.0] - 2021-05-13</h2>
    <h3>Added</h3>
    <ul>
    <li>Support for the <code>KHR_texture_transform</code> extension.</li>
    <li>Support for the <code>KHR_materials_transmission_ior</code> extension.</li>
    </ul>
    <h3>Changed</h3>
    <ul>
    <li><code>Material::alpha_cutoff</code> is now optional.</li>
    </ul>
    <h3>Fixed</h3>
    <ul>
    <li>URIs with embedded data failing to import when using <code>import_slice</code>.</li>
    <li>Serialization of empty primitives object being skipped.</li>
    </ul>
    <h2>[0.15.2] - 2020-03-29</h2>
    <h3>Changed</h3>
    <ul>
    <li>All features are now exposed in the <a href="http://docs.rs/gltf">online documentation</a>.</li>
    <li>Primary iterators now implement <code>Iterator::nth</code> explicitly for improved performance.</li>
    </ul>
    <h3>Fixed</h3>
    <ul>
    <li>Compiler warnings regarding deprecation of <code>std::error::Error::description</code>.</li>
    </ul>
    <h2>[0.15.1] - 2020-03-15</h2>
    <h3>Added</h3>
    <ul>
    <li>New feature <code>guess_mime_type</code> which, as the name suggests, attempts to guess
    the MIME type of an image if it doesn't exactly match the standard.</li>
    </ul>
    <!-- raw HTML omitted -->
    </blockquote>
    <p>... (truncated)</p>
    </details>
    <details>
    <summary>Commits</summary>
    <ul>
    <li>See full diff in <a href="https://github.com/gltf-rs/gltf/commits">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit c285a69f76d4ac9909d05f7956f2b1276512038a[m
Author: HorvÃ¡th BÃ¡lint <horvbalint99@gmail.com>
Date:   Tue Feb 1 22:40:25 2022 +0000

    Add the Inside version to the Collision enum (#2489)
    
    # Objective
    I think the 'collide' function inside the 'bevy/crates/bevy_sprite/src/collide_aabb.rs' file should return 'Some' if the two rectangles are fully overlapping or one is inside the other. This can happen on low-end machines when a lot of time passes between two frames because of a stutter, so a bullet for example gets inside its target. I can also think of situations where this is a valid use case even without stutters.
    
    ## Solution
    I added an 'Inside' version to the Collision enum declared in the file. And I use it, when the two rectangles are overlapping, but we can't say from which direction it happened. I gave a 'penetration depth' of minus Infinity to these cases, so that this variant only appears, when the two rectangles overlap from each side fully. I am not sure if this is the right thing to do.
    
    Fixes #1980
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 4134577e646e0d1017064780bca34bb3fa096216[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jan 31 02:30:05 2022 +0000

    Fix Code of Conduct bolding in readme (#3822)

[33mcommit 33ef5b5039ce4bea9b33199c1e5649dc858a6d4c[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Mon Jan 31 01:22:17 2022 +0000

    bevy_render: Only auto-disable mappable primary buffers for discrete GPUs (#3803)
    
    # Objective
    
    - While it is not safe to enable mappable primary buffers for all GPUs, it should be preferred for integrated GPUs where an integrated GPU is one that is sharing system memory.
    
    ## Solution
    
    - Auto-disable mappable primary buffers only for discrete GPUs. If the GPU is integrated and mappable primary buffers are supported, use them.

[33mcommit ca029ef0ebf89dde45bf428110d2eb33d6585273[m
Author: sark <sarkahn@gmail.com>
Date:   Mon Jan 31 00:32:47 2022 +0000

    Naga export (#3714)
    
    # Objective
    
    In order to create a glsl shader, we must provide the `naga::ShaderStage` type which is not exported by bevy, meaning a user would have to manually include naga just to access this type.
    
    `pub fn from_glsl(source: impl Into<Cow<'static, str>>, stage: naga::ShaderStage) -> Shader {`
    
    ## Solution
    
    Re-rexport naga::ShaderStage from `render_resources`

[33mcommit 44d09dc46db356d22f3f232d16398c36db4e3d10[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Jan 28 16:17:54 2022 +0000

    fix timer test to be less reliant on float precision (#3789)
    
    # Objective
    
    - Test is failing on nightly after the merge of https://github.com/rust-lang/rust/pull/90247
    - It was relying on the precision of the duration of `1.0 / 3.0`
    
    ## Solution
    
    - Fix the test to be less reliant on float precision to have the same result

[33mcommit 435fb7af4f983845d2fcc9e4221749f852431d11[m
Author: Charles Giguere <c.giguere42@gmail.com>
Date:   Wed Jan 26 18:52:54 2022 +0000

    Improve shader_material example documentation (#3601)
    
    # Objective
    
    While trying to learn how to use custom shaders, I had difficulty figuring out how to use a vertex shader. My confusion was mostly because all the other shader examples used a custom pipeline, but I didn't want a custom pipeline. After digging around I realised that I simply needed to add a function to the `impl Material` block. I also searched what was the default shader used, because it wasn't obvious to me where to find it.
    
    ## Solution
    
    Added a few comments explaining what is going on in the example and a link to the default shader.

[33mcommit ac63c491fb0d6bd8852e0d7e57280d4c3da35faa[m
Author: Cameron Hart <cameron.hart@gmail.com>
Date:   Tue Jan 25 22:10:11 2022 +0000

    Simple 2d rotation example (#3065)
    
    # Objective
    
    Some new bevy users are unfamiliar with quaternions and have trouble working with rotations in 2D.
    
    There has been an [issue](https://github.com/bitshifter/glam-rs/issues/226) raised with glam to add helpers to better support these users, however for now I feel could be better to provide examples of how to do this in Bevy as a starting point for new users.
    
    ## Solution
    
    I've added a 2d_rotation example which demonstrates 3 different rotation examples to try help get people started:
    
    - Rotating and translating a player ship based on keyboard input
    - An enemy ship type that rotates to face the player ship immediately
    - An enemy ship type that rotates to face the player at a fixed angular velocity
    
    I also have a standalone version of this example here https://github.com/bitshifter/bevy-2d-rotation-example but I think it would be more discoverable if it's included with Bevy.

[33mcommit 6d76229c384053e03683cc629a6c5ee7d0c4f690[m
Author: luke.biel <lukasz.p.biel@gmail.com>
Date:   Mon Jan 24 23:44:08 2022 +0000

    Fix a typo in shader_defs example (#3762)
    
    # Objective
    
    As in title, I'm already looking through these files so may as well rename `pipline` to `pipeline`

[33mcommit 514754d6503b2416e5266a24b39c884ab5d90d2f[m
Author: James Liu <contact@jamessliu.com>
Date:   Sun Jan 23 18:00:43 2022 +0000

    Add crate level docs to bevy_log and enable #![warn(missing_docs)] (#3520)
    
    This PR is part of the issue #3492.
    # Objective
    
      - Add crate level docs to the bevy_log documentation to achieve a 100% documentation coverage.
      - Add the #![warn(missing_docs)] lint to keep the documentation coverage for the future.
    
    # Solution
    
     - Add and update the bevy_log crate level docs
     - Add a note about panicking from multiple `LogPlugins` per process.
     - Add the #![warn(missing_docs)] lint.

[33mcommit f5039a476d48ec19bd74c94e83e10772565c68f1[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Sun Jan 23 14:24:37 2022 +0000

    Mark .id() methods which return an `Entity` as must_use (#3750)
    
    # Objective
    
    - Calling .id() has no purpose unless you use the Entity returned
    - This is an easy source of confusion for beginners.
    - This is easily missed during refactors.
    
    ## Solution
    
    - Mark the appropriate methods as #[must_use]

[33mcommit f3de12bc5e03c58a9b863943b8db84a321422bec[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Fri Jan 21 00:29:29 2022 +0000

    Add a warning when `watch_for_changes` has no effect (#3684)
    
    # Objective
    
    - Users can get confused when they ask for watching to be unsupported, then find it isn't supported
    - Fixes https://github.com/bevyengine/bevy/issues/3683
    
    ## Solution
    
    - Add a warning if the `watch_for_changes` call would do nothing

[33mcommit f1f6fd349a95059b031171021ff17251fde78456[m
Author: Michael Dorst <m@mdorst.net>
Date:   Fri Jan 21 00:12:32 2022 +0000

    Remove `ComponentsError` (#3716)
    
    # Objective
    `ComponentsError` is unused and should be removed.
    
    Fixes #3707
    
    ## Solution
    
    Remove `ComponentsError`.

[33mcommit e30d600dbf4ea76cf8bc4f87ce830202a8e741d2[m
Author: Rose Peck <olaf223224@gmail.com>
Date:   Thu Jan 20 19:32:16 2022 +0000

    Update docstrings for `text_system` and `text2d_system` (#3732)
    
    # Objective
    
    - Fixes #3562
    
    ## Solution
    
    - The outdated reference to `TextGlyphs` has been removed, and replaced with a more accurate docstring.
    
    ## What was `TextGlyphs`?
    This is the real question of this Issue and PR. This is particulary interesting because not only is `TextGlyphs` not a type in bevy, but it _never was_. Indeed, this type never existed on main. Where did it come from?
    
    `TextGlyphs` was originally a tuple struct wrapping a `Vec<PositionedGlyph>`. It was first introduced back in commit https://github.com/bevyengine/bevy/pull/765/commits/ec390aec4ebe7192e3470dddf1e8af36f10453e6 in #765. At the time, position information was being stored on the text entities directly. However, after design review, [it was decided](https://github.com/bevyengine/bevy/pull/765#issuecomment-725047186) to instead store the glyphs in a `HashMap` owned by the `TextPipeline`. When this was done, the original type was not only removed, but abstracted behind a few layers of the `TextPipeline` API. Obviously, the original docstring wasn't updated accordingly.
    
    Later, as part of #1122, the incorrect docstring was swept up when copy/pasting `text_system` for `text2d`. (Although I don't blame @CleanCut for this; it took me like 3 hours to track all this down to find the original context.)

[33mcommit cb2ba19d97ecb8f878c26357ade2ea7bcbd0cbc9[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Jan 18 01:28:09 2022 +0000

    rename Texture to Image in doc of `from_buffer` function (#3713)
    
    This doc link was missed when changing the type name.
    
    Noticed in https://github.com/bevyengine/bevy/pull/3706 which will not be merged

[33mcommit 55da315432074e32a28b1ef0ad39b8eadf92467a[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Mon Jan 17 22:55:44 2022 +0000

    bevy_render: Provide a way to opt-out of the built-in frustum culling (#3711)
    
    # Objective
    
    - Allow opting-out of the built-in frustum culling for cases where its behaviour would be incorrect
    - Make use of the this in the shader_instancing example that uses a custom instancing method. The built-in frustum culling breaks the custom instancing in the shader_instancing example if the camera is moved to:
    
    ```rust
        commands.spawn_bundle(PerspectiveCameraBundle {
            transform: Transform::from_xyz(12.0, 0.0, 15.0)
                .looking_at(Vec3::new(12.0, 0.0, 0.0), Vec3::Y),
            ..Default::default()
        });
    ```
    
    ...such that the Aabb of the cube Mesh that is at the origin goes completely out of view. This incorrectly (for the purpose of the custom instancing) culls the `Mesh` and so culls all instances even though some may be visible.
    
    
    ## Solution
    
    - Add a `NoFrustumCulling` marker component
    - Do not compute and add an `Aabb` to `Mesh` entities without an `Aabb` if they have a `NoFrustumCulling` marker component
    - Do not apply frustum culling to entities with the `NoFrustumCulling` marker component

[33mcommit e88e394feb506d686b90b20090cc055f2c31baa9[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Jan 17 22:38:05 2022 +0000

    Remove wasm specific examples (#3705)
    
    # Objective
    
    - There are wasm specific examples, which is misleading as now it works by default
    - I saw a few people on discord trying to work through those examples that are very limited
    
    ## Solution
    
    - Remove them and update the instructions

[33mcommit 836ffeda31e0b0c85666332cbe58221fbcce8a65[m
Author: Zhe Chen <me@zchen.im>
Date:   Mon Jan 17 22:22:16 2022 +0000

    Add missing dependencies for Fedora with Wayland (#3708)
    
    # Objective
    
    - The Linux dependencies document lacks packages for Fedora with Wayland.
    
    ## Solution
    
    - Add instructions to install packages for running Bevy apps in Fedora with Wayland.

[33mcommit a9f2817c49fcc8037293c5ff5add1d23d9f2d620[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Mon Jan 17 22:22:15 2022 +0000

    bevy_pbr: Do not panic when more than 256 point lights are added the scene (#3697)
    
    # Objective
    
    - Do not panic when mroe than 256 point lights are added the scene
    - Fixes https://github.com/bevyengine/bevy/issues/3682
    
    ## Solution
    
    - Only iterate the first `MAX_POINT_LIGHTS` lights instead of as many as there are
    
    ## Open questions
    
    - Should we warn that there are more than the maximum allowed number of point lights in the scene?

[33mcommit ef823d369ff69c626d94b4f4b20f6a22d8045136[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Mon Jan 17 22:03:14 2022 +0000

    bevy_render: Do not automatically enable MAPPABLE_PRIMARY_BUFFERS (#3698)
    
    # Objective
    
    - When using `WgpuOptionsPriority::Functionality`, which is the default, wgpu::Features::MAPPABLE_PRIMARY_BUFFERS would be automatically enabled. This feature can and does have a significant negative impact on performance for discrete GPUs where resizable bar is not supported, which is a common case. As such, this feature should not be automatically enabled.
    - Fixes the performance regression part of https://github.com/bevyengine/bevy/issues/3686 and at least some, if not all cases of https://github.com/bevyengine/bevy/issues/3687
    
    ## Solution
    
    - When using `WgpuOptionsPriority::Functionality`, use the adapter-supported features, enable `TEXTURE_ADAPTER_SPECIFIC_FORMAT_FEATURES` and disable `MAPPABLE_PRIMARY_BUFFERS`

[33mcommit a3e43b6abe4594b257fa7ff9d305b49a97b3ead6[m
Author: Igor Shaposhnik <ishaposhnik@icloud.com>
Date:   Mon Jan 17 21:43:44 2022 +0000

    Remove cargo-lipo from iOS ci job (#3671)
    
    # Objective
    
    `cargo-lipo` no more required since #3109 merged. Also remove unused `x11` feature from example.

[33mcommit 8139022ecde5c4bc0156af0f93d34287ad6e4425[m
Author: Chris J G <chris.j.gallo3@gmail.com>
Date:   Mon Jan 17 21:30:17 2022 +0000

    Change bevy_core::Name to implement Deref<Target = str> (#3681)
    
    # Objective
    Fixes #3613
    [Link to issue](https://github.com/bevyengine/bevy/issues/3613)
    
    ## Solution
    Changed the Deref Target to `str` and changed the `deref()` function body so that a `&str` is returned by using `as_ref() `.

[33mcommit e16ba80bd2929fff9da25b27a2d5c1e3dd8e7bff[m
Author: Weasy <weasy@hotmail.de>
Date:   Mon Jan 17 21:00:43 2022 +0000

    Add bevy_bird SVG for simpleicons.org (#3672)
    
    # Objective
    
    Add an icon to [simpleicons.org](https://simpleicons.org/), so that we can use it with [shields.io](https://shields.io/) to make some nice shields/badges.
    
    ## Solution
    
    Create a bevy bird SVG according to this guideline https://github.com/simple-icons/simple-icons/blob/develop/CONTRIBUTING.md#icon-guidelines, meaning i made [bevy_icon_dark.svg](https://github.com/bevyengine/bevy-website/blob/master/static/assets/bevy_icon_dark.svg) monochromatic and ran through all the steps in the icon-guideline. The result looks like this:
    
    ![grafik](https://user-images.githubusercontent.com/11967542/149509545-0748af23-ff52-42e6-a5bc-c1c7ce43e1fe.png)
    
    We still need to open a PR in the https://github.com/simple-icons/simple-icons repo.

[33mcommit d11cd6345229f1c2e0352e164bcbc0491c7cc319[m
Author: Linden Krouse <ztaticnull@gmail.com>
Date:   Mon Jan 17 20:44:22 2022 +0000

    Fixed doc comment with render Node input/output methods (#3642)
    
    Fixed doc comment where render Node input/output methods refered to using `RenderContext` for interaction instead of `RenderGraphContext`
    
    # Objective
    
    The doc comments for `Node` refer to `RenderContext` for slots instead of `RenderGraphContext`, which is only confusing because `Node::run` is passed both `RenderContext` and `RenderGraphContext`
    
    ## Solution
    
    Fixed the typo

[33mcommit 3fcdc5a4926dcad89a3346977d862c505993d265[m
Author: Wybe Westra <dev@wwestra.nl>
Date:   Sun Jan 16 21:09:15 2022 +0000

    Expanded Msaa documentation. (#3693)
    
    - Added default value.
    - Links to the explanation of Msaa on wikipedia.
    - Added a short example to show how to use the struct on an app.
    
    Fixes #3167.

[33mcommit 758fc5af6761d36c79115b93b5c20c03543646fa[m
Author: Aleksey Smirnov <debugger94@gmail.com>
Date:   Sun Jan 16 20:49:40 2022 +0000

    Remove a couple of unnecessary full paths (#3699)

[33mcommit e30199f7a9cf6429aed6c0b6f66fe76b791e90aa[m
Author: James Liu <contact@jamessliu.com>
Date:   Sun Jan 16 04:53:22 2022 +0000

    Document bevy_tasks and enable #![warn(missing_docs)] (#3509)
    
    This PR is part of the issue #3492.
    
    # Objective
    
    -  Add and update the bevy_tasks documentation to achieve a 100% documentation coverage (sans `prelude` module)
    -  Add the #![warn(missing_docs)] lint to keep the documentation coverage for the future.
    
    ## Solution
    
     -  Add and update the bevy_math documentation.
     -  Add the #![warn(missing_docs)] lint.
     - Added doctest wherever there should be in the missing docs.

[33mcommit 71814ca91bbd532a350db6dbcf2711fc7ce99ba5[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Sun Jan 16 02:40:25 2022 +0000

    Added API guidelines to CONTRIBUTING.md (#3646)
    
    Closes #3497.
    
    I added the rust API guidelines (https://rust-lang.github.io/api-guidelines/about.html) to the `CONTRIBUTING.md` file.
    
    ## Note
    As noted in #3497 we should note any areas where we deliberately disagree as they arise. If we start adding these areas it might be a good idea to remove the mention of the `API guidelines` in the `CONTRIBUTING.md` file and move it to the `engine_style_guide.md`. That way we still have the connection between the `CONTRIBUTING.md` and the `API guidelines`, but we have more "space" to work with and can go into more detail about what we agree and disagree on.
    
    For now I would leave it this way, because it's one less click to get to the guidelines.
    
    Co-authored-by: KDecay <KDecayMusic@protonmail.com>

[33mcommit 8e1f660e1db77434d96626d3e40ecd0edfc71b54[m
Author: Ted Driggs <ted.driggs@outlook.com>
Date:   Sat Jan 15 22:14:43 2022 +0000

    Don't panic in macro shape validation (#3647)
    
    # Objective
    Emitting compile errors produces cleaner messages than panicking in a proc-macro.
    
    ## Solution
    - Replace match-with-panic code with call to new `bevy_macro_utils::get_named_struct_fields` function
    - Replace one use of match-with-panic for enums with inline match
    
    _Aside:_ I'm also the maintainer of [`darling`](https://docs.rs/darling), a crate which provides a serde-like API for parsing macro inputs. I avoided using it here because it seemed like overkill, but if there are plans to add lots more attributes/macros then that might be a good way of offloading macro error handling.

[33mcommit c16d0c5a39f384e45a3043b30f0aace2b408c6a1[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Jan 15 20:29:58 2022 +0000

    do not set cursor grab on window creation if not asked for (#3617)
    
    # Objective
    
    - On Safari mobile, calling `winit_window.set_cursor_grab(true)` fails as the API is not implemented (as there is no cursor on Safari mobile, the api doesn't make sense there). I don't know about other mobile browsers
    ```
    [Error] Unhandled Promise Rejection: TypeError: getObject(arg0).exitPointerLock is not a function. (In 'getObject(arg0).exitPointerLock()', 'getObject(arg0).exitPointerLock' is undefined)
        (anonymous function) (rect.js:1089)
        wasm-stub
        <?>.wasm-function[web_sys::features::gen_Document::Document::exit_pointer_lock::h20ffc49be163fc45]
        <?>.wasm-function[winit::platform_impl::platform::backend::canvas::Canvas::set_cursor_grab::h6a9472cf55263e98]
        <?>.wasm-function[bevy_winit::winit_windows::WinitWindows::create_window::h9db5b3cbb24347c5]
        <?>.wasm-function[<bevy_winit::WinitPlugin as bevy_app::plugin::Plugin>::build::ha4a7c046b80c4280]
        <?>.wasm-function[bevy_app::plugin_group::PluginGroupBuilder::finish::h0e5bc78f71c37b2f]
        <?>.wasm-function[rect::main::h899852fd17f2d489]
        <?>.wasm-function[std::sys_common::backtrace::__rust_begin_short_backtrace::hfe38f282e8dda96b]
        <?>.wasm-function[std::rt::lang_start::{{closure}}::hc2f3b555ffc58618]
        <?>.wasm-function[std::rt::lang_start_internal::ha901ae30d88554f2]
        <?>.wasm-function[main]
        <?>.wasm-function[]
        wasm-stub
        21261
        (anonymous function) (rect.js:1664)
        asyncFunctionResume
        (anonymous function)
        promiseReactionJobWithoutPromise
        promiseReactionJob
    ```
    
    ## Solution
    
    - Do not call the api to release cursor grab on window creation, as the cursor is not grabbed anyway at this point

[33mcommit 2186eae89cd48f0e3606048b5463cbcf835079fb[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Sat Jan 15 20:10:33 2022 +0000

    bevy_crevice: Fix incorrect iterator usage in WriteStd430 impl for [T] (#3591)
    
    # Objective
    
    - Fix incorrect iterator usage in WriteStd430 impl for [T]
      - The first item was being written twice. This is correct in the WriteStd140 impl for [T].
    
    ## Solution
    
    - See the code.

[33mcommit 7c22f92ce42741610df2520f310dffa13287257f[m
Author: Federico Rinaldi <gisquerin@gmail.com>
Date:   Fri Jan 14 23:14:42 2022 +0000

    Document sub apps (#3403)
    
    Documentation added to:
    - `App::add_sub_app` (
    - `App::update` (mentions that sub apps are updated here)
    
    ### Future work
    - An example for `add_sub_app` would be good, but I wasn't able to come up with a simple one.
    - Since `SubApp` is private, maybe the concept of sub applications could be introduced in the `App` struct-level documentation.

[33mcommit f073b2d7f3d42561f081493e8a1c4bf337e1c7ae[m
Author: dataphract <dataphract@gmail.com>
Date:   Fri Jan 14 19:09:44 2022 +0000

    document more of bevy_reflect (#3655)
    
    This adds documentation for:
    
    - The trait methods of `Reflect` and its subtraits
    - The `partial_eq` and `apply` functions for `Map` et al.
    - `DynamicList` and `DynamicMap`
    - `TypeRegistry` and related types & traits
    - `GetPath`, including an explanation of path string syntax
    
    among other things.
    
    Still to be documented are the various macros and `bevy_reflect::serde`.

[33mcommit 3e8e6c56710a78216e0290bf194524429057f0c2[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Jan 14 19:09:42 2022 +0000

    add an example using UI & states to create a game menu (#2960)
    
    adds an example using UI for something more related to a game than the current UI examples.
    
    Example with a game menu:
    * new game - will display settings for 5 seconds before returning to menu
    * preferences - can modify the settings, with two sub menus
    * quit - will quit the game
    
    
    I wanted a more complex UI example before starting the UI rewrite to have ground for comparison
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit 39db8ecd03feebdef945048bab7e6551afd18735[m
Author: Troels Jessen <trojes@tuta.io>
Date:   Fri Jan 14 18:47:48 2022 +0000

    Added docs for bevy_transform (#3516)
    
    # Objective
    
    bevy_transform needed documentation and warn(missing_docs) as requested by #3492
    
    ## Solution
    
    warn(missing_docs) was activated and documentation was added to cover the crate
    
    
    Co-authored-by: Troels Jessen <kairyuka@gmail.com>

[33mcommit 17bb812d5df45c01529183bc8c6be21e3916fad0[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Jan 14 18:21:22 2022 +0000

    Ignore clippy 1.58 (#3667)
    
    - Work around #3666 until a proper fix is done
    - Also update duplicate dependencies list

[33mcommit 7fd781e6703cc229ec5dae46ef9cc96ea6e7e52a[m
Author: Nicholas French <32023353+L-french@users.noreply.github.com>
Date:   Thu Jan 13 01:50:54 2022 +0000

    Fix documentation for QueryState::iter_manual (#3644)
    
    # Objective
    
    - Fixes #3616
    
    ## Solution
    
    - As described in the issue, documentation for `iter_manual` was copied from `iter_combinations` and did not reflect the behavior of the method. I've pulled some information from #2351 to create a more accurate description.

[33mcommit 84144c942992dedc200ccd9dae008acbfc2b767a[m
Author: Isse <isidornie@gmail.com>
Date:   Thu Jan 13 00:24:31 2022 +0000

    Remove documentation warning on EntityCommands::insert that is no longer necessary (#3653)
    
    # Objective
    
    - Removes warning about accidently inserting bundles with `EntityCommands::insert`, but since a component now needs to implement `Component` it is unnecessary.

[33mcommit bc499591c2d090e17c95d2c59bc6e16ba60a023d[m
Author: Pascal Hertleif <killercup@gmail.com>
Date:   Tue Jan 11 01:08:39 2022 +0000

    Use `use` instead of lots of full paths (#3564)
    
    Super tiny thing. Found this while reviewing #3479.
    
    # Objective
    
    - Simplify code
    - Fix the link in the doc comment
    
    ## Solution
    
    - Import a single item :)
    
    
    Co-authored-by: Pascal Hertleif <pascal@technocreatives.com>

[33mcommit fc0f15f11e3b327c65deaaccf722a8064a1a300b[m
Author: SuperSamus <tinozzo123@tutanota.com>
Date:   Mon Jan 10 17:05:13 2022 +0000

    Documentation: simplify NixOS dependencies (#3527)
    
    # Objective
    
    The description of NixOS dependencies is extremely long and spends entire paragraphs just for simple line changes.
    With this PR it should be much simpler.
    
    ## Solution
    
    - Linking Vulkan in `build.rs` is less effective than adding it in LD_LIBRARY_PATH, so I removed the former (related to #1992);
    - I put a simple comment explaining the line in the list of dependencies, instead of making entire paragraphs;
    - Clang is not in an absolute path in `.cargo/config_fast_builds` anymore, so that there is no need to specify it in `docs/linux_dependencies.md` (didn't test if this breaks other distros, though I doubt it. Also, maybe it could also be done on Darwin for consistency?);
    - Also added optional wayland dependencies.
    
    A few notes:
    - The x11 libraries will be linked only during the compilation phase. This means that if you use the `x11` feature without these libraries in the environment (for example because you forget to enter the nix shell before compiling), the program will still compile successfully but won't run. You'll have to `cargo clean` and recompile with the x11 libraries in the environment. I don't know if this is important enough to be added to the documentation, but it's not specified anywhere, though I don't think it's specific to NixOS;
    - The wayland dependencies need to be put in LD_LIBRARY_PATH only in certain conditions (IIRC, only if using the `dynamic` feature) and the text doesn't specify it. Because putting them there doesn't increase the number of dependencies (they are already in buildInputs) or alter the performance, I doubt anyone will care;
    - Should I comment out what isn't needed by default?
    - ~I removed `cargo` from buildInputs. Ignoring the fact that it should be in nativeBuildInputs, having it in `shell.nix` allows to use stable Rust in case it's not in the system environment, but maybe the user wanted to use the version that was already in the system environment and will be caught by surprise. In my opinion, if someone is looking at a Bevy's documentation on NixOS, that user will either have Rust already in the system environment (eg. via rustup) or is capable to add the toolchain they want on shell.nix by themselves. This isn't exactly the place to explain how this works.~ ~EDIT: I replaced `cargo` with Rust from the [Oxalica overlay](https://github.com/oxalica/rust-overlay) in order to have the latest nightly.~ EDIT: Removed `cargo` from dependencies. See comments for details.

[33mcommit 6bc5c609867908345f0b427cbd2725082883b31c[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Mon Jan 10 00:00:19 2022 +0000

    Remove tests from example style guide (#3582)
    
    # Objective
    
    - Consensus has emerged that examples shouldn't have tests.
    
    ## Solution
    
    - Discourage tests in examples.

[33mcommit 130953c717ffc1b05cf80d44dd82151b4c476555[m
Author: Michael Dorst <m@mdorst.net>
Date:   Sun Jan 9 23:20:13 2022 +0000

    Enable the `doc_markdown` clippy lint (#3457)
    
    # Objective
    
    CI should check for missing backticks in doc comments.
    
    Fixes #3435
    
    ## Solution
    
    `clippy` has a lint for this: `doc_markdown`. This enables that lint in the CI script.
    
    Of course, enabling this lint in CI causes a bunch of lint errors, so I've gone through and fixed all of them. This was a huge edit that touched a ton of files, so I split the PR up by crate.
    
    When all of the following are merged, the CI should pass and this can be merged.
    
    + [x] #3467
    + [x] #3468
    + [x] #3470
    + [x] #3469
    + [x] #3471
    + [x] #3472
    + [x] #3473
    + [x] #3474
    + [x] #3475
    + [x] #3476
    + [x] #3477
    + [x] #3478
    + [x] #3479
    + [x] #3480
    + [x] #3481
    + [x] #3482
    + [x] #3483
    + [x] #3484
    + [x] #3485
    + [x] #3486

[33mcommit 600ee7eee69aaf730bcf69f2f9fa83aaafb8a334[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sun Jan 9 18:52:18 2022 +0000

    support all line endings in shader preprocessor (#3603)
    
    # Objective
    
    - Advance uses of shaders seems to often fail for Windows users
    - Bevy split lines on `'\n'` which messes with windows line endings
    
    ## Solution
    
    - Uses Rust built in https://doc.rust-lang.org/std/primitive.str.html#method.lines

[33mcommit e56685370ba82003af60a491667fac209a0f7897[m
Author: Michael Dorst <m@mdorst.net>
Date:   Sun Jan 9 11:09:46 2022 +0000

    Fix `doc_markdown` lints in `bevy_render` (#3479)
    
    #3457 adds the `doc_markdown` clippy lint, which checks doc comments to make sure code identifiers are escaped with backticks. This causes a lot of lint errors, so this is one of a number of PR's that will fix those lint errors one crate at a time.
    
    This PR fixes lints in the `bevy_render` crate.

[33mcommit 6f167aa3d60188952ea9bccad3b6725dd5085acc[m
Author: MiniaczQ <xnetroidpl@gmail.com>
Date:   Sun Jan 9 03:48:27 2022 +0000

    Documented `Events` (#3306)
    
    # Objective
    
    This PR extends the `Events` documentation by:
    - informing user about the possible race condition
    - explicitly explaining the unusual double buffer implementation
    
    Fixes #3305
    
    
    Co-authored-by: MiniaczQ <jakub.motyka.2000@gmail.com>
    Co-authored-by: MiniaczQ <MiniaczQ@gmail.com>

[33mcommit 8c81e816764e60df5b6f304709259433b734f35c[m
Author: Daniel Bearden <danbear0@gmail.com>
Date:   Sat Jan 8 22:36:33 2022 +0000

    Thread local example cleanup (#3586)
    
    # Objective
    
    Fixes #1917
    
    ## Solution
    
    - Change use of "thread local system" wording to "exclusive system".
    - Add .exclusive_system() call to example.

[33mcommit 4b4dbb021fc517747f6deb06d4f99e9b6cd577be[m
Author: dataphract <dataphract@gmail.com>
Date:   Sat Jan 8 20:45:24 2022 +0000

    document `Struct`, `TupleStruct` and `Tuple` (#3081)
    
    # Objective
    
    These traits are undocumented on `main`.
    
    ## Solution
    
    Now they have docs! Included are examples for each trait and their corresponding `GetTypeField` trait. The docs also mention that `#[derive(Reflect)]` will automatically derive the correct subtrait on structs and tuple structs.

[33mcommit 458cb7a9e93dab3127bb99ce7bf8cfc3af18851d[m[33m ([m[1;33mtag: v0.6.0[m[33m)[m
Author: Hennadii Chernyshchyk <genaloner@gmail.com>
Date:   Sat Jan 8 10:39:43 2022 +0000

    Add headless mode (#3439)
    
    # Objective
    
    In this PR I added the ability to opt-out graphical backends. Closes #3155.
    
    ## Solution
    
    I turned backends into `Option` ~~and removed panicking sub app API to force users handle the error (was suggested by `@cart`)~~.

[33mcommit 2ee38cb9e007130afbb9880c7d35413da215738c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jan 8 10:18:22 2022 +0000

    Release 0.6.0 (#3587)

[33mcommit c6fc51c29736a9796d5fc20a04829c5231d666e0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jan 7 21:37:34 2022 -0800

    Update CHANGELOG.md

[33mcommit 270fe9ca90b20eb337954515020ca254632229e3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jan 8 04:37:05 2022 +0000

    Add 0.6 changelog (#3584)
    
    Does what it says on the tin.

[33mcommit c2da7800e3671ad92e775529070a814d0bc2f5f8[m
Author: davier <bricedavier@gmail.com>
Date:   Sat Jan 8 01:29:08 2022 +0000

    Add 2d meshes and materials (#3460)
    
    # Objective
    
    The current 2d rendering is specialized to render sprites, we need a generic way to render 2d items, using meshes and materials like we have for 3d.
    
    ## Solution
    
    I cloned a good part of `bevy_pbr` into `bevy_sprite/src/mesh2d`, removed lighting and pbr itself, adapted it to 2d rendering, added a `ColorMaterial`, and modified the sprite rendering to break batches around 2d meshes.
    
    ~~The PR is a bit crude; I tried to change as little as I could in both the parts copied from 3d and the current sprite rendering to make reviewing easier. In the future, I expect we could make the sprite rendering a normal 2d material, cleanly integrated with the rest.~~ _edit: see <https://github.com/bevyengine/bevy/pull/3460#issuecomment-1003605194>_
    
    ## Remaining work
    
    - ~~don't require mesh normals~~ _out of scope_
    - ~~add an example~~ _done_
    - support 2d meshes & materials in the UI?
    - bikeshed names (I didn't think hard about naming, please check if it's fine)
    
    ## Remaining questions
    
    - ~~should we add a depth buffer to 2d now that there are 2d meshes?~~ _let's revisit that when we have an opaque render phase_
    - ~~should we add MSAA support to the sprites, or remove it from the 2d meshes?~~ _I added MSAA to sprites since it's really needed for 2d meshes_
    - ~~how to customize vertex attributes?~~ _#3120_
    
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 32f7997c566f4dcf8dc57b64f20193234256deb1[m
Author: Troels Jessen <trojes@tuta.io>
Date:   Fri Jan 7 22:20:34 2022 +0000

    Partially document bevy_ui (#3526)
    
    # Objective
    
    Updated the docs for bevy_ui as requested by #3492
    
    ## Solution
    
    I have documented the parts I understand. anchors.rs is not in use and should be removed, thus I haven't documented that, and some of the more renderer-heavy code is beyond me and needs input from either cart or someone familiar with bevy rendering
    
    Co-authored-by: Troels Jessen <kairyuka@gmail.com>

[33mcommit d34ecd7584d7385e220579247020e41a148a4963[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Fri Jan 7 21:25:59 2022 +0000

    bevy_pbr: Use a special first depth slice for clustered forward (#3545)
    
    # Objective
    
    - Using plain exponential depth slicing for perspective projection cameras results in unnecessarily many slices very close together close to the camera. If the camera is then moved close to a collection of point lights, they will likely exhaust the available uniform buffer space for the lists of which lights affect which clusters.
    
    ## Solution
    
    - A simple solution to this is to use a different near plane value for the depth slicing and set it to where the first slice's far plane should be. The default value is 5 and works well. This results in the configured number of depth slices, maintains the exponential slicing beyond the initial slice, and no slices are too small such that they cause problems that are sensitive to the view position.

[33mcommit f781bfe7d86e9acb4591f94e1184465039741531[m
Author: Dusty DeWeese <dustin.deweese@gmail.com>
Date:   Fri Jan 7 21:10:18 2022 +0000

    Fix shadows for non-TriangleLists (#3581)
    
    Fixes shadows of non TriangleList meshes:
    
    # Without
    
    <img width="1033" alt="Screen Shot 2022-01-07 at 13 03 02" src="https://user-images.githubusercontent.com/1069462/148607402-9bc47978-0b5b-45cd-a6e6-f488825cdf14.png">
    
    # With
    
    <img width="987" alt="Screen Shot 2022-01-07 at 13 04 06" src="https://user-images.githubusercontent.com/1069462/148607437-7d7c1d74-627f-4a7c-bf7b-205405586c17.png">

[33mcommit fbab01a40de501aebb686629fd48e0ca1925ca30[m
Author: Niklas Eicker <git@nikl.me>
Date:   Fri Jan 7 09:25:12 2022 +0000

    Add missing closing ticks for inline examples and some cleanup (#3573)
    
    # Objective
    
    - clean up documentation and inline examples
    
    ## Solution
    
    - add missing closing "```"
    - remove stray "```"
    - remove whitespace in inline examples
    - unify inline examples (remove some `rust` labels)

[33mcommit 015da72250f636934453d184bc8bc07379418d93[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Jan 7 07:19:22 2022 +0000

    gltf loader: do not use the taskpool for only one task (#3577)
    
    # Objective
    
    - Fix the case mentioned in https://github.com/bevyengine/bevy/pull/2725#issuecomment-1007014024.
    - On a machine with 4 cores, so 1 thread for assets, loading a gltf with only one textures hangs all asset loading
    
    ## Solution
    
    - Do not use the task pool when there is only one texture to load
    
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit fda0b2c9119c71a44f7c72fbfc7c368d6ee44f12[m
Author: yetanothercheer <64053323+yetanothercheer@users.noreply.github.com>
Date:   Fri Jan 7 06:25:38 2022 +0000

    Fix typo (#3578)

[33mcommit b673c51e2061e333ed6c37763f54f8e536238cd2[m
Author: Daniel Bearden <danbear0@gmail.com>
Date:   Thu Jan 6 23:16:47 2022 +0000

    Bevy app docs (#3539)
    
    # Objective
    
    Achieve 100% documentation coverage for bevy_app crate.
    See #3492
    
    ## Solution
    
    - Add #![warn(missing_docs)] to crate root
    - Add doc comments to public items
    - Add doc comment to bevy_utils::define_label macro trait

[33mcommit 44f370a26cdbfc14258424f5f2d3f2227e9f5833[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Thu Jan 6 19:13:52 2022 +0000

    Make the `iter_combinators` examples more pretty (#3075)
    
    # Objective
    
    - More colours
    
    ## Solution
    
    - Various changes
    - Would have a video here, but don't have an easy way to record one before I go to sleep
    - I intend to additionally change the distribution of the satellites, to be more uniform in space.

[33mcommit 507441d96f83355cdab578d85f804f4bf8d835c9[m
Author: Michael Dorst <m@mdorst.net>
Date:   Thu Jan 6 00:43:37 2022 +0000

    Fix `doc_markdown` lints in `bevy_ecs` (#3473)
    
    #3457 adds the `doc_markdown` clippy lint, which checks doc comments to make sure code identifiers are escaped with backticks. This causes a lot of lint errors, so this is one of a number of PR's that will fix those lint errors one crate at a time.
    
    This PR fixes lints in the `bevy_ecs` crate.

[33mcommit 2d301ea0ea657b8a4104ce69ef0de3b5338cf92a[m
Author: SarthakSingh31 <ss269@uw.edu>
Date:   Wed Jan 5 23:28:30 2022 +0000

    Add instruction to enable ALSA api routing on Arch / Manjaro systems (#3455)
    
    # Objective
    
    Every few months a person using Arch asks for help with the following error on discord:
    ```
    ALSA lib pcm_dmix.c:1032:(snd_pcm_dmix_open) unable to open slave
    ```
    This error is caused by their sound server not being configured for ALSA. The fix is to install `pipewire-alsa` or `pulseaudio-alsa` depending on the sound server they use.
    
    Examples:
    - https://discord.com/channels/691052431525675048/749690364792668301/924380204237987861
    - https://discord.com/channels/691052431525675048/742884593551802431/907392651689619486
    - https://discord.com/channels/691052431525675048/742884593551802431/838062316360433664
    
    ## Solution
    
    Add the instruction to install either `pipewire-alsa` or `pulseaudio-alsa` to [linux_dependencies.md](https://github.com/bevyengine/bevy/blob/main/docs/linux_dependencies.md#arch--manjaro)
    
    ## Extra Info
    
    A lot of people don't run into this issue because `pipewire-alsa` / `pulseaudio-alsa` is a dependency for gnome and cinnamon.
    
    @alice-i-cecile Sorry, had to recreate the pr. It doesn't let me reopen and change the branch of the original pr.

[33mcommit f9b51ca60238d4e947c11073f38a32b47b8295fc[m
Author: Niklas Eicker <git@nikl.me>
Date:   Wed Jan 5 22:30:15 2022 +0000

    Complete inline documentation for bevy_audio (#3510)
    
    # Objective
    Part of #3492
    
    - Complete inline documentation of `bevy_audio`
    
    ## Solution
    
    - Added inline documentation to all public parts of `bevy_audio`
    - Added a few inline examples at important places
    - Some renaming for clarity (e.g. `AudioLoader` and generics)
    - added `#![warn(missing_docs)]` and `#![forbid(unsafe_code)]` to `bevy_audio`
    
    I also tried adding support for the other vorbis file endings `.oga` and `.spx` to the `AudioLoader` (see `file endings` at https://tools.ietf.org/html/rfc5334#section-10.3), but the `rodio` decoder does not seem to support those.

[33mcommit 251514017f3ab50adffeb5f3fcab98aafc62c589[m
Author: Michael Dorst <m@mdorst.net>
Date:   Wed Jan 5 22:30:14 2022 +0000

    Fix `doc_markdown` lints in `bevy_ui` (#3484)
    
    #3457 adds the `doc_markdown` clippy lint, which checks doc comments to make sure code identifiers are escaped with backticks. This causes a lot of lint errors, so this is one of a number of PR's that will fix those lint errors one crate at a time.
    
    This PR fixes lints in the `bevy_ui` crate.

[33mcommit 0b3a1c18e9bddbb712fd8b6e6f7dd722cef4002a[m
Author: Michael Dorst <m@mdorst.net>
Date:   Wed Jan 5 22:30:12 2022 +0000

    Fix `doc_markdown` lints in `bevy_text` (#3482)
    
    #3457 adds the `doc_markdown` clippy lint, which checks doc comments to make sure code identifiers are escaped with backticks. This causes a lot of lint errors, so this is one of a number of PR's that will fix those lint errors one crate at a time.
    
    This PR fixes lints in the `bevy_text` crate.

[33mcommit 073f381c9ee2236ab0ce92a075422ce302f0468c[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Wed Jan 5 22:06:38 2022 +0000

    Removal detection cleanup (#3010)
    
    # Objective
    
    - Fixes #1920.
    - Users often want to know how to get the values of removed components (#1655).
    - Stand-alone `bevy_ecs` behavior is very unintuitive, as `World::clear_trackers()` must be manually called.
    - Fixes #2999 by extending the existing test (thanks @hymm for pointing me to it) to be clearer and check for component removal as well.
    
    ## Solution
    
    - Better docs!
    - Better tests!

[33mcommit b1476015d947bd699fa3df2a19094ab3d12d0ee9[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Wed Jan 5 19:43:11 2022 +0000

    add some more pipelined-rendering shader examples (#3041)
    
    based on #3031
    
    Adds some examples showing of how to use the new pipelined rendering for custom shaders.
    
    - a minimal shader example which doesn't use render assets
    - the same but using glsl
    - an example showing how to render instanced data
    - a shader which uses the seconds since startup to animate some textures
    
    
    Instancing shader:
    ![grafik](https://user-images.githubusercontent.com/22177966/139299294-e176b62a-53d1-4287-9a66-02fb55affc02.png)
    Animated shader:
    ![animate_shader](https://user-images.githubusercontent.com/22177966/139299718-2940c0f3-8480-4ee0-98d7-b6ba40dc1472.gif)
    (the gif makes it look a bit ugly)
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit f3fba096152dc5228400c7adc7f9273f1423abb2[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Wed Jan 5 19:19:22 2022 +0000

    Add MapMode to wgpu reexports (#3558)
    
    This type can be needed by API s on other reexported types, so it should be included too

[33mcommit a1e3c5c1001b06d23195cd94c8ae7b524c992c4c[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Jan 5 03:27:17 2022 +0000

    load names of lights from gltf (#3553)
    
    # Objective
    
    - Load names of lights from gltf
    
    ## Solution
    
    - Load names of lights from gltf
    
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit 0bae5bb8f44dde96e47316bbc401c418ec251f76[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Wed Jan 5 00:49:20 2022 +0000

    Remove dead anchor.rs code (#3551)
    
    # Objective
    
    - As noticed by @sheepyhead in #3526, `anchor.rs` is completely unused.
    
    ## Solution
    
    - Anchors away!

[33mcommit 36390a80ec3f88bb6532e75571bc0292dfeb1fe3[m
Author: MrGVSV <gino.valente.code@gmail.com>
Date:   Tue Jan 4 23:38:39 2022 +0000

    Documented Handles and Assets (#3348)
    
    # Objective
    
    Add documentation to [Handle](https://github.com/bevyengine/bevy/blob/7356f1586d74039f840bcfcf24af3e21c23e3c18/crates/bevy_asset/src/handle.rs#L63) and [Assets](https://github.com/bevyengine/bevy/blob/7356f1586d74039f840bcfcf24af3e21c23e3c18/crates/bevy_asset/src/assets.rs#L48).
    
    ## Tasks
    - [x] Document `Handle`
    - [x] Document `Assets`
    
    ---
    
    Fixes #3347
    
    
    Co-authored-by: MrGVSV <49806985+MrGVSV@users.noreply.github.com>

[33mcommit 24b21ea35ed58035707c1e70159a24a009102fab[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Tue Jan 4 21:30:46 2022 +0000

    Fix torus normals (#3549)
    
    # Objective
    
    Fixes #3547
    
    ## Solution
    
    Normal calc adapted from https://web.cs.ucdavis.edu/~amenta/s12/findnorm.pdf
    
    ## Before
    <img width="1392" alt="before" src="https://user-images.githubusercontent.com/200550/148125212-fb1c083e-3c57-4330-a656-df34513c36ab.png">
    
    ## After
    <img width="1392" alt="after" src="https://user-images.githubusercontent.com/200550/148125223-174dc956-37df-4ac2-8983-b18e1e2a9a7d.png">
    
    I'm assuming that the greyness and the self-shadowing artifacts are... normal for the new renderer.

[33mcommit b9c623e4f3b0cfbabaff054828cd70224ba97553[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Tue Jan 4 20:08:12 2022 +0000

    Configurable wgpu features/limits priority (#3452)
    
    # Objective
    
    - Allow the user to specify the priority when configuring wgpu features/limits and by default use the maximum capabilities of the chosen adapter.
    
    ## Solution
    
    - Add a `WgpuOptionsPriority` enum with `Compatibility`, `Functionality` and `WebGL2` options.
    - Add a `priority: WgpuOptionsPriority` member to `WgpuOptions`.
    - When initialising the renderer, if `WgpuOptions::priority == WgpuOptionsPriority::Functionality`, query the adapter for the available features and limits, use them when creating a device, and update `WgpuOptions` with those values. If `Compatibility` use the behaviour as before this PR. If `WebGL2` then use the WebGL2 downlevel limits as used when when building for wasm, for convenience of testing WebGL2 limits without having to build for wasm.
    - Add an environment variable `WGPU_OPTIONS_PRIO` that takes `compatibility`, `functionality`, `webgl2`.
    - Default to `WgpuOptionsPriority::Functionality`.
    - Insert updated `WgpuOptions` into render app world as well. This is useful for applying the limits when rendering, such as limiting the directional light shadow map texture to 2048x2048 when using WebGL2 downlevel limits but not on wasm.
    - Reduced `draw_state` logs from `debug` to `trace` and added `debug` level logs for the wgpu features and limits. Use `RUST_LOG=bevy_render=debug` to see the output.

[33mcommit 37f9e418d23a86b6f400775f9bf229e6a97fdb5f[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Jan 4 19:49:38 2022 +0000

    Feature for bevy UI (#3546)
    
    # Objective
    
    - For a plugin, I would like to enable `bevy_ui` without adding the complete `render` feature
    
    ## Solution
    
    - Add a feature for `bevy_ui`
    
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit 1a2646ecc407ff98883f4ebae63fee8b3868b008[m
Author: Michael Nett <mnett82@gmail.com>
Date:   Tue Jan 4 19:49:37 2022 +0000

    Use fully-qualified type names in proc macro. (#3544)
    
    Modifies the code emitted by `derive_label` to use fully-qualified type
    names (e.g. `std::boxed::Box` instead of `Box`).
    
    # Objective
    
    - Using unqualified types here causes errors when the proc macro is used in contexts that locally define types with conflicting names (e.g. a local definition of `Box`).
    
    ## Solution
    
    - Fully qualify standard types emitted by the proc macro code.

[33mcommit 3bb50443d45b5c2a35c03db26a5a5e531461128c[m
Author: Nathan Pinard <bytemuck@gmail.com>
Date:   Tue Jan 4 18:56:58 2022 +0000

    updated contributing.md with merges rights (#3542)
    
    # Objective
    
    - Update CONTRIBUTING.md with the arrival of a new member who has merge rights
    
    ## Solution
    
    - Just add them to the CONTRIBUTING.md
    
    
    Co-authored-by: Nathan Pinard <42417006+bytemuck@users.noreply.github.com>

[33mcommit 1bae879bf3908c259ff1c83b1440e3ac62a562b9[m
Author: yetanothercheer <64053323+yetanothercheer@users.noreply.github.com>
Date:   Mon Jan 3 08:51:44 2022 +0000

    Fix typo (#3538)

[33mcommit 97012950f9627ae8b06fd24994e2dff3e4104419[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Jan 3 08:33:15 2022 +0000

    Update nalgebra requirement from 0.29.0 to 0.30.0 (#3540)
    
    Updates the requirements on [nalgebra](https://github.com/dimforge/nalgebra) to permit the latest version.
    <details>
    <summary>Changelog</summary>
    <p><em>Sourced from <a href="https://github.com/dimforge/nalgebra/blob/dev/CHANGELOG.md">nalgebra's changelog</a>.</em></p>
    <blockquote>
    <h2>[0.30.0] (02 Jan. 2022)</h2>
    <h3>Breaking changes</h3>
    <ul>
    <li>The <code>Dim</code> trait is now marked as unsafe.</li>
    <li>The <code>Matrix::pow</code> and <code>Matrix::pow_mut</code> methods only allow positive integer exponents now. To compute negative
    exponents, the user is free to invert the matrix before calling <code>pow</code> with the exponentâs absolute value.</li>
    </ul>
    <h3>Modified</h3>
    <ul>
    <li>Use more concise debug impls for matrices and geometric transformation types.</li>
    <li>The singular values computed by the SVD are now sorted in increasing order by default. Use <code>SVD::new_unordered</code>
    instead to reproduce the older behavior without the sorting overhead.</li>
    <li>The <code>UnitDualQuaternion::sclerp</code> method will no longer panic when given two equal rotations.</li>
    <li>The <code>Matrix::select_rows</code> and <code>Matrix::select_columns</code> methods no longer require the matrix components to implement
    the trait <code>Zero</code>.</li>
    <li>The <code>Matrix::pow</code> and <code>Matrix::pow_mut</code> methods will now also work with integer matrices.</li>
    </ul>
    <h3>Added</h3>
    <ul>
    <li>Added the conversion trait <code>From&lt;Vec&lt;T&gt;&gt;</code> and method <code>from_vec_storage</code> for <code>RowDVector</code>.</li>
    <li>Added implementation of <code>From</code> and <code>Into</code> for converting between <code>nalgebra</code> types and types from
    <code>glam 0.18</code>. These can be enabled by enabling the <code>convert-glam018</code> cargo features.</li>
    <li>Added the methods <code>Matrix::product</code>, <code>::row_product</code>, <code>::row_product_tr</code>, and <code>::column_product</code> to compute the
    product of the components, rows, or columns, of a single matrix or vector.</li>
    <li>The <code>Default</code> trait is now implemented for most geometric types: <code>Point</code>, <code>Isometry</code>, <code>Rotation</code>, <code>Similarity</code>,
    <code>Transform</code>, <code>UnitComplex</code>, and <code>UnitQuaternion</code>.</li>
    <li>Added the <code>Scale</code> geometric type for representing non-uniform scaling.</li>
    <li>Added <code>Cholesky::new_with_substitute</code> that will replace diagonal elements by a given constant whenever <code>Cholesky</code>
    meets a non-definite-positiveness.</li>
    <li>Re-added the conversion from a vector/matrix slice to a static array.</li>
    <li>Added the <code>cuda</code> feature that enables the support of <a href="https://github.com/Rust-GPU/Rust-CUDA">rust-cuda</a> for using
    <code>nalgebra</code> features with CUDA kernels written in Rust.</li>
    <li>Added special-cases implementations for the 2x2 and 3x3 SVDs for better accuracy and performances.</li>
    <li>Added the methods <code>Matrix::polar</code>, <code>Matrix::try_polar</code>, and <code>SVD::to_polar</code> to compute the polar decomposition of
    a matrix, based on its SVD.</li>
    <li><code>nalgebra-sparse</code>: provide constructors for unsorted but otherwise valid data using the CSR format.</li>
    <li><code>nalgebra-sparse</code>: added reading MatrixMarked data files to a sparse <code>CooMatrix</code>.</li>
    </ul>
    <h3>Fixed</h3>
    <ul>
    <li>Fixed a potential unsoundness with <code>matrix.get(i)</code> and <code>matrix.get_mut(i)</code> where <code>i</code>  is an <code>usize</code>, and <code>matrix</code>
    is a matrix slice with non-default strides.</li>
    <li>Fixed potential unsoundness with <code>vector.perp</code> where <code>vector</code> isnât actually a 2D vector as expected.</li>
    <li>Fixed linkage issue with <code>nalgebra-lapack</code>: the user of <code>nalgebra-lapack</code> no longer have to add
    <code>extern crate lapack-src</code> to their <code>main.rs</code>.</li>
    <li>Fixed the <code>no-std</code> build of <code>nalgebra-glm</code>.</li>
    <li>Fix the <code>pow</code> and <code>pow_mut</code> functions (the result was incorrect for some exponent values).</li>
    </ul>
    <h2>[0.29.0]</h2>
    <h3>Breaking changes</h3>
    <ul>
    <li>We updated to the version 0.6 of <code>simba</code>. This means that the trait bounds <code>T: na::RealField</code>, <code>na::ComplexField</code>,
    <code>na::SimdRealField</code>, <code>na:SimdComplexField</code> no imply that <code>T: Copy</code> (they only imply that <code>T: Clone</code>). This may affect</li>
    </ul>
    <!-- raw HTML omitted -->
    </blockquote>
    <p>... (truncated)</p>
    </details>
    <details>
    <summary>Commits</summary>
    <ul>
    <li><a href="https://github.com/dimforge/nalgebra/commit/e8b9c40123708180ad7714e9c709fe37ee306714"><code>e8b9c40</code></a> Release v0.30.0</li>
    <li><a href="https://github.com/dimforge/nalgebra/commit/c0f8530d5eb5214f33adf37d06c461d95a691157"><code>c0f8530</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/dimforge/nalgebra/issues/1055">#1055</a> from dimforge/fix-pow</li>
    <li><a href="https://github.com/dimforge/nalgebra/commit/99ac8c4032fee594a7edbb2d3e30b5a1cccfc84b"><code>99ac8c4</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/dimforge/nalgebra/issues/1050">#1050</a> from metric-space/polar-decomposition-take-2</li>
    <li><a href="https://github.com/dimforge/nalgebra/commit/498d7e3d4cb167bd4d3a53c3b12aeefe67d0b6f7"><code>498d7e3</code></a> Semi-unitary test checks for if rows or cols are orthonomal</li>
    <li><a href="https://github.com/dimforge/nalgebra/commit/ae6fda7dc77ccfcc2fe2dbdfd72c9f83bc43ab31"><code>ae6fda7</code></a> Change svd to svd_unordered for the method output to be equal</li>
    <li><a href="https://github.com/dimforge/nalgebra/commit/d806669cc79c0a424d772e4909383b2b569524d5"><code>d806669</code></a> Fix Matrix::pow and make it work only with positive exponents</li>
    <li><a href="https://github.com/dimforge/nalgebra/commit/fdaf8c0fbe8cbdf3bfc1721a6bc1838cfa43a529"><code>fdaf8c0</code></a> Add tests for Matrix::pow</li>
    <li><a href="https://github.com/dimforge/nalgebra/commit/67a82c2c882b590c4b0ea91c1ef526030aafecd6"><code>67a82c2</code></a> Test: minor style fix</li>
    <li><a href="https://github.com/dimforge/nalgebra/commit/8e0ca439c2431c2e713e8355419a88e2d724f473"><code>8e0ca43</code></a> Use proptest for testing the polar decomposition</li>
    <li><a href="https://github.com/dimforge/nalgebra/commit/cc10b67dd16653830de406e917877d3cd28b6827"><code>cc10b67</code></a> Add Matrix::try_polar that returns Option and make Matrix::polar not return O...</li>
    <li>Additional commits viewable in <a href="https://github.com/dimforge/nalgebra/compare/v0.29.0...v0.30.0">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit 85b7589388722784b1a755d37f2b4d46e1a588fc[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Mon Jan 3 07:59:25 2022 +0000

    bevy_gltf: Add support for loading lights (#3506)
    
    # Objective
    
    - Add support for loading lights from glTF 2.0 files
    
    ## Solution
    
    - This adds support for the KHR_punctual_lights extension which supports point, directional, and spot lights, though we don't yet support spot lights.
    - Inserting light bundles when creating scenes required registering some more light bundle component types.

[33mcommit d44c3cd15009797ef37ba03abf35a4482980bd10[m
Author: Yilin Wei <yilin@kebab-ca.se>
Date:   Sun Jan 2 23:28:18 2022 +0000

    Fix error message for the `Component` macro's `component` `storage` attribute. (#3534)
    
    # Objective
    
    Fixes the error message for the `component` attribute when users use the wrong literals.

[33mcommit a6d3cd92fe2be55032c2e63a1ed983543d28143b[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sun Jan 2 20:36:41 2022 +0000

    revert new dependency for fedora added in #3517 (#3530)
    
    # Objective
    
    - Revert #3517 as the dependency added (rust-libudev-devel) has a dependency on cargo which install the package manager version, which isn't compatible with rustup version and may break the setup of users
    
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit dc8fefe27fc8ab6d756d8c0291515280923fffe2[m
Author: James Liu <contact@jamessliu.com>
Date:   Sun Jan 2 20:36:40 2022 +0000

    Remove Bytes, FromBytes, Labels, EntityLabels. Document rest of bevy_core and enable warning on missing docs. (#3521)
    
    This PR is part of the issue #3492.
    
    # Objective
    
     - Clean up dead code in `bevy_core`.
     - Add and update the `bevy_core` documentation to achieve a 100% documentation coverage.
     - Add the #![warn(missing_docs)] lint to keep the documentation coverage for the future.
    
    # Solution
    
     - Remove unused `Bytes`, `FromBytes`, `Labels`, and `EntityLabels` types and associated systems.
     - Made several types private that really only have use as internal types, mostly pertaining to fixed timestep execution.
     - Add and update the bevy_core documentation.
     - Add the #![warn(missing_docs)] lint.
    
    # Open Questions
    
    Should more of the internal states of `FixedTimestep` be public? Seems mostly to be an implementation detail unless someone really needs that fixed timestep state.

[33mcommit 363bdf78dc2176ee2a5792e9f0cb6fe1b650020b[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sun Jan 2 20:18:53 2022 +0000

    Re-enable nightly checks and add new dependency duplicate (#3525)
    
    # Objective
    
    - Nightly checks where disabled because of a bug in Rust
    - Dependency checks are failing because of a new duplicate
    
    ## Solution
    
    - Now that https://github.com/rust-lang/rust/pull/92175 has been merged, re-enable nightly checks
    - Add the new duplicate dependency to the known list
    - Removed `Inflector` dependency as it's not used anymore
    
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit e43e36696d0cb20b160f9c534cb95003c787b926[m
Author: Jerome Humbert <jerome.humbert@gmail.com>
Date:   Sun Jan 2 17:40:03 2022 +0000

    Minor docs edit/add in bevy_render (#3447)
    
    # Objective
    
    Docs updates.
    
    ## Solution
    
    - Detail what `OrthographicCameraBundle::new_2d()` creates.
    - Fix a few renamed parameters in comments of `TrackedRenderPass`.
    - Add missing comments for viewport and debug markers.
    
    Co-authored-by: Jerome Humbert <djeedai@gmail.com>

[33mcommit 50b3f27a767e3b538694d5e7b3ccfdffca647f1b[m
Author: KDecay <kdecaymusic@protonmail.com>
Date:   Sun Jan 2 10:51:08 2022 +0000

    Updated bevy_dylib documentation and added missing_doc warning. (#3515)
    
    This PR is part of the issue #3492.
    
    # Objective
    - Add and update the bevy_dylib documentation to achieve a 100% documentation coverage.
    - Add the #![warn(missing_docs)] lint to keep the documentation coverage for the future.
    
    # Solution
    - Add and update the bevy_dylib documentation.
    - Add the #![warn(missing_docs)] lint.

[33mcommit 478bf7a2b6492ff59fe2be223aed1f2d43bd4c6c[m
Author: Oscar <oscar.shrimpton.personal@gmail.com>
Date:   Sat Jan 1 22:55:19 2022 +0000

    Remove Lutris from NixOS dependency section (#2945)
    
    # Objective
    
    - Using the instructions given for NixOS results in an unnecessarily long time to evaluate the shell expression due to unnecessary dependencies pulled in by `lutris`.
    
    ## Solution
    
    - Removed `lutris` dependency.
    
    Lutris is a GUI tool for running games on wine, I'm assuming it was pulled in by accident as it's definitely not necessary for running bevy. A hello world example, at the least, works fine without it.

[33mcommit 6b239713bf2bcd42cc411aec90ed6b79ec98a966[m
Author: Joel Godfrey-Smith <66573128+godsmith99x@users.noreply.github.com>
Date:   Sat Jan 1 22:28:44 2022 +0000

    Update linux_dependencies.md (#3517)
    
    Thanks for making Bevy. Recommend adding rust-libudev-devel as an additional dependence for Fedora.
    
    # Objective
    
    - Describe the objective or issue this PR addresses.
    - If you're fixing a specific issue, say "Fixes #X".
    
    ## Solution
    
    - Describe the solution used to achieve the objective above.

[33mcommit 5c590b0011733165a0c9dd9b908083ad912d36d1[m
Author: Troels Jessen <trojes@tuta.io>
Date:   Sat Jan 1 21:22:04 2022 +0000

    Added missing docs to bevy_internal and added warn on missing docs (#3514)
    
    # Objective
    This contributes documentation that should cover the entirety of bevy_internal as requested in #3492
    
    ## Solution
    warn(missing_docs) has been activated and documentation has been added to missing parts so that no warnings appear from this setting

[33mcommit 97c806585b8ed5156ea7610d386d009c710f61e0[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Sat Jan 1 19:41:20 2022 +0000

    README refresh (#3513)
    
    # Objective
    
    - The focus areas and roadmap are very stale.
    - Some of the information about how to learn or contribute to Bevy are outdated
    
    ## Solution
    
    - Remove links to focus areas and roadmap (roadmap still exists, and will be updated post-release).
    - Link to Bevy Assets, CONTRIBUTING.md and official examples.

[33mcommit 3ba711050f7de3e59a44bb2034fb02afbced5c4b[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Jan 1 19:22:22 2022 +0000

    do not add plugin ExtractComponentPlugin twice for StandardMaterial (#3502)
    
    # Objective
    
    - After updating #2988, all the examples started crashing with
    ```
    thread 'main' panicked at 'Plugin "bevy_render::render_component::ExtractComponentPlugin<bevy_asset::handle::Handle<bevy_pbr::pbr_material::StandardMaterial>>" was already added', crates/bevy_app/src/app.rs:831:33
    ```
    
    ## Solution
    
    Plugin was added twice:
    directly:
    https://github.com/bevyengine/bevy/blob/1d0d8a3397bd6fc2c14d42ffd0668d2443748912/crates/bevy_pbr/src/lib.rs#L73
    and through `MaterialPlugin`:
    https://github.com/bevyengine/bevy/blob/1d0d8a3397bd6fc2c14d42ffd0668d2443748912/crates/bevy_pbr/src/lib.rs#L72
    https://github.com/bevyengine/bevy/blob/1d0d8a3397bd6fc2c14d42ffd0668d2443748912/crates/bevy_pbr/src/material.rs#L183
    
    I removed the extra plugin
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit 1d0d8a3397bd6fc2c14d42ffd0668d2443748912[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Dec 30 21:07:26 2021 +0000

    Spherical area lights example (#3498)
    
    I was putting together the Bevy 0.6 release blog post and wanted a simple area light radius example, so here we are :)
    
    ![image](https://user-images.githubusercontent.com/2694663/147786883-63454290-b5b1-4456-9762-0b0b47e16bb5.png)

[33mcommit c641a905dc2e95f507477d5363990bd8381aa0f6[m
Author: David Sugar <foobarc11@protonmail.ch>
Date:   Thu Dec 30 20:08:40 2021 +0000

    StorageType parameter removed from ComponentDescriptor::new_resource (#3495)
    
    # Objective
    
    Remove the `StorageType` parameter from `ComponentDescriptor::new_resource` as discussed in #3361.
    
    - fixes #3361
    
    ## Solution
    
    - Parameter removed.
    - Basic docs added.
    
    ## Note
    
    Left a [comment](https://github.com/bevyengine/bevy/issues/3361#issuecomment-996433346) about `SparseStorage` being the more reasonable choice.
    
    
    
    Co-authored-by: r4gus <david@thesugar.de>

[33mcommit 3ac55f0bcf7fac73514582ae51e745b55ee5ae96[m
Author: Minghao Liu <molikto@gmail.com>
Date:   Thu Dec 30 19:55:01 2021 +0000

    load spirv using correct API (#3466)
    
    # Objective
    
    currently spirv source loading parse then desterilize it to make wgpu happy.
    
    ## Solution
    
    Use the right API to get spirv

[33mcommit b532cc9ef6d22f71c27860e6770a3a63249a0389[m
Author: Michael Dorst <m@mdorst.net>
Date:   Thu Dec 30 09:23:18 2021 +0000

    Fix `doc_markdown` lints in `bevy_utils` (#3485)
    
    #3457 adds the `doc_markdown` clippy lint, which checks doc comments to make sure code identifiers are escaped with backticks. This causes a lot of lint errors, so this is one of a number of PR's that will fix those lint errors one crate at a time.
    
    This PR fixes lints in the `bevy_utils` crate.

[33mcommit 593f64cfcb29cba29225a602bf0babed0ade6571[m
Author: Michael Dorst <m@mdorst.net>
Date:   Thu Dec 30 09:23:17 2021 +0000

    Fix `doc_markdown` lints in `bevy_transform` (#3483)
    
    #3457 adds the `doc_markdown` clippy lint, which checks doc comments to make sure code identifiers are escaped with backticks. This causes a lot of lint errors, so this is one of a number of PR's that will fix those lint errors one crate at a time.
    
    This PR fixes lints in the `bevy_transform` crate.

[33mcommit accfb33ab982e4e9a994e20b0d3239651e3eab3d[m
Author: Michael Dorst <m@mdorst.net>
Date:   Thu Dec 30 09:08:19 2021 +0000

    Fix `doc_markdown` lints in `bevy_app` (#3467)
    
    #3457 adds the `doc_markdown` clippy lint, which checks doc comments to make sure code identifiers are escaped with backticks. This causes a lot of lint errors, so this is one of a number of PR's that will fix those lint errors one crate at a time.
    
    This PR fixes lints in the `bevy_app` crate.

[33mcommit d8d3fdf2cfa53c511e8e8156fe1c8a749a20f159[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Dec 29 21:04:29 2021 +0000

    remove dead code: ShaderDefs derive (#3490)
    
    # Objective
    
    - remove some dead code and see if someone isn't happy about it
    
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit db6870423168593dc48d573ccc172c77d45dbfc2[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Dec 29 21:04:28 2021 +0000

    Enable Msaa for webgl by default (#3489)
    
    # Objective
    
    - `Msaa` was disabled in webgl due to a bug in wgpu
    - Bug has been fixed (https://github.com/gfx-rs/wgpu/pull/2307) and backported (https://github.com/gfx-rs/wgpu/pull/2327), and updates for [`wgpu-core`](https://crates.io/crates/wgpu-core/0.12.1) and [`wgpu-hal`](https://crates.io/crates/wgpu-hal/0.12.1) have been released
    
    ## Solution
    
    - Remove custom config for `Msaa` in webgl
    - I also changed two options that were using the arch instead of the `webgl` feature. it shouldn't change much for webgl, but could help if someone wants to target wasm but not webgl2
    
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit 66b517ef8164f11913cd9fc9ad4db8fda058d98e[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Wed Dec 29 21:04:27 2021 +0000

    fix shader compilation error reporting for non-wgsl shaders (#3441)
    
    in #3289 I accidentally only logged errors for wgsl shaders, this PR expands the error reporting the the other supported shader types.

[33mcommit d07c8a8fa7b90b838f7bbef1673b9bd83603b980[m
Author: Jonathan Cornaz <jonathan.cornaz@gmail.com>
Date:   Wed Dec 29 21:04:26 2021 +0000

    Implement ReflectValue serialization for Duration (#3318)
    
    # Objective
    
    Resolves #3277
    
    Currenty if we try to serialize a scene that contains a `Duration` (which is very common, since `Timer` contains one), we get an error saying:
    
    > Type 'core::time::Duration' does not support ReflectValue serialization
    
    
    ## Solution
    
    Let `Duration` implement `SerializeValue`.
    
    
    
    Co-authored-by: Jonathan Cornaz <jcornaz@users.noreply.github.com>

[33mcommit 8a8293b2665bef8d6d4661f685d34b54b7e5d714[m
Author: David Sugar <foobarc11@protonmail.ch>
Date:   Wed Dec 29 20:49:00 2021 +0000

    Renamed Entity::new to Entity::from_raw (#3465)
    
    # Objective
    
    - Rename `Entity::new(id: u32)` to `Entity::from_raw(id: u32)`.
    - Add further documentation.
    - fixes #3108
    
    ## Solution
    
    - Renamed `Entity::new(id: u32)` to `Entity::from_raw(id: u32)`.
    - Docs extended.
    
    I derived the examples from the discussion of issue #3108 .
    
    The [first case](https://github.com/bevyengine/bevy/issues/3108#issuecomment-966669781) mentioned in the linked issue is quite obvious but the [second one](https://github.com/bevyengine/bevy/issues/3108#issuecomment-967093902) probably needs further explanation.
    
    
    Co-authored-by: r4gus <david@thesugar.de>

[33mcommit fd743ec57f5ca2ac9dbb5e0e98ef91e9f410e424[m
Author: Michael Dorst <m@mdorst.net>
Date:   Wed Dec 29 19:04:18 2021 +0000

    Fix `doc_markdown` lints in `bevy_pbr` (#3477)
    
    #3457 adds the `doc_markdown` clippy lint, which checks doc comments to make sure code identifiers are escaped with backticks. This causes a lot of lint errors, so this is one of a number of PR's that will fix those lint errors one crate at a time.
    
    This PR fixes lints in the `bevy_pbr` crate.

[33mcommit 455ab65bced308faa30c1b5cf28e170e4d1aded8[m
Author: Michael Dorst <m@mdorst.net>
Date:   Wed Dec 29 18:49:43 2021 +0000

    Fix `doc_markdown` lints in `bevy_sprite` (#3480)
    
    #3457 adds the `doc_markdown` clippy lint, which checks doc comments to make sure code identifiers are escaped with backticks. This causes a lot of lint errors, so this is one of a number of PR's that will fix those lint errors one crate at a time.
    
    This PR fixes lints in the `bevy_sprite` crate.

[33mcommit 608e63a5bc9375475c7c1ab5d5f0bc5b12971423[m
Author: Michael Dorst <m@mdorst.net>
Date:   Wed Dec 29 17:52:42 2021 +0000

    Fix `doc_markdown` lints in `bevy_audio` (#3469)
    
    #3457 adds the `doc_markdown` clippy lint, which checks doc comments to make sure code identifiers are escaped with backticks. This causes a lot of lint errors, so this is one of a number of PR's that will fix those lint errors one crate at a time.
    
    This PR fixes lints in the `bevy_audio` crate.

[33mcommit 32d88c7d23ddfd9f42a4b88226afef1a57cef2f4[m
Author: Michael Dorst <m@mdorst.net>
Date:   Wed Dec 29 17:52:39 2021 +0000

    Fix `doc_markdown` lints in `bevy_asset` (#3468)
    
    #3457 adds the `doc_markdown` clippy lint, which checks doc comments to make sure code identifiers are escaped with backticks. This causes a lot of lint errors, so this is one of a number of PR's that will fix those lint errors one crate at a time.
    
    This PR fixes lints in the `bevy_asset` crate.

[33mcommit b32770d3033e7ece27768f545fbdf55c221c2a67[m
Author: Michael Dorst <m@mdorst.net>
Date:   Wed Dec 29 17:38:13 2021 +0000

    Fix `doc_markdown` lints in `bevy_tasks` (#3481)
    
    #3457 adds the `doc_markdown` clippy lint, which checks doc comments to make sure code identifiers are escaped with backticks. This causes a lot of lint errors, so this is one of a number of PR's that will fix those lint errors one crate at a time.
    
    This PR fixes lints in the `bevy_tasks` crate.

[33mcommit b1e4984c55e1398eb686a01ee35863ae88a8bb25[m
Author: Michael Dorst <m@mdorst.net>
Date:   Wed Dec 29 17:38:12 2021 +0000

    Fix `doc_markdown` lints in `bevy_reflect` (#3478)
    
    #3457 adds the `doc_markdown` clippy lint, which checks doc comments to make sure code identifiers are escaped with backticks. This causes a lot of lint errors, so this is one of a number of PR's that will fix those lint errors one crate at a time.
    
    This PR fixes lints in the `bevy_reflect` crate.

[33mcommit a90c0806595a8febbec68bd8e0926dae31b3aedf[m
Author: Michael Dorst <m@mdorst.net>
Date:   Wed Dec 29 17:38:11 2021 +0000

    Fix `doc_markdown` lints in `bevy_log` (#3476)
    
    #3457 adds the `doc_markdown` clippy lint, which checks doc comments to make sure code identifiers are escaped with backticks. This causes a lot of lint errors, so this is one of a number of PR's that will fix those lint errors one crate at a time.
    
    This PR fixes lints in the `bevy_log` crate.

[33mcommit 8aff7262d64f11b6d0e37d5dccc4ea1932bd363c[m
Author: Michael Dorst <m@mdorst.net>
Date:   Wed Dec 29 17:38:10 2021 +0000

    Fix `doc_markdown` lints in `bevy_input` (#3475)
    
    #3457 adds the `doc_markdown` clippy lint, which checks doc comments to make sure code identifiers are escaped with backticks. This causes a lot of lint errors, so this is one of a number of PR's that will fix those lint errors one crate at a time.
    
    This PR fixes lints in the `bevy_input` crate.

[33mcommit 2790b9d240b6f6deef2e14f3233b6bd68377990f[m
Author: Michael Dorst <m@mdorst.net>
Date:   Wed Dec 29 17:38:09 2021 +0000

    Fix `doc_markdown` lints in `bevy_gltf` (#3474)
    
    #3457 adds the `doc_markdown` clippy lint, which checks doc comments to make sure code identifiers are escaped with backticks. This causes a lot of lint errors, so this is one of a number of PR's that will fix those lint errors one crate at a time.
    
    This PR fixes lints in the `bevy_gltf` crate.

[33mcommit b65a1cadb7b32fbd8849141b63ef362c53a1c9fd[m
Author: Michael Dorst <m@mdorst.net>
Date:   Wed Dec 29 17:38:08 2021 +0000

    Fix `doc_markdown` lints in `bevy_diagnostic` (#3472)
    
    #3457 adds the `doc_markdown` clippy lint, which checks doc comments to make sure code identifiers are escaped with backticks. This causes a lot of lint errors, so this is one of a number of PR's that will fix those lint errors one crate at a time.
    
    This PR fixes lints in the `bevy_diagnostic` crate.

[33mcommit e6bce74220abd390e8059d1104fb9fc432aec728[m
Author: Michael Dorst <m@mdorst.net>
Date:   Wed Dec 29 17:25:34 2021 +0000

    Fix `doc_markdown` lints in `examples` (#3486)
    
    #3457 adds the `doc_markdown` clippy lint, which checks doc comments to make sure code identifiers are escaped with backticks. This causes a lot of lint errors, so this is one of a number of PR's that will fix those lint errors one crate at a time.
    
    This PR fixes lints in the `examples` folder.

[33mcommit 601cc0cbe3dc73c0db1993184f4ec47783e83884[m
Author: davier <bricedavier@gmail.com>
Date:   Tue Dec 28 20:47:45 2021 +0000

    bevy_ui: Check clip when handling interactions (#3461)
    
    # Objective
    
    Fix a bug: UI nodes that are clipped could still be interacted with in the clipped area.
    
    ## Solution
    
    Clip the position calculation in `ui_focus_system`

[33mcommit 3a9d5a63c980b4bd0d3c19d4bf2e652a1c351f1e[m
Author: David Sugar <foobarc11@protonmail.ch>
Date:   Mon Dec 27 21:24:18 2021 +0000

    bevy::scene::Entity renamed to bevy::scene::DynamicEntity. (#3448)
    
    Basic documentation added to bevy::scene::DynamicEntity and bevy::scene::DynamicScene.
    
    # Objective
    
    - Rename bevy::scene::Entity to bevy::scene::DynamicEntity
    - fixes #3233
    
    ## Solution
    
    - Renamed the struct as requested.
    - Added basic documentation.
    
    Co-authored-by: r4gus <david@thesugar.de>

[33mcommit 959a845704426d2f967c3898239e552b9d6bf9c9[m
Author: davier <bricedavier@gmail.com>
Date:   Mon Dec 27 19:46:25 2021 +0000

    bevy_ui: register Overflow type (#3443)
    
    I forgot to register the new `Overflow` type in #3296.

[33mcommit f3b053d11f2314c3ec0fbe85dfeb6168f1e13d01[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sun Dec 26 19:04:02 2021 +0000

    crevice derive macro: fix path to render_resource when importing from bevy (#3438)
    
    # Objective
    
    - Fix #3436
    
    ## Solution
    
    - Do not add twice `render_resource` when coming from `bevy`
    
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit 06d9384447e9934b56ee2033315f4f955824fda0[m
Author: davier <bricedavier@gmail.com>
Date:   Sun Dec 26 18:49:01 2021 +0000

    Add FromReflect trait to convert dynamic types to concrete types (#1395)
    
    Dynamic types (`DynamicStruct`, `DynamicTupleStruct`, `DynamicTuple`, `DynamicList` and `DynamicMap`) are used when deserializing scenes, but currently they can only be applied to existing concrete types. This leads to issues when trying to spawn non trivial deserialized scene.
    For components, the issue is avoided by requiring that reflected components implement ~~`FromResources`~~ `FromWorld` (or `Default`). When spawning, a new concrete type is created that way, and the dynamic type is applied to it. Unfortunately, some components don't have any valid implementation of these traits.
    In addition, any `Vec` or `HashMap` inside a component will panic when a dynamic type is pushed into it (for instance, `Text` panics when adding a text section).
    
    To solve this issue, this PR adds the `FromReflect` trait that creates a concrete type from a dynamic type that represent it, derives the trait alongside the `Reflect` trait, drops the ~~`FromResources`~~ `FromWorld` requirement on reflected components, ~~and enables reflection for UI and Text bundles~~. It also adds the requirement that fields ignored with `#[reflect(ignore)]` implement `Default`, since we need to initialize them somehow.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 585d0b84672b0309e2bc0487e9c43d9df29212d0[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sun Dec 26 05:39:46 2021 +0000

    remove some `mut` in queries (#3437)
    
    # Objective
    
    - While reading code, found some queries that are `mut` and not used as such
    
    ## Solution
    
    - Remove `mut` when possible
    
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit 963e2f08a2f762d896eb28ef4a80ba2ec124655b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Dec 25 21:45:43 2021 +0000

    Materials and MaterialPlugin (#3428)
    
    This adds "high level" `Material` and `SpecializedMaterial` traits, which can be used with a `MaterialPlugin<T: SpecializedMaterial>`. `MaterialPlugin` automatically registers the appropriate resources, draw functions, and queue systems. The `Material` trait is simpler, and should cover most use cases. `SpecializedMaterial` is like `Material`, but it also requires defining a "specialization key" (see #3031). `Material` has a trivial blanket impl of `SpecializedMaterial`, which allows us to use the same types + functions for both.
    
    This makes defining custom 3d materials much simpler (see the `shader_material` example diff) and ensures consistent behavior across all 3d materials (both built in and custom). I ported the built in `StandardMaterial` to `MaterialPlugin`. There is also a new `MaterialMeshBundle<T: SpecializedMaterial>`, which `PbrBundle` aliases to.

[33mcommit 22c665fa39b16c62272b927db742ea62d67615e8[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Dec 24 16:53:49 2021 +0000

    re-export `BufferBinding` and `BufferDescriptor` (#3429)
    
    # Objective
    
    - I want to port `bevy_egui` to Bevy main and only reuse re-exports from Bevy
    
    ## Solution
    
    - Add exports for `BufferBinding` and `BufferDescriptor`
    
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit 76ec709edee77c28a4a027ff1ab8d768be523633[m
Author: davier <bricedavier@gmail.com>
Date:   Fri Dec 24 07:10:12 2021 +0000

    Add Visibility component to UI (#3426)
    
    # Objective
    
    Fixes #3422
    
    ## Solution
    
    Adds the existing `Visibility` component to UI bundles and checks for it in the extract phase of the render app.
    
    The `ComputedVisibility` component was not added. I don't think the UI camera needs frustum culling, but having `RenderLayers` work may be desirable. However I think we would need to change `check_visibility()` to differentiate between 2d, 3d and UI entities.

[33mcommit adb3ad399cf092110b2d69f7dc189abc0ebc9f80[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Fri Dec 24 06:57:30 2021 +0000

    make `sub_app` return an `&App` and add `sub_app_mut() -> &mut App` (#3309)
    
    It's sometimes useful to have a reference to an app a sub app at the same time, which is only possible with an immutable reference.

[33mcommit 5d5d7833f0e7bfc90bcb880fad558db6ff2d2ba4[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Dec 24 06:57:28 2021 +0000

    fix parenting of scenes (#2410)
    
    # Objective
    
    Fix #2406
    
    Scene parenting was not done completely, leaving the hierarchy maintenance to the standard system. As scene spawning happens in stage `PreUpdate` and hierarchy maintenance in stage `PostUpdate`, this left the scene in an invalid state parent wise for part of a frame
    
    ## Solution
    
    Also add/update the `Children` component when spawning the scene.
    
    I kept the `Children` component as a `SmallVec`, it could be moved to an `HashSet` to guarantee uniqueness
    
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit 08b5234582ba296b0cb5a0ef06252c40518f6a27[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Dec 24 01:11:51 2021 +0000

    Disable nightly rust checks for bors (#3427)
    
    This is a temporary measure while we wait for https://github.com/rust-lang/rust/issues/92163 to be resolved.

[33mcommit 79d36e7c2831dfaab131ba1913dbfca4ab8e7245[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Dec 23 22:49:12 2021 +0000

    Prepare crevice for vendored release (#3394)
    
    # Objective
    
    - Our crevice is still called "crevice", which we can't use for a release
    - Users would need to use our "crevice" directly to be able to use the derive macro
    
    ## Solution
    
    - Rename crevice to bevy_crevice, and crevice-derive to bevy-crevice-derive
    - Re-export it from bevy_render, and use it from bevy_render everywhere
    - Fix derive macro to work either from bevy_render, from bevy_crevice, or from bevy
    
    ## Remaining
    
    - It is currently re-exported as `bevy::render::bevy_crevice`, is it the path we want?
    - After a brief suggestion to Cart, I changed the version to follow Bevy version instead of crevice, do we want that?
    - Crevice README.md need to be updated
    - in the `Cargo.toml`, there are a few things to change. How do we want to change them? How do we keep attributions to original Crevice?
    ```
    authors = ["Lucien Greathouse <me@lpghatguy.com>"]
    documentation = "https://docs.rs/crevice"
    homepage = "https://github.com/LPGhatguy/crevice"
    repository = "https://github.com/LPGhatguy/crevice"
    ```
    
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit aeba9faf0451c4340cc3041d31519dd909598c0b[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Dec 23 19:19:15 2021 +0000

    use ogg by default instead of mp3 (#3421)
    
    # Objective
    
    - mp3 feature of rodio has dependencies that are not maintained with security issues
    - mp3 feature of rodio doesn't build in wasm
    - mp3 feature of rodio uses internal memory allocation that cause rejection from Apple appstore
    
    ## Solution
    
    - Use vorbis instead of mp3 by default
    
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit c6d4c63f42e5d4315237eb7680bccfbf3e1a7ac5[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Thu Dec 23 19:19:14 2021 +0000

    enable `wasm-bindgen` feature on gilrs (#3420)
    
    WIthout the feature, `gilrs` uses `stdweb` instead of `wasm-bindgen` which isn't compatible with the rest of bevy.
    
    Unfortunately, the `stdweb` dependency is still in the dependency tree, it just isn't used (https://gitlab.com/gilrs-project/gilrs/-/issues/101). This will be fixed in `gilrs 0.9` when it releases.

[33mcommit 035ec7b7631eb68afe4038a686bc2cf37838653a[m
Author: Nicola Papale <nico@nicopap.ch>
Date:   Thu Dec 23 19:19:13 2021 +0000

    Implement non-indexed mesh rendering (#3415)
    
    # Objective
    
    Instead of panicking when the `indices` field of a mesh is `None`, actually manage it.
    
    This is just a question of keeping track of the vertex buffer size.
    
    ## Notes
    
    * Relying on this change to improve performance on [bevy_debug_lines using the new renderer](https://github.com/Toqozz/bevy_debug_lines/pull/10)
    * I'm still new to rendering, my only expertise with wgpu is the learn-wgpu tutorial, likely I'm overlooking something.

[33mcommit 851b5939ce75107fe0d1ae8660c4b45764868ee3[m
Author: Mike <mike.hsu@gmail.com>
Date:   Thu Dec 23 19:03:44 2021 +0000

    add tracing spans for parallel executor and system overhead (#3416)
    
    This PR adds tracing spans for the parallel executor and system overhead.
    
    ![image](https://user-images.githubusercontent.com/2180432/147172747-b78026e3-1c30-4120-92c8-693c6f1564cd.png)

[33mcommit 0936f4ca9d64f15f51e4d7e1b6e20b01128f1257[m
Author: James Higgins <james.isaac.higgins@gmail.com>
Date:   Thu Dec 23 09:04:55 2021 +0000

    RemoveChildren command (#1925)

[33mcommit 081350916c39fc1c7c9d659ccb6d86413832b465[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Wed Dec 22 22:16:42 2021 +0000

    report shader processing errors in `RenderPipelineCache` (#3289)
    
    ### Problem
    - shader processing errors are not displayed
    - during hot reloading when encountering a shader with errors, the whole app crashes
    
    ### Solution
    - log `error!`s for shader processing errors
    - when `cfg(debug_assertions)` is enabled (i.e. you're running in `debug` mode), parse shaders before passing them to wgpu. This lets us handle errors early.

[33mcommit 6c479649bf0033a086cd14d50834e4cff4d1d4b2[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Dec 22 20:59:48 2021 +0000

    enable Webgl2 optimisation in pbr under feature (#3291)
    
    # Objective
    
    - 3d examples fail to run in webgl2 because of unsupported texture formats or texture too large
    
    ## Solution
    
    - switch to supported formats if a feature is enabled. I choose a feature instead of a build target to not conflict with a potential webgpu support
    
    Very inspired by https://github.com/superdump/bevy/commit/6813b2edc5eb5833b11bb7b4f01a3c662d1953e2, and need #3290 to work.
    
    I named the feature `webgl2`, but it's only needed if one want to use PBR in webgl2. Examples using only 2D already work.
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit a3c53e689d62a2fd403bf0236b5638e569bd5600[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Dec 22 01:01:39 2021 +0000

    Shader Processor: process imported shader (#3290)
    
    # Objective
    
    - I want to be able to use `#ifdef` and other processor directives in an imported shader
    
    ## Solution
    
    - Process imported shader strings
    
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit b5d7ff2d758a7f6ad0dd1b48ef99fb35f727d7f1[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Wed Dec 22 00:49:15 2021 +0000

    Do not panic on failed setting of GameOver state in AlienCakeAddict (#3411)
    
    # Objective
    
    - Tentatively fixes #2525.
    
    ## Solution
    
    - The panic seems to occur when the game-over state occurs nearly instantly.
    - Discard the `Result`, rather than panicking. We could probably handle this better, but I want to see if this works first. Ping @qarmin.

[33mcommit 004bbe9f0466e5d530d81bfef38f43bc4acc0430[m
Author: PaperCow <testdummydillon+papercow@gmail.com>
Date:   Tue Dec 21 23:56:58 2021 +0000

    Use EventWriter for gilrs_system (#3413)
    
    # Objective
    
    - fixes #3397
    
    ## Solution
    
    - Uses EventWriter instead of ResMut<Event> in gilrs_system.rs.
    
    I also renamed the argument from `event` to `events` for consistency. All other instances I could find in the engine of EventWriter use a plural argument name. Happy to undo or modify this change if desired.

[33mcommit c04dfc1174729781219c257fdd1e379a2f1a1a52[m
Author: aloucks <aloucks@cofront.net>
Date:   Mon Dec 20 23:16:54 2021 +0000

    Add some of the missing methods to `TrackedRenderPass` (#3401)
    
    # Objective
    
    Add missing methods to `TrackedRenderPass`
    
    - `set_push_constants`
    - `set_viewport`
    - `insert_debug_marker`
    - `push_debug_group`
    - `pop_debug_group`
    - `set_blend_constant`
    
    https://docs.rs/wgpu/0.12.0/wgpu/struct.RenderPass.html
    
    I need `set_push_constants` but started adding the others as I noticed they were also missing. The `draw indirect` family of methods are still missing as are the `timestamp query` methods.

[33mcommit 5479047aa213ab0276565f7d6048e01deb7d326a[m
Author: MrGVSV <gino.valente.code@gmail.com>
Date:   Mon Dec 20 22:04:45 2021 +0000

    Added `set_cursor_icon(...)` to `Window` (#3395)
    
    # Objective
    
    The window's cursor should be settable without having to implement a custom cursor icon solution. This will especially be helpful when creating user-interfaces that might like to use the cursor to denote some meaning (e.g., _clickable_, _resizable_, etc.).
    
    ## Solution
    
    Added a `CursorIcon` enum that maps one-to-one to winit's `CursorIcon` enum, as well as a method to set/get it for the given `Window`.

[33mcommit 3443cc77cbd55e236159d0627fbd2df15298c642[m
Author: John <toasterthegamer@gmail.com>
Date:   Mon Dec 20 21:43:55 2021 +0000

    Fixes minimization crash because of cluster updates. (#3369)
    
    # Objective
    Fixes: #3368
    
    Issue was caused by screen size being: `(0, 0)`.
    
    ## Solution
    Don't update clusters if the screen size is zero. A better solution might be to not render when minimized, but this works in the meantime.
    
    
    Co-authored-by: John <startoaster23@gmail.com>

[33mcommit c61fbcb7db5191c7cc3c5ebe0b1c046bb7a48495[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Dec 20 20:50:52 2021 +0000

    Only bevy_render should depend directly on wgpu (#3393)
    
    # Objective
    
    - Only bevy_render should depend directly on wgpu
    - This helps to make sure bevy_render re-exports everything needed from wgpu
    
    ## Solution
    
    - Remove bevy_pbr, bevy_sprite and bevy_ui dependency on wgpu
    
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit 1ef028d2af283dfec1830c0cdba33b3f876099c0[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Mon Dec 20 20:50:51 2021 +0000

    Basic docs for Storages (#3391)
    
    # Objective
    
    - Storages are used to store the ECS data.
    - They're undocumented.
    
    ## Solution
    
    - Add some very basic docs.
    
    ## Notes
    - Some of this was hard to immediately understand when reading the code, so suggestions on improvements / things to add are particularly welcome.

[33mcommit c79ec9cad6fe4302f4ed96477864d3bc219dbe00[m
Author: davier <bricedavier@gmail.com>
Date:   Mon Dec 20 20:33:39 2021 +0000

    Fix custom mesh pipelines (#3381)
    
    # Objective
    
    Fixes #3379
    
    ## Solution
    
    The custom mesh pipelines needed to be specialized on each mesh's primitive topology, as done in `queue_meshes()`
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 46c1480f42a579141717b822d6efbf2c47051e1c[m
Author: ç ç©¶ç¤¾äº¤ <cryscan@umich.edu>
Date:   Mon Dec 20 20:33:38 2021 +0000

    Fix hierarchy example panic (#3378)
    
    # Objective
    Fixes #3321
    
    ## Solution
    Uses `despawn_recursive()` instead of `despawn()` when removing children.

[33mcommit 340957994dc2c85f7a3ebc5ea6a5ad1b161e0041[m
Author: davier <bricedavier@gmail.com>
Date:   Sun Dec 19 05:44:28 2021 +0000

    Implement the `Overflow::Hidden` style property for UI (#3296)
    
    # Objective
    
    This PR implements the `overflow` style property in `bevy_ui`. When set to `Overflow::Hidden`, the children of that node are clipped so that overflowing parts are not rendered. This is an important building block for UI widgets.
    
    ## Solution
    
    Clipping is done on the CPU so that it does not break batching.
    
    The clip regions update was implemented as a separate system for clarity, but it could be merged with the other UI systems to avoid doing an additional tree traversal. (I don't think it's important until we fix the layout performance issues though).
    
    A scrolling list was added to the `ui_pipelined` example to showcase `Overflow::Hidden`. For the sake of simplicity, it can only be scrolled with a mouse.

[33mcommit 9a89295a1741da0258c56c326aecfcad37ae6b41[m
Author: Vabka <vab-999@ya.ru>
Date:   Sun Dec 19 03:03:06 2021 +0000

    Update wgpu to 0.12 and naga to 0.8 (#3375)
    
    # Objective
    
    Fixes #3352
    Fixes #3208
    
    ## Solution
    
    - Update wgpu to 0.12
    - Update naga to 0.8
    - Resolve compilation errors
    - Remove [[block]] from WGSL shaders (because it is depracated and now wgpu cant parse it)
    - Replace `elseif` with `else if` in pbr.wgsl

[33mcommit e018ac838d164ce00a8c8fec3748787aaddb0e05[m
Author: Hoidigan <Hoidigan@users.noreply.github.com>
Date:   Sat Dec 18 22:59:55 2021 +0000

    Add readme as docs to relevant crates. (#2575)
    
    Fixes #2566
    Fixes #3005
    
    There are only READMEs in the 4 crates here (with the exception of bevy itself).
    Those 4 crates are ecs, reflect, tasks, and transform.
    These should each now include their respective README files.
    
    Co-authored-by: Hoidigan <57080125+Hoidigan@users.noreply.github.com>
    Co-authored-by: Daniel Nelsen <57080125+Hoidigan@users.noreply.github.com>

[33mcommit 8c250919e3f8ae9d485150966c4c8b7f38d8e543[m
Author: sapir <yasapir@gmail.com>
Date:   Sat Dec 18 21:29:24 2021 +0000

    Fix double drop in BlobVec::replace_unchecked (#2597) (#2848)
    
    # Objective
    
    I thought I'd have a go a trying to fix #2597.
    
    Hopefully fixes #2597.
    
    ## Solution
    
    I reused the memory pointed to by the value parameter, that is already required by `insert` to not be dropped, to contain the extracted value while dropping it.

[33mcommit 73f524f61cbf5f5df775e61fb055eceb0b99db8b[m
Author: Dusty DeWeese <dustin.deweese@gmail.com>
Date:   Sat Dec 18 20:55:40 2021 +0000

    Support topologies other than TriangleList (#3349)
    
    # Objective
    
    Fixes https://github.com/bevyengine/bevy/issues/3346
    
    ## Solution
    
    I've encoded the topology in the `MeshKey` similar to how MSAA samples are handled.

[33mcommit 6eb8e15e3d34f1c417103b6869ed47f81c919706[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Dec 18 20:13:59 2021 +0000

    Improved bevymark: no bouncing offscreen and spawn waves from CLI (#3364)
    
    # Objective
    
    - In bevymark, bevies were very bouncy and could go off screen after a while, skewing the FPS
    
    https://user-images.githubusercontent.com/8672791/146540848-282fa11b-d058-4da9-8e95-688ae67d9406.mp4
    
    ## Solution
    
    - Make bevies bounce also on top of the screen
    - I also changed how the examples read args from CLI to be able to spawn waves: `cargo run --example bevymark --release -- 5 100` (first is number of bevy per wave, second is number of wave, with one wave every 0.2 seconds). This makes it easier to reproduce some exact situations
    
    https://user-images.githubusercontent.com/8672791/146542857-2f953fa0-7b8d-4772-93f8-b8d7a31259dc.mp4
    
    
    
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit e48f9d8cd4562d5ea6b483764ae9288feb13cc72[m
Author: Rostyslav Toch <RokaRostuk@gmail.com>
Date:   Sat Dec 18 20:00:18 2021 +0000

    Add documentation and tests to AxisSettings (#3303)
    
    # Objective
    
    Fixes: #3247
    
    ## Solution
    
    - Added short documentation for `AxisSettings`
    - Added tests for `AxisSettings` and `ButtonSettings`
    
    
    Co-authored-by: CrazyRoka <rokarostuk@gmail.com>

[33mcommit ed9d45fae57e8f01d13ca3a6c12a5f3005b6c610[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Sat Dec 18 19:38:05 2021 +0000

    Add an example 'showcasing' using multiple windows (#3367)
    
    # Objective
    
    - The multiple windows example which was viciously murdered in #3175.
    - cart asked me to
    
    ## Solution
    
    - Rework the example to work on pipelined-rendering, based on the work from #2898

[33mcommit b5a04532c5c1cee266473b52ed5eaff2b851dfe8[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Sat Dec 18 17:53:21 2021 +0000

    Rename render UiSystem to RenderUiSystem (#3371)
    
    Without this name clash makes it impossible to order relative to the ui extract systems.

[33mcommit 11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13[m
Author: r00ster <r00ster91@protonmail.com>
Date:   Sat Dec 18 00:52:37 2021 +0000

    Add an example to draw a rectangle (#2957)
    
    # Objective
    
    Every time I come back to Bevy I face the same issue: how do I draw a rectangle again? How did that work? So I go to https://github.com/bevyengine/bevy/tree/main/examples in the hope of finding literally the simplest possible example that draws something on the screen without any dependency such as an image. I don't want to have to add some image first, I just quickly want to get something on the screen with `main.rs` alone so that I can continue building on from that point on. Such an example is particularly helpful for a quick start for smaller projects that don't even need any assets such as images (this is my case currently).
    
    Currently every single example of https://github.com/bevyengine/bevy/tree/main/examples#2d-rendering (which is the first section after hello world that beginners will look for for very minimalistic and quick examples) depends on at least an asset or is too complex. This PR solves this.
    It also serves as a great comparison for a beginner to realize what Bevy is really like and how different it is from what they may expect Bevy to be. For example for someone coming from [LÃVE](https://love2d.org/), they will have something like this in their head when they think of drawing a rectangle:
    ```lua
    function love.draw()
        love.graphics.setColor(0.25, 0.25, 0.75);
        love.graphics.rectangle("fill", 0, 0, 50, 50);
    end
    ```
    This, of course, differs quite a lot from what you do in Bevy. I imagine there will be people that just want to see something as simple as this in comparison to have a better understanding for the amount of differences.
    
    ## Solution
    
    Add a dead simple example drawing a blue 50x50 rectangle in the center with no more and no less than needed.

[33mcommit d3749a98f88b560050845df666fdd580adbbec40[m
Author: Tobenaii <akuapengin42@gmail.com>
Date:   Sat Dec 18 00:29:36 2021 +0000

    Use updated window size in bevymark example (#3335)
    
    # Objective
    
    Have the bird spawning/collision systems in bevymark use the proper window size, instead of the size set in WindowDescriptor which isn't updated when the window is resized.
    
    ## Solution
    
    Use the Windows resource to grab the width/height from the primary window. This is consistent with the other examples.

[33mcommit f30f8334064afb6bfdcb5b42c37814c50c501dde[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Sat Dec 18 00:09:24 2021 +0000

    Remove vestigial derives (#3343)
    
    These derives seem to be leftover vestiges of the old renderer.
    
    At least removing them doesn't seem to harm anything.
    
    edit: thanks `@forbjok` on discord for pointing this out.

[33mcommit 6a0008f3d32ebdf6d50287cd78fb6db30068ed49[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Dec 18 00:09:23 2021 +0000

    Fix doc warnings (#3339)
    
    # Objective
    
    - There are a few warnings when building Bevy docs for dead links
    - CI seems to not catch those warnings when it should
    
    ## Solution
    
    - Enable doc CI on all Bevy workspace
    - Fix warnings
    - Also noticed plugin GilrsPlugin was not added anymore when feature was enabled
    
    
    First commit to check that CI would actually fail with it: https://github.com/bevyengine/bevy/runs/4532652688?check_suite_focus=true
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit 3974e02fd17708db6e5e2c3d310f7b57fd7d19f0[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Dec 18 00:09:22 2021 +0000

    Enable trace feature for subfeatures using it (#3337)
    
    # Objective
    
    - It isn't very useful to be able to enable feature `trace_chrome` on its own
    
    ## Solution
    
    - Enable `trace` feature when enabling `trace_chrome` or `trace_tracy`
    
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit e677755c5e1cd67e5cbb7e83c92f027d55c954a0[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Dec 17 23:58:09 2021 +0000

    CI: use lavapipe instead of swiftshader when running examples (#3358)
    
    # Objective
    
    - fixes #3344
    - have example run faster
    
    ## Solution
    
    - thanks to the nice folks at wgpu, I was able to switch from swift shader to lavapipe which is faster
    - I also reduced the runtime for some of the examples
    - I enabled the trace_chrome feature on the examples, and stored the results as an artefact. it can be useful to debug
    - runtime is back to around 10 minutes
    
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit 9a16a4d01830297987db40b45f03382ed3acad62[m
Author: John <toasterthegamer@gmail.com>
Date:   Fri Dec 17 22:26:59 2021 +0000

    Added set_scissor_rect to tracked render pass. (#3320)
    
    # Objective And Solution
    Add `set_scissor_rect` from wgpu-rs to the `TrackedRenderPass`. wgpu documentation can be found here:
    https://docs.rs/wgpu/latest/wgpu/struct.RenderPass.html#method.set_scissor_rect
    
    The reason for adding this is to cull fragments that are outside of the given rect. For my purposes this is extremely useful for UI.

[33mcommit 7356f1586d74039f840bcfcf24af3e21c23e3c18[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Dec 16 00:34:50 2021 +0000

    remove advisory for spirv-reflect (#3338)
    
    # Objective
    
    - With the removal of the old renderer, Bevy doesn't depend on spirv-reflect ð
    
    ## Solution
    
    - Remove its advisory from the ignored list
    
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit 684c821e964054e2f54834d5d6a7777fa945241d[m
Author: Branan Riley <branan@gmail.com>
Date:   Thu Dec 16 00:04:34 2021 +0000

    Schedule gilrs system before input systems (#2989)
    
    # Objective
    
    Previously, the gilrs system had no explicit relationship to the input
    systems. This could potentially cause it to be scheduled after the
    input systems, leading to a one-frame lag in gamepad inputs.
    
    This was a regression introduced in #1606 which removed the `PreEvent` stage
    
    ## Solution
    
    This adds an explicit `before` relationship to the gilrs plugin,
    ensuring that raw gamepad events will be processed on the same frame
    that they are generated.

[33mcommit 49a4009d5cc06410b77707e56f5b43d11dfdf63a[m
Author: Alex <3957610+CptPotato@users.noreply.github.com>
Date:   Wed Dec 15 22:04:39 2021 +0000

    re-export ClearPassNode (#3336)
    
    Currently the `ClearPassNode` is not exported, due to an additional `use ...;` in the core pipeline's `lib.rs`. This seems unintentional, as there already is a public glob import in the file.
    
    This just removes the explicit use. If it actually was intentional to keep the node internal, let me know.

[33mcommit add1818a05ad4b8d4672197afd477ab29f8446b5[m
Author: MrGVSV <gino.valente.code@gmail.com>
Date:   Wed Dec 15 01:23:32 2021 +0000

    Add documentation to `KeyCode` for Mac users (#3331)
    
    # Objective
    
    `KeyCode::*Win` and `KeyCode::*Alt` might be confusing for some Mac users.
    
    ## Solution
    
    Added some small documentation to clarify the mappings for those developing on a Mac.
    
    ## Additional Context
    
    Related issue: #3240

[33mcommit 70c916588684e4b7aa2cf9f9d11ad37a68f65d84[m
Author: Hennadii Chernyshchyk <genaloner@gmail.com>
Date:   Wed Dec 15 00:15:47 2021 +0000

    Fix crash with disabled winit (#3330)
    
    # Objective
    
    This PR fixes a crash when winit is enabled when there is a camera in the world. Part of #3155
    
    ## Solution
    
    In this PR, I removed two unwraps and added an example for regression testing.

[33mcommit c061ec33c8eac477bbdf09094289027e75f5c325[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Tue Dec 14 23:42:35 2021 +0000

    bevy_pbr2: Fix clustering for orthographic projections (#3316)
    
    # Objective
    
    PBR lighting was broken in the new renderer when using orthographic projections due to the way the depth slicing works for the clusters. Fix it.
    
    ## Solution
    
    - The default orthographic projection near plane is 0.0. The perspective projection depth slicing does a division by the near plane which gives a floating point NaN and the clustering all breaks down.
    - Orthographic projections have a linear depth mapping, so it made intuitive sense to me to do depth slicing with a linear mapping too. The alternative I saw was to try to handle the near plane being at 0.0 and using the exponential depth slicing, but that felt like a hack that didn't make sense.
    - As such, I have added code that detects whether the projection is orthographic based on `projection[3][3] == 1.0` and then implemented the orthographic mapping case throughout (when computing cluster AABBs, and when mapping a view space position (or light) to a cluster id in both the rust and shader code).
    
    ## Screenshots
    Before:
    ![before](https://user-images.githubusercontent.com/302146/145847278-5b1bca74-fbad-4cc5-8b49-384f6a377fdc.png)
    After:
    <img width="1392" alt="Screenshot 2021-12-13 at 16 36 53" src="https://user-images.githubusercontent.com/302146/145847314-6f3a2035-5d87-4896-8032-0c3e35e15b7d.png">
    Old renderer (slightly lighter due to slight difference in configured intensity):
    <img width="1392" alt="Screenshot 2021-12-13 at 16 42 23" src="https://user-images.githubusercontent.com/302146/145847391-6a5e6fe0-22da-4fc1-a6c7-440543689a63.png">

[33mcommit c825fda74a7c81b4e904f0c579b13a3b115d346d[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Dec 14 23:04:26 2021 +0000

    add default standard material in PbrBundle (#3325)
    
    # Objective
    
    - Fix #3323
    
    
    ## Solution
    
    - Add a default standard material that is very visible. It is similar to the previous standard material that was used
    
    <img width="1392" alt="Screenshot 2021-12-14 at 15 39 01" src="https://user-images.githubusercontent.com/8672791/146019401-ed4b5fc1-7cce-4a8f-a511-a6f9665a51d7.png">
    
    
    
    Co-authored-by: FranÃ§ois <8672791+mockersf@users.noreply.github.com>

[33mcommit ffecb05a0ab423b46ab991b49c54516bcaf2ea7b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Dec 14 03:58:23 2021 +0000

    Replace old renderer with new renderer (#3312)
    
    This makes the [New Bevy Renderer](#2535) the default (and only) renderer. The new renderer isn't _quite_ ready for the final release yet, but I want as many people as possible to start testing it so we can identify bugs and address feedback prior to release.
    
    The examples are all ported over and operational with a few exceptions:
    
    * I removed a good portion of the examples in the `shader` folder. We still have some work to do in order to make these examples possible / ergonomic / worthwhile: #3120 and "high level shader material plugins" are the big ones. This is a temporary measure.
    * Temporarily removed the multiple_windows example: doing this properly in the new renderer will require the upcoming "render targets" changes. Same goes for the render_to_texture example.
    * Removed z_sort_debug: entity visibility sort info is no longer available in app logic. we could do this on the "render app" side, but i dont consider it a priority.

[33mcommit de8edd3165c379e05aabb38359b3f4b97f46540a[m
Author: Niklas Eicker <git@nikl.me>
Date:   Sun Dec 12 21:26:40 2021 +0000

    Rename fixed timestep state and add a test (#3260)
    
    # Objective
    
    fixes #3234
    
    ## Solution
    
    - rename `bevy::core::State` to `LocalFixedTimestepState`
    - add a test for FixedTimestep since I am already there

[33mcommit fe9b5003c59ed6855cc30022f4111c6b5988a756[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Dec 12 21:08:04 2021 +0000

    Run a clear pass on Windows without any Views (#3304)
    
    Fixes #3043
    
    `surface_texture.present()` will cause panics if no work is done on a given frame. "Views" are how we queue up work. Without any cameras, no work is produced. This adds a "clear pass" for windows without views, which ensures we clear windows (thus doing work) every frame.
    
    This is a "quick fix". It can be made much cleaner once we make "render targets" a concept and move some responsibilities around. Then we just clear the "render target" once instead of clearing "views". I _might_ have time to tackle that work prior to 0.6, but I doubt it. If "render targets" don't make it in to 0.6, they will be one of the first things I tackle after release.

[33mcommit 172f4d6d787059f9d42fc262e9f766f26ac45e20[m
Author: Rostyslav Toch <RokaRostuk@gmail.com>
Date:   Sat Dec 11 23:31:46 2021 +0000

    Documented and tested Axis<T> (#3276)
    
    # Objective
    
    Fixes #3247
    
    ## Solution
    
    - Added docs to `Axis<T>`. This one can be extended @alice-i-cecile
    - Added unit tests
    - Added `min` and `max` values to the struct. @alice-i-cecile Do we need to these variables?
    - Limited `set` method usage with `min` and `max` values
    
    
    Co-authored-by: CrazyRoka <rokarostuk@gmail.com>

[33mcommit a5ea38f75e352d673d21bacd6ea94a02728b98a1[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Sat Dec 11 23:16:01 2021 +0000

    add methods to get reads and writes of Access<T> (#3166)
    
    This makes it possible to e.g. show resource and component access on hover in [bevy_mod_debugdump](https://github.com/jakobhellermann/bevy_mod_debugdump/):
    ![grafik](https://user-images.githubusercontent.com/22177966/142773962-320f6e5b-608e-4abb-88b8-78da4fefc166.png)

[33mcommit 0ee4195fb0fcc5c80da6499fcc5aca05840d0c69[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Sat Dec 11 22:58:46 2021 +0000

    Remove some superfluous unsafe code (#3297)
    
    # Objective
    
    - This `unsafe` is weird
    
    ## Solution
    
    - Don't use `unsafe` here
    
    Hopefully this isn't already in an open PR.

[33mcommit d8abfdbc6a9dcc22da32ac29c28592154485d012[m
Author: Niklas Eicker <git@nikl.me>
Date:   Sat Dec 11 20:54:37 2021 +0000

    Make currently required features for some examples explicit (#3262)
    
    # Objective
    
    Fixes #3255
    
    ## Solution
    
    - mark the `bevy_gltf` feature as required for some examples
    
    This should be cleaned up when we remove the old renderer

[33mcommit 25b62f95773f6da46143772f86b8198937507f95[m
Author: davier <bricedavier@gmail.com>
Date:   Fri Dec 10 22:21:23 2021 +0000

    Port bevy_ui to pipelined-rendering (#2653)
    
    # Objective
    
    Port bevy_ui to pipelined-rendering (see #2535 )
    
    ## Solution
    
    I did some changes during the port:
    - [X] separate color from the texture asset (as suggested [here](https://discord.com/channels/691052431525675048/743663924229963868/874353914525413406))
    - [X] ~give the vertex shader a per-instance buffer instead of per-vertex buffer~ (incompatible with batching)
    
    Remaining features to implement to reach parity with the old renderer:
    - [x] textures
    - [X] TextBundle
    
    I'd also like to add these features, but they need some design discussion:
    - [x] batching
    - [ ] separate opaque and transparent phases
    - [ ] multiple windows
    - [ ] texture atlases
    - [ ] (maybe) clipping

[33mcommit 58474d7c4a2dcd0684730500def03f30e5ebc0e6[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Fri Dec 10 21:09:36 2021 +0000

    update wireframe rendering to new renderer (#3193)
    
    Updates the wireframe rendering initialliy implemented in https://github.com/bevyengine/bevy/pull/562 to the new renderer.
    It lives in `bevy_pbr2` instead of `bevy_render2` because that way it can reuse the `MeshPipeline`.

[33mcommit cf48132efd107bbca85aaea00589a01457ef4872[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Dec 10 02:32:51 2021 +0000

    clearpass: also clear views without depth (2d) (#3286)
    
    # Objective
    
    - after #3209, 2d examples background were not cleared
    
    <img width="912" alt="Screenshot 2021-12-10 at 00 48 04" src="https://user-images.githubusercontent.com/8672791/145494415-d4b7a149-6f9a-4036-9ac5-3d1227b4de69.png">
    
    ## Solution
    
    - Change the query to also work when there isn't a `ViewDepthTexture`

[33mcommit a2f0fe24e82f7d103ee2ca56a185486153619272[m
Author: Weasy <weasy@hotmail.de>
Date:   Thu Dec 9 22:40:15 2021 +0000

    Allow `String` and `&String` as `Id` for `AssetServer.get_handle(id)` (#3280)
    
    # Objective
    
    Make it easier to build and use an asset path with `format!()`. This can be useful for accessing assets in a loop.
    
    Enabled by this PR:
    ```rust
    let monkey_handle = asset_server.get_handle(&format!("models/monkey/Monkey.gltf#Mesh0/Primitive0"));
    let monkey_handle = asset_server.get_handle(format!("models/monkey/Monkey.gltf#Mesh0/Primitive0"));
    ```
    
    Before this PR:
    ```rust
    let monkey_handle = asset_server.get_handle(format!("models/monkey/Monkey.gltf#Mesh0/Primitive0").as_str());
    ```
    
    It's just a tiny improvement in ergonomics, but i ran into it and was wondering why the function does not accept a `String` and Bevy is all about simplicity/ergonomics, right? ðð
    
    ## Solution
    
    Implement `Into<HandleId>` for `String` and `&String`.

[33mcommit 82c04f93f5bcf24ae2f73dc8e10ea539a4bab5b1[m
Author: Bude <kirmesbude@gmail.com>
Date:   Thu Dec 9 21:52:32 2021 +0000

    Add a separate ClearPass (#3209)
    
    # Objective
    
    - Rendering before MainPass should be possible, so clearing needs to happen in an earlier pass.
    - Fixes #3190.
    
    ## Solution
    
    - I added a "Clear" SubGraph, a "ClearPassNode" Node, that clears the color and depth attachments of all views and a "ClearNodeDriver" Node, that schedules the "ClearPassNode" before MainPass.
    - Make sure that the 2d and 3d draw passes do not clear their attachments anymore.
    
    ### Notes
    
    - It works in the way, that with the current pipeline examples nothing should have changed in their behaviour
    - I would like to add an example that adds a pass inbetween ClearPass and MainPass, but I do not understand enough about the new render architecture to do that yet
    - Clears all attachment for all views: I do not know enough about rendering in general to say, whether there is a use case for not clearing
    - Does not solve #3043 as we still need Cameras/ViewTargets to clear.

[33mcommit 4c91613ae6fa421056861cd9b0d48e2888022494[m
Author: Folke Lemaitre <folke.lemaitre@gmail.com>
Date:   Thu Dec 9 21:14:17 2021 +0000

    Ported WgpuOptions to bevy_render2 (#3282)
    
    # Objective
    
    The new renderer does not support any options yet for wgpu. These are needed for example for rendering wireframes (see #3193).
    
    ## Solution
    
    I've ported WgpuOptions to bevy_render2.
    
    The defaults match the defaults that were used before this PR (meaning, some specific options when target_arch = wasm32).
    
    Additionally, I removed `Auto` from WgpuBackends and added `Primary`. The default will use primary or GL based on the target_arch.

[33mcommit 6caa2622b0ad21fefbe0b482ae24aaf51edc2b8f[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Thu Dec 9 20:42:44 2021 +0000

    Add despawn_children (#2903)
    
    Adds a convenience method for despawning all the children of the entity, but not the entity itself.

[33mcommit 92a7e16aed25894b37da3d08a7e6ce929bb0a415[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Dec 9 20:14:00 2021 +0000

    Update dependencies `ron` `winit`& fix `cargo-deny` lists (#3244)
    
    # Objective
    
    - there are a few new versions for `ron`, `winit`, `ndk`, `raw-window-handle`
    - `cargo-deny` is failing due to new security issues / duplicated dependencies
    
    ## Solution
    
    - Update our dependencies
    - Note all new security issues, with which of Bevy direct dependency it comes from
    - Update duplicate crate list, with which of Bevy direct dependency it comes from
    
    `notify` is not updated here as it's in #2993

[33mcommit 2abf5cc618957ed6a2acf6a496c0039513746cae[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Thu Dec 9 03:08:54 2021 +0000

    Clustered forward rendering (#3153)
    
    # Objective
    
    Implement clustered-forward rendering.
    
    ## Solution
    
    ~~FIXME - in the interest of keeping the merge train moving, I'm submitting this PR now before the description is ready. I want to add in some comments into the code with references for the various bits and pieces and I want to describe some of the key decisions I made here. I'll do that as soon as I can.~~ Anyone reviewing is welcome to add review comments where you want to know more about how something or other works.
    
    * The summary of the technique is that the view frustum is divided into a grid of sub-volumes called clusters, point lights are tested against each of the clusters to see if they would affect that volume within the scene and if so, added to a list of lights affecting that cluster. Then when shading a fragment which is a point on the surface of a mesh within the scene, the point is mapped to a cluster and only the lights affecting that clusters are used in lighting calculations. This brings huge performance and scalability benefits as most of the time lights are placed so that there are not that many that overlap each other in terms of their sphere of influence, but there may be many distinct point lights visible in the scene. Doing all the lighting calculations for all visible lights in the scene for every pixel on the screen quickly becomes a performance limitation. Clustered forward rendering allows us to make an approximate list of lights that affect each pixel, indeed each surface in the scene (as it works along the view z axis too, unlike tiled/forward+).
    * WebGL2 is a platform we want to support and it does not support storage buffers. Uniform buffer bindings are limited to a maximum of 16384 bytes per binding. I used bit shifting and masking to pack the cluster light lists and various indices into a uniform buffer and the 16kB limit is very likely the first bottleneck in scaling the number of lights in a scene at the moment if the lights can affect many clusters due to their range or proximity to the camera (there are a lot of clusters close to the camera, which is an area for improvement). We could store the information in textures instead of uniform buffers to remove this bottleneck though I donât know if there are performance implications to reading from textures instead if uniform buffers.
    * Because of the uniform buffer binding size limitations we can support a maximum of 256 lights with the current size of the PointLight struct
    * The z-slicing method (i.e. the mapping from view space z to a depth slice which defines the near and far planes of a cluster) is using the Doom 2016 method. I need to add comments with references to this. Itâs an exponential function that simplifies well for the purposes of optimising the fragment shader. xy grid divisions are regular in screen space.
    * Some optimisation work was done on the allocation of lights to clusters, which involves intersection tests, and for this number of clusters and lights the system has insignificant cost using a fairly naÃ¯ve algorithm. I think for more lights / finer-grained clusters we could use a BVH, but at some point it would be just much better to use compute shaders and storage buffers.
    * Something else to note is that it is absolutely infeasible to use plain cube map point light shadow mapping for many lights. It does not scale in terms of performance nor memory usage. There are some interesting methods I saw discussed in reference material that I will add a link to which render and update shadow maps piece-wise, but they also need compute shaders to work well. Basically for now you need to sacrifice point light shadows for all but a handful of point lights if you donât want to kill performance. I set the limit to 10 but thatâs just what we had from before where 10 was the maximum number of point lights before this PR.
    * I added a couple of debug visualisations behind a shader def that were useful for seeing performance impact of light distribution - I should make the debug mode configurable without modifying the shader code. One mode shows the number of lights affecting each cluster by tinting toward red for few lights or green for many lights (maxes out at 16, but not sure thatâs a reasonable max). The other shows which cluster the surface at a fragment belongs to by tinting it with a randomish colour. This can help to understand deeper performance issues due to screen space tiles spanning multiple clusters in depth with divergent shader execution times.
    
    Also, there are more things that could be done as improvements, and I will document those somewhere (I'm not sure where will be the best place... in a todo alongside the code, a GitHub issue, somewhere else?) but I think it works well enough and brings significant performance and scalability benefits that it's worth integrating already now and then iterating on.
    * Calculate the lightâs effective range based on its intensity and physical falloff and either just use this, or take the minimum of the user-supplied range and this. This would avoid unnecessary lighting calculations for clusters that cannot be affected. This would need to take into account HDR tone mapping as in my not-fully-understanding-the-details understanding, the threshold is relative to how bright the scene is.
    * Improve the z-slicing to use a larger first slice.
    * More gracefully handle the cluster light list uniform buffer binding size limitations by prioritising which lights are included (some heuristic for most significant like closest to the camera, brightest, affecting the most pixels, â¦)
    * Switch to using a texture instead of uniform buffer
    * Figure out the / a better story for shadows
    
    I will also probably add an example that demonstrates some of the issues:
    * What situations exhaust the space available in the uniform buffers
      * Light range too large making lights affect many clusters and so exhausting the space for the lists of lights that affect clusters
      * Light range set to be too small producing visible artifacts where clusters the light would physically affect are not affected by the light
    * Perhaps some performance issues
      * How many lights can be closely packed or affect large portions of the view before performance drops?

[33mcommit 7dd92e72d49940977d153eb2258977831d372c2a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Dec 8 23:43:03 2021 +0000

    More Bevy ECS schedule spans (#3281)
    
    Fills in some gaps we had in our Bevy ECS tracing spans:
    
    * Exclusive systems
    * System Commands (for `apply_buffers = true` cases)
    * System archetype updates
    * Parallel system execution prep

[33mcommit 3ca8844c9014747c8db18f92ea10650a27e7db08[m
Author: loui <louisgjohnson@gmail.com>
Date:   Wed Dec 8 20:53:35 2021 +0000

    Added transparency to window builder (#3105)
    
    Applogies, had to recreate this pr because of branching issue.
    Old PR: https://github.com/bevyengine/bevy/pull/3033
    
    # Objective
    
    Fixes #3032
    
    Allowing a user to create a transparent window
    
    ## Solution
    
    I've allowed the transparent bool to be passed to the winit window builder

[33mcommit 01e2141ce3d17b28298113338eb4700f2c574ea2[m
Author: Rostyslav Toch <RokaRostuk@gmail.com>
Date:   Wed Dec 8 20:28:08 2021 +0000

    Add Gamepads resource (#3257)
    
    # Objective
    
    Fixes #3245
    
    ## Solution
    
    - Move GamepadLobby to lib
    - Add connection_system to InputPlugin
    - Updated gamepad_input example
    
    
    Co-authored-by: CrazyRoka <rokarostuk@gmail.com>
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit ca80fe65eddffd554bd297581c31c7e936a87b6e[m
Author: Rostyslav Toch <RokaRostuk@gmail.com>
Date:   Wed Dec 8 20:09:53 2021 +0000

    Improve contributors example quality (#3258)
    
    # Objective
    
    Fixes #3181
    
    ## Solution
    
    Refactored `contributors.rs` example:
    - Renamed unclear variables
    - Split setup system into two separate systems
    
    
    Co-authored-by: CrazyRoka <rokarostuk@gmail.com>

[33mcommit 38c7d5eb9e81ab8e1aec03673599b25a9aa0c69c[m
Author: Aevyrie <aevyrie@gmail.com>
Date:   Wed Dec 8 01:31:31 2021 +0000

    Check for NaN in `Camera::world_to_screen()` (#3268)
    
    # Objective
    
    - Checks for NaN in computed NDC space coordinates, fixing unexpected NaN in a fallible (`Option<T>`) function.
    
    ## Solution
    
    - Adds a NaN check, in addition to the existing NDC bounds checks.
    - This is a helper function, and should have no performance impact to the engine itself.
    - This will help prevent hard-to-trace NaN propagation in user code, by returning `None` instead of `Some(NaN)`.
    
    
    Depends on https://github.com/bevyengine/bevy/pull/3269 for CI error fix.

[33mcommit bf96f266d73af6e0cee786a990a878dfe856578d[m
Author: Rostyslav Toch <RokaRostuk@gmail.com>
Date:   Wed Dec 8 01:12:49 2021 +0000

    Added tests to ButtonAxisSettings (#3272)
    
    # Objective
    
    `ButtonAxisSettings` wasn't tested properly.
    
    ## Solution
    
    I added tests and fixed issue with `filter` method
    
    
    Co-authored-by: CrazyRoka <rokarostuk@gmail.com>

[33mcommit c05a9cf8f5133c9ebcd6fa0f39780aecdad82f11[m
Author: John <toasterthegamer@gmail.com>
Date:   Wed Dec 8 00:41:32 2021 +0000

    Expose command encoders (#3271)
    
    # Objective
    I'm exposing these command encoders so bevy user's can create their own command encoders. This is useful when you want to copy a texture to a texture or create a compute pass manually for example.
    
    Note: I formatted this file which might of changed the order of some exports.
    
    ## Solution
    Just re-export `CommandEncoder` and `CommandEncoderDescriptor`.

[33mcommit 5e516ab39806fe6a5c4edf6f86372e97ee502bfc[m
Author: Alex Helfet <alex.helfet@googlemail.com>
Date:   Tue Dec 7 01:30:08 2021 +0000

    Made Time::time_since_startup return from last tick. (#3264)
    
    Also added unit tests for it.
    
    # Objective
    
    - Fixes #3259
    
    ## Solution
    
    - As discussed in #3259
    
    Co-authored-by: Alex Helfet <alex.helfet@gmail.com>

[33mcommit a636145d90f45fb64fe9cf2bc87afe120f439125[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Dec 7 01:13:55 2021 +0000

    Default image used in PipelinedSpriteBundle to be able to render without loading a texture (#3270)
    
    # Objective
    
    - Fix #3188
    - Allow creating a `PipelinedSpriteBundle` without an image, just a plain color
    
    ```rust
    PipelinedSpriteBundle {
        sprite: Sprite {
            color: Color::rgba(0.8, 0.0, 0.0, 0.3),
            custom_size: Some(Vec2::new(500.0, 500.0)),
            ..Default::default()
        },
        ..Default::default()
    }
    ```
    
    ## Solution
    
    - The default impl for `Image` was creating a one pixel image with all values at `1`. I changed it to `255` as picking `1` for it doesn't really make sense, it should be either `0` or `255`
    - I created a static handle and added the default image to the assets with this handle
    - I changed the default impl for `PipelinedSpriteBundle` to use this handle

[33mcommit a4e85536c13c0d9f653832785779b90199f2f18a[m
Author: Rostyslav Toch <RokaRostuk@gmail.com>
Date:   Mon Dec 6 22:26:35 2021 +0000

    Fix clippy errors related to IntoIter::new (#3269)
    
    # Objective
    
    Fixes recent pipeline errors:
    ```
    error: use of deprecated associated function `std::array::IntoIter::<T, N>::new`: use `IntoIterator::into_iter` instead
       --> crates/bevy_render/src/mesh/mesh.rs:467:54
        |
    467 |             .flat_map(|normal| std::array::IntoIter::new([normal, normal, normal]))
        |                                                      ^^^
        |
        = note: `-D deprecated` implied by `-D warnings`
    
       Compiling bevy_render2 v0.5.0 (/home/runner/work/bevy/bevy/pipelined/bevy_render2)
    error: use of deprecated associated function `std::array::IntoIter::<T, N>::new`: use `IntoIterator::into_iter` instead
       --> pipelined/bevy_render2/src/mesh/mesh/mod.rs:287:54
        |
    287 |             .flat_map(|normal| std::array::IntoIter::new([normal, normal, normal]))
        |                                                      ^^^
        |
        = note: `-D deprecated` implied by `-D warnings`
    
    error: could not compile `bevy_render` due to previous error
    ```
    
    ## Solution
    
    - Replaced `IntoIter::new` with `IntoIterator::into_iter`
    
    ## Suggestions
    
    For me it looks like two equivalent `Mesh` structs with the same methods. Should we refactor it? Or, they will be different in the near future?
    
    
    Co-authored-by: CrazyRoka <rokarostuk@gmail.com>

[33mcommit 4423a2fa2dc82fad71525ed3f44e16b8481a4902[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Dec 2 23:56:44 2021 +0000

    make texture from sprite pipeline filterable (#3236)
    
    # Objective
    
    - Fix #3235
    
    ## Solution
    
    - in `sprite_pipeline`, make the texture filterable

[33mcommit c6fec1f0c256597af9746050dd1a4dcd3b80fe24[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Dec 2 23:40:37 2021 +0000

    Fix clippy lints for 1.57 (#3238)
    
    # Objective
    
    - New clippy lints with rust 1.57 are failing
    
    ## Solution
    
    - Fixed clippy lints following suggestions
    - I ignored clippy in old renderer because there was many and it will be removed soon

[33mcommit ccee658436be3d8bd721bbdda4a02f47235799da[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Dec 2 07:44:40 2021 +0000

    Fix iOS CI on Intel (for real this time) (#3232)
    
    # Objective
    
    - iOS CI has linker issues https://github.com/bevyengine/bevy/runs/4388921574?check_suite_focus=true
    
    ## Solution
    
    - Building for iOS actually requires ~~both iOS SDK for target and~~ macOS SDK for build scripts. ~~I added them both when needed~~ I replaced the iOS SDK with the maOS. This was not an issue on m1 as they are compatible enough to make the build pass.
    - This completely confused `shader-sys` which fails to build in this configuration. Luckily as the example now uses the new renderer, I was able to remove the old renderer and depend no more on this lib.
    
    This is confirmed to work:
    - on intel mac with simulator
    - on m1 mac with simulator
    - on m1 mac with real iphone

[33mcommit 02b8a782e5977a0211cd7b3821026f7d5c06281c[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Thu Dec 2 03:27:13 2021 +0000

    bevy_render2: Add support for #else for shader defs (#3206)
    
    # Objective
    
    - Add support for `#else` for shader defs
    
    ## Solution
    
    - When entering a scope with `#ifdef` or `#ifndef`, if the parent scope is truthy, and the shader definition is also truthy, then the a new scope is pushed onto the scope stack that is also truthy, else falsy. When encountering a subsequent else clause within a scope, if the parent is truthy and the current scope is truthy, then it should become falsy. If the parent scope is truthy and the current scope is falsy then it should become truthy. If the parent scope is falsy, then the current scope should remain falsy as the parent scope takes precedent.
    - I added a simple test for an else case.

[33mcommit 274ace790b16b3dfdbcbc69a92a8c4bd16c8c9fc[m
Author: Joshua Chapman <guvante@gmail.com>
Date:   Wed Dec 1 23:28:10 2021 +0000

    Implement iter() for mutable Queries (#2305)
    
    A sample implementation of how to have `iter()` work on mutable queries without breaking aliasing rules.
    
    # Objective
    
    - Fixes #753
    
    ## Solution
    
    - Added a ReadOnlyFetch to WorldQuery that is the `&T` version of `&mut T` that is used to specify the return type for read only operations like `iter()`.
    - ~~As the comment suggests specifying the bound doesn't work due to restrictions on defining recursive implementations (like `Or`). However bounds on the functions are fine~~ Never mind I misread how `Or` was constructed, bounds now exist.
    - Note that the only mutable one has a new `Fetch` for readonly as the `State` has to be the same for any of this to work
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 5fe73be2b560f3d95abcc5aa9e9730436e2f794a[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Wed Dec 1 23:09:31 2021 +0000

    Sprite change image (#3207)
    
    # Objective
    
    - Changing the underlying image would not update a sprite
    
    ## Solution
    
    - 'Detect' if the underlying image changes to update the sprite
    
    Currently, we don't support change detection on `RenderAssets`, so we have to manually check it.
    This method at least maintains the bind groups when the image isn't changing. They were cached, so I assume that's important.
    
    This gives us correct behaviour here.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 2def9027d7e8d23119aaeeb928f9d8cdfc5438cc[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Dec 1 21:44:29 2021 +0000

    Fix iOS CI (#3228)
    
    # Objective
    
    - With #3109 I broke iOS CI: https://github.com/bevyengine/bevy/runs/4374891646?check_suite_focus=true
    
    ## Solution
    
    - Fix indentation in makefile
    - Adds scheme that is now needed
    
    With this, `make install` works on my m1 Mac but still fails on my intel Mac unless I run something like `make install; cargo build --target x86_64-apple-ios; make install; cargo build --target x86_64-apple-ios; make install`. It seems something is off when executing cargo through `xcodebuild` on my setup but not sure what. So this PR will probably not fix iOS CI ð

[33mcommit bab4ee962d88a5576d7f045d22129e8d20645f14[m
Author: Dimitri Bobkov <bobkov.dimitri@gmail.com>
Date:   Tue Nov 30 23:51:11 2021 +0000

    Added documentation to WindowMode to better document what 'use_size' â¦ (#3216)
    
    This pull request aims to solve the issue of a lack of documentation in the enum WindowMode
    
    # Objective
    
    - Fixes #3136
    
    ## Solution
    
    - Added a few lines of documentation that should document what the enum does better

[33mcommit d59a3ddd61d01b426568073a3590074730578d5d[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Nov 29 23:25:22 2021 +0000

    iOS: replace cargo-lipo, and update for new macOS  (#3109)
    
    # Objective
    
    - Remove `cargo-lipo` as [it's deprecated](https://github.com/TimNN/cargo-lipo#maintenance-status) and doesn't work on new Apple processors
    - Fix CI that will fail as soon as GitHub update the worker used by Bevy to macOS 11
    
    ## Solution
    
    - Replace `cargo-lipo` with building with the correct target
    - Setup the correct path to libraries by using `xcrun --show-sdk-path`
    - Also try and fix path to cmake in case it's not found but available through homebrew

[33mcommit 1b8453d9a0ff5805b19e1fb61355a53dafa04b68[m
Author: Jonathan Cornaz <jonathan.cornaz@gmail.com>
Date:   Mon Nov 29 23:10:31 2021 +0000

    Fix path used by macro not considering that we can use a sub-crate (#3178)
    
    # Problem
    
    Let's say I am writting a simple bevy plugin, and I want to depend on `bevy_ecs` crate instead of depending on the full `bevy`.
    
    So I write the following:
    
    *Cargo.toml*:
    ```toml
    [dependencies]
    bevy_ecs = { git = "https://github.com/bevyengine/bevy.git", rev = "94db0176fecfac7e7e9763f2dc7458a54c105886" }
    ```
    
    *lib.rs*:
    ```rust
    use bevy_ecs::prelude::*;
    
    #[derive(Debug, Default, Component)
    pub struct MyFancyComponent;
    ```
    
    So far, so good. Everything works. But let's say I want to write some examples for using my plugin. And for theses I'd like to use the `bevy` crate, so that I can write complete examples (rendering stuff, etc.) that are simple and look like what the consumer of my plugin will do (`use bevy::prelude::*` and `DefaultPlugins`)
    
    So I amend my *Cargo.toml*:
    ```toml
    [dependencies]
    bevy_ecs = { git = "https://github.com/bevyengine/bevy.git", rev = "94db0176fecfac7e7e9763f2dc7458a54c105886" }
    
    [dev-dependencies]
    bevy = { git = "https://github.com/bevyengine/bevy.git", rev = "94db0176fecfac7e7e9763f2dc7458a54c105886", default-features = false }
    ```
    
    And that  leads to a complilation error
    
    ```
    error[E0433]: failed to resolve: use of undeclared crate or module `bevy`
    ```
    
    Basically, because `bevy` is in the `dev-dependencies`, the macro (of the production code) decides to use the `bevy::ecs` path instead of `bevy_ecs`. But `bevy` is not available there.
    
    ## Solution
    
    This PR fixes the problem. I amend the macro utility responsible of finding the path of a module.
    
    If we try to find a path, we first test if this correspond to a crate that the user directly depend on. (Like, if we search for `bevy_ecs`, we first check if there is a `bevy_ecs` dependency). If yes, we can depend on that directly. Otherwise, we proceed with the existing logic (testing `bevy` and `bevy_internal`)

[33mcommit eb15f81e172e3ddd797c0bbf2fc3718df16c09cd[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Nov 29 21:22:53 2021 +0000

    enable alpha mode for textures materials that are transparent (#3202)
    
    # Objective
    
    - Transparent materials used in 3d are not transparent by default
    
    ## Solution
    
    - Enable transparency in example

[33mcommit 32c14d8c6b64847436fa4e923fe70e3f0b0b305e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Nov 29 20:55:12 2021 +0000

    Ignore reddit when checking markdown links (#3223)
    
    Reddit regularly blocks CI requests (ex: 403s), causing disruptions. It is better to just not check.

[33mcommit 3de391be21666c90661066ca395c63813352b4bb[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sun Nov 28 10:40:42 2021 +0000

    fix calls to as_rgba_linear (#3200)
    
    # Objective
    
    - After #3192, some places where `as_rgba_linear` was called were doing too many conversions
    
    ## Solution
    
    - Fix the conversions

[33mcommit e8412df0211f5684aa03459e1f47a5c40035f6c1[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Nov 27 10:12:47 2021 +0000

    add shadows in examples (#3201)
    
    # Objective
    
    - As mentioned in #3126, shadows need to be readded in examples
    
    ## Solution
    
    - Add shadows in examples

[33mcommit 7ced541cb244962cf77d8ba4b4088080677304f1[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Nov 27 10:12:45 2021 +0000

    increase light intensity in pbr_pipelined example (#3182)
    
    # Objective
    
    - example `pbr_pipelined` doesn't look like example `pbr`
    
    `pbr`:
    ![pbr](https://user-images.githubusercontent.com/8672791/143328022-83797197-233c-4824-8daa-4d7bd092938d.png)
    
    
    `pbr_pipelined`:
    ![pbr_pipelined](https://user-images.githubusercontent.com/8672791/143328034-8a8bdb39-0d75-472b-8880-7bb7cd48f448.png)
    
    
    ## Solution
    
    - set the light intensity to a higher value
    
    `pbr_pipelined` with this pr:
    ![pbr_pipelined_fixed](https://user-images.githubusercontent.com/8672791/143328040-4149e96c-dada-4940-9f6f-f8925e48b22e.png)

[33mcommit 72c888feea2d114d6719da515e9859f76e6b1f11[m
Author: Andreas Weibye <13300393+Weibye@users.noreply.github.com>
Date:   Fri Nov 26 21:05:35 2021 +0000

    Enforce linux-style line endings for `.rs` and `.toml` (#3197)
    
    # Objective
    
    Fixes #3160
    
    Unless I'm mistaken, the problem was caused by a simple typo
    
    ## Solution
    
    - Fix the typo
    
    Reference documentation: https://git-scm.com/docs/gitattributes#_eol
    
    ## Question
    
    Are there other file-types that should be included here?

[33mcommit f3d4be316d270177785471916d506b2507a1b252[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Fri Nov 26 13:16:11 2021 +0000

    bevy_pbr2: Fix shadow logic (#3186)
    
    # Objective
    
    - Shadow maps should only be sampled if the mesh is a shadow receiver AND shadow mapping is enabled for the light
    
    ## Solution
    
    - Fix the logic in the shader

[33mcommit 73fd6a6f6fd4378d407504c844208e84ace5980f[m
Author: Minghao Liu <molikto@gmail.com>
Date:   Fri Nov 26 12:57:05 2021 +0000

    fix: as_rgba_linear used wrong variant (#3192)
    
    # Objective
    
    as_rgba_linear used wrong variant
    
    ## Solution
    
    Fixed it.

[33mcommit f512c853d7e5bcf91c8d411aa4c5ae3058220da8[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Thu Nov 25 16:35:50 2021 +0000

    Faster gltf loader (re-merge of #3165) (#3189)
    
    See #3165 and #3175
    
    # Objective
    
    - @superdump was having trouble with this loop in the GLTF loader.
    
    ## Solution
    
    - Make it probably linear.
    - Measured times:
    - Old: 40s, new: 200ms
    
    I think there's still room for improvement. For example, I think making the nodes be in `Arc`s could be a significant gain, since currently there's duplication all the way down the tree.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 0bf90bb98db0b977a35d4fb39c06e9dca9bf7f04[m
Merge: 94db0176 8009af38
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Nov 24 13:31:17 2021 -0800

    Merge pull request #3175 from cart/merge-renderer
    
    Merge New Renderer

[33mcommit 8009af3879fcdb8bad70ee19b36f79100da5ea22[m
Merge: 94db0176 65e834ce
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Nov 22 15:16:36 2021 -0800

    Merge New Renderer

[33mcommit 65e834ce8d5142f1a01d06c2a9e4e7ef4a1238a9[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Mon Nov 22 21:44:05 2021 +0000

    Use crevice std140_size_static everywhere (#3168)
    
    # Objective
    
    - Use `std140_size_static()` everywhere instead of manual sizes as the crevice rewrite appears to have fixed all the problems as it claimed to do.
    
    I've tested `3d_scene_pipelined`, `bevymark_pipelined`, and `load_gltf_pipelined` and all three look fine.

[33mcommit 900acc61540ea809d9443e3d243187e64e4a5831[m
Author: John <toasterthegamer@gmail.com>
Date:   Mon Nov 22 19:49:48 2021 +0000

    Added missing wgpu image render resources. (#3171)
    
    # Objective
    I need to queue my own textures up for font rendering(texture arrays) and I noticed a bunch of `ImageX`, like `ImageDataLayout`, were missing from the render resources exports.
    
    ## Solution
    Add new exports to render resources.

[33mcommit a7729319cc2c3447c2d7d4b225cb4c9a3a109965[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Fri Nov 19 21:16:58 2021 +0000

    Per-light toggleable shadow mapping (#3126)
    
    # Objective
    
    Allow shadow mapping to be enabled/disabled per-light.
    
    ## Solution
    
    - NOTE: This PR is on top of https://github.com/bevyengine/bevy/pull/3072
    - Add `shadows_enabled` boolean property to `PointLight` and `DirectionalLight` components.
    - Do not update the frusta for the light if shadows are disabled.
    - Do not check for visible entities for the light if shadows are disabled.
    - Do not fetch shadows for lights with shadows disabled.
    - I reworked a few types for clarity: `ViewLight` -> `ShadowView`, the bulk of `ViewLights` members -> `ViewShadowBindings`, the entities Vec in `ViewLights` -> `ViewLightEntities`, the uniform offset in `ViewLights` for `GpuLights` -> `ViewLightsUniformOffset`
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 2e7995165984e90f346e60169e594c0d2552cf33[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Nov 18 03:45:02 2021 +0000

    Shader Imports. Decouple Mesh logic from PBR (#3137)
    
    ## Shader Imports
    
    This adds "whole file" shader imports. These come in two flavors:
    
    ### Asset Path Imports
    
    ```rust
    // /assets/shaders/custom.wgsl
    
    #import "shaders/custom_material.wgsl"
    
    [[stage(fragment)]]
    fn fragment() -> [[location(0)]] vec4<f32> {
        return get_color();
    }
    ```
    
    ```rust
    // /assets/shaders/custom_material.wgsl
    
    [[block]]
    struct CustomMaterial {
        color: vec4<f32>;
    };
    [[group(1), binding(0)]]
    var<uniform> material: CustomMaterial;
    ```
    
    ### Custom Path Imports
    
    Enables defining custom import paths. These are intended to be used by crates to export shader functionality:
    
    ```rust
    // bevy_pbr2/src/render/pbr.wgsl
    
    #import bevy_pbr::mesh_view_bind_group
    #import bevy_pbr::mesh_bind_group
    
    [[block]]
    struct StandardMaterial {
        base_color: vec4<f32>;
        emissive: vec4<f32>;
        perceptual_roughness: f32;
        metallic: f32;
        reflectance: f32;
        flags: u32;
    };
    
    /* rest of PBR fragment shader here */
    ```
    
    ```rust
    impl Plugin for MeshRenderPlugin {
        fn build(&self, app: &mut bevy_app::App) {
            let mut shaders = app.world.get_resource_mut::<Assets<Shader>>().unwrap();
            shaders.set_untracked(
                MESH_BIND_GROUP_HANDLE,
                Shader::from_wgsl(include_str!("mesh_bind_group.wgsl"))
                    .with_import_path("bevy_pbr::mesh_bind_group"),
            );
            shaders.set_untracked(
                MESH_VIEW_BIND_GROUP_HANDLE,
                Shader::from_wgsl(include_str!("mesh_view_bind_group.wgsl"))
                    .with_import_path("bevy_pbr::mesh_view_bind_group"),
            );
    ```
    
    By convention these should use rust-style module paths that start with the crate name. Ultimately we might enforce this convention.
    
    Note that this feature implements _run time_ import resolution. Ultimately we should move the import logic into an asset preprocessor once Bevy gets support for that.
    
    ## Decouple Mesh Logic from PBR Logic via MeshRenderPlugin
    
    This breaks out mesh rendering code from PBR material code, which improves the legibility of the code, decouples mesh logic from PBR logic, and opens the door for a future `MaterialPlugin<T: Material>` that handles all of the pipeline setup for arbitrary shader materials.
    
    ## Removed `RenderAsset<Shader>` in favor of extracting shaders into RenderPipelineCache
    
    This simplifies the shader import implementation and removes the need to pass around `RenderAssets<Shader>`.
    
    ##  RenderCommands are now fallible
    
    This allows us to cleanly handle pipelines+shaders not being ready yet. We can abort a render command early in these cases, preventing bevy from trying to bind group / do draw calls for pipelines that couldn't be bound. This could also be used in the future for things like "components not existing on entities yet".
    
    # Next Steps
    
    * Investigate using Naga for "partial typed imports" (ex: `#import bevy_pbr::material::StandardMaterial`, which would import only the StandardMaterial struct)
    * Implement `MaterialPlugin<T: Material>` for low-boilerplate custom material shaders
    * Move shader import logic into the asset preprocessor once bevy gets support for that.
    
    Fixes #3132

[33mcommit 1076a8f2b58bf0d61ac6b09e821bf5744a498006[m
Author: dataphract <kuehnertkurt95@gmail.com>
Date:   Tue Nov 16 03:37:48 2021 +0000

    Document the new pipelined renderer (#3094)
    
    This is a squash-and-rebase of @Ku95's documentation of the new renderer onto the latest `pipelined-rendering` branch.
    
    Original PR is #2884.
    
    Co-authored-by: dataphract <dataphract@gmail.com>
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 14ce28190417c483acf7957056d79de07a4b4491[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Tue Nov 16 03:19:08 2021 +0000

    bevy_render2: Support nested shader defs (#3113)
    
    # Objective
    
    Fix nested shader defs. For example, in:
    ```rust
    #ifdef A
    #ifdef B
    some code here
    #endif
    #endif
    ```
    ...before this PR, if `A` *is not* defined, and `B` *is* defined, then `some code here` will be output.
    
    ## Solution
    
    - Combine the logic of whether the parent and child scope guards are defined and use that as the resulting child scope guard boolean value

[33mcommit 213839f50342ee64d25cad927af2a0e9b9bc02d7[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Tue Nov 16 03:03:27 2021 +0000

    Add support for opaque, alpha mask, and alpha blend modes (#3072)
    
    # Objective
    
    Add depth prepass and support for opaque, alpha mask, and alpha blend modes for the 3D PBR target.
    
    ## Solution
    
    NOTE: This is based on top of #2861 frustum culling. Just lining it up to keep @cart loaded with the review train. ð
    
    There are a lot of important details here. Big thanks to @cwfitzgerald of wgpu, naga, and rend3 fame for explaining how to do it properly!
    
    * An `AlphaMode` component is added that defines whether a material should be considered opaque, an alpha mask (with a cutoff value that defaults to 0.5, the same as glTF), or transparent and should be alpha blended
    * Two depth prepasses are added:
      * Opaque does a plain vertex stage
      * Alpha mask does the vertex stage but also a fragment stage that samples the colour for the fragment and discards if its alpha value is below the cutoff value
      * Both are sorted front to back, not that it matters for these passes. (Maybe there should be a way to skip sorting?)
    * Three main passes are added:
      * Opaque and alpha mask passes use a depth comparison function of Equal such that only the geometry that was closest is processed further, due to early-z testing
      * The transparent pass uses the Greater depth comparison function so that only transparent objects that are closer than anything opaque are rendered
      * The opaque fragment shading is as before except that alpha is explicitly set to 1.0
      * Alpha mask fragment shading sets the alpha value to 1.0 if it is equal to or above the cutoff, as defined by glTF
      * Opaque and alpha mask are sorted front to back (again not that it matters as we will skip anything that is not equal... maybe sorting is no longer needed here?)
      * Transparent is sorted back to front. Transparent fragment shading uses the alpha blending over operator
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 94db0176fecfac7e7e9763f2dc7458a54c105886[m
Author: Niklas Eicker <git@nikl.me>
Date:   Sat Nov 13 23:06:48 2021 +0000

    Add readme to errors crate and clean up cargo files (#3125)
    
    # Objective
    
    - Document that the error codes will be rendered on the bevy website (see bevyengine/bevy-website#216)
    - Some Cargo.toml files did not include the license or a description field
    
    ## Solution
    
    - Readme for the errors crate
    - Mark internal/development crates with `publish = false`
    - Add missing license/descriptions to some crates
    
    - [x] merge bevyengine/bevy-website#216

[33mcommit d0f423d6536f75deed86fb92f89e00de56e579e7[m
Author: Niklas Eicker <git@nikl.me>
Date:   Sat Nov 13 22:43:19 2021 +0000

    Assert compiler errors for compile_fail tests (#3067)
    
    # Objective
    
    bevy_ecs has several compile_fail tests that assert lifetime safety. In the past, these tests have been green for the wrong reasons (see e.g. #2984). This PR makes sure, that they will fail if the compiler error changes.
    
    ## Solution
    
    Use [trybuild](https://crates.io/crates/trybuild) to assert the compiler errors.
    
    The UI tests are in a separate crate that is not part of the Bevy workspace. This is to ensure that they do not break Bevy's crater builds. The tests get executed by the CI workflow on the stable toolchain.

[33mcommit 94f5d194f4d8746869a695b54fd5469ef4ee2178[m
Author: Jerome Humbert <djeedai@gmail.com>
Date:   Sat Nov 13 22:07:19 2021 +0000

    Doc `AssetServer::load()` is async (#3129)
    
    # Objective
    
    Document that `AssetServer::load()` is asynchronous.
    
    ## Solution
    
    Document that `AssetServer::load()` is asynchronous, and that the asset
    will not be immediately available once the call returns. Instead,
    explain that the user must call `AssetServer::get_load_state()` to
    monitor the loading state of an asset.

[33mcommit 029a7c03d820107952f5f9570fcafc22d8647d58[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Sat Nov 13 21:46:42 2021 +0000

    replace matrix swizzles in pbr shader with index accesses (#3122)
    
    Matrix swizzles like `mat.x.xyz` are not supported in WGSL and accepted in naga by accident: <https://gpuweb.github.io/gpuweb/wgsl/#matrix-access-expr>

[33mcommit ac06ea3d17b4ebbdaf7e68d2ba0e8283e33be226[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Nov 13 21:15:22 2021 +0000

    default features from `bevy_asset` and `bevy_ecs` can actually be disabled (#3097)
    
    # Objective
    
    - `bevy_ecs` exposes as an optional feature `bevy_reflect`. Disabling it doesn't compile.
    - `bevy_asset` exposes as an optional feature `filesystem_watcher`. Disabling it doesn't compile. It is also not possible to disable this feature from Bevy
    
    ## Solution
    
    - Fix compilation errors when disabling the default features. Make it possible to disable the feature `filesystem_watcher` from Bevy

[33mcommit 71f4ff46f1661608aa60c4702197b773753c8be9[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Nov 13 20:35:30 2021 +0000

    fix markdownlint (#3128)
    
    I just updated profiling.md (and accidentally skipped the pr process by not checking "create new branch" in the github ui). The markdown wasn't properly formatted, which broke the build.

[33mcommit 2615ec56470b61a0f23b55ef72ec265fc4fe17ed[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Nov 13 12:25:01 2021 -0800

    Improve profiling.md

[33mcommit 8b30dc635450363661397e7f63d054e6efbce547[m
Author: MiniaczQ <xnetroidpl@gmail.com>
Date:   Sat Nov 13 04:26:42 2021 +0000

    `iter_mut()` for Assets type (#3118)
    
    # Objective
    
    Fixes #3117
    
    ## Solution
    
    I took `get_mut()` and did it for all the elements ð
    
    
    Co-authored-by: MiniaczQ <jakub.motyka.2000@gmail.com>

[33mcommit 9a4cc42b38e36f70bee6f81891bb653f090d4042[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Nov 12 22:27:17 2021 +0000

    EntityRenderCommand and PhaseItemRenderCommand (#3111)
    
    Adds new `EntityRenderCommand`, `EntityPhaseItem`, and `CachedPipelinePhaseItem` traits to make it possible to reuse RenderCommands across phases. This should be helpful for features like #3072 . It also makes the trait impls slightly less generic-ey in the common cases.
    
    This also fixes the custom shader examples to account for the recent Frustum Culling and MSAA changes (the UX for these things will be improved later).

[33mcommit 5127274b3120152f18b0b1fb1cd31fb159dac126[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Nov 12 03:08:27 2021 +0000

    Update tracing-subscriber requirement from 0.2.22 to 0.3.1 (#3076)
    
    # Objective
    
    - Fix #3058 opened by dependabot
    
    ## Solution
    
    - A new feature need to be added to `tracing-subscriber`

[33mcommit 290b7dd9ab9fffadc17715b2fdb2ec6333020b8b[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Nov 12 01:39:25 2021 +0000

    Update vendored Crevice to 0.8.0 + PR for arrays (#3059)
    
    # Objective
    
    - Update vendor crevice to have the latest update from crevice 0.8.0
    - Using https://github.com/ElectronicRU/crevice/tree/arrays which has the changes to make arrays work
    
    ## Solution
    
    - Also updated glam and hexasphere to only have one version of glam
    - From the original PR, using crevice to write GLSL code containing arrays would probably not work but it's not something used by Bevy

[33mcommit e375addec6c690f8911c4114da443daa1ddb5c03[m
Author: Jay Oster <jay@kodewerx.org>
Date:   Thu Nov 11 11:33:33 2021 +0000

    Fix MIME type support for glTF buffer Data URIs (pipelined) (#3106)
    
    Apply #3101 on top of the `pipelined-rendering` branch, as requested by @cart in https://github.com/bevyengine/bevy/pull/3101#issuecomment-965907267
    
    # Objective
    
    - The glTF 2.0 spec requires that Data URIs use one of two valid MIME types. `bevy_gltf2` only supports one of these.
    - See:
      - https://www.khronos.org/registry/glTF/specs/2.0/glTF-2.0.html#_media_type_registrations
      - https://www.khronos.org/registry/glTF/specs/2.0/glTF-2.0.html#file-extensions-and-media-types
      - https://www.khronos.org/registry/glTF/specs/2.0/glTF-2.0.html#binary-data-storage
    
    > Buffer data **MAY** alternatively be embedded in the glTF file via `data:` URI with base64 encoding. When `data:` URI is used for buffer storage, its mediatype field **MUST** be set to `application/octet-stream` or `application/gltf-buffer`.
    
    (Emphasis in original.)
    
    ## Solution
    
    - Check for both MIME types.

[33mcommit 76cb662be1feefef4608839b0f5eac6af198dd1d[m
Author: Jay Oster <jay@kodewerx.org>
Date:   Thu Nov 11 01:58:57 2021 +0000

    Fix MIME type support for glTF buffer Data URIs (#3101)
    
    # Objective
    
    - The glTF 2.0 spec requires that Data URIs use one of two valid MIME types. `bevy_gltf` only supports one of these.
    - See:
      - https://www.khronos.org/registry/glTF/specs/2.0/glTF-2.0.html#_media_type_registrations
      - https://www.khronos.org/registry/glTF/specs/2.0/glTF-2.0.html#file-extensions-and-media-types
      - https://www.khronos.org/registry/glTF/specs/2.0/glTF-2.0.html#binary-data-storage
    
    > Buffer data **MAY** alternatively be embedded in the glTF file via `data:` URI with base64 encoding. When `data:` URI is used for buffer storage, its mediatype field **MUST** be set to `application/octet-stream` or `application/gltf-buffer`.
    
    (Emphasis in original.)
    
    ## Solution
    
    - Check for both MIME types.

[33mcommit 0db1f4cd16f3d127a6da7166ade795cc5d2d0d13[m
Author: Jerome Humbert <djeedai@gmail.com>
Date:   Thu Nov 11 01:43:51 2021 +0000

    Clarify `RUST_LOG` override over `LogSettings` (#3095)
    
    # Objective
    
    Clarify the fact that setting the `RUST_LOG` environment variable
    overrides any setting from the `LogSettings` resource.
    
    ## Solution
    
    Update docstring comment for `LogSettings`.

[33mcommit 36394adb2fdb5691a2c570a762678b797191309c[m
Author: Ixentus <alexvermaat@gmail.com>
Date:   Thu Nov 11 01:17:38 2021 +0000

    Remove wasm audio feature flag for 2021 (#3000)
    
    - Requires #2997
    - Removes `wasm_audio` feature as discussed in #2397
    - Closes only task in #2479
    
    Open questions:
    Should we enable wasm audio by default or only when building for wasm using `cfg`?
    Maybe there should be a global wasm feature for bevy?

[33mcommit 12e0b80cd0d2d937288b3ec1c19f974d3b633d72[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Nov 10 22:56:14 2021 +0000

    fix tracing-subscriber to `=0.2.24` (#3102)
    
    temporary fix until rest of ecosystem is updated

[33mcommit db35ffbecee113f7e4d1afdccc5c13381dc10d12[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Nov 10 22:17:54 2021 +0000

    fix tracing dependencies to before 0.3 update (#3103)
    
    same as #3102 on branch pipelined-rendering

[33mcommit bc5916cce76ed5effdee8a5fb17141818a7cf4ca[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Sun Nov 7 21:45:52 2021 +0000

    Frustum culling (#2861)
    
    # Objective
    
    Implement frustum culling for much better performance on more complex scenes. With the Amazon Lumberyard Bistro scene, I was getting roughly 15fps without frustum culling and 60+fps with frustum culling on a MacBook Pro 16 with i9 9980HK 8c/16t CPU and Radeon Pro 5500M.
    
    macOS does weird things with vsync so even though vsync was off, it really looked like sometimes other applications or the desktop window compositor were interfering, but the difference could be even more as I even saw up to 90+fps sometimes.
    
    ## Solution
    
    - Until the https://github.com/bevyengine/rfcs/pull/12 RFC is completed, I wanted to implement at least some of the bounding volume functionality we needed to be able to unblock a bunch of rendering features and optimisations such as frustum culling, fitting the directional light orthographic projection to the relevant meshes in the view, clustered forward rendering, etc.
    - I have added `Aabb`, `Frustum`, and `Sphere` types with only the necessary intersection tests for the algorithms used. I also added `CubemapFrusta` which contains a `[Frustum; 6]` and can be used by cube maps such as environment maps, and point light shadow maps.
      - I did do a bit of benchmarking and optimisation on the intersection tests. I compared the [rafx parallel-comparison bitmask approach](https://github.com/aclysma/rafx/blob/c91bd5fcfdfa3f4d1b43507c32d84b94ffdf1b2e/rafx-visibility/src/geometry/frustum.rs#L64-L92) with a naÃ¯ve loop that has an early-out in case of a bounding volume being outside of any one of the `Frustum` planes and found them to be very similar, so I chose the simpler and more readable option. I also compared using Vec3 and Vec3A and it turned out that promoting Vec3s to Vec3A improved performance of the culling significantly due to Vec3A operations using SIMD optimisations where Vec3 uses plain scalar operations.
    - When loading glTF models, the vertex attribute accessors generally store the minimum and maximum values, which allows for adding AABBs to meshes loaded from glTF for free.
    - For meshes without an AABB (`PbrBundle` deliberately does not have an AABB by default), a system is executed that scans over the vertex positions to find the minimum and maximum values along each axis. This is used to construct the AABB.
    - The `Frustum::intersects_obb` and `Sphere::insersects_obb` algorithm is from Foundations of Game Engine Development 2: Rendering by Eric Lengyel. There is no OBB type, yet, rather an AABB and the model matrix are passed in as arguments. This calculates a 'relative radius' of the AABB with respect to the plane normal (the plane normal in the Sphere case being something I came up with as the direction pointing from the centre of the sphere to the centre of the AABB) such that it can then do a sphere-sphere intersection test in practice.
    - `RenderLayers` were copied over from the current renderer.
    - `VisibleEntities` was copied over from the current renderer and a `CubemapVisibleEntities` was added to support `PointLight`s for now. `VisibleEntities` are added to views (cameras and lights) and contain a `Vec<Entity>` that is populated by culling/visibility systems that run in PostUpdate of the app world, and are iterated over in the render world for, for example, queuing up meshes to be drawn by lights for shadow maps and the main pass for cameras.
    - `Visibility` and `ComputedVisibility` components were added. The `Visibility` component is user-facing so that, for example, the entity can be marked as not visible in an editor. `ComputedVisibility` on the other hand is the result of the culling/visibility systems and takes `Visibility` into account. So if an entity is marked as not being visible in its `Visibility` component, that will skip culling/visibility intersection tests and just mark the `ComputedVisibility` as false.
    - The `ComputedVisibility` is used to decide which meshes to extract.
    - I had to add a way to get the far plane from the `CameraProjection` in order to define an explicit far frustum plane for culling. This should perhaps be optional as it is not always desired and in that case, testing 5 planes instead of 6 is a performance win.
    
    I think that's about all. I discussed some of the design with @cart on Discord already so hopefully it's not too far from being mergeable. It works well at least. ð

[33mcommit f4cfcc0e44b91446beb49a1dbe9965cb7bcde059[m
Author: dataphract <dataphract@gmail.com>
Date:   Sat Nov 6 20:53:12 2021 +0000

    explain absence of `new` constructor in Hash{Map, Set} docs; suggest `default` (#3077)
    
    # Objective
    
    Fixes #2823.
    
    ## Solution
    
    This PR adds notes to the `HashMap` and `HashSet` docs explaining why `HashMap::new()` (resp. `HashSet::new()`) is not available, and guiding the user toward using the `Default` implementation for an empty collection.

[33mcommit b3cd48228b6e10e6394d7ced21ea2a149f8151c6[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Nov 6 20:53:11 2021 +0000

    add detailed errors (#2994)
    
    # Objective
    
    - Improve error descriptions and help understand how to fix them
    - I noticed one today that could be expanded, it seemed like a good starting point
    
    ## Solution
    
    - Start something like https://github.com/rust-lang/rust/tree/master/compiler/rustc_error_codes/src/error_codes
    - Remove sentence about Rust mutability rules which is not very helpful in the error message
    
    I decided to start the error code with B for Bevy so that they're not confused with error code from rust (which starts with E)
    
    
    Longer term, there are a few more evolutions that can continue this:
    - the code samples should be compiled check, and even executed for some of them to check they have the correct error code in a panic
    - the error could be build on a page in the website like https://doc.rust-lang.org/error-index.html
    - most panic should have their own error code

[33mcommit a5c675f3367092f68a2f5133817fac072c4f04dd[m
Author: Jerome Humbert <djeedai@gmail.com>
Date:   Sat Nov 6 20:53:10 2021 +0000

    Add docstring comment to Style to reference CSS (#2936)
    
    Mention the fact that the UI layout system is based on the CSS layout
    model through a docstring comment on the `Style` type.
    
    # Objective
    
    Explain to new users that the Bevy UI uses the CSS layout model, to lower the barrier to entry given the fact documentation (book and code) is fairly limited on the topic.
    
    ## Solution
    
    Fix as discussed with @alice-i-cecile on #2918.

[33mcommit aac09353fdbe615bbaeed54ff234197cf4aca040[m
Author: Minghao Liu <molikto@gmail.com>
Date:   Sat Nov 6 20:34:31 2021 +0000

    add position to WindowDescriptor (#3070)
    
    # Objective
    
    Set initial position of the window, so I can start it at the left side of the view automatically, used with `cargo watch`
    
    ## Solution
    
    add window position to WindowDescriptor

[33mcommit fde5d2fe46b7a5d75660aa2cba97bbe67071592e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Nov 6 20:15:36 2021 +0000

    Add System Command apply and RenderGraph node spans (#3069)
    
    This fills in most of the gaps in tracing visualizations and should help with discovering bottlenecks.

[33mcommit 09706cdb2a91162d82b2f8e376e18598dd397b16[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Thu Nov 4 21:47:57 2021 +0000

    Support for normal maps including from glTF models (#2741)
    
    # Objective
    
    - Support tangent vertex attributes, and normal maps
    - Support loading these from glTF models
    
    ## Solution
    
    - Make two pipelines in both the shadow and pbr passes, one for without normal maps, one for with normal maps
    - Select the correct pipeline to bind based on the presence of the normal map texture
    - Share the vertex attribute layout between shadow and pbr passes
    - Refactored pbr.wgsl to share a bunch of common code between the normal map and non-normal map entry points. I tried to do this in a way that will allow custom shader reuse.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 225d6a138f8f5be92ef42ce146a76d4c43f60f72[m
Author: Marc Parenteau <marc.parenteau@legionlabs.com>
Date:   Thu Nov 4 20:55:28 2021 +0000

    remove Box from ExclusiveSystemFn (#3063)
    
    Minor refactor to remove the boxing of the function pointer stored in ExclusiveSystemFn.

[33mcommit 85487707ef0074611b506d639b9f7ad5ef17c387[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Nov 4 20:28:53 2021 +0000

    Sprite Batching (#3060)
    
    This implements the following:
    
    * **Sprite Batching**: Collects sprites in a vertex buffer to draw many sprites with a single draw call. Sprites are batched by their `Handle<Image>` within a specific z-level. When possible, sprites are opportunistically batched _across_ z-levels (when no sprites with a different texture exist between two sprites with the same texture on different z levels). With these changes, I can now get ~130,000 sprites at 60fps on the `bevymark_pipelined` example.
    * **Sprite Color Tints**: The `Sprite` type now has a `color` field. Non-white color tints result in a specialized render pipeline that passes the color in as a vertex attribute. I chose to specialize this because passing vertex colors has a measurable price (without colors I get ~130,000 sprites on bevymark, with colors I get ~100,000 sprites). "Colored" sprites cannot be batched with "uncolored" sprites, but I think this is fine because the chance of a "colored" sprite needing to batch with other "colored" sprites is generally probably way higher than an "uncolored" sprite needing to batch with a "colored" sprite.
    * **Sprite Flipping**: Sprites can be flipped on their x or y axis using `Sprite::flip_x` and `Sprite::flip_y`. This is also true for `TextureAtlasSprite`.
    * **Simpler BufferVec/UniformVec/DynamicUniformVec Clearing**:  improved the clearing interface by removing the need to know the size of the final buffer at the initial clear.
    
    ![image](https://user-images.githubusercontent.com/2694663/140001821-99be0d96-025d-489e-9bfa-ba19c1dc9548.png)
    
    
    Note that this moves sprites away from entity-driven rendering and back to extracted lists. We _could_ use entities here, but it necessitates that an intermediate list is allocated / populated to collect and sort extracted sprites. This redundant copy, combined with the normal overhead of spawning extracted sprite entities, brings bevymark down to ~80,000 sprites at 60fps. I think making sprites a bit more fixed (by default) is worth it. I view this as acceptable because batching makes normal entity-driven rendering pretty useless anyway (and we would want to batch most custom materials too). We can still support custom shaders with custom bindings, we'll just need to define a specific interface for it.

[33mcommit 2f22f5ca2131e25770564523a3e9d6711dfafcad[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Wed Nov 3 22:20:23 2021 +0000

    MSAA example (#3049)
    
    Add an example that demonstrates the difference between no MSAA and MSAA 4x. This is also useful for testing panics when resizing the window using MSAA. This is on top of #3042 .
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 95032a3f97397b33b63b0a6e44200e6b621b4580[m
Author: Mike <mike.hsu@gmail.com>
Date:   Mon Nov 1 21:28:50 2021 +0000

    change texture atlas sprite indexing to usize (#2887)
    
    Per this comment https://github.com/bevyengine/bevy/pull/2864#discussion_r717947232,
    I have done a pass at changing all the public facing indexes for `TextureAtlas` to usize.

[33mcommit c5af1335eb48f990c71082787ff566fc793aab33[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Oct 29 05:37:43 2021 +0000

    Add MSAA to new renderer  (#3042)
    
    Adds support for MSAA to the new renderer. This is done using the new [pipeline specialization](#3031) support to specialize on sample count. This is an alternative implementation to #2541 that cuts out the need for complicated render graph edge management by moving the relevant target information into View entities. This reuses @superdump's clever MSAA bitflag range code from #2541.
    
    Note that wgpu currently only supports 1 or 4 samples due to those being the values supported by WebGPU. However they do plan on exposing ways to [enable/query for natively supported sample counts](https://github.com/gfx-rs/wgpu/issues/1832). When this happens we should integrate

[33mcommit 7d932ac1d818b38a48bc1ee48ccb1424ae1af482[m
Author: Mariusz KryÅski <mcanders1@gmail.com>
Date:   Fri Oct 29 00:46:18 2021 +0000

    WebGL2 support (#3039)
    
    # Objective
    
    Make possible to use wgpu gles backend on in the browser (wasm32 + WebGL2).
    
    ## Solution
    
    It is built on top of old @cart patch initializing windows before wgpu. Also:
    - initializes wgpu with `Backends::GL` and proper `wgpu::Limits` on wasm32
    - changes default texture format to `wgpu::TextureFormat::Rgba8UnormSrgb`
    
    
    
    Co-authored-by: Mariusz KryÅski <mrk@sed.pl>

[33mcommit a2ea9279b2eeb20167ea8302ebf51b995b3b5c00[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Oct 28 23:10:45 2021 +0000

    use correct size of pixel instead of 4 (#2977)
    
    # Objective
    
    - Fixes #2919
    - Initial pixel was hard coded and not dependent on texture format
    - Replace #2920 as I noticed this needed to be done also on pipeline rendering branch
    
    ## Solution
    
    - Replace the hard coded pixel with one using the texture pixel size

[33mcommit dacc9d03a70b5b3519923519ccb63dae7195163e[m
Author: Mariusz KryÅski <mrk@sed.pl>
Date:   Thu Oct 28 22:53:22 2021 +0000

    Add support for IndexFormat::Uint16 (#2990)
    
    # Objective
    
    while testing wgpu/WebGL on mobile GPU I've noticed bevy always forces vertex index format to 32bit (and ignores mesh settings).
    
    ## Solution
    
    the solution is to pass proper vertex index format in GpuIndexInfo to render_pass

[33mcommit 015617a7744256513adc0f41d633247c36f73101[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Oct 28 19:07:47 2021 +0000

    Pipeline Specialization, Shader Assets, and Shader Preprocessing (#3031)
    
    ## New Features
    This adds the following to the new renderer:
    
    * **Shader Assets**
      * Shaders are assets again! Users no longer need to call `include_str!` for their shaders
      * Shader hot-reloading
    * **Shader Defs / Shader Preprocessing**
      * Shaders now support `# ifdef NAME`, `# ifndef NAME`, and `# endif` preprocessor directives
    * **Bevy RenderPipelineDescriptor and RenderPipelineCache**
      * Bevy now provides its own `RenderPipelineDescriptor` and the wgpu version is now exported as `RawRenderPipelineDescriptor`. This allows users to define pipelines with `Handle<Shader>` instead of needing to manually compile and reference `ShaderModules`, enables passing in shader defs to configure the shader preprocessor, makes hot reloading possible (because the descriptor can be owned and used to create new pipelines when a shader changes), and opens the doors to pipeline specialization.
      * The `RenderPipelineCache` now handles compiling and re-compiling Bevy RenderPipelineDescriptors. It has internal PipelineLayout and ShaderModule caches. Users receive a `CachedPipelineId`, which can be used to look up the actual `&RenderPipeline` during rendering.
    * **Pipeline Specialization**
      * This enables defining per-entity-configurable pipelines that specialize on arbitrary custom keys. In practice this will involve specializing based on things like MSAA values, Shader Defs, Bind Group existence, and Vertex Layouts.
      * Adds a `SpecializedPipeline` trait and `SpecializedPipelines<MyPipeline>` resource. This is a simple layer that generates Bevy RenderPipelineDescriptors based on a custom key defined for the pipeline.
      * Specialized pipelines are also hot-reloadable.
      * This was the result of experimentation with two different approaches:
        1. **"generic immediate mode multi-key hash pipeline specialization"**
          * breaks up the pipeline into multiple "identities" (the core pipeline definition, shader defs, mesh layout, bind group layout). each of these identities has its own key. looking up / compiling a specific version of a pipeline requires composing all of these keys together
          * the benefit of this approach is that it works for all pipelines / the pipeline is fully identified by the keys. the multiple keys allow pre-hashing parts of the pipeline identity where possible (ex: pre compute the mesh identity for all meshes)
          * the downside is that any per-entity data that informs the values of these keys could require expensive re-hashes. computing each key for each sprite tanked bevymark performance (sprites don't actually need this level of specialization yet ... but things like pbr and future sprite scenarios might).
          * this is the approach rafx used last time i checked
        2. **"custom key specialization"**
          * Pipelines by default are not specialized
          * Pipelines that need specialization implement a SpecializedPipeline trait with a custom key associated type
          * This allows specialization keys to encode exactly the amount of information required (instead of needing to be a combined hash of the entire pipeline). Generally this should fit in a small number of bytes. Per-entity specialization barely registers anymore on things like bevymark. It also makes things like "shader defs" way cheaper to hash because we can use context specific bitflags instead of strings.
          * Despite the extra trait, it actually generally makes pipeline definitions + lookups simpler: managing multiple keys (and making the appropriate calls to manage these keys) was way more complicated.
      * I opted for custom key specialization. It performs better generally and in my opinion is better UX. Fortunately the way this is implemented also allows for custom caches as this all builds on a common abstraction: the RenderPipelineCache. The built in custom key trait is just a simple / pre-defined way to interact with the cache
    
    ## Callouts
    
    * The SpecializedPipeline trait makes it easy to inherit pipeline configuration in custom pipelines. The changes to `custom_shader_pipelined` and the new `shader_defs_pipelined` example illustrate how much simpler it is to define custom pipelines based on the PbrPipeline.
    * The shader preprocessor is currently pretty naive (it just uses regexes to process each line). Ultimately we might want to build a more custom parser for more performance + better error handling, but for now I'm happy to optimize for "easy to implement and understand".
    
    ## Next Steps
    
    * Port compute pipelines to the new system
    * Add more preprocessor directives (else, elif, import)
    * More flexible vertex attribute specialization / enable cheaply specializing on specific mesh vertex layouts

[33mcommit 91c3b210a2b911039a588d6c2828c43cba21536e[m
Author: Iaiao <iaiao.abc@gmail.com>
Date:   Wed Oct 27 19:48:12 2021 +0000

    Update derive(DynamicPlugin) to edition 2021 (#3038)
    
    # Objective
    Edition 2021 requires `dyn Trait` and it won't compile without `dyn`.
    
    ## Solution
    Added `dyn`.

[33mcommit ffde86efa049dbdaf4ae4be3cd64c4c1c0f776f3[m
Author: Yoh Deadfall <yoh.deadfall@hotmail.com>
Date:   Wed Oct 27 00:12:14 2021 +0000

    Update to edition 2021 on master (#3028)
    
    Objective
    During work on #3009 I've found that not all jobs use actions-rs, and therefore, an previous version of Rust is used for them. So while compilation and other stuff can pass, checking markup and Android build may fail with compilation errors.
    
    Solution
    This PR adds `action-rs` for any job running cargo, and updates the edition to 2021.

[33mcommit 9f47697e408c018ec27174308394c9376c57183d[m
Author: William Batista <bootlegbilly@protonmail.ch>
Date:   Mon Oct 25 21:59:24 2021 +0000

    Switched the TODO comment in image_texture_conversion.rs (#2981)
    
    # Objective
    
    The current TODO comment is out of date
    
    ## Solution
    
    I switched up the comment
    
    
    Co-authored-by: William Batista <45850508+billyb2@users.noreply.github.com>

[33mcommit 7b686b5031d3f168cff843764590a72341e88f12[m
Author: Nibor62 <nibor62@gmail.com>
Date:   Mon Oct 25 19:02:36 2021 +0000

    Fix custom_shader_pipelined example shader (#2992)
    
    ## Objective
    
    Looking though the new pipelined example I stumbled on an issue with the example shader :
    
    ```
    Oct 20 12:38:44.891  INFO bevy_render2::renderer: AdapterInfo { name: "Intel(R) UHD Graphics 620 (KBL GT2)", vendor: 32902, device: 22807, device_type: IntegratedGpu, backend: Vulkan }
    Oct 20 12:38:44.894  INFO naga::back::spv::writer: Skip function Some("fetch_point_shadow")
    Oct 20 12:38:44.894  INFO naga::back::spv::writer: Skip function Some("fetch_directional_shadow")
    Oct 20 12:38:44.898 ERROR wgpu::backend::direct: Handling wgpu errors as fatal by default
    thread 'main' panicked at 'wgpu error: Validation Error
    
    Caused by:
        In Device::create_shader_module
        Global variable [1] 'view' is invalid
        Type isn't compatible with the storage class
    ```
    
    ## Solution
    
    added `<uniform>` here and there.
    Note : my current mastery of shaders is about 2 days old, so this still kinda look likes wizardry

[33mcommit 2f4bcc5bf7b296dcd7ee6048a90237c56de36557[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Oct 25 18:00:13 2021 +0000

    Update for edition 2021 (#2997)
    
    # Objective
    
    - update for Edition 2021
    
    ## Solution
    
    - remove the `resolver = "2"`
    - update for https://doc.rust-lang.org/edition-guide/rust-2021/reserving-syntax.html by adding a few ` `

[33mcommit 6a8a8c9d21f32e0e46623db9438813b009f9e014[m
Author: MinerSebas <scherthan_sebastian@web.de>
Date:   Mon Oct 18 20:39:51 2021 +0000

    Fix compile_fail tests (#2984)
    
    # Objective
    
    - Bevy has several `compile_fail` test
    - #2254 added `#[derive(Component)]`
    - Those tests now fail for a different reason.
    - This was not caught as these test still "successfully" failed to compile.
    
    ## Solution
    
    - Add `#[derive(Component)]` to the doctest
    - Also changed their cfg attribute from `doc` to `doctest`, so that these tests don't appear when running `cargo doc` with `--document-private-items`

[33mcommit d65fbd7b9d4e7393acb18ee446b76ed28a549548[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Oct 15 23:47:42 2021 +0000

    Fix scale factor for cursor position (#2932)
    
    # Objective
    
    - Fixes #2501
    - Builds up on #2639 taking https://github.com/bevyengine/bevy/pull/2639#issuecomment-898701047 into account
    
    ## Solution
    
    - keep the physical cursor position in `Window`, and expose it.
    - still convert to logical position in event, and when getting `cursor_position`
    
    
    Co-authored-by: Ahmed Charles <acharles@outlook.com>

[33mcommit 432ce72fafe30598d8726072b0608035d1786251[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Fri Oct 15 23:27:58 2021 +0000

    fix window resize after wgpu 0.11 upgrade (#2953)
    
    The fix originally got introduced in [#2858](https://github.com/bevyengine/bevy/pull/2858/files#diff-0f34eeda7ac2fe1f9e9b27de92d9290e0b360ffa6f032770aff22b5fef4eaa63R137-R143) but got lost in the upgrade to wgpu 0.11 at https://github.com/bevyengine/bevy/pull/2933

[33mcommit b13357e7b2ea0ac489e1030880d45c21744cd139[m
Author: davier <bricedavier@gmail.com>
Date:   Fri Oct 15 23:08:15 2021 +0000

    Fix CI for android (#2971)
    
    # Objective
    
    The update to wgpu 0.11 broke CI for android. This was due to a confusion between `bevy::render::ShaderStage` and `wgpu::ShaderStage`.
    
    
    ## Solution
    
    Revert the incorrect change

[33mcommit 099386f184901b4fe1183f619f301a668abe5672[m
Author: Boxy <supbscripter@gmail.com>
Date:   Fri Oct 15 16:59:29 2021 +0000

    Fix unsound lifetime annotation on `Query::get_component` (#2964)
    
    #2605 changed the lifetime annotations on `get_component` introducing unsoundness as you could keep the returned borrow even after using the query.
    
    Example unsoundness:
    ```rust
    use bevy::prelude::*;
    
    fn main() {
        App::new()
            .add_startup_system(startup)
            .add_system(unsound)
            .run();
    }
    
    #[derive(Debug, Component, PartialEq, Eq)]
    struct Foo(Vec<u32>);
    
    fn startup(mut c: Commands) {
        let e = c.spawn().insert(Foo(vec![10])).id();
        c.insert_resource(e);
    }
    
    fn unsound(mut q: Query<&mut Foo>, res: Res<Entity>) {
        let foo = q.get_component::<Foo>(*res).unwrap();
        let mut foo2 = q.iter_mut().next().unwrap();
    
        let first_elem = &foo.0[0];
        for _ in 0..16 {
            foo2.0.push(12);
        }
        dbg!(*first_elem);
    }
    ```
    output:
    `[src/main.rs:26] *first_elem = 0`

[33mcommit f4776f2ec413bb80ff4ee51e04bb57f0a44d9983[m
Author: Jerome Humbert <djeedai@gmail.com>
Date:   Sun Oct 10 23:04:05 2021 +0000

    Add entity ID to expect() message (#2943)
    
    Add the entity ID and generation to the expect() message of two
    world accessors, to make it easier to debug use-after-free issues.
    Coupled with e.g. bevy-inspector-egui which also displays the entity ID,
    this makes it much easier to identify what entity is being misused.
    
    # Objective
    
    Make it easier to identity an entity being accessed after being deleted.
    
    ## Solution
    
    Augment the error message of some `expect()` call with the entity ID and
    generation. Combined with some external tool like `bevy-inspector-egui`, which
    also displays the entity ID, this increases the chances to be able to identify
    the entity, and therefore find the error that led to a use-after-despawn.

[33mcommit db013b664e3a6ecbcb9945d9d458c8ff0c92957d[m
Author: terrarier2111 <58695553+terrarier2111@users.noreply.github.com>
Date:   Sun Oct 10 22:42:01 2021 +0000

    Fix typo (#2944)

[33mcommit 43e8a156fb4739abee3060c53140f4a94cab9ae5[m
Author: Carter Anderson <zicklag@katharostech.com>
Date:   Fri Oct 8 19:55:24 2021 +0000

    Upgrade to wgpu 0.11 (#2933)
    
    Upgrades both the old and new renderer to wgpu 0.11 (and naga 0.7). This builds on @zicklag's work here #2556.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 997eae61854b362c10810884966ac605121e04d7[m
Author: Christopher Durham <cad97@cad97.com>
Date:   Fri Oct 8 00:37:08 2021 +0000

    Remove double Events::update in bevy-gilrs (#2894)
    
    # Objective
    
    - Remove duplicate `Events::update` call in `gilrs_event_system` (fixes #2893)
      - See #2893 for context
    - While there, make the systems no longer exclusive, as that is not required of them
    
    ## Solution
    
    - Do the change
    
    r? @alice-i-cecile

[33mcommit 40fccd29ca1de986c14275cb41251b211ba4d353[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Thu Oct 7 19:24:48 2021 +0000

    Use RenderQueue in BufferVec (#2847)
    
    Using RenderQueue in BufferVec allows removal of the staging buffer entirely, as well as removal of the SpriteNode.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 29742936822dbf766c063247f8f235f9d35f936e[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Wed Oct 6 19:00:36 2021 +0000

    Add ControlNode for UI (#2908)
    
    This PR adds a ControlNode which marks an entity as "transparent" to the UI layout system, meaning the children of this entity will be treated as the children of this entity s parent by the layout system(s).

[33mcommit 0887f41b58c90886d2ab195d619fcfcbde5a6d81[m
Author: Christopher Durham <cad97@cad97.com>
Date:   Wed Oct 6 19:00:35 2021 +0000

    Fix bevy_ecs::schedule::executor_parallel::system span management (#2905)
    
    # Objective
    
    - Fixes #2904 (see for context)
    
    ## Solution
    
    - Simply hoist span creation out of the threaded task
    - Confirmed to solve the issue locally
    
    Now all events have the full span parent tree up through `bevy_ecs::schedule::stage` all the way to `bevy_app::app::bevy_app` (and its parents in bevy-consumer code, if any).

[33mcommit a60fe30ada78508a6b04479ae2ddce2e81432aa4[m
Author: Christopher Durham <cad97@cad97.com>
Date:   Wed Oct 6 18:34:33 2021 +0000

    Avoid some format! into immediate format! (#2913)
    
    # Objective
    
    - Avoid usages of `format!` that ~immediately get passed to another `format!`. This avoids a temporary allocation and is just generally cleaner.
    
    ## Solution
    
    - `bevy_derive::shader_defs` does a `format!("{}", val.to_string())`, which is better written as just `format!("{}", val)`
    - `bevy_diagnostic::log_diagnostics_plugin` does a `format!("{:>}", format!(...))`, which is better written as `format!("{:>}", format_args!(...))`
    - `bevy_ecs::schedule` does `tracing::info!(..., name = &*format!("{:?}", val))`, which is better written with the tracing shorthand `tracing::info!(..., name = ?val)`
    - `bevy_reflect::reflect` does `f.write_str(&format!(...))`, which is better written as `write!(f, ...)` (this could also be written using `f.debug_tuple`, but I opted to maintain alt debug behavior)
    - `bevy_reflect::serde::{ser, de}` do `serde::Error::custom(format!(...))`, which is better written as `Error::custom(format_args!(...))`, as `Error::custom` takes `impl Display` and just immediately calls `format!` again

[33mcommit bf19ddf1917a745dee938999dc96a65a86f91b70[m
Author: Kurt KÃ¼hnert <kuehnertkurt95@gmail.com>
Date:   Wed Oct 6 00:24:01 2021 +0000

    removed unused RenderResourceId and SwapChainFrame (#2890)
    
    # Objective
    
    - removed unused RenderResourceId and SwapChainFrame (already unified with TextureView)
    - added deref to BindGroup, this makes conversion to wgpu::BindGroup easier
    
    ## Solution
    
    - cleans up the API

[33mcommit 07ed1d053e7946a116ce3eef273fc93dd246f49d[m
Author: PaweÅ Grabarz <frizi09@gmail.com>
Date:   Sun Oct 3 19:23:44 2021 +0000

    Implement and require `#[derive(Component)]` on all component structs (#2254)
    
    This implements the most minimal variant of #1843 - a derive for marker trait. This is a prerequisite to more complicated features like statically defined storage type or opt-out component reflection.
    
    In order to make component struct's purpose explicit and avoid misuse, it must be annotated with `#[derive(Component)]` (manual impl is discouraged for compatibility). Right now this is just a marker trait, but in the future it might be expanded. Making this change early allows us to make further changes later without breaking backward compatibility for derive macro users.
    
    This already prevents a lot of issues, like using bundles in `insert` calls. Primitive types are no longer valid components as well. This can be easily worked around by adding newtype wrappers and deriving `Component` for them.
    
    One funny example of prevented bad code (from our own tests) is when an newtype struct or enum variant is used. Previously, it was possible to write `insert(Newtype)` instead of `insert(Newtype(value))`. That code compiled, because function pointers (in this case newtype struct constructor) implement `Send + Sync + 'static`, so we allowed them to be used as components. This is no longer the case and such invalid code will trigger a compile error.
    
    
    Co-authored-by: = <=>
    Co-authored-by: TheRawMeatball <therawmeatball@gmail.com>
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 0eb11df394b62a96b90ef07ebe787ea0f3396e10[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Sun Oct 3 19:04:37 2021 +0000

    Apply labels to wgpu resources for improved debugging/profiling (#2912)
    
    # Objective
    
    $subj. All of these names show up in external tools when debugging/profiling frames, which is super useful.

[33mcommit 44ed7e32d8066b9e436e9162a47cb1e4edd0edd0[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Sat Oct 2 19:16:32 2021 +0000

    bevy_render2: Add tracing spans around render subapp and stages (#2907)
    
    Add tracing spans around the renderer subapp and render stages in bevy_render2 to allow profiling / visualisation of stages.
    From:
    <img width="1181" alt="Screenshot 2021-10-02 122336" src="https://user-images.githubusercontent.com/302146/135712361-8aec28ae-0f1e-4c27-9b6e-ca5e5f45d6b9.png">
    To:
    <img width="1229" alt="Screenshot 2021-10-02 122509" src="https://user-images.githubusercontent.com/302146/135712365-6414d424-4e15-4265-9952-483876da9f9a.png">

[33mcommit 5ba2b9adcf5e686273cf024acf1ad8ddfb4f8e18[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Thu Sep 30 20:54:47 2021 +0000

    Unique WorldId (#2827)
    
    # Objective
    
    Fixes these issues:
    - `WorldId`s currently aren't necessarily unique
        - I want to guarantee that they're unique to safeguard my librarified version of https://github.com/bevyengine/bevy/discussions/2805
        - There probably hasn't been a collision yet, but they could technically collide
    - `SystemId` isn't used for anything
      - It's no longer used now that `Locals` are stored within the `System`.
    - `bevy_ecs` depends on rand
    
    ## Solution
    
    - Instead of randomly generating `WorldId`s, just use an incrementing atomic counter, panicing on overflow.
    - Remove `SystemId`
        - We do need to allow Locals for exclusive systems at some point, but exclusive systems couldn't access their own `SystemId` anyway.
    - Now that these don't depend on rand, move it to a dev-dependency
    
    ## Todo
    
    Determine if `WorldId` should be `u32` based instead

[33mcommit d2bba8cb15c8f6801fc79fbec21ec543920faa59[m
Author: VVishion <vvishion.dev@gmail.com>
Date:   Tue Sep 28 21:46:30 2021 +0000

    Add set_stencil_reference to TrackedRenderPass (#2885)
    
    `TrackedRenderPass` is a wrapper around wgpu's `RenderPass` and should expose needed methods such as `set_stencil_reference`.

[33mcommit 99199338ad5e3d89d767f639ef4cd7b6da52ed83[m
Author: Mike <mike.hsu@gmail.com>
Date:   Tue Sep 28 20:54:16 2021 +0000

    add_texture returns index to texture (#2864)
    
    If you need to build a texture atlas from an already created texture that is not match a grid, you need to use new_empty and add_texture to create it.  However it is not straight forward to get the index to be used with TextureAtlasSprite. add_texture should be changed to return the index to the texture.
    
    Currently you can do something like this:
    
    ```rs
    let texture = asset_server.load::<Texture>::("texture.png");
    let texture_atlas = TextureAtlas::new_empty(texture, Vec2::new(40.0, 40.0));
    
    texture_atlas.add_texture(Rect {
      min: Vec2::new(20.0, 20.0),
      max: Vec2::new(40.0, 40.0),
    });
    let index = (texture_atlas.len() - 1) as u32;
    
    let texture_atlas_sprite = TextureAtlasSprite {
      index,
      Default::default()
    };
    ```
    
    But this is more clear
    ```rs
    let index = texture_atlas.add_texture(Rect {
      min: Vec2::new(20.0, 20.0),
      max: Vec2::new(40.0, 40.0),
    });
    ```

[33mcommit c20795017296168e03401ec8abf535304e43f144[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Tue Sep 28 20:35:11 2021 +0000

    Add despawn_recursive to EntityMut (#2855)

[33mcommit 10cbe05175f68ab7369fbd65481b0723f2c9ef30[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Sep 27 23:58:44 2021 +0000

    Update hexasphere requirement from 4.0.0 to 5.0.0 (#2880)
    
    Updates the requirements on [hexasphere](https://github.com/OptimisticPeach/hexasphere) to permit the latest version.
    <details>
    <summary>Commits</summary>
    <ul>
    <li>See full diff in <a href="https://github.com/OptimisticPeach/hexasphere/commits">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit fb0aa8d286d479c7f5176d124634b637cb88b625[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Sep 27 23:32:05 2021 +0000

    enable change detection for hierarchy maintenance (#2411)
    
    # Objective
    
    Noticed a comment saying changed detection should be enabled for hierarchy maintenance once stable
    
    Fixes #891
    
    
    ## Solution
    
    Added `Changed<Parent>` filter on the query

[33mcommit d158e0893ea88b6acf523a4264f076d6e0b540c6[m
Author: Will Dixon <will@willd.io>
Date:   Fri Sep 24 20:42:58 2021 +0000

    Fix panic on is_resource_* calls (#2828) (#2863)
    
    Changed out unwraps to use if let syntax instead. Returning false when None.
    
    Also modified an existing test to encompass these methods
    
    This PR fixes #2828

[33mcommit fb33d591dfdecf9df05612f4bbb4a7d1ad2037d0[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Thu Sep 23 20:55:18 2021 +0000

    Fix window size change panic (#2858)
    
    # Objective
    
    Using fullscreen or trying to resize a window caused a panic. Fix that.
    
    ## Solution
    
    - Don't wholesale overwrite the ExtractedWindows resource when extracting windows
      - This could cause an accumulation of unused windows that are holding onto swap chain frames?
    - Check the if width and/or height changed since the last frame
    - If the size changed, recreate the swap chain
    - Ensure dimensions are >= 1 to avoid panics due to any dimension being 0

[33mcommit 08969a24b8d97e99b068ba739ecb25f007ca221a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Sep 23 06:16:11 2021 +0000

    Modular Rendering (#2831)
    
    This changes how render logic is composed to make it much more modular. Previously, all extraction logic was centralized for a given "type" of rendered thing. For example, we extracted meshes into a vector of ExtractedMesh, which contained the mesh and material asset handles, the transform, etc. We looked up bindings for "drawn things" using their index in the `Vec<ExtractedMesh>`. This worked fine for built in rendering, but made it hard to reuse logic for "custom" rendering. It also prevented us from reusing things like "extracted transforms" across contexts.
    
    To make rendering more modular, I made a number of changes:
    
    * Entities now drive rendering:
      * We extract "render components" from "app components" and store them _on_ entities. No more centralized uber lists! We now have true "ECS-driven rendering"
      * To make this perform well, I implemented #2673 in upstream Bevy for fast batch insertions into specific entities. This was merged into the `pipelined-rendering` branch here: #2815
    * Reworked the `Draw` abstraction:
      * Generic `PhaseItems`: each draw phase can define its own type of "rendered thing", which can define its own "sort key"
      * Ported the 2d, 3d, and shadow phases to the new PhaseItem impl (currently Transparent2d, Transparent3d, and Shadow PhaseItems)
      * `Draw` trait and and `DrawFunctions` are now generic on PhaseItem
      * Modular / Ergonomic `DrawFunctions` via `RenderCommands`
        * RenderCommand is a trait that runs an ECS query and produces one or more RenderPass calls. Types implementing this trait can be composed to create a final DrawFunction. For example the DrawPbr DrawFunction is created from the following DrawCommand tuple. Const generics are used to set specific bind group locations:
            ```rust
             pub type DrawPbr = (
                SetPbrPipeline,
                SetMeshViewBindGroup<0>,
                SetStandardMaterialBindGroup<1>,
                SetTransformBindGroup<2>,
                DrawMesh,
            );
            ```
        * The new `custom_shader_pipelined` example illustrates how the commands above can be reused to create a custom draw function:
           ```rust
           type DrawCustom = (
               SetCustomMaterialPipeline,
               SetMeshViewBindGroup<0>,
               SetTransformBindGroup<2>,
               DrawMesh,
           );
           ```
    * ExtractComponentPlugin and UniformComponentPlugin:
      * Simple, standardized ways to easily extract individual components and write them to GPU buffers
    * Ported PBR and Sprite rendering to the new primitives above.
    * Removed staging buffer from UniformVec in favor of direct Queue usage
      * Makes UniformVec much easier to use and more ergonomic. Completely removes the need for custom render graph nodes in these contexts (see the PbrNode and view Node removals and the much simpler call patterns in the relevant Prepare systems).
    * Added a many_cubes_pipelined example to benchmark baseline 3d rendering performance and ensure there were no major regressions during this port. Avoiding regressions was challenging given that the old approach of extracting into centralized vectors is basically the "optimal" approach. However thanks to a various ECS optimizations and render logic rephrasing, we pretty much break even on this benchmark!
    * Lifetimeless SystemParams: this will be a bit divisive, but as we continue to embrace "trait driven systems" (ex: ExtractComponentPlugin, UniformComponentPlugin, DrawCommand), the ergonomics of `(Query<'static, 'static, (&'static A, &'static B, &'static)>, Res<'static, C>)` were getting very hard to bear. As a compromise, I added "static type aliases" for the relevant SystemParams. The previous example can now be expressed like this: `(SQuery<(Read<A>, Read<B>)>, SRes<C>)`. If anyone has better ideas / conflicting opinions, please let me know!
    * RunSystem trait: a way to define Systems via a trait with a SystemParam associated type. This is used to implement the various plugins mentioned above. I also added SystemParamItem and QueryItem type aliases to make "trait stye" ecs interactions nicer on the eyes (and fingers).
    * RenderAsset retrying: ensures that render assets are only created when they are "ready" and allows us to create bind groups directly inside render assets (which significantly simplified the StandardMaterial code). I think ultimately we should swap this out on "asset dependency" events to wait for dependencies to load, but this will require significant asset system changes.
    * Updated some built in shaders to account for missing MeshUniform fields

[33mcommit b9e024107114807038ff954aa559089ced37d668[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Wed Sep 22 22:11:54 2021 +0000

    update `cargo-manifest` (#2859)
    
    On older versions, people with `edition = 2021` would get this error:
    
    ![grafik](https://user-images.githubusercontent.com/22177966/134387678-28ece4d4-8af6-48de-beb8-973356c3b9f0.png)

[33mcommit 29d4faa077bfdb6bd2978faf7a854298bbef2de0[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Wed Sep 22 21:45:37 2021 +0000

    Make events reuse buffers (#2850)
    
    I'm really curious why this wasn't the case already...

[33mcommit 615d43b9989c45cdd310d4bea1aaa3fc285b2782[m
Author: Federico Rinaldi <gisquerin@gmail.com>
Date:   Fri Sep 17 18:00:29 2021 +0000

    Improve bevy_ecs and bevy_app API docs where referenced by the new Bevy Book (#2365)
    
    ## Objective
    
    The upcoming Bevy Book makes many references to the API documentation of bevy.
    
    Most references belong to the first two chapters of the Bevy Book:
    
    - bevyengine/bevy-website#176
    - bevyengine/bevy-website#182
    
    This PR attempts to improve the documentation of `bevy_ecs` and `bevy_app` in order to help readers of the Book who want to delve deeper into technical details.
    
    ## Solution
    
    - Add crate and level module documentation
    - Document the most important items (basically those included in the preludes), with the following style, where applicable:
        - **Summary.** Short description of the item.
        - **Second paragraph.** Detailed description of the item, without going too much in the implementation.
        - **Code example(s).**
        - **Safety or panic notes.**
    
    ## Collaboration
    
    Any kind of collaboration is welcome, especially corrections, wording, new ideas and guidelines on where the focus should be put in.
    
    ---
    
    ### Related issues
    
    - Fixes #2246

[33mcommit 064af63400e7d36673b0eb79790e187ad9c981de[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Thu Sep 16 23:39:22 2021 +0000

    Add trace_tracy feature for Tracy profiling (#2832)
    
    # Objective
    
    [Tracy](https://github.com/wolfpld/tracy) is:
    > A real time, nanosecond resolution, remote telemetry, hybrid frame and sampling profiler for games and other applications.
    
    With the `trace_tracy` feature enabled, you run your bevy app and either a headless server (`capture`) or a live, interactive profiler UI (`Tracy`), and connect that to your bevy application to then stream the metric data and events, and save it or inspect it live/offline.
    
    Previously when I implemented the spans across systems and stages and I was trying out different profiling tools, Tracy was too unstable on macOS to use. But now, quite some months later, it is working stably with Tracy 0.7.8. You can see timelines, aggregate statistics of mean system/stage execution times, and much more. It's very useful!
    
    ![Screenshot_2021-09-15_at_18 07 19](https://user-images.githubusercontent.com/302146/133554920-350d3d45-fbb8-479f-91f7-7a7a4f9f5873.png)
    
    ## Solution
    
    - Use the `tracing-tracy` crate which supports our tracing spans
    - Expose via the non-default feature `trace_tracy` for consistency with other `trace*` features

[33mcommit 1e03a97e73cd1cd7f655cdaf7cc75069ff9a84bc[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Thu Sep 16 22:50:21 2021 +0000

    fix `Default` implementation of `Image` so that size and data match (#2833)
    
    Before using this image resulted in an `Error in Queue::write_texture: copy of 0..4 would end up overrunning the bounds of the Source buffer of size 0`

[33mcommit 42409fc59acd834e0d2b1828f7d251cd7717da83[m
Author: Squirrel <gilescope@gmail.com>
Date:   Thu Sep 16 09:37:12 2021 +0000

    unused deps? (#2809)
    
    # Objective
    
    - less deps.
    
    ## Solution
    
    - delete button.

[33mcommit 52fd626fed10709c8a9bc046c1968978f5d7e2a6[m
Author: VVishion <vvishion.dev@gmail.com>
Date:   Thu Sep 16 07:17:07 2021 +0000

    Expose wgpu's StencilOperation with bevy  (#2819)
    
    # Objective
    
    Bevy should expose all wgpu types needed for building rendering pipelines.
    Closes #2818
    
    ## Solution
    
    Add wgpu's StencilOperation to bevy_render2::render_resource's export.

[33mcommit 34f0085ba0556861368c13dd691bd4c10022f65e[m
Author: Hoidigan <Hoidigan@users.noreply.github.com>
Date:   Tue Sep 14 22:46:18 2021 +0000

    Doc warnings (#2577)
    
    Fixes #2576
    
    Add <> to links where needed, fix typo and refactored names, and add docs.rs links for external items.

[33mcommit 11b41206eb5ff074f46bf7c7334805e7dd49027e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Sep 14 06:14:19 2021 +0000

    Add upstream bevy_ecs and prepare for custom-shaders merge  (#2815)
    
    This updates the `pipelined-rendering` branch to use the latest `bevy_ecs` from `main`. This accomplishes a couple of goals:
    
    1. prepares for upcoming `custom-shaders` branch changes, which were what drove many of the recent bevy_ecs changes on `main`
    2. prepares for the soon-to-happen merge of `pipelined-rendering` into `main`. By including bevy_ecs changes now, we make that merge simpler / easier to review.
    
    I split this up into 3 commits:
    
    1. **add upstream bevy_ecs**: please don't bother reviewing this content. it has already received thorough review on `main` and is a literal copy/paste of the relevant folders (the old folders were deleted so the directories are literally exactly the same as `main`).
    2. **support manual buffer application in stages**: this is used to enable the Extract step. we've already reviewed this once on the `pipelined-rendering` branch, but its worth looking at one more time in the new context of (1).
    3. **support manual archetype updates in QueryState**: same situation as (2).

[33mcommit b91541b6efff2236f6aefca0f2baa09aba54f505[m
Author: taryn <4861023+phrohdoh@users.noreply.github.com>
Date:   Mon Sep 13 17:37:51 2021 +0000

    fix typo in events test assert message (#2821)
    
    Fixing a 1-character typo in the failure message of an `assert_eq!` in the events tests.

[33mcommit 9effc3e9b3d2fbeaf52d3a57a79ef9208fe95475[m
Author: MinerSebas <scherthan_sebastian@web.de>
Date:   Mon Sep 13 14:02:28 2021 +0000

    Replace `.insert_resource(T::default())` calls with `init_resource::<T>()` (#2807)
    
    # Objective
    
    I added the [INSERT_RESOURCE_WITH_DEFAULT](https://minersebas.github.io/bevy_lint/bevy_lint/static.INSERT_RESOURCE_WITH_DEFAULT.html) Lint to [bevy_lint](https://github.com/MinerSebas/bevy_lint) and while Testing it on bevy itself, I found several places where the Lint correctly triggered.
    
    
    
    ## Solution
    
    Replace `.insert_resource(T::default())` calls with `init_resource::<T>()`

[33mcommit e74f7a7335e66199a55b443c872dee23cbf03dc7[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Sun Sep 12 23:40:22 2021 +0000

    Fix the new nightly CI errors (#2811)
    
    # Objective
    
    - CI is failing again
    - These failures result from https://github.com/rust-lang/rust/pull/85200
    
    ## Solution
    
    - Fix the errors which result from this by using the given fields
    - I also removed the now unused `Debug` impl.
    
    I suspect that we shouldn't use -D warnings for nightly CI - ideally we'd get a discord webhook message into some (non-#github) dedicated channel on warnings.
    
    But this does not implement that.

[33mcommit 51a5070cd2d3d7262616b2efc8a6cd3b1991d7e6[m
Author: Charles Giguere <c.giguere42@gmail.com>
Date:   Fri Sep 10 20:23:50 2021 +0000

    add get_single variant (#2793)
    
    # Objective
    
    The vast majority of `.single()` usage I've seen is immediately followed by a `.unwrap()`. Since it seems most people use it without handling the error, I think making it easier to just get what you want fast while also having a more verbose alternative when you want to handle the error could help.
    
    ## Solution
    
    Instead of having a lot of `.unwrap()` everywhere, this PR introduces a `try_single()` variant that behaves like the current `.single()` and make the new `.single()` panic on error.

[33mcommit 5ff96b8e7ef4cf3985b9486b023741d6e34f32a3[m
Author: willolisp <willolisp@gmail.com>
Date:   Fri Sep 10 19:13:14 2021 +0000

    Improve many sprites example (#2785)
    
    # Objective
    
    My attempt at fixing #2075 .
    
    This is my very first contribution to this repo. Also, I'm very new to both Rust and bevy, so any feedback is *deeply* appreciated.
    
    ## Solution
    - Changed `move_camera_system` so it only targets the camera entity. My approach here differs from the one used in the [cheatbook](https://bevy-cheatbook.github.io/cookbook/cursor2world.html?highlight=maincamera#2d-games) (in which a marker component is used to track the camera), so please, let me know which of them is more idiomatic.
    - `move_camera_system` does not require both `Position` and `Transform` anymore (I used `rotate` for rotating the `Transform` in place, but couldn't find an equivalent `translate` method).
    - Changed `tick_system` so it only targets the timer entity.
    - Sprites are now spawned via a single `spawn_batch` instead of multiple `spawn`s.

[33mcommit 27bfbda7bc76e4196962926e3541ca2ca24b7f53[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Fri Sep 10 18:46:16 2021 +0000

    Fix scale_factor_override in the winit backend (#2784)
    
    # Objective
    
    - Fixes #2751
    
    ## Solution
    
    - Avoid changing the window size if there is a scale factor override
    - Can be tested with the `scale_factor_override` example - use <kbd>â</kbd> to active overriding the scale factor

[33mcommit 4c3c4b5e401717abbf57c56ef00a2e68ef7bce0d[m
Author: sark <sarkahn@gmail.com>
Date:   Thu Sep 9 16:41:21 2021 +0000

    Nightly clippy fixes (#2702)
    
    A few minor changes to fix warnings emitted from clippy on the nightly toolchain, including redundant_allocation, unwrap_or_else_default, and collapsible_match, fixes #2698

[33mcommit cbe9e56d851c5dbcc735aa974925503f1a949e36[m
Author: willolisp <willolisp@gmail.com>
Date:   Thu Sep 9 12:26:43 2021 +0000

    Fixes to `World`'s documentation  (#2790)
    
    # Objective
    
    Fixes #2787.
    
    ## Solution
    
    Fixed doc syntax for `World`'s `get` and `get_mut` methods.

[33mcommit 2f6c464f4be2f3abf6244800a08b614fa3b35c7f[m
Author: Matthias Seiffert <matthias-seiffert@hotmail.de>
Date:   Thu Sep 9 00:46:39 2021 +0000

    Add builder methods to Transform (#2778)
    
    # Objective
    
    Make it easier to construct transforms. E.g.
    
    ```rs
    Transform::from_xyz(0.0, 0.0, 10.0).with_scale(Vec3::splat(2.0))
    ```
    
    I found myself writing an extension method to do this so I don't have to write:
    
    ```rs
    Transform {
      translation: Vec3::new(0.0, 0.0, 10.0),
      scale: Vec3::splat(2.0),
      ..Default::default()
    }
    ```
    
    ## Solution
    
    Add *builder style* methods to `Transform`.
    
    Methods:
    
    - `with_translation`
    - `with_rotation`
    - `with_scale`
    
    I also added these methods to `GlobalTransform`. But they are probably less useful there.

[33mcommit e3170586776b165f40e446780fc4f9a4ed04187d[m
Author: Thomas Heartman <thomas.heartman+git@gmail.com>
Date:   Mon Sep 6 19:16:09 2021 +0000

    Docs/more nixos instructions (#2775)
    
    # Objective
    
    Expand the documentation for NixOS setups (as discussed in Discord)
    
    ## Solution
    
    Added more info to `linux_dependencies.md` about NixOS. This is based off my own experience (as documented in [this blog post](https://blog.thomasheartman.com/posts/bevy-getting-started-on-nixos)), so I can't confirm that it'll work for everyone. However, if there are further tweaks necessary, then I think that this should nevertheless work as a good starting point and should give future users an idea of what they may need to change or update.
    
    Feedback and tweaks are very welcome ð

[33mcommit 18c08dd86022397a371326ed84499ed44998aefa[m
Author: Patrick Greene <patrickisgreene@protonmail.com>
Date:   Mon Sep 6 19:16:08 2021 +0000

    add get_history function to Diagnostic (#2772)
    
    # Objective
    
    - Allow access to diagnostic history value.
    - Fixes #2771.
    
    ## Solution
    
    - Add Diagnostic::get_history function.

[33mcommit edd822a2bb8d95472b945908f632d595994fae9c[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Sep 6 18:49:40 2021 +0000

    Update glam requirement from 0.17.3 to 0.18.0 (#2748)
    
    Updates the requirements on [glam](https://github.com/bitshifter/glam-rs) to permit the latest version.
    <details>
    <summary>Changelog</summary>
    <p><em>Sourced from <a href="https://github.com/bitshifter/glam-rs/blob/main/CHANGELOG.md">glam's changelog</a>.</em></p>
    <blockquote>
    <h2>[0.18.0] - 2021-08-26</h2>
    <h3>Breaking changes</h3>
    <ul>
    <li>Minimum Supported Version of Rust bumped to 1.51.0 for <code>wasm-bindgen-test</code>
    and <code>rustdoc</code> <code>alias</code> support.</li>
    </ul>
    <h3>Added</h3>
    <ul>
    <li>Added <code>wasm32</code> SIMD intrinsics support.</li>
    <li>Added optional support for the <code>rkyv</code> serialization crate.</li>
    <li>Added <code>Rem</code> and <code>RemAssign</code> implementations for all vector types.</li>
    <li>Added quaternion <code>xyz()</code> method for returning the vector part of the
    quaternion.</li>
    <li>Added <code>From((Scalar, Vector3))</code> for 4D vector types.</li>
    </ul>
    <h3>Changed</h3>
    <ul>
    <li>Deprecated <code>as_f32()</code>, <code>as_f64()</code>, <code>as_i32()</code> and <code>as_u32()</code> methods in favor
    of more specific methods such as <code>as_vec2()</code>, <code>as_dvec2()</code>, <code>as_ivec2()</code> and
    <code>as_uvec2()</code> and so on.</li>
    </ul>
    <h2>[0.17.3] - 2021-07-18</h2>
    <h3>Fixed</h3>
    <ul>
    <li>Fix alignment unit tests on non x86 platforms.</li>
    </ul>
    <h2>[0.17.2] - 2021-07-15</h2>
    <h3>Fixed</h3>
    <ul>
    <li>Fix alignment unit tests on i686 and S390x.</li>
    </ul>
    <h2>[0.17.1] - 2021-06-29</h2>
    <h3>Added</h3>
    <ul>
    <li>Added <code>serde</code> support for <code>Affine2</code>, <code>DAffine2</code>, <code>Affine3A</code> and <code>DAffine3</code>.</li>
    </ul>
    <h2>[0.17.0] - 2021-06-26</h2>
    <h3>Breaking changes</h3>
    <ul>
    <li>The addition of <code>Add</code> and <code>Sub</code> implementations of scalar values for vector
    types may create ambiguities with existing calls to <code>add</code> and <code>sub</code>.</li>
    <li>Removed <code>From&lt;Mat3&gt;</code> implementation for <code>Mat2</code> and <code>From&lt;DMat3&gt;</code> for <code>DMat2</code>.
    These have been replaced by <code>Mat2::from_mat3()</code> and <code>DMat2::from_mat3()</code>.</li>
    <li>Removed <code>From&lt;Mat4&gt;</code> implementation for <code>Mat3</code> and <code>From&lt;DMat4&gt;</code> for <code>DMat3</code>.
    These have been replaced by <code>Mat3::from_mat4()</code> and <code>DMat3::from_mat4()</code>.</li>
    </ul>
    <!-- raw HTML omitted -->
    </blockquote>
    <p>... (truncated)</p>
    </details>
    <details>
    <summary>Commits</summary>
    <ul>
    <li><a href="https://github.com/bitshifter/glam-rs/commit/1b703518e7961f9f4e90f40d3969e24462585143"><code>1b70351</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/bitshifter/glam-rs/issues/231">#231</a> from bitshifter/prepare-0.18.0</li>
    <li><a href="https://github.com/bitshifter/glam-rs/commit/935ad5cf64045d15b0de43d13dba1a5bad49d5b6"><code>935ad5c</code></a> Prepare 0.18.0 release.</li>
    <li><a href="https://github.com/bitshifter/glam-rs/commit/8d79d8e9072b5b09f4ebdaaa56eeb375f7a22168"><code>8d79d8e</code></a> Still managed to mess up the tarpaulin config...</li>
    <li><a href="https://github.com/bitshifter/glam-rs/commit/78c30fc72cfcd076b512b62dd4bcb2fed79b0d05"><code>78c30fc</code></a> Fix syntax error in tarpaulin config.</li>
    <li><a href="https://github.com/bitshifter/glam-rs/commit/0258ce710d37b84c98c9b85554754402fb28c01d"><code>0258ce7</code></a> Can use rustdoc alias after msrv bump to 1.51.0.</li>
    <li><a href="https://github.com/bitshifter/glam-rs/commit/f9f7f2407ca23786b663f8b5d7065b7d2780c05e"><code>f9f7f24</code></a> Tidy up tarpaulin exlcudes.</li>
    <li><a href="https://github.com/bitshifter/glam-rs/commit/95dab216e15ce031f0865460263de6120302709b"><code>95dab21</code></a> Make some dev deps wasm only on not wasm.</li>
    <li><a href="https://github.com/bitshifter/glam-rs/commit/342176dde9addb331e7319616484f2edba5b6421"><code>342176d</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/bitshifter/glam-rs/issues/230">#230</a> from DJMcNab/bytemuck-spirv</li>
    <li><a href="https://github.com/bitshifter/glam-rs/commit/837e5ebf7fa89974d573558b264f766e84821de3"><code>837e5eb</code></a> Bytemuck now compiles on spirv</li>
    <li><a href="https://github.com/bitshifter/glam-rs/commit/bb35b1a6910dc1ada1fac97784d7aa22b99cea4b"><code>bb35b1a</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/bitshifter/glam-rs/issues/228">#228</a> from bitshifter/wasm32-simd</li>
    <li>Additional commits viewable in <a href="https://github.com/bitshifter/glam-rs/compare/0.17.3...0.18.0">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit 391d6c6cb2adb85a960567f4579ddca4512b772f[m
Author: Niklas Eicker <git@nikl.me>
Date:   Sat Sep 4 19:05:23 2021 +0000

    Label PRs for all target branches (#2701)
    
    # Objective
    
    - All new PRs should get the "S-Needs-Triage" label. But at the moment we for example are getting quite a few PRs to the new renderer branch that do not get the label.
    
    ## Solution
    
    - Remove the required target "main" from the workflow
    - Also removed configuration for not needed functionality of the labeler action (see [docs](https://github.com/actions/labeler#inputs))

[33mcommit ca54478569ad45aea5464055499f7e0e3a46cc25[m
Author: Caleb Boylan <calebboylan@gmail.com>
Date:   Sat Sep 4 18:52:10 2021 +0000

    Fix breakout example scoreboard (#2770)
    
    # Objective
    
    - The breakout scoreboard was not using the correct text section to display the score integer.
    
    ## Solution
    
    - This updates the code to use the correct text section.

[33mcommit 321d998615606c1fe5528eb57ead32026bff0530[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Wed Sep 1 21:21:41 2021 +0000

    Add convenience methods for checking a set of inputs (#2760)
    
    # Objective
    
    Make it easier to check if some set of inputs matches a key, such as if you want to allow all of space or up or w for jumping.
    
    Currently, this requires:
    ```rust
    if keyboard.pressed(KeyCode::Space)
                || keyboard.pressed(KeyCode::Up)
                || keyboard.pressed(KeyCode::W) {
        // ...
    ```
    
    ## Solution
    
    Add an implementation of the helper methods, which very simply iterate through the items, used as:
    ```rust
    if keyboard.any_pressed([KeyCode::Space, KeyCode::Up, KeyCode::W]) {
    ```

[33mcommit af20cad83058842687c79dd3f9aaf5b45dbce9c7[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Wed Sep 1 20:59:25 2021 +0000

    Add error messages for the spooky insertions (#2581)
    
    # Objective
    
    Sometimes, the unwraps in `entity_mut` could fail here, if the entity was despawned *before* this command was applied.
    
    The simplest case involves two command buffers:
    ```rust
    use bevy::prelude::*;
    fn b(mut commands1: Commands, mut commands2: Commands) {
        let id = commands2.spawn().insert_bundle(()).id();
        commands1.entity(id).despawn();
    }
    fn main() {
        App::build().add_system(b.system()).run();
    }
    ```
    
    However, a more complicated version arises in the case of ambiguity:
    
    ```rust
    use std::time::Duration;
    
    use bevy::{app::ScheduleRunnerPlugin, prelude::*};
    use rand::Rng;
    
    fn cleanup(mut e: ResMut<Option<Entity>>) {
        *e = None;
    }
    
    fn sleep_randomly() {
        let mut rng = rand::thread_rng();
        std::thread::sleep(Duration::from_millis(rng.gen_range(0..50)));
    }
    
    fn spawn(mut commands: Commands, mut e: ResMut<Option<Entity>>) {
        *e = Some(commands.spawn().insert_bundle(()).id());
    }
    
    fn despawn(mut commands: Commands, e: Res<Option<Entity>>) {
        let mut rng = rand::thread_rng();
        std::thread::sleep(Duration::from_millis(rng.gen_range(0..50)));
        if let Some(e) = *e {
            commands.entity(e).despawn();
        }
    }
    
    fn main() {
        App::build()
            .add_system(cleanup.system().label("cleanup"))
            .add_system(sleep_randomly.system().label("before_despawn"))
            .add_system(despawn.system().after("cleanup").after("before_despawn"))
            .add_system(sleep_randomly.system().label("before_spawn"))
            .add_system(spawn.system().after("cleanup").after("before_spawn"))
            .insert_resource(None::<Entity>)
            .add_plugin(ScheduleRunnerPlugin::default())
            .run();
    }
    ```
    
    In the cases where this example crashes, it's because `despawn` was ordered before `spawn` in the topological ordering of systems (which determines when buffers are applied). However, `despawn` actually ran *after* `spawn`, because these systems are ambiguous, so the jiggles in the sleeping time triggered a case where this works.
    
    ## Solution
    
    - Give a better error message

[33mcommit 35979922df9de488e67dfdf5d8a7c857527cb2a7[m
Author: bilsen <40690317+bilsen@users.noreply.github.com>
Date:   Tue Aug 31 20:52:21 2021 +0000

    Fix Option<NonSend<T>> and Option<NonSendMut<T>> (#2757)
    
    # Objective
    Fix `Option<NonSend<T>>` to work when T isn't `Send`
    Fix `Option<NonSendMut<T>>` to work when T isnt in the world.
    
    ## Solution
    Simple two row fix, properly initialize T in `OptionNonSendState` and remove `T: Component` bound for `Option<NonSendMut<T>>`
    also added a rudimentary test
    
    
    Co-authored-by: Ãvar KÃ¤llstrÃ¶m <ivar.kallstrom@gmail.com>

[33mcommit 59bfbd3295ed34f7aec1d8339bab10a339877242[m
Author: Loch Wansbrough <lochie@live.com>
Date:   Tue Aug 31 20:33:21 2021 +0000

    Add Deref implementation for ComputePipeline (#2759)
    
    # Objective
    
    Fixes a usability problem where the user is unable to use their reference to a ComputePipeline in their compute pass.
    
    ## Solution
    
    Implements Deref, allowing the user to obtain the reference to the underlying wgpu::ComputePipeline

[33mcommit c563dd094f604ee68e11c777b857707b8d20b0a5[m
Author: bilsen <40690317+bilsen@users.noreply.github.com>
Date:   Tue Aug 31 20:09:38 2021 +0000

    Fix comment typos (#2737)
    
    Fix some typos in system_param.rs
    
    Co-authored-by: Ãvar KÃ¤llstrÃ¶m <ivar.kallstrom@gmail.com>

[33mcommit dea292d199820008b8746218b8f15bb6909cc238[m
Author: Johan Klokkhammer Helsing <johanhelsing@gmail.com>
Date:   Mon Aug 30 21:56:13 2021 +0000

    Derive thiserror::Error for HexColorError (#2740)
    
    # Objective
    
    - Make it easy to use HexColorError with `thiserror`, i.e. converting it into other error types.
    
    Makes this possible:
    
    ```rust
    #[derive(Debug, thiserror::Error)]
    pub enum LdtkError {
        #[error("An error occured while deserializing")]
        Json(#[from] serde_json::Error),
        #[error("An error occured while parsing a color")]
        HexColor(#[from] bevy::render::color::HexColorError),
    }
    ```
    
    ## Solution
    
    - Derive thiserror::Error the same way we do elsewhere (see query.rs for instance)

[33mcommit d4a552a31a334ea756c9afbc49499867956b824b[m
Author: Josh Taylor <joshuataylorx@gmail.com>
Date:   Mon Aug 30 21:56:12 2021 +0000

    Add aarch64-apple-darwin to the config_fast_builds for Apple Silicon (#2739)
    
    # Objective
    
    M1 Macs / Apple Silicon / simply aarch64 needs to be specified for it to compile with zld, so users might be surprised to find that they aren't getting the benefits and see the fast compiles they might be seeing on other platforms.
    
    ## Solution
    
    - Add it? :)

[33mcommit 4465583ccdff226ce6392bd2d56b9be7085b48b7[m
Author: Lukas OrsvÃ¤rn <lukas@orsvarn.com>
Date:   Mon Aug 30 21:32:09 2021 +0000

    Changed Zshare-generics to `n` on Windows (#2016)
    
    It seems like this option needs to be off on Windows: https://github.com/bevyengine/bevy-website/issues/131
    
    This change also simplifies the instructions required for the Fast Compiles section of the book: https://github.com/bevyengine/bevy-website/pull/137

[33mcommit 045f324e974bab8a14220ede582dd1243e0f063d[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Fri Aug 27 20:15:09 2021 +0000

    Use the infinite reverse right-handed perspective projection (#2543)
    
    # Objective
    
    Forward perspective projections have poor floating point precision distribution over the depth range. Reverse projections fair much better, and instead of having to have a far plane, with the reverse projection, using an infinite far plane is not a problem. The infinite reverse perspective projection has become the industry standard. The renderer rework is a great time to migrate to it.
    
    ## Solution
    
    All perspective projections, including point lights, have been moved to using `glam::Mat4::perspective_infinite_reverse_rh()` and so have no far plane. As various depth textures are shared between orthographic and perspective projections, a quirk of this PR is that the near and far planes of the orthographic projection are swapped when the Mat4 is computed. This has no impact on 2D/3D orthographic projection usage, and provides consistency in shaders, texture clear values, etc. throughout the codebase.
    
    ## Known issues
    
    For some reason, when looking along -Z, all geometry is black. The camera can be translated up/down / strafed left/right and geometry will still be black. Moving forward/backward or rotating the camera away from looking exactly along -Z causes everything to work as expected.
    
    I have tried to debug this issue but both in macOS and Windows I get crashes when doing pixel debugging. If anyone could reproduce this and debug it I would be very grateful. Otherwise I will have to try to debug it further without pixel debugging, though the projections and such all looked fine to me.

[33mcommit cea7db105027b155805103c81c874e95bb85e96d[m
Author: Zicklag <zicklag@katharostech.com>
Date:   Thu Aug 26 00:53:51 2021 +0000

    Remove Need for Sprite Size Sync System (#2632)
    
    # Objective
    
    - Prevent the need to have a system that synchronizes sprite sizes with their images
    
    ## Solution
    
    - Read the sprite size from the image asset when rendering the sprite
    - Replace the `size` and `resize_mode` fields of `Sprite` with a `custom_size: Option<Vec2>` that will modify the sprite's rendered size to be different than the image size, but only if it is `Some(Vec2)`

[33mcommit f6b42b86691bdea92613df3e1e754dbc9455dbc2[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Aug 26 00:40:56 2021 +0000

    check that benches build (#2675)
    
    # Objective
    
    - Fixes #2674
    - Check that benches build
    
    ## Solution
    
    - Adds a job that runs `cargo check --benches`
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit f38a6e670bd950cedbad172bb3a17e82aebcc154[m
Author: James Leflang <jleflang@ucmerced.edu>
Date:   Wed Aug 25 23:56:24 2021 +0000

    Document QueryState (#2298)
    
    # Objective
    
    - QueryState is lacking documentation.
    
    Fixes #2090
    
    ## Solution
    
    - Provide documentation that mirrors Query (as suggested in #2090) and modify as needed.
    
    
    Co-authored-by: James Leflang <59455417+jleflang@users.noreply.github.com>

[33mcommit b47217bfab822e8869f762890c2149fdf05c3df4[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Aug 25 23:34:02 2021 +0000

    Spawn specific entities: spawn or insert operations, refactor spawn internals, world clearing (#2673)
    
    This upstreams the code changes used by the new renderer to enable cross-app Entity reuse:
    
    * Spawning at specific entities
    * get_or_spawn: spawns an entity if it doesn't already exist and returns an EntityMut
    * insert_or_spawn_batch: the batched equivalent to `world.get_or_spawn(entity).insert_bundle(bundle)`
    * Clearing entities and storages
    * Allocating Entities with "invalid" archetypes. These entities cannot be queried / are treated as "non existent". They serve as "reserved" entities that won't show up when calling `spawn()`. They must be "specifically spawned at" using apis like `get_or_spawn(entity)`.
    
    In combination, these changes enable the "render world" to clear entities / storages each frame and reserve all "app world entities". These can then be spawned during the "render extract step".
    
    This refactors "spawn" and "insert" code in a way that I think is a massive improvement to legibility and re-usability. It also yields marginal performance wins by reducing some duplicate lookups (less than a percentage point improvement on insertion benchmarks). There is also some potential for future unsafe reduction (by making BatchSpawner and BatchInserter generic). But for now I want to cut down generic usage to a minimum to encourage smaller binaries and faster compiles.
    
    This is currently a draft because it needs more tests (although this code has already had some real-world testing on my custom-shaders branch).
    
    I also fixed the benchmarks (which currently don't compile!) / added new ones to illustrate batching wins.
    
    After these changes, Bevy ECS is basically ready to accommodate the new renderer. I think the biggest missing piece at this point is "sub apps".

[33mcommit dd32cd029d404783b24f0318546236cfce8ac448[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Wed Aug 25 20:10:43 2021 +0000

    Pipelined separate shadow vertex shader (#2727)
    
    # Objective
    
    - Avoid unnecessary work in the vertex shader of the numerous shadow passes
    - Have the natural order of bind groups in the pbr shader: view, material, mesh
    
    ## Solution
    
    - Separate out the vertex stage of pbr.wgsl into depth.wgsl
    - Remove the unnecessary calculation of uv and normal, as well as removing the unnecessary vertex inputs and outputs
    - Use the depth.wgsl for shadow passes
    - Reorder the bind groups in pbr.wgsl and PbrShaders to be 0 - view, 1 - material, 2 - mesh in decreasing order of rebind frequency

[33mcommit f4aa3284a8bc4be46583ab0a7efe6727c926854e[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Wed Aug 25 19:44:20 2021 +0000

    bevy_pbr2: Add support for not casting/receiving shadows (#2726)
    
    # Objective
    
    Allow marking meshes as not casting / receiving shadows.
    
    ## Solution
    
    - Added `NotShadowCaster` and `NotShadowReceiver` zero-sized type components.
    - Extract these components into `bool`s in `ExtractedMesh`
    - Only generate `DrawShadowMesh` `Drawable`s for meshes _without_ `NotShadowCaster`
    - Add a `u32` bit `flags` member to `MeshUniform` with one flag indicating whether the mesh is a shadow receiver
    - If a mesh does _not_ have the `NotShadowReceiver` component, then it is a shadow receiver, and so the bit in the `MeshUniform` is set, otherwise it is not set.
    - Added an example illustrating the functionality.
    
    NOTE: I wanted to have the default state of a mesh as being a shadow caster and shadow receiver, hence the `Not*` components. However, I am on the fence about this. I don't want to have a negative performance impact, nor have people wondering why their custom meshes don't have shadows because they forgot to add `ShadowCaster` and `ShadowReceiver` components, but I also really don't like the double negatives the `Not*` approach incurs. What do you think?
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit f368bf7fc78f8eef10d2fa52d33c7d983375f8f5[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Wed Aug 25 05:57:57 2021 +0000

    bevy_pbr2: Add support for configurable shadow map sizes (#2700)
    
    # Objective
    
    Add support for configurable shadow map sizes
    
    ## Solution
    
    - Add `DirectionalLightShadowMap` and `PointLightShadowMap` resources, which just have size members, to the app world, and add `Extracted*` counterparts to the render world
    - Use the configured sizes when rendering shadow maps
    - Default sizes remain the same - 4096 for directional light shadow maps, 1024 for point light shadow maps (which are cube maps so 6 faces at 1024x1024 per light)

[33mcommit c5717b5a9124c7c2f7431c4be07f15243ebd60b5[m
Author: Lucas Kent <rubickent@gmail.com>
Date:   Tue Aug 24 18:07:51 2021 +0000

    Document collide args (#2721)
    
    Fixes https://github.com/bevyengine/bevy/issues/2720#issuecomment-904623168
    
    Possibly we should omit the extra bit in brackets, not sure if its warranted.

[33mcommit 47ccebf4863dd58398ba9955e4f14bd31c70b087[m
Author: Garett Cooper <garett@garettcooper.com>
Date:   Tue Aug 24 17:46:53 2021 +0000

    Implement IntoSystemDescriptor for SystemDescriptor (#2718)
    
    # Objective
    
    - Fixes  #2716
    
    ## Solution
    
    - Implements the the IntoSystemDescriptor trait for SystemDescriptor, which simply returns itself

[33mcommit 9898469e9e9399763bec226816d04b27840c56bf[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Aug 24 06:37:28 2021 +0000

    Sub app label changes (#2717)
    
    Makes some tweaks to the SubApp labeling introduced in #2695:
    
    * Ergonomics improvements
    * Removes unnecessary allocation when retrieving subapp label
    * Removes the newly added "app macros" crate in favor of bevy_derive
    * renamed RenderSubApp to RenderApp
    
    @zicklag (for reference)

[33mcommit 958f8b124a1d0aa89f6ed70dd8e4c6e09ec654a1[m
Author: Mirko Rainer <mirkorainer@outlook.com>
Date:   Tue Aug 24 01:50:21 2021 +0000

    Use Explicit Names for Flex Direction (#2672)
    
    # Objective
    
    - Clarify vague meaning of "Ltr" and "Rtl". For someone familiar with Flex Box, this is easy to understand, but being more explicit will help beginners or those unfamiliar, without the need to do research.
    
    ## Solution
    
    - Change three letter abbreviation to fully descriptive name.

[33mcommit 481fa3c7a0f2a785703fcef95672e733264b0aef[m
Author: Christopher Durham <cad97@cad97.com>
Date:   Tue Aug 24 01:31:39 2021 +0000

    derive Debug, Clone for FixedState (StableAHash) (#2694)
    
    This matches `ahash::RandomState`, which provides both `Debug` and `Clone`.
    
    Notably, implementing `Clone` allows the `StableHashMap`/`Set` to also implement `Clone`.
    
    # Objective
    
    - Allow `bevy_utils::StableHashMap` to be cloned.
    
    ## Solution
    
    - Derive `Clone` for `bevy_utils::FixedState`.
    - Also derive `Debug`, since we're touching it anyway, and this aligns `FixedState` with `ahash::RandomState`.

[33mcommit e290a7e29c345d555db27cca4cba82fd57ab2162[m
Author: Zicklag <zicklag@katharostech.com>
Date:   Tue Aug 24 00:31:21 2021 +0000

    Implement Sub-App Labels (#2695)
    
    This is a rather simple but wide change, and it involves adding a new `bevy_app_macros` crate. Let me know if there is a better way to do any of this!
    
    ---
    
    # Objective
    
    - Allow adding and accessing sub-apps by using a label instead of an index
    
    ## Solution
    
    - Migrate the bevy label implementation and derive code to the `bevy_utils` and `bevy_macro_utils` crates and then add a new `SubAppLabel` trait to the `bevy_app` crate that is used when adding or getting a sub-app from an app.

[33mcommit c3d3ae7f920b7f44892566743ca1bebe96a9a653[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Mon Aug 23 23:48:11 2021 +0000

    bevy_pbr2: Improve lighting units and documentation (#2704)
    
    # Objective
    
    A question was raised on Discord about the units of the `PointLight` `intensity` member.
    
    After digging around in the bevy_pbr2 source code and [Google Filament documentation](https://google.github.io/filament/Filament.html#mjx-eqn-pointLightLuminousPower) I discovered that the intention by Filament was that the 'intensity' value for point lights would be in lumens. This makes a lot of sense as these are quite relatable units given basically all light bulbs I've seen sold over the past years are rated in lumens as people move away from thinking about how bright a bulb is relative to a non-halogen incandescent bulb.
    
    However, it seems that the derivation of the conversion between luminous power (lumens, denoted `Î¦` in the Filament formulae) and luminous intensity (lumens per steradian, `I` in the Filament formulae) was missed and I can see why as it is tucked right under equation 58 at the link above. As such, while the formula states that for a point light, `I = Î¦ / 4 Ï` we have been using `intensity` as if it were luminous intensity `I`.
    
    Before this PR, the intensity field is luminous intensity in lumens per steradian. After this PR, the intensity field is luminous power in lumens, [as suggested by Filament](https://google.github.io/filament/Filament.html#table_lighttypesunits) (unfortunately the link jumps to the table's caption so scroll up to see the actual table).
    
    I appreciate that it may be confusing to call this an intensity, but I think this is intended as more of a non-scientific, human-relatable general term with a bit of hand waving so that most light types can just have an intensity field and for most of them it works in the same way or at least with some relatable value. I'm inclined to think this is reasonable rather than throwing terms like luminous power, luminous intensity, blah at users.
    
    ## Solution
    
    - Documented the `PointLight` `intensity` member as 'luminous power' in units of lumens.
    - Added a table of examples relating from various types of household lighting to lumen values.
    - Added in the mapping from luminous power to luminous intensity when premultiplying the intensity into the colour before it is made into a graphics uniform.
    - Updated the documentation in `pbr.wgsl` to clarify the earlier confusion about the missing `/ 4 Ï`.
    - Bumped the intensity of the point lights in `3d_scene_pipelined` to 1600 lumens.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 993ce84bc716feea1852de50801beaa958247d05[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Mon Aug 23 23:28:45 2021 +0000

    bevy_render2: Make default near plane more sensible at 0.1 (#2703)
    
    # Objective
    
    The default perspective projection near plane being at 1 unit feels very far away if one considers units to directly map to real world units such as metres. Not being able to see anything that is closer than 1m is unnecessarily limiting. Using a default of 0.1 makes more sense as it is difficult to even focus on things closer than 10cm in the real world.
    
    ## Solution
    
    - Changed the default perspective projection near plane to 0.1.

[33mcommit 3faca93f7bf83e4d6f81cffbac7f070809c07023[m
Author: Zicklag <zicklag@katharostech.com>
Date:   Thu Aug 19 20:34:31 2021 +0000

    Add ClearColor Resource to Pipelined Renderer (#2631)
    
    # Objective
    
    - Allow the user to set the clear color when using the pipelined renderer
    
    ## Solution
    
    - Add a `ClearColor` resource that can be added to the world to configure the clear color
    
    ## Remaining Issues
    
    Currently the `ClearColor` resource is cloned from the app world to the render world every frame. There are two ways I can think of around this:
    
    1. Figure out why `app_world.is_resource_changed::<ClearColor>()` always returns `true` in the `extract` step and fix it so that we are only updating the resource when it changes
    2. Require the users to add the `ClearColor` resource to the render sub-app instead of the parent app. This is currently sub-optimal until we have labled sub-apps, and probably a helper funciton on `App` such as `app.with_sub_app(RenderApp, |app| { ... })`. Even if we had that, I think it would be more than we want the user to have to think about. They shouldn't have to know about the render sub-app I don't think.
    
    I think the first option is the best, but I could really use some help figuring out the nuance of why `is_resource_changed` is always returning true in that context.

[33mcommit 62e4e59a864a3d2ca01e0372cb2f0ffed0d2dbf6[m
Author: Niklas Eicker <git@nikl.me>
Date:   Thu Aug 19 20:22:38 2021 +0000

    Update plugin guidelines (#2692)
    
    # Objective
    
    - the plugin guidelines should be up-to-date and easy to read/understand
    
    ## Solution
    
    * point to "Bevy Assets" instead of old "Awesome Bevy"
    * restructure sections
    * same order for sections and checklist
    * Update examples with newest release/rev

[33mcommit d84c7f9066d095f5837049b29e1e6688dcc63cba[m
Author: bjorn3 <bjorn3@users.noreply.github.com>
Date:   Thu Aug 19 20:02:25 2021 +0000

    Reduce visibility of various types and fields  (#2690)
    
    See the individual commits.

[33mcommit 9788b386c7846c99978ab5c1a33698ec5a471d84[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Aug 19 01:32:31 2021 +0000

    Update glam requirement from 0.15.1 to 0.17.3 (#2500)
    
    Updates the requirements on [glam](https://github.com/bitshifter/glam-rs) to permit the latest version.
    <details>
    <summary>Changelog</summary>
    <p><em>Sourced from <a href="https://github.com/bitshifter/glam-rs/blob/master/CHANGELOG.md">glam's changelog</a>.</em></p>
    <blockquote>
    <h2>[0.17.3] - 2021-07-18</h2>
    <h3>Fixed</h3>
    <ul>
    <li>Fix alignment unit tests on non x86 platforms.</li>
    </ul>
    <h2>[0.17.2] - 2021-07-15</h2>
    <h3>Fixed</h3>
    <ul>
    <li>Fix alignment unit tests on i686 and S390x.</li>
    </ul>
    <h2>[0.17.1] - 2021-06-29</h2>
    <h3>Added</h3>
    <ul>
    <li>Added <code>serde</code> support for <code>Affine2</code>, <code>DAffine2</code>, <code>Affine3A</code> and <code>DAffine3</code>.</li>
    </ul>
    <h2>[0.17.0] - 2021-06-26</h2>
    <h3>Breaking changes</h3>
    <ul>
    <li>The addition of <code>Add</code> and <code>Sub</code> implementations of scalar values for vector
    types may create ambiguities with existing calls to <code>add</code> and <code>sub</code>.</li>
    <li>Removed <code>From&lt;Mat3&gt;</code> implementation for <code>Mat2</code> and <code>From&lt;DMat3&gt;</code> for <code>DMat2</code>.
    These have been replaced by <code>Mat2::from_mat3()</code> and <code>DMat2::from_mat3()</code>.</li>
    <li>Removed <code>From&lt;Mat4&gt;</code> implementation for <code>Mat3</code> and <code>From&lt;DMat4&gt;</code> for <code>DMat3</code>.
    These have been replaced by <code>Mat3::from_mat4()</code> and <code>DMat3::from_mat4()</code>.</li>
    <li>Removed deprecated <code>from_slice_unaligned()</code>, <code>write_to_slice_unaligned()</code>,
    <code>from_rotation_mat4</code> and <code>from_rotation_ypr()</code> methods.</li>
    </ul>
    <h3>Added</h3>
    <ul>
    <li>Added <code>col_mut()</code> method which returns a mutable reference to a matrix column
    to all matrix types.</li>
    <li>Added <code>AddAssign</code>, <code>MulAssign</code> and <code>SubAssign</code> implementations for all matrix
    types.</li>
    <li>Added <code>Add</code> and <code>Sub</code> implementations of scalar values for vector types.</li>
    <li>Added more <code>glam_assert!</code> checks and documented methods where they are used.</li>
    <li>Added vector projection and rejection methods <code>project_onto()</code>,
    <code>project_onto_normalized()</code>, <code>reject_from()</code> and <code>reject_from_normalized()</code>.</li>
    <li>Added <code>Mat2::from_mat3()</code>, <code>DMat2::from_mat3()</code>, <code>Mat3::from_mat4()</code>,
    <code>DMat3::from_mat4()</code> which create a smaller matrix from a larger one,
    discarding a final row and column of the input matrix.</li>
    <li>Added <code>Mat3::from_mat2()</code>, <code>DMat3::from_mat2()</code>, <code>Mat4::from_mat3()</code> and
    <code>DMat4::from_mat3()</code> which create an affine transform from a smaller linear
    transform matrix.</li>
    </ul>
    <h3>Changed</h3>
    <!-- raw HTML omitted -->
    </blockquote>
    <p>... (truncated)</p>
    </details>
    <details>
    <summary>Commits</summary>
    <ul>
    <li><a href="https://github.com/bitshifter/glam-rs/commit/ecf3904b2fb639a979127f457b259f4b83b0340b"><code>ecf3904</code></a> Prepare release 0.17.3</li>
    <li><a href="https://github.com/bitshifter/glam-rs/commit/95e02bb43eadbc0c56b3931cbbf1f68a5cc5f910"><code>95e02bb</code></a> Merge branch 'master' of github.com:bitshifter/glam-rs</li>
    <li><a href="https://github.com/bitshifter/glam-rs/commit/c6dc70258345349de5f1051d19ce1f408532ca89"><code>c6dc702</code></a> More alignment test fixes for when SSE2 is not avaialable.</li>
    <li><a href="https://github.com/bitshifter/glam-rs/commit/87a3b25872f893fc4e8cbab0bbfbb437d1a2c8fb"><code>87a3b25</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/bitshifter/glam-rs/issues/216">#216</a> from bitshifter/prepare-0.17.2</li>
    <li><a href="https://github.com/bitshifter/glam-rs/commit/269e5140903f9bf5bcaa8073274f4a0113d7e0cd"><code>269e514</code></a> Prepare for 0.17.2 release.</li>
    <li><a href="https://github.com/bitshifter/glam-rs/commit/1da7d6459c5f9890275c7fc1871e6c33c825b6b9"><code>1da7d64</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/bitshifter/glam-rs/issues/215">#215</a> from bitshifter/issue-213</li>
    <li><a href="https://github.com/bitshifter/glam-rs/commit/dc60e20925254f4f1239424685c34953409395df"><code>dc60e20</code></a> Fix align asserts on i686 and S390x architectures.</li>
    <li><a href="https://github.com/bitshifter/glam-rs/commit/bd8b30e9fbcfd5910dc2af251fecccc31670edf7"><code>bd8b30e</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/bitshifter/glam-rs/issues/212">#212</a> from remilauzier/master</li>
    <li><a href="https://github.com/bitshifter/glam-rs/commit/a4e97c0b5429547718a9ceacfe5957d1d765bd52"><code>a4e97c0</code></a> Update approx to 0.5</li>
    <li><a href="https://github.com/bitshifter/glam-rs/commit/059f61952533af3fc32274e5b7ea242ce9a771a7"><code>059f619</code></a> Prepare 0.17.1 release (<a href="https://github-redirect.dependabot.com/bitshifter/glam-rs/issues/211">#211</a>)</li>
    <li>Additional commits viewable in <a href="https://github.com/bitshifter/glam-rs/compare/0.15.1...0.17.3">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit 1a758dd9e2e5cbbb79592c89ba8224b28b3eb3e7[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Aug 19 01:02:15 2021 +0000

    update ndk-glue to 0.4 (#2684)
    
    # Objective
    
    - We currently depends on ndk 0.2, 0.3, 0.4
    - Only 0.2 dependencies comes from Bevy itself
    
    ## Solution
    
    - Replace #1371
    - Update Bevy to ndk-glue 0.4
    - Also fixes duplicate dependency CI issue

[33mcommit 98a08cf4958c7b045d1d90d7c8714102198c413f[m
Author: Georg Friedrich Schuppe <georg.schuppe@gmail.com>
Date:   Wed Aug 18 20:57:58 2021 +0000

    feat: remove_component for ReflectComponent (#2682)
    
    # Objective
    
    While implementing a plugin for my rollback networking library, I needed to load/save parts of the world. For this, I made a WorldSnapshot that works quite like the current DynamicScene. Using a TypeRegistry to register component types I want to save/load and then using ReflectComponents methods to add or apply components of the given types.
    
    However, I noticed there is no method to remove components from entities through the ReflectComponent.
    
    ## Solution
    
    I added a `remove_component` field to the `ReflectComponent` struct, as well as a `pub fn remove_component(&self, world: &mut World, entity: Entity)` to call that function in `remove_component`. This follows exactly the same pattern all other methods/fields in this struct look like.
    
    This is an example how it could be used (at least how I would use it):
    https://github.com/gschup/bevy_ggrs/blob/6c003f86f1993bcbb21c180fab2e8ef664b7f7c9/src/world_snapshot.rs#L133

[33mcommit 9d453530fac9202691c797184ad0b220b2ea37b3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Aug 15 20:51:53 2021 +0000

    System Param Lifetime Split (#2605)
    
    # Objective
    
    Enable using exact World lifetimes during read-only access . This is motivated by the new renderer's need to allow read-only world-only queries to outlive the query itself (but still be constrained by the world lifetime).
    
    For example:
    https://github.com/bevyengine/bevy/blob/115b170d1f11a91146bb6d6e9684dceb8b21f786/pipelined/bevy_pbr2/src/render/mod.rs#L774
    
    ## Solution
    
    Split out SystemParam state and world lifetimes and pipe those lifetimes up to read-only Query ops (and add into_inner for Res). According to every safety test I've run so far (except one), this is safe (see the temporary safety test commit). Note that changing the mutable variants to the new lifetimes would allow aliased mutable pointers (try doing that to see how it affects the temporary safety tests).
    
    The new state lifetime on SystemParam does make `#[derive(SystemParam)]` more cumbersome (the current impl requires PhantomData if you don't use both lifetimes). We can make this better by detecting whether or not a lifetime is used in the derive and adjusting accordingly, but that should probably be done in its own pr.
    
    ## Why is this a draft?
    
    The new lifetimes break QuerySet safety in one very specific case (see the query_set system in system_safety_test). We need to solve this before we can use the lifetimes given.
    
    This is due to the fact that QuerySet is just a wrapper over Query, which now relies on world lifetimes instead of `&self` lifetimes to prevent aliasing (but in systems, each Query has its own implied lifetime, not a centralized world lifetime).  I believe the fix is to rewrite QuerySet to have its own World lifetime (and own the internal reference). This will complicate the impl a bit, but I think it is doable. I'm curious if anyone else has better ideas.
    
    Personally, I think these new lifetimes need to happen. We've gotta have a way to directly tie read-only World queries to the World lifetime. The new renderer is the first place this has come up, but I doubt it will be the last. Worst case scenario we can come up with a second `WorldLifetimeQuery<Q, F = ()>` parameter to enable these read-only scenarios, but I'd rather not add another type to the type zoo.

[33mcommit a89a954a1706bcffa497309388b993ff82016829[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Aug 15 20:08:52 2021 +0000

    Not me ... us (#2654)
    
    I don't see much of a reason at this point to boost my name over anyone elses. We are all Bevy Contributors.

[33mcommit d59fc076e8cf86d64beb4296e80a1457528db9a5[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Sat Aug 14 19:21:36 2021 +0000

    Comprehensive CONTRIBUTING.md (#2040)
    
    [**RENDERED**](https://github.com/alice-i-cecile/bevy/blob/better-contributing/CONTRIBUTING.md)
    
    Improves #910. As discussed in #1309, we'll need to synchronize content between this and the Bevy website in some way (and clean up the .github file perhaps?).
    
    I think doing it as a root-directory file is nicer for discovery, but that's a conversation I'm interested in having.
    
    This document is intended to be helpful to beginners to open source and Bevy, and captures what I've learned about our informal practices and values.
    
    Reviewers: I'm particularly interested in:
    - opinions on the items **What we're trying to build**, where I discuss some of the project's high-level values and goals
    - more relevant details on the `bevy` subcrates for **Getting oriented**
    - useful tricks and best practices that I missed
    - better guidance on how to contribute to the Bevy book from @cart <3

[33mcommit 96f0e02728d464ea4f74dd6001a691729f86870f[m
Author: Martin Svanberg <martin@martinsvanberg.com>
Date:   Sat Aug 14 03:14:16 2021 +0000

    Implement Clone for Fetches (#2641)
    
    # Objective
    
    This:
    
    ```rust
    use bevy::prelude::*;
    
    fn main() {
        App::new()
        .add_system(test)
        .run();
    }
    
    fn test(entities: Query<Entity>) {
        let mut combinations = entities.iter_combinations_mut();
        while let Some([e1, e2]) = combinations.fetch_next() {
            dbg!(e1);
        }
    }
    ```
    
    fails with the message "the trait bound `bevy::ecs::query::EntityFetch: std::clone::Clone` is not satisfied".
    
    
    ## Solution
    
    It works after adding the naive clone implementation to EntityFetch. I'm not super familiar with ECS internals, so I'd appreciate input on this.

[33mcommit 6aedb2500aedaab449a94e7c972d800c6f5fc56b[m
Author: davier <bricedavier@gmail.com>
Date:   Fri Aug 13 22:21:34 2021 +0000

    Cleanup FromResources (#2601)
    
    ## Objective
    
    - Clean up remaining references to the trait `FromResources`, which was replaced in favor of `FromWorld` during the ECS rework.
    
    ## Solution
    
    - Remove the derive macro for `FromResources`
    - Change doc references of `FromResources` to `FromWorld`
    
    (this is the first item in #2576)

[33mcommit 5eeba1556db4abe682c89386db8aa5fffbca725f[m
Author: Isaak Eriksson <isaak.eriksson@protonmail.com>
Date:   Fri Aug 13 22:21:33 2021 +0000

    Better error message for unsupported shader features Fixes #869 (#2598)
    
    # Objective
    
    - Provides more useful error messages when using unsupported shader features.
    
    ## Solution Fixes #869
    
    - Provided a error message as follows (adding name, set and binding):
    ```
    Unsupported shader bind type CombinedImageSampler (name noiseVol0, set 0, binding 9)
    ```

[33mcommit fafee8898ea6c7dad2b01d6ce272af3a00a1e8d9[m
Author: RÃ©mi Lauzier <remilauzier@protonmail.com>
Date:   Fri Aug 13 21:57:23 2021 +0000

    Small script fix (#2591)
    
    # Objective
    Prevent some possible problem
    Found by IntelliJ IDEA
    
    ## Solution
    
    Double quoting variable and exit on possible failure of cd command.

[33mcommit 5fa0b5b49824b5834569209945849cd9c7ccbb7d[m
Author: Dimev <49782454+Dimev@users.noreply.github.com>
Date:   Wed Aug 11 20:28:50 2021 +0000

    Added ComputePipelineDescriptor (#2628)
    
    # Objective
    Fix ComputePipelineDescriptor missing from WGPU exports
    
    ## Solution
    Added it to the pub use wgpu::{ ... }
    
    
    Co-authored-by: Dimas <skythedragon@outlook.com>

[33mcommit b13472dae495ecc7d1a80cbe1ad12718c0de9262[m
Author: Piotr Balcer <piotr.balcer@intel.com>
Date:   Wed Aug 11 01:32:58 2021 +0000

    fix missing paths in ECS SystemParam derive macro v2 (#2550)
    
    This is an updated version of #1434 PR. I've encountered this macro problem while trying to use @woubuc's bevy-event-set crate.
    
    Co-authored-by: Piotr Balcer <piotr@balcer.eu>

[33mcommit a023b687dd5813eb160465d6f89f9c2e4b37dfb1[m
Author: Mirko Rainer <mirkorainer@outlook.com>
Date:   Tue Aug 10 23:46:39 2021 +0000

    Link Minimal and Default plugins in the docs. (#2583)
    
    I didn't know about MinimalPlugins for way too long. This should increase visibility for others.
    
    # Objective
    
    Improve visibility and discover in the docs for Default and Minimal Plugins.
    
    ## Solution
    
    Links the two Docs pages.
    
    
    
    Co-authored-by: Mirko Rainer <52899592+mirkoRainer@users.noreply.github.com>

[33mcommit 0c91317102ca56cda8da0163d00522e3a8169adb[m
Author: Klim Tsoutsman <32662194+TypicalFork@users.noreply.github.com>
Date:   Tue Aug 10 02:48:40 2021 +0000

    Change definition of `ScheduleRunnerPlugin` (#2606)
    
    # Objective
    
    - Allow `ScheduleRunnerPlugin` to be instantiated without curly braces. Other plugins in the library already use the semicolon syntax.
    - Currently, you have to do the following:
    ```rust
    App::build()
        .add_plugin(bevy::core::CorePlugin)
        .add_plugin(bevy::app::ScheduleRunnerPlugin {})
    ```
    - With the proposed change you can do this:
    ```rust
    App::build()
        .add_plugin(bevy::core::CorePlugin)
        .add_plugin(bevy::app::ScheduleRunnerPlugin)
    ```
    
    ## Solution
    
    - Change the `ScheduleRunnerPlugin` definition to use a semicolon instead of curly braces.

[33mcommit c8330037e7eede31efc67c0433856cc0579f9053[m
Author: Zicklag <zicklag@katharostech.com>
Date:   Tue Aug 10 02:26:06 2021 +0000

    Re-implement Automatic Sprite Sizing (#2613)
    
    # Objective
    
    - Prevent the need to specify a sprite size when using the pipelined sprite renderer
    
    ## Solution
    
    - Re-introduce the sprite auto resize system from the old renderer

[33mcommit 49038d03f5ef2fb66e99b7ae14938b64a4648f2d[m
Author: Hoidigan <Hoidigan@users.noreply.github.com>
Date:   Tue Aug 10 01:55:52 2021 +0000

    Remove with bundle filter (#2623)
    
    # Objective
    
    Fixes #2620
    
    ## Solution
    
    Remove WithBundle filter and temporarily remove example for query_bundle.

[33mcommit b5b9a95981c700a125e946264459e11e50ac571f[m
Author: Zicklag <zicklag@katharostech.com>
Date:   Tue Aug 10 01:37:41 2021 +0000

    Add missing bytemuck feature (#2625)
    
    # Objective
    
    - Allow you to compile Bevy with the `bevy_sprite2` feature, but without the `bevy_pbr2` feature.
      - This currently fails because the `bevy_sprite2` crate does not require the `derive` feature of the `bytemuck` crate in its `Cargo.toml`, even though it is required to compile.
    
    ## Solution
    
    - Add the `derive` feature of `bytemuck` to the `bevy_sprite2` crate

[33mcommit 336583a86bdaef6339c60fc00c52d469727e262e[m
Author: davier <bricedavier@gmail.com>
Date:   Tue Aug 10 01:12:42 2021 +0000

    Update EntityMut's location in push_children() and insert_children() (#2604)
    
    ## Objective
    
    This code would result in a crash:
    ```rust
    use bevy::prelude::*;
    
    fn main() {
        let mut world = World::new();
        let child = world.spawn().id();
        world.spawn().push_children(&[child]);
    }
    ```
    
    ## Solution
    
    Update the `EntityMut`'s location after inserting a component on the children entities, as it may have changed.

[33mcommit 2f32a2a8618067a94fcbd906fd2f7242c4e9f7fe[m
Author: Dimev <49782454+Dimev@users.noreply.github.com>
Date:   Sun Aug 8 19:10:39 2021 +0000

    Added StorageTextureAccess to the exposed wgpu API (#2614)
    
    # Objective
    This fixes not having access to StorageTextureAccess in the API, which is needed for using storage textures
    
    ## Solution
    Added it to the use in render_resource module
    
    
    Co-authored-by: Dimas <skythedragon@outlook.com>

[33mcommit 90586a4c461cde86b8a0e08f0770894e7cf30862[m
Author: MinerSebas <scherthan_sebastian@web.de>
Date:   Fri Aug 6 22:00:16 2021 +0000

    Add "ci" job to the bors.toml (#2612)
    
    # Objective
    
    - #2551 revamped our CI setup which included running clippy and rustfmt in another Job.
    - This new Job wasn't added to the bors.toml, which means that PRs would be accepted that didn't run them.
    
    ## Solution
    
    - Add the "ci" job to the bors.toml

[33mcommit 03e2045c8ddf92943eb0461d195ffe1ec3ce405f[m
Author: Protowalker <6126319+Protowalker@users.noreply.github.com>
Date:   Fri Aug 6 20:55:24 2021 +0000

    fix typo (paramater to parameter) (#2590)
    
    there was a typo :eyes: i fixed it :eyes:

[33mcommit 115b170d1f11a91146bb6d6e9684dceb8b21f786[m
Author: John <toasterthegamer@gmail.com>
Date:   Wed Aug 4 01:16:25 2021 +0000

    Add sprite atlases into the new renderer. (#2560)
    
    # Objective
    Restore the functionality of sprite atlases in the new renderer.
    
    ### **Note:** This PR relies on #2555
    
    ## Solution
    Mostly just a copy paste of the existing sprite atlas implementation, however I unified the rendering between sprites and atlases.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 43d99bb583866c1adb4aa88f19b88637df0a7f33[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Sun Aug 1 19:14:47 2021 +0000

    Remove bevy_dynamic_plugin as a default (#2578)
    
    It doesn't compile on wasm, and it's full of footguns
    
    # Objective
    
    - If bevy is used with default features on wasm, there's more of a chance it will compile
    - Note that I haven't done a full audit - it's possible that there are other problematic crates
    
    ## Solution
    
    - `bevy_dynamic_plugin` is no longer a default plugin
    - I've also done an accidental drive by reformatting of the root `Cargo.toml`, as I have [Even Better Toml](https://github.com/tamasfe/taplo) installed.
    - (Please, rustfmt do this for us)

[33mcommit ae4f809a529af988cd0e0218e8e1a9190c9bfa80[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Fri Jul 30 03:37:34 2021 +0000

    Port bevy_gltf to pipelined-rendering (#2537)
    
    # Objective
    
    Port bevy_gltf to the pipelined-rendering branch.
    
    ## Solution
    
    crates/bevy_gltf has been copied and pasted into pipelined/bevy_gltf2 and modifications were made to work with the pipelined-rendering branch. Notably vertex tangents and vertex colours are not supported.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 7b336fd779d8c016e79b063bc282e3495b071b84[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jul 30 03:17:27 2021 +0000

    fix nightly clippy lints (#2568)
    
    Fix new nightly clippy lints on `pipelined-rendering`

[33mcommit 0b800e547bdee35a56590ad2e3f3ae1aaa280b8f[m
Author: Boxy <supbscripter@gmail.com>
Date:   Thu Jul 29 20:52:15 2021 +0000

    Fix some nightly clippy lints (#2522)
    
    on nightly these two clippy lints fail:
    - [needless_borrow](https://rust-lang.github.io/rust-clippy/master/#needless_borrow)
    - [unused_unit](https://rust-lang.github.io/rust-clippy/master/#unused_unit)

[33mcommit 54ff7aaa1e1c0edaf8885a601bdb1ab29a90d3dd[m
Author: Josh Kuhn <deontologician@gmail.com>
Date:   Thu Jul 29 23:56:16 2021 +0000

    Bump notify to 5.0.0-pre.11 (#2564)
    
    # Objective
    
    notify 5.0.0-pre.11 breaks the interface again, but apparently in a way that's similar to how it used to be
    
    ## Solution
    
    Bump `bevy_asset` dependency on notify to `5.0.0-pre.11` and fix the errors that crop up.
    
    It looks like `pre.11` was mentioned in #2528 by @mockersf but there's no mention of why `pre.10` was chosen ultimately.

[33mcommit 155068a09088c30ea1f9ca7481c6e2b15493524d[m
Author: Boxy <supbscripter@gmail.com>
Date:   Thu Jul 29 21:14:22 2021 +0000

    Add 's (state) lifetime to `Fetch` (#2515)
    
    Allows iterators to return things that borrow data from `QueryState`, needed this in my relations PR figure might be worth landing separately maybe

[33mcommit 5ffff03b33d72bfc4ef81ca9228bf5c3c19fbd8c[m
Author: Boxy <supbscripter@gmail.com>
Date:   Thu Jul 29 20:52:15 2021 +0000

    Fix some nightly clippy lints (#2522)
    
    on nightly these two clippy lints fail:
    - [needless_borrow](https://rust-lang.github.io/rust-clippy/master/#needless_borrow)
    - [unused_unit](https://rust-lang.github.io/rust-clippy/master/#unused_unit)

[33mcommit 6944d38a142bccb4d11f6610d2433f91829cd2d7[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Thu Jul 29 00:02:10 2021 +0000

    bevy_render2: Log adapter info on initialization (#2542)
    
    It is useful to see which adapter is being used and which wgpu backend.

[33mcommit 3ec6b3f9a0b7814f170e8d3e80950e50d7e9e457[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jul 28 21:29:32 2021 +0000

    move bevy_core_pipeline to its own plugin (#2552)
    
    This decouples the opinionated "core pipeline" from the new (less opinionated) bevy_render crate. The "core pipeline" is intended to be used by crates like bevy_sprites, bevy_pbr, bevy_ui, and 3rd party crates that extends core rendering functionality.

[33mcommit 86cc70b9028e04014f9248792041b25602a1d0b1[m
Author: bjorn3 <bjorn3@users.noreply.github.com>
Date:   Wed Jul 28 19:29:12 2021 +0000

    Refactor ECS to reduce the dependency on a 1-to-1 mapping between components and real rust types (#2490)
    
    # Objective
    
    There is currently a 1-to-1 mapping between components and real rust types. This means that it is impossible for multiple components to be represented by the same rust type or for a component to not have a rust type at all. This means that component types can't be defined in languages other than rust like necessary for scripting or sandboxed (wasm?) plugins.
    
    ## Solution
    
    Refactor `ComponentDescriptor` and `Bundle` to remove `TypeInfo`. `Bundle` now uses `ComponentId` instead. `ComponentDescriptor` is now always created from a rust type instead of through the `TypeInfo` indirection. A future PR may make it possible to construct a `ComponentDescriptor` from it's fields without a rust type being involved.

[33mcommit 0973d40a9f516b15340ccfd84ed28e5642515082[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jul 28 17:52:24 2021 +0000

    Add RenderWorld to Extract step (#2555)
    
    Makes the "Render App World" directly available to Extract step systems as a `RenderWorld` resource. Prior to this, there was no way to directly read / write render world state during the Extract step. The only way to make changes was through Commands (which were applied at the end of the stage).
    
    ```rust
    // `thing` is an "app world resource".
    fn extract_thing(thing: Res<Thing>, mut render_world: ResMut<RenderWorld>) {
      render_world.insert_resource(ExtractedThing::from(thing));
    }
    ```
    
    RenderWorld makes a number of scenarios possible:
    
    * When an extract system does big allocations, it is now possible to reuse them across frames by retrieving old values from RenderWorld (at the cost of reduced parallelism from unique RenderWorld borrows).
    * Enables inserting into the same resource across multiple extract systems
    * Enables using past RenderWorld state to inform future extract state (this should generally be avoided)
    
    Ultimately this is just a subset of the functionality we want. In the future, it would be great to have "multi-world schedules" to enable fine grained parallelism on the render world during the extract step. But that is a research project that almost certainly won't make it into 0.6. This is a good interim solution that should easily port over to multi-world schedules if/when they land.

[33mcommit 4b6238d35a9cfdc1c0ffd87303392c926b5e8bc0[m
Author: Boxy <supbscripter@gmail.com>
Date:   Wed Jul 28 03:10:55 2021 +0000

    Remove empty module (#2558)
    
    self explanatory

[33mcommit b724a0f586e6186f2a6ce4eb7903be0e340649e9[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Jul 27 23:42:36 2021 +0000

    Down with the system! (#2496)
    
    # Objective
    
    - Remove all the `.system()` possible.
    - Check for remaining missing cases.
    
    ## Solution
    
    - Remove all `.system()`, fix compile errors
    - 32 calls to `.system()` remains, mostly internals, the few others should be removed after #2446

[33mcommit 234b2efa71c715d59e4ad4f0bfd441f7dd48f74e[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Jul 27 23:19:26 2021 +0000

    Inline world get (#2520)
    
    # Objective
    
    While looking at the code of `World`, I noticed two basic functions (`get` and `get_mut`) that are probably called a lot and with simple code that are not `inline`
    
    ## Solution
    
    - Add benchmark to check impact
    - Add `#[inline]`
    
    
    ```
    group                                            this pr                                main
    -----                                            ----                                   ----
    world_entity/50000_entities                      1.00   115.9Â±11.90Âµs        ? ?/sec    1.71   198.5Â±29.54Âµs        ? ?/sec
    world_get/50000_entities_SparseSet               1.00   409.9Â±46.96Âµs        ? ?/sec    1.18   483.5Â±36.41Âµs        ? ?/sec
    world_get/50000_entities_Table                   1.00   391.3Â±29.83Âµs        ? ?/sec    1.16   455.6Â±57.85Âµs        ? ?/sec
    world_query_for_each/50000_entities_SparseSet    1.02   121.3Â±18.36Âµs        ? ?/sec    1.00   119.4Â±13.88Âµs        ? ?/sec
    world_query_for_each/50000_entities_Table        1.03     13.8Â±0.96Âµs        ? ?/sec    1.00     13.3Â±0.54Âµs        ? ?/sec
    world_query_get/50000_entities_SparseSet         1.00   666.9Â±54.36Âµs        ? ?/sec    1.03   687.1Â±57.77Âµs        ? ?/sec
    world_query_get/50000_entities_Table             1.01   584.4Â±55.12Âµs        ? ?/sec    1.00   576.3Â±36.13Âµs        ? ?/sec
    world_query_iter/50000_entities_SparseSet        1.01   169.7Â±19.50Âµs        ? ?/sec    1.00   168.6Â±32.56Âµs        ? ?/sec
    world_query_iter/50000_entities_Table            1.00     26.2Â±1.38Âµs        ? ?/sec    1.91     50.0Â±4.40Âµs        ? ?/sec
    ```
    
    I didn't add benchmarks for the mutable path but I don't see how it could hurt to make it inline too...

[33mcommit 6d6bc2a8b4c243a670b34032de8ed9dec7d70d44[m
Author: bjorn3 <bjorn3@users.noreply.github.com>
Date:   Tue Jul 27 20:21:06 2021 +0000

    Merge AppBuilder into App (#2531)
    
    This is extracted out of eb8f973646476b4a4926ba644a77e2b3a5772159 and includes some additional changes to remove all references to AppBuilder and fix examples that still used App::build() instead of App::new(). In addition I didn't extract the sub app feature as it isn't ready yet.
    
    You can use `git diff --diff-filter=M eb8f973646476b4a4926ba644a77e2b3a5772159` to find all differences in this PR. The `--diff-filtered=M` filters all files added in the original commit but not in this commit away.
    
    Co-Authored-By: Carter Anderson <mcanders1@gmail.com>

[33mcommit c83a184e2ff92cfc5589c096ba477ebb6003045b[m
Author: Boxy <supbscripter@gmail.com>
Date:   Tue Jul 27 05:16:47 2021 +0000

    Dedupe move logic in remove_bundle and remove_bundle_intersection (#2521)
    
    This logic was in both `remove_bundle` and ` remove_bundle_intersection` but only differed by whether we call `.._forget_missing_..` or `.._drop_missing_..`

[33mcommit d3ae816e3e773b37713c7a51acc236122d07b14f[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Jul 27 02:01:11 2021 +0000

    Ci stability and speed improvements (#2551)
    
    # Objective
    
    - There are a few random failures in CI, mostly due to contacting crates.io or checking for deadlinks
    - CI can take some time, more than 20 minutes for a full status
    - A clippy/format issue stops running tests on other platforms
    
    
    ## Solution
    
    - Use GitHub cache for cargo artefacts
      - This speeds up builds and reduce dependencies on outside world
    - Reorder and add dependencies between short jobs. They are still setup to run even if one of the dependency failed
      - This reduce the number of parallel jobs that are running for one PR. On GitHub free tier, we're limited to 20.
    - Split CI checks (format & clippy) in its own job
      - This speeds up test jobs, and allow us to not kill all platform tests for a format issue
    - Retry in case of dead links check failure
      - Internet is just that kind of place where things may seem dead at some point but back alive 5 seconds later
    
    ## Before
    
    <img width="1062" alt="Screenshot 2021-07-27 at 01 18 52" src="https://user-images.githubusercontent.com/8672791/127071973-9a2c5ce8-c871-4f8d-9b17-08871824b6c4.png">
    
    ## After (with all cache live)
    
    <img width="1063" alt="Screenshot 2021-07-27 at 01 18 28" src="https://user-images.githubusercontent.com/8672791/127071986-767a7e65-53ed-45fd-8d75-51a571f0b851.png">

[33mcommit 2e99d84cdce0fd4ce77de274a01e9c621c9eb423[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jul 26 23:44:23 2021 +0000

    remove .system from pipelined code (#2538)
    
    Now that we have main features, lets use them!

[33mcommit 5583f9a3bcf8e23f3368143fe5f7baf7a783b6fe[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Jul 26 00:22:42 2021 +0000

    Android uninstall 31 (#2533)
    
    # Objective
    
    - Related to #2514 - not sure if it's a proper fix long term
    - CI was complaining Error: Path `"/usr/local/lib/android/sdk/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android31-clang"` was not found
    - A lot of questions started popping up 10 days ago about ["android build tools 31 corrupted"](https://www.google.com/search?q=android+build+tools+31+corrupted)
      - https://stackoverflow.com/questions/68387270/android-studio-error-installed-build-tools-revision-31-0-0-is-corrupted
    - Uninstalling `"build-tools;31.0.0"` doesn't seem to work, as it removes other components even though `"build-tools;30.0.3"` are available
    
    
    ## Solution
    
    - Uninstalling `"platforms;android-31"` seems to do the trick and `cargo-apk` stops trying to target `...31`
    
    Android is not my thing, this solution was found with a lot of trials and errors. I am not sure how long term it is, I don't know the release schedule of android build tools, or if we need to target this 31 thing. I just wanted to stop all those failed ci everywhere...

[33mcommit 955c79f29908b5b25c49050b40f76f491b14ff2d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jul 23 17:06:52 2021 -0700

    adapt to upstream changes

[33mcommit 618c9e94f01a7d17649de70090936444af226191[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Mon Jul 19 21:20:59 2021 +0200

    Scale normal bias by texel size (#26)
    
    * 3d_scene_pipelined: Use a shallower directional light angle to provoke acne
    
    * cornell_box_pipelined: Remove bias tweaks
    
    * bevy_pbr2: Simplify shadow biases by moving them to linear depth
    
    * bevy_pbr2: Do not use DepthBiasState
    
    * bevy_pbr2: Do not use bilinear filtering for sampling depth textures
    
    * pbr.wgsl: Remove unnecessary comment
    
    * bevy_pbr2: Do manual shadow map depth comparisons for more flexibility
    
    * examples: Add shadow_biases_pipelined example
    
    This is useful for stress testing biases.
    
    * bevy_pbr2: Scale the point light normal bias by the shadow map texel size
    
    This allows the normal bias to be small close to the light source where the
    shadow map texel to screen texel ratio is high, but is appropriately large
    further away from the light source where the shadow map texel can easily cover
    multiple screen texels.
    
    * shadow_biases_pipelined: Add support for toggling directional / point light
    
    * shadow_biases_pipelined: Cleanup
    
    * bevy_pbr2: Scale the directional light normal bias by the shadow map texel size
    
    * shadow_biases_pipelined: Fit the orthographic projection around the scene
    
    * bevy_pbr2: Directional lights should have no shadows outside their projection
    
    Before this change, sampling a fragment position from outside the ndc volume
    would result in the return sample being clamped to the edge in x,y or possibly
    always casting a shadow for fragment positions past the orthographic
    projection's far plane.
    
    * bevy_pbr2: Fix the default directional light normal bias
    
    * Revert "bevy_pbr2: Do manual shadow map depth comparisons for more flexibility"
    
    This reverts commit 7df1bab38a42d8a33bc50ca583d4be37bd9c9f0d.
    
    * shadow_biases_pipelined: Adjust directional light normal bias in 0.1 increments
    
    * pbr.wgsl: Add a couple of clarifying comments
    
    * Revert "bevy_pbr2: Do not use bilinear filtering for sampling depth textures"
    
    This reverts commit f53baab0232ce218866a45cad6902b470f4cf2c4.
    
    * shadow_biases_pipelined: Print usage to terminal

[33mcommit 44df4c1faec5fe5f7b4b324e71bb24cb393786e7[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Sat Jul 17 00:41:56 2021 +0200

    Better depth biases (#23)
    
    * 3d_scene_pipelined: Use a shallower directional light angle to provoke acne
    
    * cornell_box_pipelined: Remove bias tweaks
    
    * bevy_pbr2: Simplify shadow biases by moving them to linear depth

[33mcommit 30b832467281396fc137e7b853d0491d72ddddeb[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Wed Jul 14 06:37:47 2021 +0200

    expose subgraph iterator (#25)

[33mcommit 7bbeb11ed79a3eeb14d7dc2ac55c4bea0222e37f[m
Author: John <toasterthegamer@gmail.com>
Date:   Wed Jul 14 00:37:02 2021 -0400

    Fixed issue with how texture arrays were uploaded with write_texture. (#24)

[33mcommit be8d67d0b0a2438a9a305c941e9ec02aeb5e9fc7[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jul 9 15:45:55 2021 -0700

    switch sprites back to wgsl shader

[33mcommit e0205019ef0e5fc110ae5a48884d1d0bf40ec48d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jul 7 20:01:41 2021 -0700

    fmt + clippy

[33mcommit 3542ddcd0c8048d0fb223d7508ea41f53dc20cd2[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jul 7 17:11:37 2021 -0700

    add glsl support

[33mcommit 326b20643ff6e0980d43123b63d26d126a267ada[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Thu Jul 8 04:49:33 2021 +0200

    Directional light and shadow (#6)
    
    Directional light and shadow

[33mcommit a2cac6a0d5c8527d490401877b8ae7bbc8656d04[m
Author: James Liu <contact@jamessliu.com>
Date:   Tue Jul 6 17:04:43 2021 -0700

    Small Fixes (#20)
    
    * Fix writing less than the full capacity to the staging buffer
    
    * Add missing TrackedRenderPass::draw command

[33mcommit ac6b27925edccdf90f2ef4b7464be6b6cb50fd7c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 1 18:05:20 2021 -0700

    fix clippy

[33mcommit bc769d964158e2a844b65ed8413855bfc83ba567[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 1 16:54:58 2021 -0700

    omni light -> point light

[33mcommit 4099ef6aa2409150c2251084eaffd7d111a40d1a[m
Author: Jonas Matser <github@jonasmatser.nl>
Date:   Fri Jul 2 01:48:55 2021 +0200

    Omnilight shadow map wgsl (#15)

[33mcommit 858065ef8d2aa655831b85872f1218a7859baf22[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Fri Jul 2 01:23:11 2021 +0200

    Do not queue sprites/meshes if there are no views (#13)
    
    * bevy_sprite2/_pbr2: Do not queue sprites/meshes if there are no views

[33mcommit a9937190cd201c5ea663e9a6128aa3eaec8cc533[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Fri Jul 2 01:12:35 2021 +0200

    bevy_pbr2: pbr.wgsl: Fix the orthographic projection check (#17)

[33mcommit e1e4055a513c890d1ecad09e17e29ab9e994edd1[m
Author: bilsen <40690317+bilsen@users.noreply.github.com>
Date:   Fri Jul 2 01:09:46 2021 +0200

    Allows resizing of windows (#8)

[33mcommit 5d0655f84c2cdfe66af0e8f8414a7860a978cc63[m
Author: John <toasterthegamer@gmail.com>
Date:   Thu Jul 1 19:03:33 2021 -0400

    Fixed issue where transform buffer wasn't creating new bindings on resize. (#7)

[33mcommit 7c57725a6304d7e8d77f4752574e94e645b4d2da[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Thu Jul 1 21:46:11 2021 +0200

    bevy_render2/bevy_pbr2: Update to wgpu 0.9 / naga 0.5 (#19)

[33mcommit 3f70f92bff35de5cc8a6669bcca2285a6dde08fa[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Wed Jun 30 01:56:45 2021 +0200

    wgsl PBR fixes (#12)
    
    bevy_pbr2: Fix light uniforms

[33mcommit 7792b29aa40785a37f49d51f0241e6329c91a185[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Wed Jun 30 00:43:56 2021 +0300

    Force main thread for prepare_windows system (#11)
    
    Force main thread for prepare_windows system

[33mcommit 61c8475069db1607ea2cb55a5fc32ccc1056995f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 28 15:36:50 2021 -0700

    Begin WGSL port (sprites work, pbr lights are broken)

[33mcommit 829f723bf3d970b461a023348bf0d767ed8a30d6[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 28 12:23:45 2021 -0700

    Add `log` crate compatibility to bevy_log

[33mcommit b1a91a823f0882b852426b171bcefbfa336f9538[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Mon Jun 28 01:10:23 2021 +0200

    bevy_pbr2: Add support for most of the StandardMaterial textures (#4)
    
    * bevy_pbr2: Add support for most of the StandardMaterial textures
    
    Normal maps are not included here as they require tangents in a vertex attribute.
    
    * bevy_pbr2: Ensure RenderCommandQueue is ready for PbrShaders init
    
    * texture_pipelined: Add a light to the scene so we can see stuff
    
    * WIP bevy_pbr2: back to front sorting hack
    
    * bevy_pbr2: Uniform control flow for texture sampling in pbr.frag
    
    From 'fintelia' on the Bevy Render Rework Round 2 discussion:
    
    "My understanding is that GPUs these days never use the "execute both branches
    and select the result" strategy. Rather, what they do is evaluate the branch
    condition on all threads of a warp, and jump over it if all of them evaluate to
    false. If even a single thread needs to execute the if statement body, however,
    then the remaining threads are paused until that is completed."
    
    * bevy_pbr2: Simplify texture and sampler names
    
    The StandardMaterial_ prefix is no longer needed
    
    * bevy_pbr2: Match default 'AmbientColor' of current bevy_pbr for now
    
    * bevy_pbr2: Convert from non-linear to linear sRGB for the color uniform
    
    * bevy_pbr2: Add pbr_pipelined example
    
    * Fix view vector in pbr frag to work in ortho
    
    * bevy_pbr2: Use a 90 degree y fov and light range projection for lights
    
    * bevy_pbr2: Add AmbientLight resource
    
    * bevy_pbr2: Convert PointLight color to linear sRGB for use in fragment shader
    
    * bevy_pbr2: pbr.frag: Rename PointLight.projection to view_projection
    
    The uniform contains the view_projection matrix so this was incorrect.
    
    * bevy_pbr2: PointLight is an OmniLight as it has a radius
    
    * bevy_pbr2: Factoring out duplicated code
    
    * bevy_pbr2: Implement RenderAsset for StandardMaterial
    
    * Remove unnecessary texture and sampler clones
    
    * fix comment formatting
    
    * remove redundant Buffer:from
    
    * Don't extract meshes when their material textures aren't ready
    
    * make missing textures in the queue step an error
    
    Co-authored-by: Aevyrie <aevyrie@gmail.com>
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 25de2d1819408fbb9310bffb2379606997ecbfc6[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jun 26 15:35:07 2021 -0700

    Port Mesh to RenderAsset, add Slab and FrameSlabMap garbage collection for Bind Groups

[33mcommit 3ef951dcbc95362e093867598f41515443a4c1f2[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 24 20:04:28 2021 -0700

    RenderAssetPlugin

[33mcommit 09043b66ce4c374a430c2f64c9b0a46aca8b8dd4[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 24 20:03:06 2021 -0700

    fix tracing and add graph spans

[33mcommit 13ca00178add933824391500489ac9067caf27be[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 21 16:28:52 2021 -0700

    bevy_render now uses wgpu directly

[33mcommit 01116b1fdb32e43c14b0e01ff287c374dda20103[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Fri Jun 18 20:21:18 2021 +0200

    StandardMaterial flat values (#3)
    
    StandardMaterial flat values

[33mcommit 579c769f7c4c5c2825c741a924b66c710fdaeb88[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jun 16 18:52:28 2021 -0700

    Fix ExclusiveSystemCoerced so it updates system with new archetypes

[33mcommit 3400fb4e6169a22f9528582faf9a786cded93d73[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jun 1 19:59:17 2021 -0700

    SubGraphs, Views, Shadows, and more

[33mcommit 9588bb32435f833abe3132c27f8ca740e4afec66[m
Author: StarArawn <toasterthegamer@gmail.com>
Date:   Mon May 31 09:31:12 2021 -0400

    Reverted combining of set_bind_group between different passes.

[33mcommit a0347195c06ec733d55b42ebeb8db1bf59ff4391[m
Author: StarArawn <toasterthegamer@gmail.com>
Date:   Sun May 30 20:27:39 2021 -0400

    Share code between passes for setting bind groups.
    Renamed PipelineDescriptor to RenderPipelineDescriptor

[33mcommit cdf06ea29392d6aa6334469ee2c63128bad03d04[m
Author: StarArawn <toasterthegamer@gmail.com>
Date:   Sun May 30 18:54:48 2021 -0400

    Added compute to the new pipelined renderer.

[33mcommit 4ac2ed7cc65863dcd5c0b37f7bf9486ffa8d7ada[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Apr 11 13:13:07 2021 -0700

    pipelined rendering proof of concept

[33mcommit a4e5e2790ea00acfcb53ff0d9bdfb09bc93e445c[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Jul 24 01:41:48 2021 +0000

    fix version of notify to 5.0.0-pre.2 (#2528)
    
    # Objective
    
    - https://github.com/notify-rs/notify changed their api in the latest pre-release of 0.5.0
    - This breaks current main AND v0.5.0
    
    ## Solution
    
    - Fix the dependency to the known working version
    
    before : https://docs.rs/notify/5.0.0-pre.2/notify/trait.Watcher.html
    after : https://docs.rs/notify/5.0.0-pre.11/notify/trait.Watcher.html

[33mcommit e167a1d9cfec87cadcb3f02087f0b456e5e53cc4[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jul 23 21:11:51 2021 +0000

    Relicense Bevy under the dual MIT or Apache-2.0 license (#2509)
    
    This relicenses Bevy under the dual MIT or Apache-2.0 license. For rationale, see #2373.
    
    * Changes the LICENSE file to describe the dual license. Moved the MIT license to docs/LICENSE-MIT. Added the Apache-2.0 license to docs/LICENSE-APACHE. I opted for this approach over dumping both license files at the root (the more common approach) for a number of reasons:
      * Github links to the "first" license file (LICENSE-APACHE) in its license links (you can see this in the wgpu and rust-analyzer repos). People clicking these links might erroneously think that the apache license is the only option. Rust and Amethyst both use COPYRIGHT or COPYING files to solve this problem, but this creates more file noise (if you do everything at the root) and the naming feels way less intuitive.
      * People have a reflex to look for a LICENSE file. By providing a single license file at the root, we make it easy for them to understand our licensing approach.
      * I like keeping the root clean and noise free
      * There is precedent for putting the apache and mit license text in sub folders (amethyst)
    * Removed the `Copyright (c) 2020 Carter Anderson` copyright notice from the MIT license. I don't care about this attribution, it might make license compliance more difficult in some cases, and it didn't properly attribute other contributors. We shoudn't replace it with something like "Copyright (c) 2021 Bevy Contributors" because "Bevy Contributors" is not a legal entity. Instead, we just won't include the copyright line (which has precedent ... Rust also uses this approach).
    * Updates crates to use the new "MIT OR Apache-2.0" license value
    * Removes the old legion-transform license file from bevy_transform. bevy_transform has been its own, fully custom implementation for a long time and that license no longer applies.
    * Added a License section to the main readme
    * Updated our Bevy Plugin licensing guidelines.
    
    As a follow-up we should update the website to properly describe the new license.
    
    Closes #2373

[33mcommit ba2916c45a6dcf23f7c4007e7ef2a6b0df393433[m
Author: Boxy <supbscripter@gmail.com>
Date:   Wed Jul 21 21:42:52 2021 +0000

    move `get_insert_bundle_info` (#2508)
    
    I had to move this out in my relations PR and its causing a large diff so I figure I could just do this separately

[33mcommit 2c28331297317185ffb8e1cfd089ab4a44b999e5[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Jul 21 20:31:46 2021 +0000

    disable bors check on android (#2513)
    
    # Objective
    
    - CI is failing because of an android issue
    - This is blocking bors
    
    ## Solution
    
    - Bors can ignore android failures
    - Keep android job in CI to check its status
    
    I'm not android enough to debug this one, this is a temp fix until someone knows how to fix it or it get fixed by itself with updates?

[33mcommit 0c62b28d6dbffd84da15bc86ce877a68f25f8887[m
Author: Federico Rinaldi <gisquerin@gmail.com>
Date:   Wed Jul 21 07:11:31 2021 +0000

    Fix typo in QueryComponentError message (#2498)
    
    There was a typo, I believe.

[33mcommit 0aced5fb72506c518b6ff3c914b30531a9e615fc[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Mon Jul 19 21:13:30 2021 +0000

    Revert #331 (#2502)
    
    # Objective
    
    @TomBebb (other account being @TomBebbington ) proved unreachable for #2373, so we need to revert their changes for the relicense.
    
    ## Solution
    
    Revert their changes. This is only linux distro docs, so it's not critical code.
    
    If someone else wants to test `bevy` on solus to work out the set of packages independently, then we'll probably accept a PR to add these. One suggestsion would be to consider the packages required on other systems, since there is likely to be some overlap.
    
    ## Alternatives
    
    Link to this old version in the `linux_dependencies.md` file.

[33mcommit 3a20462d3f92230da9fc229451ce72c2873c17bb[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Sat Jul 17 21:59:31 2021 +0000

    Useful changes with relicensing benefits (#2497)
    
    This obsoletes #1111 and #2445, since @ColonisationCaptain and @temhotaokeaha haven't replied to #2373.
    
    I believe that both of those PRs would be fine to keep, but they're even more fine to keep now :)

[33mcommit f6dbc25bd92ea81b4c7948c6f3f41f6411e97d78[m[33m ([m[1;31morigin/entity_relations[m[33m)[m
Author: Alexander Sepity <alexander.sepity@gmail.com>
Date:   Sat Jul 17 19:14:18 2021 +0000

    Optional `.system()`, part 6 (chaining) (#2494)
    
    # Objective
    
    - Continue work of #2398 and friends.
    - Make `.system()` optional in chaining.
    
    ## Solution
    
    - Slight change to `IntoChainSystem` signature and implementation.
    - Remove some usages of `.system()` in the chaining example, to verify the implementation.
    
    ---
    
    I swear, I'm not splitting these up on purpose, I just legit forgot about most of the things where `System` appears in public API, and my trait usage explorer mingles that with the gajillion internal uses.
    
    In case you're wondering what happened to part 5, #2446 ate it.

[33mcommit c9c322e820648c932f464524425c619ad3fc4d73[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Sat Jul 17 18:56:56 2021 +0000

    Relicense bors checks (#2493)
    
    # Objective
    
    Currently we can sometimes allow PRs by people who haven't agreed to the relicense to get merged into main.
    
    E.g. https://github.com/bevyengine/bevy/pull/2445
    
    ## Solution
    
    This adds a check to ensure that this doesn't happen, by ensuring that bors doesn't relicense said PRs.
    
    As a bonus, it also adds config to automatically label new PRs as needing checking, to ensure that we do the verification until we merge the new license.

[33mcommit ecb78048cf7a78014ff039a7a26b0b14a26d0423[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Fri Jul 16 19:57:20 2021 +0000

    [ecs] Improve `Commands` performance (#2332)
    
    # Objective
    
    - Currently `Commands` are quite slow due to the need to allocate for each command and wrap it in a `Box<dyn Command>`.
    - For example:
    ```rust
    fn my_system(mut cmds: Commands) {
        cmds.spawn().insert(42).insert(3.14);
    }
    ```
    will have 3 separate `Box<dyn Command>` that need to be allocated and ran.
    
    ## Solution
    
    - Utilize a specialized data structure keyed `CommandQueueInner`.
    - The purpose of `CommandQueueInner` is to hold a collection of commands in contiguous memory.
    - This allows us to store each `Command` type contiguously in memory and quickly iterate through them and apply the `Command::write` trait function to each element.

[33mcommit de0d459618e8722e24aa10c532831816196335f0[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Jul 16 01:38:41 2021 +0000

    add check for unused dependencies (#2461)
    
    # Objective
    
    - Unused dependencies are bad
    
    ## Solution
    
    - Add check for unused dependencies with https://github.com/est31/cargo-udeps - #2455

[33mcommit 927973ce6aeab62e65fe8bf2584c4f26b8904df8[m
Author: Dusty DeWeese <dustin.deweese@gmail.com>
Date:   Fri Jul 16 00:50:39 2021 +0000

    Don't update when suspended to avoid GPU use on iOS. (#2482)
    
    # Objective
    
    This fixes a crash caused by iOS preventing GPU access when not focused: #2296
    
    ## Solution
    
    This skips `app.update()` in `winit_runner` when `winit` sends the `Suspended` event, until `Resumed`.
    
    I've tested that this works for me on my iOS app.

[33mcommit fbf561c2bb350377cd42de6cb6bc05fa500e8a3c[m
Author: bjorn3 <bjorn3@users.noreply.github.com>
Date:   Thu Jul 15 21:25:49 2021 +0000

    Update minimal version requirements for dependencies (#2460)
    
    This was tested using cargo generate-lockfile -Zminimal-versions.
    The following indirect dependencies also have minimal version
    dependencies. For at least num, rustc-serialize and rand this is
    necessary to compile on rustc versions that are not older than 1.0.
    
    * num = "0.1.27"
    * rustc-serialize = "0.3.20"
    * termcolor = "1.0.4"
    * libudev-sys = "0.1.1"
    * rand = "0.3.14"
    * ab_glyph = "0.2.7
    
    Based on https://github.com/bevyengine/bevy/pull/2455

[33mcommit ebd10681ac861028e381aafe907b81dc068067c2[m
Author: bjorn3 <bjorn3@users.noreply.github.com>
Date:   Wed Jul 14 20:52:50 2021 +0000

    Remove unused deps (#2455)
    
    # Objective
    
    Reduce compilation time
    
    # Solution
    
    Remove unused dependencies. While this PR doesn't remove any crates from `Cargo.lock`, it may unlock more build parallelism.

[33mcommit d80303d1383663d1a4fe49bde2a3be58fc168a1c[m
Author: Ixentus <alexvermaat@gmail.com>
Date:   Wed Jul 14 03:20:21 2021 +0000

    Add feature flag to enable wasm for bevy_audio (#2397)
    
    Exposes Rodio feature flag to enable WASM support.
    
    Note that mp3 doesn't currently work on wasm.

[33mcommit 98f5fafb4e38d711659163ea8b7bbf45e2fbfcab[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Jul 13 22:12:22 2021 +0000

    Bump gaurav-nelson/github-action-markdown-link-check from 1.0.12 to 1.0.13 (#2452)
    
    Bumps [gaurav-nelson/github-action-markdown-link-check](https://github.com/gaurav-nelson/github-action-markdown-link-check) from 1.0.12 to 1.0.13.
    <details>
    <summary>Release notes</summary>
    <p><em>Sourced from <a href="https://github.com/gaurav-nelson/github-action-markdown-link-check/releases">gaurav-nelson/github-action-markdown-link-check's releases</a>.</em></p>
    <blockquote>
    <h2>1.0.13</h2>
    <p>Main changes:</p>
    <ul>
    <li>Merge pull request <a href="https://github-redirect.dependabot.com/gaurav-nelson/github-action-markdown-link-check/issues/111">#111</a> from gaurav-nelson/mlc@3.8.7 (9710f0f)</li>
    <li>Update to markdown-link-check version 3.8.7 (7a77bd1)</li>
    </ul>
    <p>Other minor updates:</p>
    <ul>
    <li>Merge pull request <a href="https://github-redirect.dependabot.com/gaurav-nelson/github-action-markdown-link-check/issues/107">#107</a> from petethepig/patch-1 (95ffb9c)</li>
    <li>Adds pyroscope to the list of happy users (2df45f2)</li>
    <li>Fixed usage examples (cc3343e)</li>
    <li>Buy me a coffee (24cd99c)</li>
    <li>Remove treeware badge (f0656de)</li>
    <li>Add netdata sample (2579500)</li>
    <li>Update README, fixed LICENSE (4d5a901)</li>
    </ul>
    </blockquote>
    </details>
    <details>
    <summary>Commits</summary>
    <ul>
    <li><a href="https://github.com/gaurav-nelson/github-action-markdown-link-check/commit/9710f0fec812ce0a3b98bef4c9d842fc1f39d976"><code>9710f0f</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/gaurav-nelson/github-action-markdown-link-check/issues/111">#111</a> from gaurav-nelson/mlc@3.8.7</li>
    <li><a href="https://github.com/gaurav-nelson/github-action-markdown-link-check/commit/7a77bd14ccf35078a808d92fde3e60d6947bb6a3"><code>7a77bd1</code></a> Update to markdown-link-check version 3.8.7</li>
    <li><a href="https://github.com/gaurav-nelson/github-action-markdown-link-check/commit/95ffb9cc0e73598e4c8b38ededb26fb209801877"><code>95ffb9c</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/gaurav-nelson/github-action-markdown-link-check/issues/107">#107</a> from petethepig/patch-1</li>
    <li><a href="https://github.com/gaurav-nelson/github-action-markdown-link-check/commit/2df45f2890f9438465e9b313d18f6913a9a45b16"><code>2df45f2</code></a> Adds pyroscope to the list of happy users</li>
    <li><a href="https://github.com/gaurav-nelson/github-action-markdown-link-check/commit/cc3343e7a61123601c28649138acb2bd10675a50"><code>cc3343e</code></a> Fixed usage examples</li>
    <li><a href="https://github.com/gaurav-nelson/github-action-markdown-link-check/commit/24cd99c2f875e0f98b66fcb6903b405664b15d58"><code>24cd99c</code></a> Buy me a coffee</li>
    <li><a href="https://github.com/gaurav-nelson/github-action-markdown-link-check/commit/f0656de48f62c1777d073db4a5816eba1dcc1364"><code>f0656de</code></a> Remove treeware badge</li>
    <li><a href="https://github.com/gaurav-nelson/github-action-markdown-link-check/commit/257950028759bd4cbd473022a6e60ca5363ae974"><code>2579500</code></a> Add netdata sample</li>
    <li><a href="https://github.com/gaurav-nelson/github-action-markdown-link-check/commit/4d5a901466436052915a68d4a856171a50b2c762"><code>4d5a901</code></a> Update README, fixed LICENSE</li>
    <li>See full diff in <a href="https://github.com/gaurav-nelson/github-action-markdown-link-check/compare/0fe4911067fa322422f325b002d2038ba5602170...9710f0fec812ce0a3b98bef4c9d842fc1f39d976">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=gaurav-nelson/github-action-markdown-link-check&package-manager=github_actions&previous-version=1.0.12&new-version=1.0.13)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit 5c4909dbb21fbf78007ca3c1322d792440281890[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Jul 13 22:12:21 2021 +0000

    update archetypes for run criterias (#2177)
    
    fixes #2000
    
    archetypes were not updated for run criteria on a stage or on a system set

[33mcommit 38bc27880df042c1cb5d0af28451c11e68b25fef[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Jul 13 21:51:44 2021 +0000

    add proc-macro-crate as a known duplicate (#2456)
    
    # Objective
    
    - CI is failing because of a dependency (`num_enum`) that now uses the latest version of `proc-macro-crate`
    
    ```
        = proc-macro-crate v0.1.5
          âââ ndk-macro v0.2.0
          â   âââ ndk-glue v0.2.1
          â   â   âââ bevy_asset v0.5.0
          â   â   âââ bevy_internal v0.5.0 (*)
          â   âââ ndk-glue v0.3.0
          â       âââ cpal v0.13.3
          â       â   âââ rodio v0.14.0
          â       â       âââ bevy_audio v0.5.0 (*)
          â       âââ oboe v0.4.2
          â       â   âââ cpal v0.13.3 (*)
          â       âââ winit v0.25.0
          â           âââ bevy_winit v0.5.0 (*)
          â           âââ bevy_winit v0.5.0 (*)
          âââ num_enum_derive v0.4.3
              âââ num_enum v0.4.3
                  âââ ndk v0.2.1
                      âââ ndk-glue v0.2.1 (*)
    
        = proc-macro-crate v1.0.0
          âââ num_enum_derive v0.5.2
              âââ num_enum v0.5.2
                  âââ ndk v0.3.0
                      âââ cpal v0.13.3
                      â   âââ rodio v0.14.0
                      â       âââ bevy_audio v0.5.0
                      âââ ndk-glue v0.3.0
                      â   âââ cpal v0.13.3 (*)
                      â   âââ oboe v0.4.2
                      â   â   âââ cpal v0.13.3 (*)
                      â   âââ winit v0.25.0
                      â       âââ bevy_winit v0.5.0 (*)
                      â       âââ bevy_winit v0.5.0 (*)
                      âââ oboe v0.4.2 (*)
                      âââ winit v0.25.0 (*)
    ```
    
    ## Solution
    
    - Add `proc-macro-crate` as a known duplicate

[33mcommit 927a2574fad4ed51fd7308e7adc028ba4ae27be2[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 13 13:29:05 2021 -0700

    new labels: feature request

[33mcommit 59042a9024aca5d6f58c7fb4f6f99455907e9268[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 13 13:28:28 2021 -0700

    Update docs_improvement.md

[33mcommit db50a8db1cf849a0ba4e443c3a1d676da2325ad2[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 13 13:28:05 2021 -0700

    new labels: bug report

[33mcommit 71d5702fe4cc2b63973f15ab991b9ecea6c42092[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 13 13:27:14 2021 -0700

    label config: change needs-triage to S-Needs-Triage

[33mcommit 8c8bd3b41f5e9b801792676dca734cec29e29483[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 13 12:51:48 2021 -0700

    dependabot: use new C-Dependencies label

[33mcommit 10b0b1ad407f31817c401a02e5e08358b615992c[m
Author: Gilbert RÃ¶hrbein <payload.git@mailbox.org>
Date:   Mon Jul 12 20:29:28 2021 +0000

    docs: add hint that texture atlas padding is between tiles (#2447)
    
    I struggled with some sprite sheet animation which was like drifting from right to left.
    This PR documents the current behaviour that the padding which is used on slicing a texture into a texture atlas, is assumed to be only between tiles. In my case I had some padding also on the right side of the texture.

[33mcommit 57c021538ee59531469509779a320e222c1242ae[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Jul 12 20:09:43 2021 +0000

    rename example change_detection to have unique name (#2419)
    
    # Objective
    
    Noticed a warning when running tests:
    ```
    > cargo test --workspace
    warning: output filename collision.
    The example target `change_detection` in package `bevy_ecs v0.5.0 (/bevy/crates/bevy_ecs)` has the same output filename as the example target `change_detection` in package `bevy v0.5.0 (/bevy)`.
    Colliding filename is: /bevy/target/debug/examples/change_detection
    The targets should have unique names.
    Consider changing their names to be unique or compiling them separately.
    This may become a hard error in the future; see <https://github.com/rust-lang/cargo/issues/6313>.
    warning: output filename collision.
    The example target `change_detection` in package `bevy_ecs v0.5.0 (/bevy/crates/bevy_ecs)` has the same output filename as the example target `change_detection` in package `bevy v0.5.0 (/bevy)`.
    Colliding filename is: /bevy/target/debug/examples/change_detection.dSYM
    The targets should have unique names.
    Consider changing their names to be unique or compiling them separately.
    This may become a hard error in the future; see <https://github.com/rust-lang/cargo/issues/6313>.
    ```
    
    
    ## Solution
    
    I renamed example `change_detection` to `component_change_detection`

[33mcommit b48ee02feb4f4f240087101f8b1a292390a3141a[m
Author: Ryan Scheel <is.havvy@gmail.com>
Date:   Mon Jul 12 19:48:48 2021 +0000

    Make Remove Command's fields public (#2449)
    
    In #2034, the `Remove` Command did not get the same treatment as the rest of the commands. There's no discussion saying it shouldn't have public fields, so I am assuming it was an oversight. This fixes that oversight.

[33mcommit 17bd3f954f00008363c4f8e51b4b64388366310c[m
Author: TEMHOTAOKEAHA <75154415+temhotaokeaha@users.noreply.github.com>
Date:   Fri Jul 9 21:33:16 2021 +0000

    wgpu has been moved from "wgpu-rs" to "wgpu" (#2445)
    
    Name and link update

[33mcommit 11485deccaf30ebd252355d3f0fb3c99a666847b[m
Author: Alexander Sepity <alexander.sepity@gmail.com>
Date:   Thu Jul 8 07:18:00 2021 +0000

    Optional `.system()`, part 4 (run criteria) (#2431)
    
    # Objective
    
    - Continue work of #2398 and friends.
    - Make `.system()` optional in run criteria APIs.
    
    ## Solution
    
    - Slight change to `RunCriteriaDescriptorCoercion` signature and implementors.
    - Implement `IntoRunCriteria` for `IntoSystem` rather than `System`.
    - Remove some usages of `.system()` with run criteria in tests of `stage.rs`, to verify the implementation.

[33mcommit bc3f80fb85cac4bdbe44d0b2a7ffbe4860ef4b3a[m
Author: Klim Tsoutsman <32662194+TypicalFork@users.noreply.github.com>
Date:   Tue Jul 6 21:15:50 2021 +0000

    Fix name in list of features (#2438)
    
    # Objective
    
    - Fix the name of the `bevy_dynamic_plugin` feature in the list of features
    
    ## Solution
    
    - Remove the letter "s" ð¶

[33mcommit 85a10eccc5bee7e15643888975da86bb3f6a0ff6[m
Author: Theia Vogel <theia@vgel.me>
Date:   Tue Jul 6 17:35:16 2021 +0000

    Fix AssetServer::get_asset_loader deadlock (#2395)
    
    # Objective
    
    Fixes a possible deadlock between `AssetServer::get_asset_loader` / `AssetServer::add_loader`
    
    A thread could take the `extension_to_loader_index` read lock,
    and then have the `server.loader` write lock taken in add_loader
    before it can. Then add_loader can't take the extension_to_loader_index
    lock, and the program deadlocks.
    
    To be more precise:
    
    ## Step 1: Thread 1 grabs the `extension_to_loader_index` lock on lines 138..139:
    
    https://github.com/bevyengine/bevy/blob/3a1867a92edc571b8f842bb1a96112dcbdceae4b/crates/bevy_asset/src/asset_server.rs#L133-L145
    
    ## Step 2: Thread 2 grabs the `server.loader` write lock on line 107:
    
    https://github.com/bevyengine/bevy/blob/3a1867a92edc571b8f842bb1a96112dcbdceae4b/crates/bevy_asset/src/asset_server.rs#L103-L116
    
    ## Step 3: Deadlock, since Thread 1 wants to grab `server.loader` on line 141...:
    
    https://github.com/bevyengine/bevy/blob/3a1867a92edc571b8f842bb1a96112dcbdceae4b/crates/bevy_asset/src/asset_server.rs#L133-L145
    
    ... and Thread 2 wants to grab 'extension_to_loader_index` on lines 111..112:
    
    https://github.com/bevyengine/bevy/blob/3a1867a92edc571b8f842bb1a96112dcbdceae4b/crates/bevy_asset/src/asset_server.rs#L103-L116
    
    
    ## Solution
    
    Fixed by descoping the extension_to_loader_index lock, since
    `get_asset_loader` doesn't need to hold the read lock on the extensions map for the duration,
    just to get a copyable usize. The block might not be needed,
    I think I could have gotten away with just inserting a `copied()`
    call into the chain, but I wanted to make the reasoning clear for
    future maintainers.

[33mcommit 337e6d5893989f6364873531fb7cd798a46bbce4[m
Author: dintho <dintho86@yahoo.com>
Date:   Mon Jul 5 22:35:50 2021 +0000

    Added Opensuse Tumbleweed (#2375)
    
    # Objective
    
    - Describe the objective or issue this PR addresses.
    - added openSUSE Tumbleweed deps that i needed to install today 2021-06-22
    
    ## Solution
    
    - Describe the solution used to achieve the objective above.
    - added info to doc

[33mcommit b52edc107de5615e92662bb860bfe7831a15a6f1[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Jul 1 20:41:42 2021 +0000

    use discord vanity link (#2420)
    
    # Objective
    
    I wanted to send the Bevy discord link to someone but couldn't find a pretty link to copy paste
    
    ## Solution
    
    Use the vanity link we have for discord

[33mcommit 69e888e630d4f8afd55b0347b63782d12c42ce57[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Jul 1 20:41:41 2021 +0000

    update duplicate dependency skip list (#2415)
    
    # Objective
    
    - CI is failing because of new duplicate dependency: https://github.com/bevyengine/bevy/pull/2414/checks?check_run_id=2946566180
    
    ## Solution
    
    - update dependency duplicate skip list
    
    updated `hashbrown` dependency comes from:
    ```
        â   â   âââ bevy_macro_utils v0.5.0
        â   â   â   âââ cargo-manifest v0.2.4
        â   â   â   â   âââ toml v0.5.8
        â   â   â   â       âââ indexmap v1.7.0
        â   â   â   â       â   âââ hashbrown v0.11.2
    ```

[33mcommit 941a8fb8a37d39f347349b1f54eaa5666dee3879[m
Author: andoco <andrew.oconnor@gmail.com>
Date:   Thu Jul 1 20:41:40 2021 +0000

    Fix unsetting RenderLayers bit in without fn (#2409)
    
    # Objective
    
    Fixes how the layer bit is unset in the RenderLayers bit mask when calling the `without` method.
    
    ## Solution
    
    Unsets the layer bit using `&=` and the inverse of the layer bit mask.

[33mcommit b911a005d9493cfcead1f9045d9bba3bc509edaf[m
Author: MinerSebas <scherthan_sebastian@web.de>
Date:   Thu Jul 1 20:20:11 2021 +0000

    Mention creation of disjoint Querys with `Without<T>` in conflicting access Panic (#2413)
    
    # Objective
    
    Beginners semi-regularly appear on the Discord asking for help with using `QuerySet` when they have a system with conflicting data access.
    This happens because the Resulting Panic message only mentions `QuerySet` as a solution, even if in most cases `Without<T>` was enough to solve the problem.
    
    ## Solution
    
    Mention the usage of `Without<T>` to create disjoint queries as an alternative to `QuerySet`
    
    ## Open Questions
    
    - Is `disjoint` a too technical/mathematical word?
    - Should `Without<T>` be mentioned before or after `QuerySet`?
      - Before: Using `Without<T>` should be preferred and mentioning it first reinforces this for a reader.
      - After: The Panics can be very long and a Reader could skip to end and only see the `QuerySet`
    
    
    Co-authored-by: MinerSebas <66798382+MinerSebas@users.noreply.github.com>

[33mcommit 46cae5956f8535a7b24372fec4911704a942e8a4[m
Author: Aevyrie <aevyrie@gmail.com>
Date:   Thu Jul 1 19:28:44 2021 +0000

    Fix view vector in pbr frag to work in ortho (#2370)
    
    # Objective
    
    Fixes #2369
    
    ## Solution
    
    Use the view forward direction for all frags when using ortho view.

[33mcommit afb33234db4b8ce6fb384cea4bad5172ac748af3[m
Author: Alexander Sepity <alexander.sepity@gmail.com>
Date:   Thu Jul 1 19:09:34 2021 +0000

    Optional `.system()`, part 3 (#2422)
    
    # Objective
    
    - Continue work of #2398 and #2403.
    - Make `.system()` syntax optional when using `.config()` API.
    
    ## Solution
    
    - Introduce new prelude trait, `ConfigurableSystem`, that shorthands `my_system.system().config(...)` as `my_system.config(...)`.
    - Expand `configure_system_local` test to also cover the new syntax.

[33mcommit c8e2415eaf165dd86ea2c154f5dd8b2bb52af94f[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Wed Jun 30 16:38:24 2021 +0000

    [ecs] add `StorageType` documentation (#2394)
    
    # Objective
    
    - Add inline documentation for `StorageType`.
    - Currently the README in `bevy_ecs` provides docs for `StorageType`, however, adding addition inline docs makes it simpler for users who are actively reading the source code.
    
    ## Solution
    - Add inline docs.

[33mcommit 10f2dd3ec59c7562385a7b4156f547fb214d1c33[m
Author: Alexander Sepity <alexander.sepity@gmail.com>
Date:   Tue Jun 29 19:47:46 2021 +0000

    Optional `.system()`, part 2 (#2403)
    
    # Objective
    
    - Extend work done in #2398.
    - Make `.system()` syntax optional when using system descriptor API.
    
    ## Solution
    
    - Slight change to `ParallelSystemDescriptorCoercion` signature and implementors.
    
    ---
    
    I haven't touched exclusive systems, because it looks like the only two other solutions are going back to doubling our system insertion methods, or starting to lean into stageless. The latter will invalidate the former, so I think exclusive systems should remian pariahs until stageless.
    
    I can grep & nuke `.system()` thorughout the codebase now, which might take a while, or we can do that in subsequent PR(s).

[33mcommit 46b822e3da25bac8affe17e946e61fc1c07500f1[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Mon Jun 28 23:26:29 2021 +0000

    `Commands` benchmarking (#2334)
    
    # Objective
    
    - Currently the `Commands` and `CommandQueue` have no performance testing.
    - As `Commands` are quite expensive due to the `Box<dyn Command>` allocated for each command, there should be perf tests for implementations that attempt to improve the performance.
    
    ## Solution
    
    - Add some benchmarking for `Commands` and `CommandQueue`.

[33mcommit c893b992240fc058fd118c8247c70233931ec759[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Sun Jun 27 00:40:09 2021 +0000

    Optional `.system` (#2398)
    
    This can be your 6 months post-christmas present.
    
    # Objective
    
    - Make `.system` optional
    - yeet
    - It's ugly
    - Alternative title: `.system` is dead; long live `.system`
    - **yeet**
    
    ## Solution
    
    - Use a higher ranked lifetime, and some trait magic.
    
    N.B. This PR does not actually remove any `.system`s, except in a couple of examples. Once this is merged we can do that piecemeal across crates, and decide on syntax for labels.

[33mcommit 1bc34b4e6717a1f51e322ba8eff1d184ed9c663a[m
Author: tiagolam <tiagolam@gmail.com>
Date:   Sat Jun 26 19:49:35 2021 +0000

    bevy_utils: Re-introduce `with_capacity()`. (#2393)
    
    # Objective
    Re-introduce `AHashExt` and respective `with_capacity()` implementations to give a more ergonomic way to set a `HashMap` / `HashSet` capacity.
    
    As a note, this has also been discussed and agreed on issue #2115, which this PR addresses (leaving `new()` out of the `AHashExt` trait).
    
    Fixes #2115.
    
    ## Solution
    PR #1235 had removed the `AHashExt` trait and respective `with_capacity()`s implementations, leaving only the less ergonomic `HashMap::with_capacity_and_hasher(size, Default::default())` option available.
    
    This re-introduces `AHashExt` and respective `with_capacity()` implementations to give a more ergonomic way to set a `HashMap` / `HashSet` capacity.

[33mcommit 52e8a19a390d5b13b4435a565ee5eb593767897f[m
Author: Jacob Gardner <jacob.v.gardner@gmail.com>
Date:   Sat Jun 26 19:49:34 2021 +0000

    Fixes Timer Precision Error Causing Panic (#2362)
    
    # Objective
    
    Fixes #2361
    
    ## Solution
    
    Uses integer division instead of floating-point which prevents precision errors, I think.

[33mcommit b8f3d9c3656f988d86314a5a6e29ed0764bdaf36[m
Author: MinerSebas <scherthan_sebastian@web.de>
Date:   Sat Jun 26 19:29:38 2021 +0000

    Allow Option<NonSend<T>> and Option<NonSendMut<T>> as SystemParam (#2345)
    
    # Objective
    
    Currently, you can add `Option<Res<T>` or `Option<ResMut<T>` as a SystemParam, if the Resource could potentially not exist, but this functionality doesn't exist for `NonSend` and `NonSendMut`
    
    ## Solution
    
    Adds implementations to use `Option<NonSend<T>>` and Option<NonSendMut<T>> as SystemParams.

[33mcommit 7854be7c10f0c686f42d94263fdeb70262ebf4f3[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Jun 26 01:53:10 2021 +0000

    update to major version 3 of action labeler (#2340)
    
    # Objective
    
    - update action labeler
    
    ## Solution
    
    - Update to major version to not get notification update of every patch.
    - Replace #2338.

[33mcommit 3a1867a92edc571b8f842bb1a96112dcbdceae4b[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Fri Jun 25 07:05:23 2021 +0000

    Remove unnecessary exceptions for wgpu (#2356)

[33mcommit 7602317087e0ff6aaac45b914dacaecb8b420685[m
Author: Patrik Buhring <patrikbuhring@gmail.com>
Date:   Fri Jun 25 00:35:41 2021 +0000

    Update hexasphere to 4.0.0. (#2390)
    
    # Objective
    
    - Update `hexasphere` to 4.0.0, which is now licensed with dual MIT/Apache-2.0.

[33mcommit f91def5c4b8a9fe524b589eff4a702665008c7a0[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Jun 24 16:38:02 2021 +0000

    Update wgpu requirement from 0.8 to 0.9 (#2371)
    
    Updates the requirements on [wgpu](https://github.com/gfx-rs/wgpu) to permit the latest version.
    <details>
    <summary>Changelog</summary>
    <p><em>Sourced from <a href="https://github.com/gfx-rs/wgpu/blob/master/CHANGELOG.md">wgpu's changelog</a>.</em></p>
    <blockquote>
    <h1>Change Log</h1>
    <h2>v0.9 (2021-06-18)</h2>
    <ul>
    <li>Updated:
    <ul>
    <li>naga to <code>v0.5</code>.</li>
    </ul>
    </li>
    <li>Added:
    <ul>
    <li><code>Features::VERTEX_WRITABLE_STORAGE</code>.</li>
    <li><code>Features::CLEAR_COMMANDS</code> which allows you to use <code>cmd_buf.clear_texture</code> and <code>cmd_buf.clear_buffer</code>.</li>
    </ul>
    </li>
    <li>Changed:
    <ul>
    <li>Updated default storage buffer/image limit to <code>8</code> from <code>4</code>.</li>
    </ul>
    </li>
    <li>Fixed:
    <ul>
    <li><code>Buffer::get_mapped_range</code> can now have a range of zero.</li>
    <li>Fixed output spirv requiring the &quot;kernal&quot; capability.</li>
    <li>Fixed segfault due to improper drop order.</li>
    <li>Fixed incorrect dynamic stencil reference for Replace ops.</li>
    <li>Fixed tracking of temporary resources.</li>
    <li>Stopped unconditionally adding cubemap flags when the backend doesn't support cubemaps.</li>
    </ul>
    </li>
    <li>Validation:
    <ul>
    <li>Ensure that if resources are viewed from the vertex stage, they are read only unless <code>Features::VERTEX_WRITABLE_STORAGE</code> is true.</li>
    <li>Ensure storage class (i.e. storage vs uniform) is consistent between the shader and the pipeline layout.</li>
    <li>Error when a color texture is used as a depth/stencil texture.</li>
    <li>Check that pipeline output formats are logical</li>
    <li>Added shader label to log messages if validation fails.</li>
    </ul>
    </li>
    <li>Tracing:
    <ul>
    <li>Make renderpasses show up in the trace before they are run.</li>
    </ul>
    </li>
    <li>Docs:
    <ul>
    <li>Fix typo in <code>PowerPreference::LowPower</code> description.</li>
    </ul>
    </li>
    <li>Player:
    <ul>
    <li>Automatically start and stop RenderDoc captures.</li>
    </ul>
    </li>
    <li>Examples:
    <ul>
    <li>Handle winit's unconditional exception.</li>
    </ul>
    </li>
    <li>Internal:
    <ul>
    <li>Merged wgpu-rs and wgpu back into a single repository.</li>
    <li>The tracker was split into two different stateful/stateless trackers to reduce overhead.</li>
    <li>Added code coverage testing</li>
    <li>CI can now test on lavapipe</li>
    <li>Add missing extern &quot;C&quot; in wgpu-core on <code>wgpu_render_pass_execute_bundles</code></li>
    <li>Fix incorrect function name <code>wgpu_render_pass_bundle_indexed_indirect</code> to <code>wgpu_render_bundle_draw_indexed_indirect</code>.</li>
    </ul>
    </li>
    </ul>
    <h2>wgpu-types-0.8.1 (2021-06-08)</h2>
    <ul>
    <li>fix dynamic stencil reference for Replace ops</li>
    </ul>
    <h2>v0.8.1 (2021-05-06)</h2>
    <ul>
    <li>fix SPIR-V generation from WGSL, which was broken due to &quot;Kernel&quot; capability</li>
    <li>validate buffer storage classes</li>
    </ul>
    <h2>Unreleased</h2>
    <ul>
    <li>Added support for storage texture arrays for Vulkan and Metal.</li>
    </ul>
    <h2>v0.8 (2021-04-29)</h2>
    <!-- raw HTML omitted -->
    </blockquote>
    <p>... (truncated)</p>
    </details>
    <details>
    <summary>Commits</summary>
    <ul>
    <li>See full diff in <a href="https://github.com/gfx-rs/wgpu/commits">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit 3106dc4937ca7913aa381689f924399a7d228a60[m
Author: CGMossa <cgmossa@gmail.com>
Date:   Wed Jun 23 16:47:08 2021 +0000

    Added helpful adders for systemsets (#2366)
    
    # Objective
    
    - This adds a way to add `SystemSet`s to Apps.

[33mcommit f71f93c843ea03d38477353ac02e3854053e27f9[m
Author: Nathan Stocks <cleancut@github.com>
Date:   Tue Jun 22 16:57:48 2021 +0000

    Derive Clone for Time (#2360)
    
    # Objective
    
    - Make it so that `Time` can be cloned
    - Makes it so I can clone the entire current `Time` and easily pass it to the user in [Rusty Engine](https://github.com/CleanCut/rusty_engine) instead of [doing this](https://github.com/CleanCut/rusty_engine/blob/8302dc3914d5b14b730e994cca452ce8d252fec2/src/game.rs#L147-L150)
    
    ## Solution
    
    - Derive the `Clone` trait on `Time`

[33mcommit 39271f24d2f09e9d353e73425142e5d53d3049a1[m
Author: MinerSebas <scherthan_sebastian@web.de>
Date:   Tue Jun 22 07:59:37 2021 +0000

    Exclude some Branches from running CI (#2344)
    
    # Objective
    
    #2230 allowed the CI to run on every Branch of this Repo.
    But some Branches should not actually run the CI, which wastes the available capacity of CI runners.
    
    ### staging-squash-merge.tmp
    
    This Branch is used by Bors when squashing a PR.
    CI shouldn't need to run here, as the actual verification happens in the staging branch
    
    ![ci](https://user-images.githubusercontent.com/66798382/122072006-82ccad00-cdf7-11eb-84c8-29356594180d.PNG)
    ![ci2](https://user-images.githubusercontent.com/66798382/122072030-85c79d80-cdf7-11eb-8c30-2e3088d47285.png)
    
    ### dependabot/**
    
    Dependabot creates its branches in this Repo, which causes the CI to run twice on the same commit
    ![ci3](https://user-images.githubusercontent.com/66798382/122072345-c6bfb200-cdf7-11eb-8de6-3ffcbf641631.PNG)
    
    
    ## Solution
    
    Exclude those branches from running CI.

[33mcommit 00d8d5d5a08f10cfcbeed5b9161ee6854ca6dbd8[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Fri Jun 18 00:08:39 2021 +0000

    fix `clippy` warning failing on CI (#2353)
    
    # Objective
    
    - CI jobs are starting to fail due to `clippy::bool-assert-comparison` and `clippy::single_component_path_imports` being triggered.
    
    ## Solution
    
    - Fix all uses where `asset_eq!(<condition>, <bool>)` could be replace by `assert!`
    - Move the `#[allow()]` for `single_component_path_imports` to `#![allow()]` at the start of the files.

[33mcommit 71bf07f5c085b9c02cbe5337040337c3ed8b0002[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Wed Jun 9 20:04:22 2021 +0000

    [assets] Fix `AssetServer::get_handle_path` (#2310)
    
    # Objective
    
    - Currently `AssetServer::get_handle_path` always returns `None` since the inner hash map is never written to.
    
    ## Solution
    
    - Inside the `load_untracked` function, insert the asset path into the map.
    
    This is similar to #1290 (thanks @TheRawMeatball)

[33mcommit b07b2f524efd86e791d78273b06048678db41682[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Wed Jun 9 19:02:00 2021 +0000

    implement DetectChanges for NonSendMut (#2326)
    
    # Objective
    
    - The `DetectChanges` trait is used for types that detect change on mutable access (such as `ResMut`, `Mut`, etc...)
    - `DetectChanges` was not implemented for `NonSendMut`
    
    ## Solution
    
    - implement `NonSendMut` in terms of `DetectChanges`

[33mcommit 63047b24172e4e9c0f712d9ed428d75433b3e50c[m
Author: MinerSebas <scherthan_sebastian@web.de>
Date:   Wed Jun 9 19:01:59 2021 +0000

    Fix bad bounds for NonSend SystemParams (#2325)
    
    # Objective
    
    Currently, you can't call `is_added` or `is_changed` on a `NonSend` SystemParam, unless the Resource is a Component (implements `Send` and `Sync`).
    This defeats the purpose of providing change detection for NonSend Resources.
    While fixing this, I also noticed that `NonSend` does not have a bound at all on its struct.
    
    ## Solution
    
    Change the bounds of `T` to always be `'static`.

[33mcommit 19799b8d94de9057cbf2fba3077cf9cd0f26a9a4[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Jun 9 18:32:19 2021 +0000

    Update deny license to remove MPL as an allowed license (#2327)
    
    # Objective
    
    - MPL should not be an authorised license for all crates
    
    ## Solution
    
    - Add exception for MPL for wgpu and hexasphere
    - Remove security issue for a crate we don't depend on anymore

[33mcommit 5b0f40f3f1f916bd41234e9d12fd82fa3335b3f1[m
Author: Waridley <waridley64@gmail.com>
Date:   Wed Jun 9 18:32:18 2021 +0000

    Document FromType trait (#2323)
    
    # Objective
    
    Prevent future unnecessary mental effort spent figuring out why this trait exists and how to resolve the `TODO`.
    
    ## Solution
    
    I happened to notice this trait being used when expanding the `#[derive(Reflect)]` macro in my own crate to figure out how it worked, and noticed that there was a `TODO` comment on it because it is only used in the derive macro and thus appeared to be unused.
    
    I figured I should document my findings to prevent someone else from finding them out the hard way in the future :laughing:
    
    Co-authored-by: Waridley <Waridley64@gmail.com>

[33mcommit a40ec1c6b68ed460584cd12db383751f45416543[m
Author: Callum Tolley <cgtrolley@gmail.com>
Date:   Wed Jun 9 18:07:40 2021 +0000

    Add minimum sizes to textures to prevent crash (#2300)
    
    # Objective
    - Fixes #2299
    
    ## Solution
    - Ensures that textures are never requested with 0 height/width.

[33mcommit e549f143593e90197cb9bc39ab6fed355c8a6681[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Tue Jun 8 19:39:59 2021 +0000

    [assets] properly set `LoadState` with invalid asset extension (#2318)
    
    # Objective
    
    - Currently, when calling any of the `AssetServer`'s `load` functions, if the extension does not exist for the given path, the returned handle's load state is always `LoadState::NotLoaded`.
    - This is due to the `load_async` function early returning without properly creating a `SourceInfo` for the requested asset.
    - Fixes #2261
    
    ## Solution
    - Add the `SourceInfo` prior to checking for valid extension loaders. And set the `LoadState` to `Failed` if the according loader does not exist.

[33mcommit ac04c71d97ad22435b69acc20d5f64aa568bb1b9[m
Author: forbjok <forbjok@gmail.com>
Date:   Tue Jun 8 03:14:38 2021 +0000

    Fix Bevy crashing if no audio device is found (#2269)
    
    Fixes https://github.com/bevyengine/bevy/issues/850

[33mcommit 7835c926478f623893ab8818e937e80767b72df8[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Jun 8 02:46:44 2021 +0000

    Log errors when loading textures from a gltf file (#2260)
    
    When loading a gltf, if there is an error loading textures, it is completely ignored.
    
    This can happen for example when loading a file with `jpg` textures without the `jpeg` Bevy feature enabled.
    This PR adds `warn` logs for the few cases that can happen when loading a texture.
    
    Other possible fix would be to break on first error and returning, making the asset loading failed

[33mcommit fe32a605775cb3238907f72ba8e28dde9e6fdedc[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Tue Jun 8 02:46:44 2021 +0000

    [assets] set LoadState properly and more testing! (#2226)
    
    1) Sets `LoadState` properly on all failing cases in `AssetServer::load_async`
    2) Adds more tests for sad and happy paths of asset loading
    
    _Note_: this brings in the `tempfile` crate.

[33mcommit c2722f713aaa349669bc99085d8031b3253e7d3b[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Jun 8 02:26:51 2021 +0000

    expose texture/image conversions as From/TryFrom (#2175)
    
    fixes #2169
    
    Instead of having custom methods with reduced visibility, implement `From<image::DynamicImage> for Texture` and `TryFrom<Texture> for image::DynamicImage`

[33mcommit cebb553bfff3ca680136aa2282acde0f40592d57[m
Author: Niklas Eicker <git@nikl.me>
Date:   Tue Jun 8 01:57:24 2021 +0000

    Add a readme to bevy_ecs (#2028)
    
    [RENDERED](https://github.com/NiklasEi/bevy/blob/ecs_readme/crates/bevy_ecs/README.md)
    
    Since I am trying to learn more about Bevy ECS at the moment, I thought this issue is a perfect fit.
    
    This PR adds a readme to the `bevy_ecs` crate containing a minimal running example of stand alone `bevy_ecs`. Unique features like customizable component storage, Resources or change detection are introduced. For each of these features the readme links to an example in a newly created examples directory inside the `bevy_esc` crate.
    
    Resolves #2008
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 21330a7217d50d1f41a8c2aea79c336835faf7ba[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Mon Jun 7 22:37:12 2021 +0000

    fix automated pr labeling (#2316)
    
    # Objective
    
    - the PR labeler workflow will always add the `needs-traige` label to every pull request event
    
    ## Solution
    
    - Limit this workflow to only be on the `opened` event

[33mcommit 17877e8aaafaa4b6964881d2d83234822b0c9db1[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Mon Jun 7 20:53:27 2021 +0000

    Automated PR labeling (#2301)
    
    # Objective
    
    - Currently only issues automatically have labels assigned to them on creation.
    - The enables pull requests to have the same functionality and currently only adds the `needs-triage` label to all PRs.
    
    ## Solution
    
    - Integrate `actions/labeler@v2` into the github workflows to automatically tag PRs.
    - Add a `label-config.yml` file that specifies how PRs should be labeled.

[33mcommit a404eb2acfadf48f6b4cae54be0c9a51fd7d1533[m
Author: Yoh Deadfall <yoh.deadfall@hotmail.com>
Date:   Mon Jun 7 19:02:02 2021 +0000

    Removed redundant visibility check (#2311)
    
    Since `visible_entities_system` already checks `Visiblie::is_visible` for each entity and requires it to be `true`, there's no reason to verify visibility in `PassNode::prepare` which consumes entities produced by the system.

[33mcommit 27d809fd2377f599b9e832c0bfbcdbbd35488fc6[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Mon Jun 7 18:32:57 2021 +0000

    [assets] remove unnecessary temporary strong handles (#2304)
    
    # Objective
    
    - When creating an asset, the `update_asset_storage` function was unnecessarily creating an extraneous `Handle` to the created asset via calling `set`. This has some overhead as the `RefChange::Increment/Decrement` event was being sent.
    - A similar exteraneous handle is also created in `load_async` when loading dependencies.
    
    ## Solution
    
    - Have the implementation use `Assets::set_untracked` and `AssetServer::load_untracked` so no intermediate handle is created.

[33mcommit 4fed2ee8589975bc8725a5044f00d410f5db6753[m
Author: MinerSebas <scherthan_sebastian@web.de>
Date:   Thu Jun 3 19:58:08 2021 +0000

    Use cfg attribute to filter supported extensions (#2297)
    
    When implementing `AssetLoader ` you need to specify which File extensions are supported by that loader.
    Currently, Bevy always says it supports extensions that actually require activating a Feature beforehand.
    
    This PR adds cf attributes, so Bevy only tries to load those Extensions whose Features were activated.
    
    This prevents Bevy from Panicking and reports such a warning:
    ```
    Jun 02 23:05:57.139  WARN bevy_asset::asset_server: no `AssetLoader` found for the following extension: ogg
    ```
    
    This also fixes the Bug, that the `png Feature had to be activated even if you wanted to load a different image format.
    
    Fixes #640

[33mcommit c4b8210a7cc35f41228404ccce14765eecc6eaa2[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Wed Jun 2 21:07:56 2021 +0000

    Add PR Template (#2272)
    
    This is a first step at addressing #2256 via adding a pr template.

[33mcommit 19db1e402b0100e75c22eca61c838303b5b753e6[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Wed Jun 2 20:50:06 2021 +0000

    [ecs] implement is_empty for queries (#2271)
    
    ## Problem
    - The `Query` struct does not provide an easy way to check if it is empty.
    - Specifically, users have to use `.iter().peekable()` or `.iter().next().is_none()` which is not very ergonomic.
    - Fixes: #2270
    
    ## Solution
    - Implement an `is_empty` function for queries to more easily check if the query is empty.

[33mcommit a20dc36c8c21654abd26da3acbfc29d943978b5d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jun 2 19:57:38 2021 +0000

    Add new SystemState and rename old SystemState to SystemMeta (#2283)
    
    This enables `SystemParams` to be used outside of function systems. Anything can create and store `SystemState`, which enables efficient "param state cached" access to `SystemParams`.
    
    It adds a `ReadOnlySystemParamFetch` trait, which enables safe `SystemState::get` calls without unique world access.
    
    I renamed the old `SystemState` to `SystemMeta` to enable us to mirror the `QueryState` naming convention (but I'm happy to discuss alternative names if people have other ideas). I initially pitched this as `ParamState`, but given that it needs to include full system metadata, that doesn't feel like a particularly accurate name.
    
    ```rust
    #[derive(Eq, PartialEq, Debug)]
    struct A(usize);
    
    #[derive(Eq, PartialEq, Debug)]
    struct B(usize);
    
    let mut world = World::default();
    world.insert_resource(A(42));
    world.spawn().insert(B(7));
    
    // we get nice lifetime elision when declaring the type on the left hand side
    let mut system_state: SystemState<(Res<A>, Query<&B>)> = SystemState::new(&mut world);
    let (a, query) = system_state.get(&world);
    assert_eq!(*a, A(42), "returned resource matches initial value");
    assert_eq!(
        *query.single().unwrap(),
        B(7),
        "returned component matches initial value"
    );
    
    // mutable system params require unique world access
    let mut system_state: SystemState<(ResMut<A>, Query<&mut B>)> = SystemState::new(&mut world);
    let (a, query) = system_state.get_mut(&mut world);
    
    // static lifetimes are required when declaring inside of structs
    struct SomeContainer {
      state: SystemState<(Res<'static, A>, Res<'static, B>)>
    }
    
    // this can be shortened using type aliases, which will be useful for complex param tuples
    type MyParams<'a> = (Res<'a, A>, Res<'a, B>);
    struct SomeContainer {
      state: SystemState<MyParams<'static>>
    }
    
    // It is the user's responsibility to call SystemState::apply(world) for parameters that queue up work
    let mut system_state: SystemState<(Commands, Query<&B>)> = SystemState::new(&mut world);
    {
      let (mut commands, query) = system_state.get(&world);
      commands.insert_resource(3.14);
    }
    system_state.apply(&mut world);
    ```
    
    ## Future Work
    
    * Actually use SystemState inside FunctionSystem. This would be trivial, but it requires FunctionSystem to wrap SystemState in Option in its current form (which complicates system metadata lookup). I'd prefer to hold off until we adopt something like the later designs linked in #1364, which enable us to contruct Systems using a World reference (and also remove the need for `.system`).
    * Consider a "scoped" approach to automatically call SystemState::apply when systems params are no longer being used (either a container type with a Drop impl, or a function that takes a closure for user logic operating on params).

[33mcommit f45dbe5bac0bb5923a38ea49b2581915b0db3953[m
Author: thebluefish <sean.kaufman92@gmail.com>
Date:   Wed Jun 2 19:08:39 2021 +0000

    Fixes dropping empty BlobVec (#2295)
    
    When dropping the data, we originally only checked the size of an individual item instead of the size of the allocation. However with a capacity of 0, we attempt to deallocate a pointer which was not the result of allocation. That is, an item of `Layout { size_: 8, align_: 8 }` produces an array of `Layout { size_: 0, align_: 8 }` when `capacity = 0`.
    
    Fixes #2294

[33mcommit 6301b728eae547e794aa47386fdeeff64f52db8b[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Jun 2 02:30:15 2021 +0000

    remove commented code and TODO as it's not actually possible (#2289)
    
    Fixing it was tried in #2069 and deemed not possible (https://github.com/bevyengine/bevy/pull/2069#issuecomment-841775844)
    
    Other possibility would be to change the TODO to note the dependency on chalk integration.

[33mcommit 0b67084e107bb1845890dcbe9ae0dedc86b80d35[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Wed Jun 2 02:30:14 2021 +0000

    [assets] fix Assets being set as 'changed' each frame (#2280)
    
    ## Objective
    - Fixes: #2275
    - `Assets` were being flagged as 'changed' each frame regardless of if the assets were actually being updated.
    
    ## Solution
    - Only have `Assets` change detection be triggered when the collection is actually modified.
    - This includes utilizing `ResMut` further down the stack instead of a `&mut Assets` directly.

[33mcommit f602dcf6432a8d1212c709c38c73d347924dac46[m
Author: David McClung <38017107+mccludav@users.noreply.github.com>
Date:   Wed Jun 2 02:11:04 2021 +0000

    Fixes #2079 with a New SVG File (#2290)
    
    Fixes #2079
    Closes #2288
    
    Modifies README.md, and creates a new SVG file for the logo.  When Github appearance is in Dark Dimmed, the blackbird and BEVY text of the logo should not blend into the black background.

[33mcommit fd9e4870260a49a965958a9a6192462c594a7f0d[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Jun 1 20:06:33 2021 +0000

    Bump actions/cache from 2.1.5 to 2.1.6 (#2284)
    
    Bumps [actions/cache](https://github.com/actions/cache) from 2.1.5 to 2.1.6.
    <details>
    <summary>Release notes</summary>
    <p><em>Sourced from <a href="https://github.com/actions/cache/releases">actions/cache's releases</a>.</em></p>
    <blockquote>
    <h2>v2.1.6</h2>
    <ul>
    <li>Catch unhandled &quot;bad file descriptor&quot; errors that sometimes occurs when the cache server returns non-successful response (<a href="https://github-redirect.dependabot.com/actions/cache/pull/596">actions/cache#596</a>)</li>
    </ul>
    </blockquote>
    </details>
    <details>
    <summary>Commits</summary>
    <ul>
    <li><a href="https://github.com/actions/cache/commit/c64c572235d810460d0d6876e9c705ad5002b353"><code>c64c572</code></a> Catch and log unhandled exceptions stemming from closed file descriptor (<a href="https://github-redirect.dependabot.com/actions/cache/issues/596">#596</a>)</li>
    <li><a href="https://github.com/actions/cache/commit/cc2d767a726ddd654506e76169ec14b20dc75915"><code>cc2d767</code></a> Update Rust directories recommended for caching (<a href="https://github-redirect.dependabot.com/actions/cache/issues/433">#433</a>)</li>
    <li><a href="https://github.com/actions/cache/commit/2fa955d825a29821e73ec064792122ea9f70e573"><code>2fa955d</code></a> Update examples.md (<a href="https://github-redirect.dependabot.com/actions/cache/issues/588">#588</a>)</li>
    <li><a href="https://github.com/actions/cache/commit/3a696372f2ec10535e4c026a4fdae5fcca629e4a"><code>3a69637</code></a> elixir typo - stray parenthesis (<a href="https://github-redirect.dependabot.com/actions/cache/issues/569">#569</a>)</li>
    <li><a href="https://github.com/actions/cache/commit/366e5ba0224e0ebd6fba2a453d108cb20e734946"><code>366e5ba</code></a> Update cache key for Elixir (<a href="https://github-redirect.dependabot.com/actions/cache/issues/568">#568</a>)</li>
    <li><a href="https://github.com/actions/cache/commit/8d3f2fc3ce25d6c95a1297ce8d93f9c3c3ac8f00"><code>8d3f2fc</code></a> Update dependencies (<a href="https://github-redirect.dependabot.com/actions/cache/issues/565">#565</a>)</li>
    <li>See full diff in <a href="https://github.com/actions/cache/compare/v2.1.5...v2.1.6">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/cache&package-manager=github_actions&previous-version=2.1.5&new-version=2.1.6)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit 22eddfcc55209264849339b9b32498bdec5c2c55[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Jun 1 01:01:20 2021 +0000

    update super-linter to v4 (#2286)
    
    replaces #2285
    
    * bump to major release v4 instead of specifying patch
    * use slim image (https://github.com/github/super-linter#slim-image) - doesn't have rust linters but we don't use them anyway

[33mcommit 1214ddabb709de00c2a360644f6b37cb2114d50e[m
Author: PaweÅ Grabarz <frizi09@gmail.com>
Date:   Sun May 30 20:15:40 2021 +0000

    drop overwritten component data on double insert (#2227)
    
    Continuing the work on reducing the safety footguns in the code, I've removed one extra `UnsafeCell` in favour of safe `Cell` usage inisde `ComponentTicks`. That change led to discovery of misbehaving component insert logic, where data wasn't properly dropped when overwritten. Apart from that being fixed, some method names were changed to better convey the "initialize new allocation" and "replace existing allocation" semantic.
    
    Depends on #2221, I will rebase this PR after the dependency is merged. For now, review just the last commit.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 173bb48d7879c96c077862be032f4751cd110442[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Sun May 30 19:29:31 2021 +0000

    Refactor ResMut/Mut/ReflectMut to remove duplicated code (#2217)
    
    `ResMut`, `Mut` and `ReflectMut` all share very similar code for change detection.
    This PR is a first pass at refactoring these implementation and removing a lot of the duplicated code.
    
    Note, this introduces a new trait `ChangeDetectable`.
    
    Please feel free to comment away and let me know what you think!

[33mcommit 08e5939fd71e4e1f7998ff5db65ec5e7971fb7e0[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sun May 30 18:39:32 2021 +0000

    Despawn with children doesn't need to remove entities from parents children when parents are also removed (#2278)
    
    Fixes #2274
    
    When calling `despawn_recursive`, the recursive loop doesn't need to remove the entity from the children list of its parent when the parent will also be deleted
    
    Upside:
    * Removes two entity lookup per entity being recursively despawned
    
    Downside:
    * The change detection on the `Children` component of a deleted entity in the despawned hierarchy will not be triggered

[33mcommit 040ad7f5a420f0cf9e8e2411c845d3e67c916bbe[m
Author: Michael Hills <mhills@gmail.com>
Date:   Sun May 30 18:39:31 2021 +0000

    Add audio to ios example (#1007)
    
    I'm still here :) will try to land the ios audio support in cpal soon and then we can land this.
    
    This PR also adds in assets as a directory reference and avoids the "Xcode is optimizing and breaking my PNGs" issue that I had earlier on during iOS testing on Bevy.
    
    Re-testing this now.

[33mcommit 44f64a32f4ea01000a1cacf8a61787535cc5dcb7[m
Author: Andreas Weibye <andreas@breachvr.com>
Date:   Sun May 30 18:14:58 2021 +0000

    CI - Check that examples are listed in README and Cargo (#1650)
    
    Closes #1581
    
    # Internal File/Link Consistency checker Action
    
    This pull request adds an action to the CI that parses the [`./examples`](https://github.com/bevyengine/bevy/tree/main/examples) folder for files and cross references that with the links listed in [`README.md`](https://github.com/bevyengine/bevy/blob/main/examples/README.md) and [`Cargo.toml`](https://github.com/bevyengine/bevy/blob/main/Cargo.toml) to ensure the documentation actually reflects the examples currently in the repo.
    
    The primary reason for why we want this, is to prevent people from adding new examples but forgetting to also list them in the docs, or accidentally entering broken links (typos in docs).
    
    For details on how the action is working: [Check out the README here](https://github.com/Weibye/action-internal-link-consistency/blob/main/README.md)
    
    Co-authored-by: Andreas Weibye <13300393+Weibye@users.noreply.github.com>

[33mcommit 4f341430469acef478a709aff00bde375743f946[m
Author: Federico Rinaldi <gisquerin@gmail.com>
Date:   Sat May 29 01:30:28 2021 +0000

    Add iter_combinations to examples' README.md (#2266)
    
    Added a short description of the example.
    
    Fixes #2263.

[33mcommit 016b60a7904578c60b2f30ccd914cd3408161bd4[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Sat May 29 01:08:58 2021 +0000

    Update rodio requirement from 0.13 to 0.14 (#2244)
    
    Updates the requirements on [rodio](https://github.com/RustAudio/rodio) to permit the latest version.
    <details>
    <summary>Changelog</summary>
    <p><em>Sourced from <a href="https://github.com/RustAudio/rodio/blob/master/CHANGELOG.md">rodio's changelog</a>.</em></p>
    <blockquote>
    <h1>Version 0.14.0 (2021-05-21)</h1>
    <ul>
    <li>Re-export <code>cpal</code> in full.</li>
    <li>Replace panics when calling <code>OutputStream::try_default</code>, <code>OutputStream::try_from_device</code> with new
    <code>StreamError</code> variants.</li>
    <li><code>OutputStream::try_default</code> will now fallback to non-default output devices if an <code>OutputStream</code>
    cannot be created from the default device.</li>
    </ul>
    <h1>Version 0.13.1 (2021-03-28)</h1>
    <ul>
    <li>Fix panic when no <code>pulseaudio-alsa</code> was installed.</li>
    </ul>
    <h1>Version 0.13.0 (2020-11-03)</h1>
    <ul>
    <li>Update <code>cpal</code> to <a href="https://github.com/RustAudio/cpal/blob/master/CHANGELOG.md#version-0130-2020-10-28">0.13</a>.</li>
    <li>Add Android support.</li>
    </ul>
    <h1>Version 0.12.0 (2020-10-05)</h1>
    <ul>
    <li>Breaking: Update <code>cpal</code> to <a href="https://github.com/RustAudio/cpal/blob/master/CHANGELOG.md#version-0120-2020-07-09">0.12</a>.</li>
    <li>Breaking: Rework API removing global &quot;rodio audio processing&quot; thread &amp; adapting to the upstream cpal API changes.</li>
    <li>Add new_X format specific methods to Decoder.</li>
    <li>Fix resampler dependency on internal <code>Vec::capacity</code> behaviour.</li>
    </ul>
    <h1>Version 0.11.0 (2020-03-16)</h1>
    <ul>
    <li>Update <code>lewton</code> to <a href="https://github.com/RustAudio/lewton/blob/master/CHANGELOG.md#release-0100---january-30-2020">0.10</a>.</li>
    <li>Breaking: Update <code>cpal</code> to <a href="https://github.com/RustAudio/cpal/blob/master/CHANGELOG.md#version-0110-2019-12-11">0.11</a></li>
    </ul>
    <h1>Version 0.10.0 (2019-11-16)</h1>
    <ul>
    <li>Removal of nalgebra in favour of own code.</li>
    <li>Fix a bug that switched channels when resuming after having paused.</li>
    <li>Attempt all supported output formats if the default format fails in <code>Sink::new</code>.</li>
    <li>Breaking: Update <code>cpal</code> to <a href="https://github.com/RustAudio/cpal/blob/master/CHANGELOG.md#version-0100-2019-07-05">0.10</a>.</li>
    </ul>
    <h1>Version 0.9.0 (2019-06-08)</h1>
    <ul>
    <li>Remove exclusive <code>&amp;mut</code> borrow requirements in <code>Sink</code> &amp; <code>SpatialSink</code> setters.</li>
    <li>Use <code>nalgebra</code> instead of <code>cgmath</code> for <code>Spatial</code> source.</li>
    </ul>
    <h1>Version 0.8.1 (2018-09-18)</h1>
    <ul>
    <li>Update <code>lewton</code> dependency to <a href="https://github.com/RustAudio/lewton/blob/master/CHANGELOG.md#release-090---august-16-2018">0.9</a></li>
    <li>Change license from <code>Apache-2.0</code> only to <code>Apache-2.0 OR MIT</code></li>
    </ul>
    <h1>Version 0.8.0 (2018-06-22)</h1>
    <ul>
    <li>Add mp3 decoding capabilities via <code>minimp3</code></li>
    </ul>
    <!-- raw HTML omitted -->
    </blockquote>
    <p>... (truncated)</p>
    </details>
    <details>
    <summary>Commits</summary>
    <ul>
    <li>See full diff in <a href="https://github.com/RustAudio/rodio/commits">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit 052094757aee671c66190b63a640900f15ee300d[m
Author: PaweÅ Grabarz <frizi09@gmail.com>
Date:   Mon May 24 23:21:19 2021 +0000

    reduce tricky unsafety and simplify table structure (#2221)
    
    I've noticed that we are overusing interior mutability of the Table data, where in many cases we already own a unique reference to it. That prompted a slight refactor aiming to reduce number of safety constraints that must be manually upheld. Now the majority of those are just about avoiding bound checking, which is relatively easy to prove right.
    
    Another aspect is reducing the complexity of Table struct. Notably, we don't ever use archetypes stored there, so this whole thing goes away. Capacity and grow amount were mostly superficial, as we are already using Vecs inside anyway, so I've got rid of those too. Now the overall table capacity is being driven by the internal entity Vec capacity. This has a side effect of automatically implementing exponential growth pattern for BitVecs reallocations inside Table, which to my measurements slightly improves performance in tests that are heavy on inserts. YMMV, but I hope that those tests were at least remotely correct.

[33mcommit 5cccba5d217d062d6ad3318cfa2f9861b3d455de[m
Author: Daniel Borges <msk@lywenn.eu.org>
Date:   Mon May 24 20:05:36 2021 +0000

    Fixed a comment in the fixed timestep example (#2245)
    
    
    
    Co-authored-by: Daniel Borges <daniel@manufacture43.com>

[33mcommit 4b1d47da99ff34b494b86eb3ead5142a8003a6fc[m
Author: Jonathan Behrens <fintelia@gmail.com>
Date:   Mon May 24 19:38:33 2021 +0000

    Enable downcasting of `RenderContext` (#2240)
    
    Related to https://github.com/bevyengine/bevy/discussions/2210. This may make it possible to have external `wgpu` libraries work with `bevy`.

[33mcommit 9f94f7eb6c0431249c4f7d4740a12eeaaec1fe1f[m
Author: the-notable <the-notable@users.noreply.github.com>
Date:   Sun May 23 20:13:55 2021 +0000

    Example showing how to use AsyncComputeTaskPool and Tasks  (#2180)

[33mcommit bec323e2e25a8c2df63451d178e5807e05d9812a[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sun May 23 19:51:34 2021 +0000

    remove branch constraints in CI (#2230)
    
    Remove branch constraints from CI
    
    This will let CI run on:
    - fork branches before a PR is opened
    - this repo branches if we start using them (ð relations ð )

[33mcommit 653c10371e546176059bb779844c0569c0190b6b[m
Author: Yoh Deadfall <yoh.deadfall@hotmail.com>
Date:   Wed May 19 19:03:36 2021 +0000

    Use bevy_reflect as path in case of no direct references (#1875)
    
    Fixes #1844
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit a42343d8479ea0a15461a1a18413160bf4d0b97b[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Wed May 19 18:41:46 2021 +0000

    Optimize Events::extend and impl std::iter::Extend (#2207)
    
    The previous implementation of `Events::extend` iterated through each event and manually `sent` it via `Events:;send`.
    However, this could be a minor performance hit since calling `Vec::push` in a loop is not optimal.
    This refactors the code to use `Vec::extend`.

[33mcommit 29bc4e36579c988f1de0eefad4005b559717cee8[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Wed May 19 03:41:28 2021 +0000

    Fix Events::<drain/clear> bug (#2206)
    
    Taken from #2145
    
    On draining and clearing, dangling `EventReaders` would not read into the correct event offset.

[33mcommit 3c96131b995a73d4abd7ebeda7195baaf26f2e33[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue May 18 23:27:01 2021 +0000

    update duplicate dependencies after winit update (#2212)
    
    After winit update in #2186, a bunch of duplicated dependencies changed.
    
    Most are related to a new dependency, https://github.com/onurzdg/mio-misc, that has a few older versions in its dependencies

[33mcommit 9eb1aeee488684ed607d249f883676f3e711a1d2[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Tue May 18 19:25:58 2021 +0000

    Expose set_changed() on ResMut and Mut (#2208)
    
    This new api stems from this [discord conversation](https://discord.com/channels/691052431525675048/742569353878437978/844057268172357663).
    
    This exposes a public facing `set_changed` method on `ResMut` and `Mut`.
    
    As a side note: `ResMut` and `Mut` have a lot of duplicated code, I have a PR I may put up later that refactors these commonalities into a trait.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 93cc7219bc6a6c0dabf3777bab59bb5ecd310ee0[m
Author: PaweÅ Grabarz <frizi09@gmail.com>
Date:   Tue May 18 19:25:57 2021 +0000

    small ecs cleanup and remove_bundle drop bugfix (#2172)
    
    - simplified code around archetype generations a little bit, as the special case value is not actually needed
    - removed unnecessary UnsafeCell around pointer value that is never updated through shared references
    - fixed and added a test for correct drop behaviour when removing sparse components through remove_bundle command

[33mcommit 4563e69e06cd6217b94d3003ae028b4490ce1b93[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Tue May 18 18:56:15 2021 +0000

    Update glam (0.15.1) and hexasphere (3.4) (#2199)
    
    This is a version of #2195 which addresses the `glam` breaking changes.
    Also update hexasphere to ensure versions of `glam` are matching

[33mcommit 2fcac677129a451ecf03d369a7060e160c02a308[m
Author: Gregory Oakes <gregcoakes@gmail.com>
Date:   Tue May 18 18:36:36 2021 +0000

    Bump winit to 0.25 (#2186)
    
    winit v0.25 includes support for propagating mouse motion events in the HTML canvas to the winit window.

[33mcommit d4ffa3f490dbbd8eae0bebd2e3240f792bece714[m
Author: Daniel Burrows <dburrows@google.com>
Date:   Tue May 18 00:10:18 2021 +0000

    Document what `Config` is and how to use it. (#2185)
    
    While trying to figure out how to implement a `SystemParam`, I spent a
    long time looking for a feature that would do exactly what `Config`
    does.  I ignored it at first because all the examples I could find used
    `()` and I couldn't see a way to modify it.
    
    This is documented in other places, but `Config` is a logical place to
    include some breadcrumbs.  I've added some text that gives a brief
    overview of what `Config` is for, and links to the existing docs on
    `FunctionSystem::config` for more details.
    
    This would have saved me from embarrassing myself by filing https://github.com/bevyengine/bevy/issues/2178.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 1f0988be87f24042a3ceab4ef85473ccd4fda745[m
Author: Federico Rinaldi <gisquerin@gmail.com>
Date:   Tue May 18 00:10:17 2021 +0000

    Improve legibility of RunOnce::run_unsafe param (#2181)
    
    During PR #2046 @cart suggested that the `(): ()` notation is less legible than `_input: ()`. The first notation still managed to slip in though. This PR applies the second writing.

[33mcommit a81fb7aa7e495733ffb16523edfbe02d6b63e07a[m
Author: PaweÅ Grabarz <frizi09@gmail.com>
Date:   Mon May 17 23:33:47 2021 +0000

    Add a method `iter_combinations` on query to iterate over combinations of query results (#1763)
    
    Related to [discussion on discord](https://discord.com/channels/691052431525675048/742569353878437978/824731187724681289)
    
    With const generics, it is now possible to write generic iterator over multiple entities at once.
    
    This enables patterns of query iterations like
    
    ```rust
    for [e1, e2, e3] in query.iter_combinations() {
       // do something with relation of all three entities
    }
    ```
    
    The compiler is able to infer the correct iterator for given size of array, so either of those work
    ```rust
    for [e1, e2] in query.iter_combinations()  { ... }
    for [e1, e2, e3] in query.iter_combinations()  { ... }
    ```
    
    This feature can be very useful for systems like collision detection.
    
    When you ask for permutations of size K of N entities:
    - if K == N, you get one result of all entities
    - if K < N, you get all possible subsets of N with size K, without repetition
    - if K > N, the result set is empty (no permutation of size K exist)
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit cb98d31b27b4d049c8e927c2d15cb81085266472[m
Author: Andre Popovitch <andre@popovit.ch>
Date:   Mon May 17 23:07:19 2021 +0000

    Impl AsRef+AsMut for Res, ResMut, and Mut (#2189)
    
    This can save users from having to type `&*X` all the time at the cost of some complexity in the type signature. For instance, this allows me to accommodate @jakobhellermann's suggestion in #1799 without requiring users to type `&*windows` 99% of the time.

[33mcommit 177f2fbf9aaee4480aeb84b5f791c6db5d1826b4[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon May 17 23:07:18 2021 +0000

    enable cargo deny (#2101)
    
    https://github.com/EmbarkStudios/cargo-deny
    cargo-deny is a tool that can issue errors for dependency issues, among other:
    * security issues in a crate
    * duplicated dependencies with different versions
    * unauthorised license
    
    Added cargo-deny with an opinionated configuration:
    * No middle ground with warnings, either allow or deny
    * Not added to Bors, we probably don't want to block a PR on something that may happen from outside
    * Different github workflow than CI to run only when Cargo.toml files are changed, or on a schedule
    * Each check in its own job to help readability
    * Initial config makes Bevy pass all check
    
    Pushing a first commit with commented config to show errors

[33mcommit 85b17294b9a6b2ceb92f24c84399967d47faf15c[m
Author: Aevyrie <aevyrie@gmail.com>
Date:   Mon May 17 22:45:07 2021 +0000

    Fix PBR regression for unlit materials  (#2197)
    
    Fixes the frag shader for unlit materials by correcting the scope of the `#ifndef` to include the light functions. Closes #2190, introduced in #2112.
    
    Tested by changing materials in the the `3d_scene` example to be unlit. Unsure how to prevent future regressions without creating a test case scene that will catch these runtime panics.

[33mcommit 189df30a8315589db8bc6cfa5250c2041053af2f[m
Author: PaweÅ Grabarz <frizi09@gmail.com>
Date:   Mon May 17 22:29:10 2021 +0000

    use bytemuck crate instead of Byteable trait (#2183)
    
    This gets rid of multiple unsafe blocks that we had to maintain ourselves, and instead depends on library that's commonly used and supported by the ecosystem. We also get support for glam types for free.
    
    There is still some things to clear up with the `Bytes` trait, but that is a bit more substantial change and can be done separately. Also there are already separate efforts to use `crevice` crate, so I've just added that as a TODO.

[33mcommit 0c096d30ee15c376b34ce7c76c4f037dee1c9adc[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 17 20:52:17 2021 +0000

    remove minor and patch version from superlinter (#2203)
    
    Removes the superlinter patch version to prevent large amounts of dependabot pull request noise.

[33mcommit 071965996be31b44170bef1cddf01950cdce4244[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Mon May 17 20:28:50 2021 +0000

    revert supporting generics for deriving TypeUuid (#2204)
    
    This reverts some of the changes made in #2044 as supporting generics for a `#[derive(TypeUuid)]` should not work as each generic instantiation would have the same uuid.
    
    Stems from [this conversation](https://github.com/bevyengine/bevy/pull/2044#issuecomment-841743135)

[33mcommit 3cf10e2ef2d5b2e6c5e8ea558818a079974c68e7[m
Author: PaweÅ Grabarz <frizi09@gmail.com>
Date:   Mon May 17 20:01:25 2021 +0000

    prevent memory leak when dropping ParallelSystemContainer (#2176)
    
    `ParallelSystemContainer`'s `system` pointer was extracted from box, but it was never deallocated. This change adds missing drop implementation that cleans up that memory.

[33mcommit 1d652941ea81bcece1fad4f8aaa591a488a90216[m
Author: bjorn3 <bjorn3@users.noreply.github.com>
Date:   Mon May 17 19:06:05 2021 +0000

    Some cleanups (#2170)
    
    The first commit monomorphizes `add_system_inner` which I think was intended to be monomorphized anyway. The second commit moves the type argument of `GraphNode` to an associated type.

[33mcommit b8c98a9065f4c5487ede977cd719dfbd725cf436[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon May 17 18:44:04 2021 +0000

    Update gltf requirement from 0.15.2 to 0.16.0 (#2196)
    
    Updates the requirements on [gltf](https://github.com/gltf-rs/gltf) to permit the latest version.
    <details>
    <summary>Changelog</summary>
    <p><em>Sourced from <a href="https://github.com/gltf-rs/gltf/blob/master/CHANGELOG.md">gltf's changelog</a>.</em></p>
    <blockquote>
    <h2>[0.16.0] - 2021-05-13</h2>
    <h3>Added</h3>
    <ul>
    <li>Support for the <code>KHR_texture_transform</code> extension.</li>
    <li>Support for the <code>KHR_materials_transmission_ior extension</code>.</li>
    </ul>
    <h3>Changed</h3>
    <ul>
    <li><code>Material::alpha_cutoff</code> is now optional.</li>
    </ul>
    <h3>Fixed</h3>
    <ul>
    <li>URIs with embedded data failing to import when using <code>import_slice</code>.</li>
    <li>Serialization of empty primitives object being skipped.</li>
    </ul>
    <h2>[0.15.2] - 2020-03-29</h2>
    <h3>Changed</h3>
    <ul>
    <li>All features are now exposed in the <a href="http://docs.rs/gltf">online documentation</a>.</li>
    <li>Primary iterators now implement <code>Iterator::nth</code> explicitly for improved performance.</li>
    </ul>
    <h3>Fixed</h3>
    <ul>
    <li>Compiler warnings regarding deprecation of <code>std::error::Error::description</code>.</li>
    </ul>
    <h2>[0.15.1] - 2020-03-15</h2>
    <h3>Added</h3>
    <ul>
    <li>New feature <code>guess_mime_type</code> which, as the name suggests, attempts to guess
    the MIME type of an image if it doesn't exactly match the standard.</li>
    </ul>
    <h3>Changed</h3>
    <ul>
    <li><code>base64</code> updated to <code>0.11</code>.</li>
    <li><code>byteorder</code> updated to <code>1.3</code>.</li>
    <li><code>image</code> updated to <code>0.23.0</code>.</li>
    <li><code>Format</code> has additional variants for 16-bit pixel formats.</li>
    </ul>
    <h3>Fixed</h3>
    <ul>
    <li>Off-by-one error when reading whole files incurring a gratuitous reallocation.</li>
    </ul>
    <h2>[0.15.0] - 2020-01-18</h2>
    <h3>Added</h3>
    <ul>
    <li>Support for the <code>KHR_materials_unlit</code> extension, which adds an <code>unlit</code> field</li>
    </ul>
    <!-- raw HTML omitted -->
    </blockquote>
    <p>... (truncated)</p>
    </details>
    <details>
    <summary>Commits</summary>
    <ul>
    <li>See full diff in <a href="https://github.com/gltf-rs/gltf/commits">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit e3435e5144b79908d22eabcefb7bee92d5f520ba[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Sun May 16 18:09:47 2021 +0000

    fix scenes-example unread field warning (#2179)
    
    This should fix CI error: https://github.com/bevyengine/bevy/pull/2175/checks?check_run_id=2592736553

[33mcommit 73f4a9d18f609e52d28e2963635560e0b78a2f9f[m
Author: MsK` <msk@lywenn.eu.org>
Date:   Fri May 14 20:37:34 2021 +0000

    Directional light (#2112)
    
    This PR adds a `DirectionalLight` component to bevy_pbr.

[33mcommit d1f40148fd60f2b84cabf08b3dc0baf301ae9bf8[m
Author: Jonas Matser <github@jonasmatser.nl>
Date:   Fri May 14 20:37:32 2021 +0000

    Allows a number of clippy lints and fixes 2 (#1999)
    
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit cdae95b4b8845787f818e90160cfe5881df55f4a[m
Author: giusdp <depalma.gsp@gmail.com>
Date:   Fri May 14 20:15:54 2021 +0000

    Add exit_on_esc_system to examples with window (#2121)
    
    This covers issue #2110
    
    It adds the line `.add_system(bevy::input::system::exit_on_esc_system.system())` before `.run()`
    to every example that uses a window, so users have a quick way to close the examples.
    
    I used the full name `bevy::input::system::exit_on_esc_system`, I thought it gave clarity about being a built-in system.
    
    The examples excluded from the change are the ones in the android, ios, wasm folders, the headless
    examples and the ecs/system_sets example because it closes itself.

[33mcommit 739224f98100976a77e5d6294081c7825102cfdb[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri May 14 19:31:36 2021 +0000

    fix diagnostic length for asset count (#2165)
    
    fixes #2156
    limit the diagnostic name to `MAX_DIAGNOSTIC_NAME_WIDTH` length

[33mcommit b4f80c29ee5f998e32b35f169a209fd0414eea40[m
Author: Federico Rinaldi <gisquerin@gmail.com>
Date:   Fri May 14 18:45:31 2021 +0000

    Add module level documentation for collide_aabb (#2152)
    
    Related to #2105.
    
    Doc comments are present on the `collide` function, but not on the module level.

[33mcommit b23b23aab48cd4163f82b503c0b2d88fc51a97af[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri May 14 18:45:30 2021 +0000

    Bump github/super-linter from v3.16.2 to v3.17.0 (#2136)
    
    Bumps [github/super-linter](https://github.com/github/super-linter) from v3.16.2 to v3.17.0.
    <details>
    <summary>Commits</summary>
    <ul>
    <li><a href="https://github.com/github/super-linter/commit/28cfebb84fd6dd9e8773b5efe5ac0f8f3714f228"><code>28cfebb</code></a> Updating action.yml with new release version</li>
    <li><a href="https://github.com/github/super-linter/commit/5d2ea81f00d8d13e6decd2bf5a43eed506e7a132"><code>5d2ea81</code></a> Cpp (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1492">#1492</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/1a00fc37901207863f2831565c286b2b200ad5ed"><code>1a00fc3</code></a> adding fixes (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1516">#1516</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/d7894a51ecc87fac57670877ade5058308175c19"><code>d7894a5</code></a> Bump <code>@âcoffeelint/cli</code> from 4.1.4 to 4.1.5 in /dependencies (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1514">#1514</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/e0b8b12556f45282c9c2e42394a3afc17de36ed4"><code>e0b8b12</code></a> Bump ansible-lint from 5.0.7 to 5.0.8 in /dependencies (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1515">#1515</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/ddd818393f4f3dee48befd275e787d1ac535ef86"><code>ddd8183</code></a> Updating action.yml with new release version (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1512">#1512</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/72cbbfc4e57045b534b9cd26512d1ffdece75789"><code>72cbbfc</code></a> Inspec additional Tests (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1497">#1497</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/1482ca9ffccb8a491962246fed5311199f88a85c"><code>1482ca9</code></a> Bump stylelint from 13.13.0 to 13.13.1 in /dependencies (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1506">#1506</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/d838a987363fc5814b04998f040220d84c740372"><code>d838a98</code></a> Bump accurics/terrascan from 1.4.0 to 1.5.1 (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1505">#1505</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/2607e40749e3db7aadd487ec579b519f01c4df0b"><code>2607e40</code></a> Bump typing-extensions from 3.7.4.3 to 3.10.0.0 in /dependencies (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1507">#1507</a>)</li>
    <li>Additional commits viewable in <a href="https://github.com/github/super-linter/compare/v3.16.2...28cfebb84fd6dd9e8773b5efe5ac0f8f3714f228">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit ff4acee9e11b810872b9c1286c646cdbf7c2020e[m
Author: FlyingRatBull <der.ole.becker@gmail.com>
Date:   Fri May 14 18:26:09 2021 +0000

    [DOC] Mention FPS in log_diagnostics example (#2150)
    
    Closes #2076

[33mcommit 883abbb27a9fbc86df664f2e49fc600306327d44[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Fri May 7 00:46:54 2021 +0000

    [bevy_ecs] Cleanup SparseSetIndex impls (#2099)
    
    Problem:
    - SparseSetIndex trait implementations had a lot of duplicated code.
    
    Solution:
    - Utilize a macro to implement the trait for a generic type.

[33mcommit bfd15d2d4bf94ff080915e96af661ad80fb2ea5b[m
Author: Jonas Matser <github@jonasmatser.nl>
Date:   Fri May 7 00:28:35 2021 +0000

    Fixes incorrect `PipelineCompiler::compile_pipeline()` step_mode (#2126)
    
    There's what might be considered a proper bug in `PipelineCompiler::compile_pipeline()`, where it overwrites the `step_mode` for the passed in `VertexBufferLayout` with `InputStepMode::Vertex`. Due to this some ugly workarounds are needed to do any kind of instancing.
    
    In the somewhat longer term, `PipelineCompiler::compile_pipeline()` should probably also handle a `Vec<VertexBufferLayout>`, but that would be a (slightly) larger PR, rather than a bugfix. And I'd love to have this fix in sooner than we can deal with a bigger PR.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 1690a9db9782fc9544921d6073e302e3c88c88f0[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Thu May 6 23:45:23 2021 +0000

    [bevy_derive] Refactor modules for better error message. (#2059)
    
    Problem:
    - When using the 'as_crate' attribute, if 'as_crate' was empty, the only
      error you would get is 'integer underflow'.
    
    Solution:
    - Provide an explicit check for the 'as_crate' attribute's token stream
      to ensure the formatting is correct.
    
    Note:
    - Also reworked 'get_meta' by not making it call 'Manifest::find' twice.

[33mcommit ce6dda2d4eb21a8c01a69e93ab8c86c703062abd[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu May 6 23:25:16 2021 +0000

    fix new "inconsistent struct constructor" lint (#2127)
    
    Not super sold on the rationale behind this one, but we can revisit if it ever becomes painful.

[33mcommit 7d0e98f34c43eb62522c0c65de64f7b458b899be[m
Author: Denis Laprise <git@2ni.net>
Date:   Thu May 6 03:55:55 2021 +0000

    Implement rotation for Text2d (#2084)
    
    Fixes https://github.com/bevyengine/bevy/issues/2080
    
    ![CleanShot 2021-05-02 at 22 50 09](https://user-images.githubusercontent.com/11653/116844876-373ca780-ab99-11eb-8f61-8d93d929bff0.gif)
    
    
    Co-authored-by: Nathan Stocks <cleancut@github.com>
    Co-authored-by: Denis Laprise <nside@users.noreply.github.com>

[33mcommit 41d91227405a9d071fa54b245ad05325722edfa1[m
Author: Felipe Jorge <felipe.jorge.pereira@gmail.com>
Date:   Thu May 6 03:31:20 2021 +0000

    Mesh vertex attributes for skinning and animation (#1831)
    
    Required by #1429,
    
    - Adds the `Ushort4` vertex attribute for joint indices
    - `Mesh::ATTRIBUTE_JOINT_WEIGHT` and `Mesh::ATTRIBUTE_JOINT_INDEX` to import vertex attributes related to skinning from GLTF
    - impl `Default` for `Mesh` a empty triangle mesh is created (needed by reflect)
    - impl `Reflect` for `Mesh` all attributes are ignored (needed by the animation system)

[33mcommit cf8ef7660cbd4e94a501de824bdd712cf38c551f[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Thu May 6 03:08:53 2021 +0000

    load zeroed UVs as fallback in gltf loader (#1803)
    
    fixes a lot of gltf loading failures (see https://github.com/bevyengine/bevy/issues/1802)

[33mcommit 73ae6af6efc3e8e525e8068fa6f58bfd0d03cc8c[m
Author: Mika <blaind@blaind.net>
Date:   Thu May 6 02:26:54 2021 +0000

    Add inline documentation to bevy code (#1404)
    
    For review, first iteration of bevy code documentation.
    
    I can continue submitting docs every now and then for relevant parts.
    
    Some challenges I found:
    * plugins example had to be commented out, as adding bevy_internal (where plugins reside) would pull in too many dependencies
    
    Co-authored-by: Mika <1299457+blaind@users.noreply.github.com>
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 4e524841a1698a863d43a0a074e86527f3bc4408[m
Author: Patrik Buhring <patrikbuhring@gmail.com>
Date:   Thu May 6 00:41:18 2021 +0000

    Bump glam and hexasphere versions (#2111)
    
    Also fixes typo "feautres" in smallvec dependency.

[33mcommit ce6889b9a8d75b89c00d2600d789b0148171750a[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Wed May 5 19:35:07 2021 +0000

    Implement direct mutable dereferencing (#2100)
    
    This PR adds a way to get the underlying mutable reference for it's full lifetime.
    
    Context:
    https://discord.com/channels/691052431525675048/692572690833473578/839255317287796796

[33mcommit 81279f3090f0778b6b50dbe3938577b4984c629b[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Wed May 5 19:14:39 2021 +0000

    Move to smallvec v1.6 (#2074)

[33mcommit 809877ade6834ca98c02d6475bf143c5e297cddf[m
Author: jak6jak <jacobedie1@gmail.com>
Date:   Wed May 5 18:45:49 2021 +0000

    official 2D examples linked in rustdoc (#2081)
    
    I linked to examples within the rustdoc for the 2d examples as per issue #1934

[33mcommit 4f0499b91f7d1c7895237c0163d52c9a57283317[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue May 4 20:34:22 2021 +0000

    Asset re-loading while it's being deleted (#2011)
    
    fixes #824
    fixes #1956
    
    * marked asset loading methods as `must_use`
    * fixed asset re-loading while asset is still loading to work as comment is describing code
    * introduced a 1 frame delay between unused asset marking and actual asset removal

[33mcommit 2390bee6474cd9bef3b24e2c276e789d3c31c455[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon May 3 21:20:35 2021 +0000

    Update rectangle-pack requirement from 0.3 to 0.4 (#2086)
    
    Updates the requirements on [rectangle-pack](https://github.com/chinedufn/rectangle-pack) to permit the latest version.
    <details>
    <summary>Commits</summary>
    <ul>
    <li>See full diff in <a href="https://github.com/chinedufn/rectangle-pack/commits">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit 5c0117f49586c567890b7a6a79dc982afd1848a3[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon May 3 20:56:57 2021 +0000

    Bump github/super-linter from v3.15.5 to v3.16.2 (#2085)
    
    Bumps [github/super-linter](https://github.com/github/super-linter) from v3.15.5 to v3.16.2.
    <details>
    <summary>Commits</summary>
    <ul>
    <li><a href="https://github.com/github/super-linter/commit/9af8775d57172a12690483045b6b261d3520b7f1"><code>9af8775</code></a> Updating action.yml with new release version</li>
    <li><a href="https://github.com/github/super-linter/commit/903d730a2178b4e9b6fad2bde9912c44667d075d"><code>903d730</code></a> Bump Actions-R-Us/actions-tagger from v2.0.1 to v2.0.2 (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1419">#1419</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/58bdaecbcc30ff8b293ceb064c727c8dc4a12dd0"><code>58bdaec</code></a> update Terrascan to version 1.4.0 (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1422">#1422</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/e63d4fddae2248d2fd67ab7a6d2093fa41689d9d"><code>e63d4fd</code></a> Bump typescript from 4.2.3 to 4.2.4 in /dependencies (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1435">#1435</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/cb5739adde492ee10863c92427a62fecc7ef61ea"><code>cb5739a</code></a> Bump <code>@âtypescript-eslint/eslint-plugin</code> in /dependencies (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1449">#1449</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/d1e7a0c06be085e812e9a6e83b492622e2b60217"><code>d1e7a0c</code></a> Bump koalaman/shellcheck from v0.7.1 to v0.7.2 (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1462">#1462</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/6470e178cd05135ea03dae34030c33ac87fcf655"><code>6470e17</code></a> Bump alpine/terragrunt from 0.14.7 to 0.15.0 (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1501">#1501</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/acc6e9a5833c17e76ff560ad43d6e3ec41c0c9ae"><code>acc6e9a</code></a> Bump <code>@âtypescript-eslint/parser</code> from 4.19.0 to 4.22.0 in /dependencies (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1450">#1450</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/09c5be9abe4e5b246caea0d5ef396ead8630c58e"><code>09c5be9</code></a> Bump cljkondo/clj-kondo from 2021.03.22-alpine to 2021.04.23-alpine (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1474">#1474</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/8e6a4e4a59214b54f0e96fdfebca7c7bdf8ad62f"><code>8e6a4e4</code></a> Bump immer from 9.0.1 to 9.0.2 in /dependencies (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1498">#1498</a>)</li>
    <li>Additional commits viewable in <a href="https://github.com/github/super-linter/compare/v3.15.5...9af8775d57172a12690483045b6b261d3520b7f1">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit afaf4ad3daa01a2be529c19fc183ae8ddd2a330f[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sun May 2 20:45:25 2021 +0000

    update for wgpu 0.8 (#1959)
    
    Changes to get Bevy to compile with wgpu master.
    
    With this, on a Mac:
    * 2d examples look fine
    * ~~3d examples crash with an error specific to metal about a compilation error~~
    * 3d examples work fine after enabling feature `wgpu/cross`
    
    
    Feature `wgpu/cross` seems to be needed only on some platforms, not sure how to know which. It was introduced in https://github.com/gfx-rs/wgpu-rs/pull/826

[33mcommit b399a374cb407ac94aaeb6755c06b9a3a559ec6a[m
Author: FlyingRatBull <der.ole.becker@gmail.com>
Date:   Sun May 2 20:22:32 2021 +0000

    GitHub Action: Check local Markdown links on push (#2067)
    
    Adds an GitHub Action to check all local (non http://, https:// ) links in all Markdown files of the repository for liveness.
    Fails if a file is not found.
    
    # Goal
    This should help maintaining the quality of the documentation.
    
    # Impact
    Takes ~24 seconds currently and found 3 dead links (pull requests already created).
    
    # Dependent PRs
    * #2064
    * #2065
    * #2066
    
    # Info
    See [markdown-link-check](https://github.com/marketplace/actions/markdown-link-check).
    
    # Example output
    ```
    FILE: ./docs/profiling.md
    
    1 links checked.
    
    FILE: ./docs/plugins_guidelines.md
    
    37 links checked.
    
    FILE: ./docs/linters.md
    [â] ../.github/linters/markdown-lint.yml â Status: 400 [Error: ENOENT: no such file or directory, access '/github/workspace/.github/linters/markdown-lint.yml'] {
      errno: -2,
      code: 'ENOENT',
      syscall: 'access',
      path: '/github/workspace/.github/linters/markdown-lint.yml'
    }
    ```
    
    # Improvements
    * Can also be used to check external links, but fails because of:
      * Too many requests (429) responses:
    ```
    FILE: ./CHANGELOG.md
    [â] https://github.com/bevyengine/bevy/pull/1762 â Status: 429
    ```
       * crates.io links respond 404
    ```
    FILE: ./README.md
    [â] https://crates.io/crates/bevy â Status: 404
    ```

[33mcommit 5390be0871124b6c14782011e02645bc6ca29aa8[m
Author: Nikita Zdanovitch <nzdanovitch@gmail.com>
Date:   Sun May 2 20:00:55 2021 +0000

    Replace derive(Default) with impl in AssetCountDiagnosticsPlugin (#2077)
    
    Hi, ran into this problem with the derive macro.
    
    It fails trying to derive the Default trait when the asset does not implements it also. This is unnecessary because this plugin does not need that from the asset type, just needs to create the phantom data.

[33mcommit 3af3334cfeb551782cc5b33389d6a9898908e170[m
Author: bjorn3 <bjorn3@users.noreply.github.com>
Date:   Sat May 1 20:07:06 2021 +0000

    Various cleanups (#2046)
    
    This includes a few safety improvements and a variety of other cleanups. See the individual commits.

[33mcommit 82014a3abd0c1b5ee036606f422ee33cb4e1092e[m
Author: FlyingRatBull <der.ole.becker@gmail.com>
Date:   Sat May 1 18:51:55 2021 +0000

    Fix broken link to touch_input_events example (#2066)

[33mcommit 4e5210f8e9f05a097025ed76c04652353e5f013e[m
Author: FlyingRatBull <der.ole.becker@gmail.com>
Date:   Sat May 1 18:51:54 2021 +0000

    Fix broken link to PBR example in README.md (#2064)

[33mcommit 3c644bdcedfbaf3f1c27c3464990ed1a0a2cf2dd[m
Author: FlyingRatBull <der.ole.becker@gmail.com>
Date:   Sat May 1 18:26:49 2021 +0000

    Fix broken link to .markdown-lint.yml in docs/linters.md (#2065)

[33mcommit b07db8462f20fff9f5f6c1af915ad73700b7a264[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Sat May 1 02:57:20 2021 +0000

    Bevy derives handling generics in impl definitions. (#2044)
    
    Fixes #2037 (and then some)
    
    Problem:
    - `TypeUuid`, `RenderResource`, and `Bytes` derive macros did not properly handle generic structs.
    
    Solution:
    - Rework the derive macro implementations to handle the generics.

[33mcommit 1e0c950004a0c89e5b7704d6f77fecb083ee3ef1[m
Author: forbjok <forbjok@gmail.com>
Date:   Sat May 1 02:32:32 2021 +0000

    Implement Debug for Res and ResMut (#2050)
    
    This commit adds blanket implementations of Debug for Res and ResMut, as discussed in https://github.com/bevyengine/bevy/issues/2048.

[33mcommit c9b33e15f88d4aab3b2c16dba69df84ab57aa894[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Apr 30 20:12:50 2021 +0000

    gltf: load textures asynchronously using io task pool (#1767)
    
    While trying to reduce load time of gltf files, I noticed most of the loading time is spent transforming bytes into an actual texture.
    
    This PR add asynchronously loading for them using io task pool in gltf loader. It reduces loading of a large glb file from 15 seconds to 6~8 on my laptop
    
    To allow asynchronous tasks in an asset loader, I added a reference to the task pool from the asset server in the load context, which I can use later in the loader.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 07e772814fd04432660bca6ca8ecd1848cdf0d75[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Apr 30 02:08:49 2021 +0000

    add a span for frames (#2053)
    
    add a span for frames

[33mcommit dbf519c1d74cb4f75f854bdc7e5d472743d4778b[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Thu Apr 29 18:12:07 2021 +0000

    Fix unsoundness in `Query::for_each_mut` (#2045)

[33mcommit 85ab55a05b3386275c9ff6c3cf34bbea0fc6b43d[m
Author: speak <jesse.viikari@vincit.fi>
Date:   Wed Apr 28 21:26:47 2021 +0000

    Adds an alias mouse position -> cursor position (#2038)
    
    This alias is to aid people finding the cursor_position function, as the mouse
    pressed / moved functionality and naming likely primes people for thinking
    of "mouse" before "cursor" when searching the api documentation.

[33mcommit 86ad5bf420e27e7cdb3c1735fa56bb507c501c50[m
Author: CGMossa <cgmossa@gmail.com>
Date:   Wed Apr 28 21:03:10 2021 +0000

    Adding `WorldQuery` for `WithBundle` (#2024)
    
    In response to #2023, here is a draft for a PR.
    
    Fixes #2023
    
    I've added an example to show how to use `WithBundle`, and also to test it out.
    
    Right now there is a bug: If a bundle and a query are "the same", then it doesn't filter out
    what it needs to filter out.
    
    Example:
    
    ```
    Print component initated from bundle.
    [examples/ecs/query_bundle.rs:57] x = Dummy( <========= This should not get printed
        111,
    )
    [examples/ecs/query_bundle.rs:57] x = Dummy(
        222,
    )
    Show all components
    [examples/ecs/query_bundle.rs:50] x = Dummy(
        111,
    )
    [examples/ecs/query_bundle.rs:50] x = Dummy(
        222,
    )
    ```
    
    However, it behaves the right way, if I add one more component to the bundle,
    so the query and the bundle doesn't look the same:
    
    ```
    Print component initated from bundle.
    [examples/ecs/query_bundle.rs:57] x = Dummy(
        222,
    )
    Show all components
    [examples/ecs/query_bundle.rs:50] x = Dummy(
        111,
    )
    [examples/ecs/query_bundle.rs:50] x = Dummy(
        222,
    )
    ```
    
    I hope this helps. I'm definitely up for tinkering with this, and adding anything that I'm asked to add
    or change.
    
    
    
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit cdb9097ed41dad5262c32887ddb2fa19eebc24cb[m
Author: deprilula28 <deprilula28@gmail.com>
Date:   Wed Apr 28 20:08:33 2021 +0000

    Make Command's public? (#2034)
    
    I'm using Bevy ECS in a project of mine and I'd like to do world changes asynchronously.
    
    The current public API for creating entities, `Commands` , has a lifetime that restricts it from being sent across threads. `CommandQueue` on the other hand is a Vec of commands that can be later ran on a World.
    
    So far this is all public, but the commands themselves are private API. I know the intented use is with `Commands`, but that's not possible for my use case as I mentioned, and so I simply copied over the code for the commands I need and it works. Obviously, this isn't a nice solution, so I'd like to ask if it's not out of scope to make the commands public?

[33mcommit cf40f4ab083767554346b53b2aa7f6aa812b6988[m
Author: TehPers <tehperz@gmail.com>
Date:   Wed Apr 28 19:04:01 2021 +0000

    Fix mesh with no vertex attributes causing panic (#2036)
    
    If a mesh without any vertex attributes is rendered (for example, one that only has indices), bevy will crash since the mesh still creates a vertex buffer even though it's empty. Later code assumes that there is vertex data, causing an index-out-of-bounds panic. This PR fixes the issue by adding a check that there is any vertex data before creating a vertex buffer.
    
    I ran into this issue while rendering a tilemap without any vertex attributes (only indices).
    
    Stack trace:
    ```
    thread 'main' panicked at 'index out of bounds: the len is 0 but the index is 0', C:\Dev\Games\bevy\crates\bevy_render\src\render_graph\nodes\pass_node.rs:346:9
    stack backtrace:
       0: std::panicking::begin_panic_handler
                 at /rustc/bb491ed23937aef876622e4beb68ae95938b3bf9\/library\std\src\panicking.rs:493
       1: core::panicking::panic_fmt
                 at /rustc/bb491ed23937aef876622e4beb68ae95938b3bf9\/library\core\src\panicking.rs:92
       2: core::panicking::panic_bounds_check
                 at /rustc/bb491ed23937aef876622e4beb68ae95938b3bf9\/library\core\src\panicking.rs:69
       3: core::slice::index::{{impl}}::index<core::option::Option<tuple<bevy_render::renderer::render_resource::buffer::BufferId, u64>>>
                 at C:\Users\tehpe\.rustup\toolchains\nightly-x86_64-pc-windows-msvc\lib\rustlib\src\rust\library\core\src\slice\index.rs:184
       4: core::slice::index::{{impl}}::index<core::option::Option<tuple<bevy_render::renderer::render_resource::buffer::BufferId, u64>>,usize>
                 at C:\Users\tehpe\.rustup\toolchains\nightly-x86_64-pc-windows-msvc\lib\rustlib\src\rust\library\core\src\slice\index.rs:15
       5: alloc::vec::{{impl}}::index<core::option::Option<tuple<bevy_render::renderer::render_resource::buffer::BufferId, u64>>,usize,alloc::alloc::Global>
                 at C:\Users\tehpe\.rustup\toolchains\nightly-x86_64-pc-windows-msvc\lib\rustlib\src\rust\library\alloc\src\vec\mod.rs:2386
       6: bevy_render::render_graph::nodes::pass_node::DrawState::is_vertex_buffer_set
                 at C:\Dev\Games\bevy\crates\bevy_render\src\render_graph\nodes\pass_node.rs:346
       7: bevy_render::render_graph::nodes::pass_node::{{impl}}::update::{{closure}}<bevy_render::render_graph::base::MainPass*>
                 at C:\Dev\Games\bevy\crates\bevy_render\src\render_graph\nodes\pass_node.rs:285
       8: bevy_wgpu::renderer::wgpu_render_context::{{impl}}::begin_pass
                 at C:\Dev\Games\bevy\crates\bevy_wgpu\src\renderer\wgpu_render_context.rs:196
       9: bevy_render::render_graph::nodes::pass_node::{{impl}}::update<bevy_render::render_graph::base::MainPass*>
                 at C:\Dev\Games\bevy\crates\bevy_render\src\render_graph\nodes\pass_node.rs:244
      10: bevy_wgpu::renderer::wgpu_render_graph_executor::WgpuRenderGraphExecutor::execute
                 at C:\Dev\Games\bevy\crates\bevy_wgpu\src\renderer\wgpu_render_graph_executor.rs:75
      11: bevy_wgpu::wgpu_renderer::{{impl}}::run_graph::{{closure}}
                 at C:\Dev\Games\bevy\crates\bevy_wgpu\src\wgpu_renderer.rs:115
      12: bevy_ecs::world::World::resource_scope<bevy_render::render_graph::graph::RenderGraph,tuple<>,closure-0>
                 at C:\Dev\Games\bevy\crates\bevy_ecs\src\world\mod.rs:715
      13: bevy_wgpu::wgpu_renderer::WgpuRenderer::run_graph
                 at C:\Dev\Games\bevy\crates\bevy_wgpu\src\wgpu_renderer.rs:104
      14: bevy_wgpu::wgpu_renderer::WgpuRenderer::update
                 at C:\Dev\Games\bevy\crates\bevy_wgpu\src\wgpu_renderer.rs:121
      15: bevy_wgpu::get_wgpu_render_system::{{closure}}
                 at C:\Dev\Games\bevy\crates\bevy_wgpu\src\lib.rs:112
      16: alloc::boxed::{{impl}}::call_mut<tuple<mut bevy_ecs::world::World*>,FnMut<tuple<mut bevy_ecs::world::World*>>,alloc::alloc::Global>
                 at C:\Users\tehpe\.rustup\toolchains\nightly-x86_64-pc-windows-msvc\lib\rustlib\src\rust\library\alloc\src\boxed.rs:1553
      17: bevy_ecs::system::exclusive_system::{{impl}}::run
                 at C:\Dev\Games\bevy\crates\bevy_ecs\src\system\exclusive_system.rs:41
      18: bevy_ecs::schedule::stage::{{impl}}::run
                 at C:\Dev\Games\bevy\crates\bevy_ecs\src\schedule\stage.rs:812
      19: bevy_ecs::schedule::Schedule::run_once
                 at C:\Dev\Games\bevy\crates\bevy_ecs\src\schedule\mod.rs:201
      20: bevy_ecs::schedule::{{impl}}::run
                 at C:\Dev\Games\bevy\crates\bevy_ecs\src\schedule\mod.rs:219
      21: bevy_app::app::App::update
                 at C:\Dev\Games\bevy\crates\bevy_app\src\app.rs:58
      22: bevy_winit::winit_runner_with::{{closure}}
                 at C:\Dev\Games\bevy\crates\bevy_winit\src\lib.rs:485
      23: winit::platform_impl::platform::event_loop::{{impl}}::run_return::{{closure}}<tuple<>,closure-1>
                 at C:\Users\tehpe\.cargo\registry\src\github.com-1ecc6299db9ec823\winit-0.24.0\src\platform_impl\windows\event_loop.rs:203
      24: alloc::boxed::{{impl}}::call_mut<tuple<winit::event::Event<tuple<>>, mut winit::event_loop::ControlFlow*>,FnMut<tuple<winit::event::Event<tuple<>>, mut winit::event_loop::ControlFlow*>>,alloc::alloc::Global>
                 at C:\Users\tehpe\.rustup\toolchains\nightly-x86_64-pc-windows-msvc\lib\rustlib\src\rust\library\alloc\src\boxed.rs:1553
      25: winit::platform_impl::platform::event_loop::runner::{{impl}}::call_event_handler::{{closure}}<tuple<>>
                 at C:\Users\tehpe\.cargo\registry\src\github.com-1ecc6299db9ec823\winit-0.24.0\src\platform_impl\windows\event_loop\runner.rs:245
      26: std::panic::{{impl}}::call_once<tuple<>,closure-0>
                 at C:\Users\tehpe\.rustup\toolchains\nightly-x86_64-pc-windows-msvc\lib\rustlib\src\rust\library\std\src\panic.rs:344
      27: std::panicking::try::do_call<std::panic::AssertUnwindSafe<closure-0>,tuple<>>
                 at C:\Users\tehpe\.rustup\toolchains\nightly-x86_64-pc-windows-msvc\lib\rustlib\src\rust\library\std\src\panicking.rs:379
      28: hashbrown::set::HashSet<mut winapi::shared::windef::HWND__*, std::collections::hash::map::RandomState, alloc::alloc::Global>::iter<mut winapi::shared::windef::HWND__*,std::collections::hash::map::RandomState,alloc::alloc::Global>
      29: std::panicking::try<tuple<>,std::panic::AssertUnwindSafe<closure-0>>
                 at C:\Users\tehpe\.rustup\toolchains\nightly-x86_64-pc-windows-msvc\lib\rustlib\src\rust\library\std\src\panicking.rs:343
      30: std::panic::catch_unwind<std::panic::AssertUnwindSafe<closure-0>,tuple<>>
                 at C:\Users\tehpe\.rustup\toolchains\nightly-x86_64-pc-windows-msvc\lib\rustlib\src\rust\library\std\src\panic.rs:431
      31: winit::platform_impl::platform::event_loop::runner::EventLoopRunner<tuple<>>::catch_unwind<tuple<>,tuple<>,closure-0>
                 at C:\Users\tehpe\.cargo\registry\src\github.com-1ecc6299db9ec823\winit-0.24.0\src\platform_impl\windows\event_loop\runner.rs:152
      32: winit::platform_impl::platform::event_loop::runner::EventLoopRunner<tuple<>>::call_event_handler<tuple<>>
                 at C:\Users\tehpe\.cargo\registry\src\github.com-1ecc6299db9ec823\winit-0.24.0\src\platform_impl\windows\event_loop\runner.rs:239
      33: winit::platform_impl::platform::event_loop::runner::EventLoopRunner<tuple<>>::move_state_to<tuple<>>
                 at C:\Users\tehpe\.cargo\registry\src\github.com-1ecc6299db9ec823\winit-0.24.0\src\platform_impl\windows\event_loop\runner.rs:341
      34: winit::platform_impl::platform::event_loop::runner::EventLoopRunner<tuple<>>::main_events_cleared<tuple<>>
                 at C:\Users\tehpe\.cargo\registry\src\github.com-1ecc6299db9ec823\winit-0.24.0\src\platform_impl\windows\event_loop\runner.rs:227
      35: winit::platform_impl::platform::event_loop::flush_paint_messages<tuple<>>
                 at C:\Users\tehpe\.cargo\registry\src\github.com-1ecc6299db9ec823\winit-0.24.0\src\platform_impl\windows\event_loop.rs:676
      36: winit::platform_impl::platform::event_loop::thread_event_target_callback::{{closure}}<tuple<>>
                 at C:\Users\tehpe\.cargo\registry\src\github.com-1ecc6299db9ec823\winit-0.24.0\src\platform_impl\windows\event_loop.rs:1967
      37: std::panic::{{impl}}::call_once<isize,closure-0>
                 at C:\Users\tehpe\.rustup\toolchains\nightly-x86_64-pc-windows-msvc\lib\rustlib\src\rust\library\std\src\panic.rs:344
      38: std::panicking::try::do_call<std::panic::AssertUnwindSafe<closure-0>,isize>
                 at C:\Users\tehpe\.rustup\toolchains\nightly-x86_64-pc-windows-msvc\lib\rustlib\src\rust\library\std\src\panicking.rs:379
      39: hashbrown::set::HashSet<mut winapi::shared::windef::HWND__*, std::collections::hash::map::RandomState, alloc::alloc::Global>::iter<mut winapi::shared::windef::HWND__*,std::collections::hash::map::RandomState,alloc::alloc::Global>
      40: std::panicking::try<isize,std::panic::AssertUnwindSafe<closure-0>>
                 at C:\Users\tehpe\.rustup\toolchains\nightly-x86_64-pc-windows-msvc\lib\rustlib\src\rust\library\std\src\panicking.rs:343
      41: std::panic::catch_unwind<std::panic::AssertUnwindSafe<closure-0>,isize>
                 at C:\Users\tehpe\.rustup\toolchains\nightly-x86_64-pc-windows-msvc\lib\rustlib\src\rust\library\std\src\panic.rs:431
      42: winit::platform_impl::platform::event_loop::runner::EventLoopRunner<tuple<>>::catch_unwind<tuple<>,isize,closure-0>
                 at C:\Users\tehpe\.cargo\registry\src\github.com-1ecc6299db9ec823\winit-0.24.0\src\platform_impl\windows\event_loop\runner.rs:152
      43: winit::platform_impl::platform::event_loop::thread_event_target_callback<tuple<>>
                 at C:\Users\tehpe\.cargo\registry\src\github.com-1ecc6299db9ec823\winit-0.24.0\src\platform_impl\windows\event_loop.rs:2151
      44: DefSubclassProc
      45: DefSubclassProc
      46: CallWindowProcW
      47: DispatchMessageW
      48: SendMessageTimeoutW
      49: KiUserCallbackDispatcher
      50: NtUserDispatchMessage
      51: DispatchMessageW
      52: winit::platform_impl::platform::event_loop::EventLoop<tuple<>>::run_return<tuple<>,closure-1>
                 at C:\Users\tehpe\.cargo\registry\src\github.com-1ecc6299db9ec823\winit-0.24.0\src\platform_impl\windows\event_loop.rs:218
      53: winit::platform_impl::platform::event_loop::EventLoop<tuple<>>::run<tuple<>,closure-1>
                 at C:\Users\tehpe\.cargo\registry\src\github.com-1ecc6299db9ec823\winit-0.24.0\src\platform_impl\windows\event_loop.rs:188
      54: winit::event_loop::EventLoop<tuple<>>::run<tuple<>,closure-1>
                 at C:\Users\tehpe\.cargo\registry\src\github.com-1ecc6299db9ec823\winit-0.24.0\src\event_loop.rs:154
      55: bevy_winit::run<closure-1>
                 at C:\Dev\Games\bevy\crates\bevy_winit\src\lib.rs:171
      56: bevy_winit::winit_runner_with
                 at C:\Dev\Games\bevy\crates\bevy_winit\src\lib.rs:493
      57: bevy_winit::winit_runner
                 at C:\Dev\Games\bevy\crates\bevy_winit\src\lib.rs:211
      58: core::ops::function::Fn::call<fn(bevy_app::app::App),tuple<bevy_app::app::App>>
                 at C:\Users\tehpe\.rustup\toolchains\nightly-x86_64-pc-windows-msvc\lib\rustlib\src\rust\library\core\src\ops\function.rs:70
      59: alloc::boxed::{{impl}}::call<tuple<bevy_app::app::App>,Fn<tuple<bevy_app::app::App>>,alloc::alloc::Global>
                 at C:\Users\tehpe\.rustup\toolchains\nightly-x86_64-pc-windows-msvc\lib\rustlib\src\rust\library\alloc\src\boxed.rs:1560
      60: bevy_app::app::App::run
                 at C:\Dev\Games\bevy\crates\bevy_app\src\app.rs:68
      61: bevy_app::app_builder::AppBuilder::run
                 at C:\Dev\Games\bevy\crates\bevy_app\src\app_builder.rs:54
      62: game_main::main
                 at .\crates\game_main\src\main.rs:23
      63: core::ops::function::FnOnce::call_once<fn(),tuple<>>
                 at C:\Users\tehpe\.rustup\toolchains\nightly-x86_64-pc-windows-msvc\lib\rustlib\src\rust\library\core\src\ops\function.rs:227
    note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
    Apr 27 21:51:01.026 ERROR gpu_descriptor::allocator: `DescriptorAllocator` is dropped while some descriptor sets were not deallocated
    error: process didn't exit successfully: `target/cargo\debug\game_main.exe` (exit code: 0xc000041d)
    ```

[33mcommit 2fcd8a3fb06e4fd47615d0a53e9eb9f3af492d5c[m
Author: bjorn3 <bjorn3@users.noreply.github.com>
Date:   Wed Apr 28 19:04:00 2021 +0000

    Monomorphize various things (#1914)
    
    Based on #1910
    
    This shrinks breakout from 310k to 293k. Most of the win is in outlining the drop glue of `App`. The other two commits save about 800 bytes total when using two empty systems and two simple resources.
    
    After this PR the full disassembly for
    
    ```rust
    fn main() {
        App::build().run();
    }
    ```
    
    is about as minimal as it gets, so pretty much all other costs scale linear in the amount of resources, systems, etc.
    
    ```asm
    0000000000001100 <_ZN4core3ptr54drop_in_place$LT$bevy_app..app_builder..AppBuilder$GT$17h76850422c20653deE>:
        1100:       ff 25 52 21 00 00       jmpq   *0x2152(%rip)        # 3258 <_ZN60_$LT$bevy_app..app..App$u20$as$u20$core..ops..drop..Drop$GT$4drop17h67d177ae549d917bE@Base>
        1106:       cc                      int3
        1107:       cc                      int3
        1108:       cc                      int3
        1109:       cc                      int3
        110a:       cc                      int3
        110b:       cc                      int3
        110c:       cc                      int3
        110d:       cc                      int3
        110e:       cc                      int3
        110f:       cc                      int3
    
    0000000000001110 <_ZN8breakout4main17h7cbe07b319de1042E>:
        1110:       53                      push   %rbx
        1111:       48 81 ec 00 03 00 00    sub    $0x300,%rsp
        1118:       48 8d 5c 24 08          lea    0x8(%rsp),%rbx
        111d:       48 89 df                mov    %rbx,%rdi
        1120:       ff 15 3a 21 00 00       callq  *0x213a(%rip)        # 3260 <_ZN8bevy_app3app3App5build17h8b0ea6be9050d6ccE@Base>
        1126:       48 89 df                mov    %rbx,%rdi
        1129:       ff 15 39 21 00 00       callq  *0x2139(%rip)        # 3268 <_ZN8bevy_app11app_builder10AppBuilder3run17hfc8cf50692acdbdeE@Base>
        112f:       48 8d 7c 24 08          lea    0x8(%rsp),%rdi
        1134:       ff 15 1e 21 00 00       callq  *0x211e(%rip)        # 3258 <_ZN60_$LT$bevy_app..app..App$u20$as$u20$core..ops..drop..Drop$GT$4drop17h67d177ae549d917bE@Base>
        113a:       48 81 c4 00 03 00 00    add    $0x300,%rsp
        1141:       5b                      pop    %rbx
        1142:       c3                      retq
        1143:       48 89 c3                mov    %rax,%rbx
        1146:       48 8d 7c 24 08          lea    0x8(%rsp),%rdi
        114b:       e8 b0 ff ff ff          callq  1100 <_ZN4core3ptr54drop_in_place$LT$bevy_app..app_builder..AppBuilder$GT$17h76850422c20653deE>
        1150:       48 89 df                mov    %rbx,%rdi
        1153:       e8 18 01 00 00          callq  1270 <_Unwind_Resume@plt>
        1158:       0f 0b                   ud2
        115a:       cc                      int3
        115b:       cc                      int3
        115c:       cc                      int3
        115d:       cc                      int3
        115e:       cc                      int3
        115f:       cc                      int3
    
    0000000000001160 <main>:
        1160:       48 83 ec 08             sub    $0x8,%rsp
        1164:       48 89 f1                mov    %rsi,%rcx
        1167:       48 63 d7                movslq %edi,%rdx
        116a:       48 8d 05 9f ff ff ff    lea    -0x61(%rip),%rax        # 1110 <_ZN8breakout4main17h7cbe07b319de1042E>
        1171:       48 89 04 24             mov    %rax,(%rsp)
        1175:       48 8d 35 94 1e 00 00    lea    0x1e94(%rip),%rsi        # 3010 <__init_array_end>
        117c:       48 89 e7                mov    %rsp,%rdi
        117f:       ff 15 eb 20 00 00       callq  *0x20eb(%rip)        # 3270 <_ZN3std2rt19lang_start_internal17he77194431b0ee4a2E@Base>
        1185:       59                      pop    %rcx
        1186:       c3                      retq
        1187:       cc                      int3
        1188:       cc                      int3
        1189:       cc                      int3
        118a:       cc                      int3
        118b:       cc                      int3
        118c:       cc                      int3
        118d:       cc                      int3
        118e:       cc                      int3
        118f:       cc                      int3
    
    0000000000001190 <_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h83a5b8d55f23dff8E.llvm.909376793398482062>:
        1190:       48 83 ec 08             sub    $0x8,%rsp
        1194:       48 8b 3f                mov    (%rdi),%rdi
        1197:       e8 54 ff ff ff          callq  10f0 <_ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h6e238af75680eb28E>
        119c:       31 c0                   xor    %eax,%eax
        119e:       59                      pop    %rcx
        119f:       c3                      retq
    
    00000000000011a0 <_ZN4core3ops8function6FnOnce40call_once$u7b$$u7b$vtable.shim$u7d$$u7d$17hb05d591cd29dea4fE.llvm.909376793398482062>:
        11a0:       48 83 ec 08             sub    $0x8,%rsp
        11a4:       48 8b 3f                mov    (%rdi),%rdi
        11a7:       e8 44 ff ff ff          callq  10f0 <_ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h6e238af75680eb28E>
        11ac:       31 c0                   xor    %eax,%eax
        11ae:       59                      pop    %rcx
        11af:       c3                      retq
    
    00000000000011b0 <_ZN4core3ptr85drop_in_place$LT$std..rt..lang_start$LT$$LP$$RP$$GT$..$u7b$$u7b$closure$u7d$$u7d$$GT$17he9aeeba375093b99E.llvm.909376793398482062>:
        11b0:       c3                      retq
        11b1:       cc                      int3
        11b2:       cc                      int3
        11b3:       cc                      int3
        11b4:       cc                      int3
        11b5:       cc                      int3
        11b6:       cc                      int3
        11b7:       cc                      int3
        11b8:       cc                      int3
        11b9:       cc                      int3
        11ba:       cc                      int3
        11bb:       cc                      int3
        11bc:       cc                      int3
        11bd:       cc                      int3
        11be:       cc                      int3
        11bf:       cc                      int3
    ```

[33mcommit 6f7da027c736abb206a3378f33b899eae4b90638[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Apr 28 18:41:16 2021 +0000

    Automatic System Spans (#2033)
    
    As mentioned in https://github.com/bevyengine/bevy/issues/2025#issuecomment-827867660, systems used to have spans by default.
    
    * add spans by default for every system executed
    * create folder if missing for feature `wgpu_trace`

[33mcommit b1ed28e17e5eaba2426ae447cd80c77e9ed8bb05[m
Author: Lucas Rocha <lucas.rocha@icomp.ufam.edu.br>
Date:   Tue Apr 27 18:29:33 2021 +0000

    Hide re-exported docs (#1985)
    
    Solves #1957
    
    Co-authored-by: caelumLaron <caelum.laron@gmail.com>

[33mcommit cc0ee536f08b0c96b0f70bccc94bd69f2150bffa[m
Author: James Leflang <jleflang@ucmerced.edu>
Date:   Tue Apr 27 02:41:34 2021 +0000

    Add note about linker errors for Fedora users (#2009)
    
    This PR adds a note to the Fedora section of Linux Dependencies on solving linker errors.
    
    Fixes #1815.
    
    Co-authored-by: James Leflang <59455417+jleflang@users.noreply.github.com>

[33mcommit 723fe9118380ff6474eff4030e99972dbcfbde33[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Apr 27 02:17:12 2021 +0000

    Fail CI on cargo doc warnings (#2012)
    
    * makes CI fails on cargo doc warnings
    * adds this check in bors
    
    doc warnings are listed here: https://doc.rust-lang.org/rustdoc/lints.html
    
    Currently the warnings emitted are:
    * broken_intra_doc_links
    * private_intra_doc_links
    * invalid_codeblock_attributes

[33mcommit c32c37d737076608a2eb0c3087b93f652691a6fb[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Tue Apr 27 01:11:04 2021 +0000

    Detect camera projection changes (#2015)

[33mcommit 3f4d50bab9a76e79077c005e1fa690a3de956d47[m
Author: Lukas OrsvÃ¤rn <lukas@orsvarn.com>
Date:   Tue Apr 27 00:46:41 2021 +0000

    Removed irrelevant note for Mac users (#2017)
    
    The removed comment talks about something in the file that no longer exists.

[33mcommit fcf8fafa7124036f5d299a9da293b620c3cd3b92[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sun Apr 25 17:24:09 2021 +0000

    fix dead intra links in doc on `Input` and `Reflect` (#2007)
    
    fix a few dead links
    
    * Links in `Input` missed a refactor
    * `Reflect::downcast` can't use the intra doc link format, as it's not a link to a trait function, but to a function implemented on `dyn Reflect`
    
    noticed in https://github.com/bevyengine/bevy/pull/1781#discussion_r619777879

[33mcommit 0a8576b71026678394c13109bc5291eb68e43d7d[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Apr 24 18:14:04 2021 +0000

    support assets of any size (#1997)
    
    Fixes #1892
    
    The following code is a cut down version of the issue, and crashes the same way:
    ```rust
    enum AssetLifecycleEvent <T> {
        Create(T),
        Free
    }
    
    fn main() {
        let (sender, _receiver) = crossbeam_channel::unbounded();
        sender.send(AssetLifecycleEvent::<[u32; 32000]>::Free).unwrap();
    }
    ```
    
    - We're creating a channel that need to be able to hold `AssetLifecycleEvent::Create(T)` which has the size of our type `T`
    - The two variants of the enums have a very different size
    
    By keeping `T` boxed while sending through the channel, it doesn't crash

[33mcommit 38feddb87850424df3a0b08bae8dc32c57004798[m
Author: Grindv1k <torstein.grindvik@gmail.com>
Date:   Fri Apr 23 19:08:16 2021 +0000

    Add system sets and run criteria example (#1909)
    
    If accepted, fixes #1694 .
    
    I wanted to explore system sets and run criteria a bit, so made an example expanding a bit on the snippets shown in the 0.5 release post.
    
    Shows a couple of system sets, uses system labels, run criterion, and a use of the interesting `RunCriterion::pipe` functionality.

[33mcommit d653ad2bda94a99fbf121bbf4988375e4a808d00[m
Author: TehPers <tehperz@gmail.com>
Date:   Fri Apr 23 18:38:18 2021 +0000

    Updated docs for ShouldRun (#1987)
    
    The documentation for `ShouldRun` doesn't completely explain what each of the variants you can return does. For instance, it isn't very clear that looping systems aren't executed again until after all the systems in a stage have had a chance to run.
    
    This PR adds to the documentation for `ShouldRun`, and hopefully clarifies what is happening during a stage's execution when run criteria are checked and systems are being executed.

[33mcommit 0a587ac3b5acd86b1abd346ee2feb701e6c63b37[m
Author: TehPers <tehperz@gmail.com>
Date:   Fri Apr 23 17:54:04 2021 +0000

    Updated remaining system panic messages to include the system name (#1986)
    
    Some panic messages for systems include the system name, but there's a few panic messages which do not. This PR adds the system name for the remaining panic messages.
    
    This is a continuation of the work done in #1864.
    Related: #1846

[33mcommit e3fb23d4d3828842ab5780d1200b231a7e9549ea[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Apr 22 23:30:48 2021 +0000

    add documentation on LogPlugin and more log usage (#1973)
    
    Fixes #1895
    
    Changed most `println` to `info` in examples, some to `warn` when it was useful to differentiate from other more noisy logs.
    
    Added doc on `LogPlugin`, how to configure it, and why (and how) you may need to disable it

[33mcommit 6508b4ed2593736c70bc66f89597f258b4f7dfce[m
Author: Zicklag <zicklag@katharostech.com>
Date:   Thu Apr 22 23:09:59 2021 +0000

    Hide Derived SystemParam State Struct From Docs (#1984)
    
    This makes sure the automatically generated MyStructState type is not
    shown in the rustdoc when deriving SystemParam on MyStruct.

[33mcommit 391ccd0ad04d91266e32633c87c5f8adc5524219[m
Author: MartÃ­n Maita <47983254+mnmaita@users.noreply.github.com>
Date:   Thu Apr 22 19:53:44 2021 +0000

    Adds docs deadlinks check on CI (#1590)
    
    Closes https://github.com/bevyengine/bevy/issues/1579
    
    This is my first contribution to this repository, feel free to correct anything that I'm missing and I'll address feedback as soon as possible!

[33mcommit 6719c2c390c3e08c86664fb1b1ac03d49c57d72b[m
Author: bjorn3 <bjorn3@users.noreply.github.com>
Date:   Thu Apr 22 19:34:34 2021 +0000

    Extract monomorphic get_insert_bundle_info function (#1910)
    
    This shrinks breakout from 316k to 310k when using `--feature dynamic`.
    
    I haven't run the ecs benchmark to test performance as my laptop is too noisy for reliable benchmarking.

[33mcommit 7c274e5a4465458a1917a0074fd3149601fa51a0[m
Author: Lukas Wirth <lukastw97@gmail.com>
Date:   Thu Apr 22 19:09:09 2021 +0000

    Improve bevy_ecs query docs (#1935)
    
    Mainly documents Query, WorldQuery and the various Query Filter types as well as some smaller doc changes.

[33mcommit 19f467ebd09c6f0958efeda9851b34048dc400c1[m
Author: Joshua Ols <joshua.d.ols@gmail.com>
Date:   Thu Apr 22 18:49:02 2021 +0000

    Spherical Area Lights (#1901)
    
    I still need to simplify and optimize the code, but here's a preliminary working version of Spherical Area Lights. See the example image below from a modified version of my [cubism-demo-rs](https://github.com/Josh015/cubism-demo-rs) app, which you can also clone and run to see them in action.
    
    ![Spherical Area Lights v1](https://user-images.githubusercontent.com/8846132/114491862-60df6000-9be5-11eb-8950-f039b74e1e96.jpg)

[33mcommit b9640243c641e0eea57cdbba68fdb9724d0e0b61[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Apr 22 02:16:09 2021 +0000

    Separate Query filter access from fetch access during initial evaluation (#1977)
    
    Fixes #1955
    
    See this comment for implementation details / motivation: https://github.com/bevyengine/bevy/issues/1955#issuecomment-823600886

[33mcommit 1248a639ee5a7c77de5c154dfe47c0782c7e41eb[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Apr 21 23:46:54 2021 +0000

    EnumVariantMeta derive (#1972)
    
    There are cases where we want an enum variant name. Right now the only way to do that with rust's std is to derive Debug, but this will also print out the variant's fields. This creates the unfortunate situation where we need to manually write out each variant's string name (ex: in #1963), which is both boilerplate-ey and error-prone. Crates such as `strum` exist for this reason, but it includes a lot of code and complexity that we don't need.
    
    This adds a dead-simple `EnumVariantMeta` derive that exposes `enum_variant_index` and `enum_variant_name` functions. This allows us to make cases like #1963 much cleaner (see the second commit). We might also be able to reuse this logic for `bevy_reflect` enum derives.

[33mcommit e4e32598a981f6bca316b34a03239cc720b27846[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Wed Apr 21 23:19:34 2021 +0000

    Cargo fmt with unstable features (#1903)
    
    Fresh version of #1670 off the latest main.
    
    Mostly fixing documentation wrapping.

[33mcommit 30c6ca6166c729232b382c9abfdddc0dc4654bd8[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Apr 20 21:44:32 2021 +0000

    don't panic when no RenderResourceContext can be found (#1971)
    
    In bevy_webgl2, the `RenderResourceContext` is created after startup as it needs to first wait for an event from js side:
    https://github.com/mrk-its/bevy_webgl2/blob/f31e5d49def7de6bfe58a47587e7ab3ca349da05/src/lib.rs#L117
    
    remove `panic` introduced in #1965 and log as a `warn` instead

[33mcommit 80df583a212b287bb664680ce648f6abc7183367[m
Author: MinerSebas <scherthan_sebastian@web.de>
Date:   Tue Apr 20 21:04:09 2021 +0000

    When missing a render backend also mention the bevy_wgpu feature (#1970)

[33mcommit cbfb45684765128ddc69a8d43265e40cb55286ae[m
Author: Nathan Ward <nathansward@comcast.net>
Date:   Tue Apr 20 21:04:08 2021 +0000

    [bevy_core/bytes] Fix UB with accessing memory with incorrect alignment (#1966)
    
    After running `bevy_core` through `miri`, errors were reported surrounding incorrect memory accesses within the `bytes` test suit.
    
    Specifically:
    ```
    test bytes::tests::test_array_round_trip ... error: Undefined Behavior: accessing memory with alignment 1, but alignment 4 is required
       --> crates/bevy_core/src/bytes.rs:55:13
        |
    55  |             (*ptr).clone()
        |             ^^^^^^ accessing memory with alignment 1, but alignment 4 is required
        |
    ```
    
    and
    
    ```
    test bytes::tests::test_vec_bytes_round_trip ... error: Undefined Behavior: accessing memory with alignment 2, but alignment 4 is required
       --> /home/nward/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/slice/raw.rs:95:14
        |
    95  |     unsafe { &*ptr::slice_from_raw_parts(data, len) }
        |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ accessing memory with alignment 2, but alignment 4 is required
        |
    ```
    
    Solution:
    
    The solution is to use `slice::align_to` method to ensure correct alignment.

[33mcommit c74994ba69487a5e6cd8ad674ad084a35406c613[m
Author: simens_green <simensgreen007@gmail.com>
Date:   Tue Apr 20 20:41:32 2021 +0000

    Added TryFrom for VertexAttributeValues (#1963)
    
    This implementations allows you
    convert std::vec::Vec<T> to VertexAttributeValues::T and back.
    
    # Examples
    
    ```rust
    use std::convert::TryInto;
    use bevy_render::mesh::VertexAttributeValues;
    
    // creating vector of values
    let before = vec![[0_u32; 4]; 10];
    let values = VertexAttributeValues::from(before.clone());
    let after: Vec<[u32; 4]> = values.try_into().unwrap();
    
    assert_eq!(before, after);
    ```
    
    Co-authored-by: aloucks <aloucks@cofront.net>
    Co-authored-by: simens_green <34134129+simensgreen@users.noreply.github.com>
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 4a477e762dbe881430385559456b4140881b6f92[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Apr 19 22:41:19 2021 +0000

    update CHANGELOG for 0.5 (#1967)
    
    mark version 0.5 as released in CHANGELOG

[33mcommit ad43f52bd2dd331a2b9208821c6c89f4851ec1b5[m
Author: MinerSebas <scherthan_sebastian@web.de>
Date:   Mon Apr 19 22:16:24 2021 +0000

    Provide better error message when missing a render backend (#1965)
    
    Fixes #626

[33mcommit 458312236a967d7be07e679b30ff08e2704f6186[m
Author: MinerSebas <scherthan_sebastian@web.de>
Date:   Mon Apr 19 22:16:23 2021 +0000

    Document setting "CARGO_MANIFEST_DIR" for asset root (#1950)
    
    This was nowhere documented inside Bevy.
    Should I also mention the use case of debugging a project?
    
    Closes #810
    
    Co-authored-by: MinerSebas <66798382+MinerSebas@users.noreply.github.com>

[33mcommit e29a899b9002133256896b7b9faf99ee2019108c[m
Author: MinerSebas <scherthan_sebastian@web.de>
Date:   Mon Apr 19 21:53:34 2021 +0000

    Added missing Component Bound to Res<> and ResMut<> (#1962)
    
    Fixes #1838

[33mcommit f1ddd7a2adbf06f59b1b8cab3066fb8467a90f4b[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Apr 19 21:28:30 2021 +0000

    change how to select bevy-glsl-to-spirv or shaderc (#1819)
    
    `cfg` for `bevy-glsl-to-spirv` use now mimics https://github.com/cart/glsl-to-spirv/blob/master/Cargo.toml
    
    fixes #898
    fixes #1348
    fixes #1942
    fixes #1078

[33mcommit 3eb828f234ac4d76def75b5876b2416da68adba3[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Apr 19 21:07:20 2021 +0000

    Bump actions/cache from v2.1.4 to v2.1.5 (#1961)
    
    Bumps [actions/cache](https://github.com/actions/cache) from v2.1.4 to v2.1.5.
    <details>
    <summary>Release notes</summary>
    <p><em>Sourced from <a href="https://github.com/actions/cache/releases">actions/cache's releases</a>.</em></p>
    <blockquote>
    <h2>v2.1.5</h2>
    <ul>
    <li>Fix permissions error seen when extracting caches with GNU tar that were previously created using BSD tar (<a href="https://github-redirect.dependabot.com/actions/cache/issues/527">actions/cache#527</a>)</li>
    </ul>
    </blockquote>
    </details>
    <details>
    <summary>Commits</summary>
    <ul>
    <li><a href="https://github.com/actions/cache/commit/1a9e2138d905efd099035b49d8b7a3888c653ca8"><code>1a9e213</code></a> Update cache module to v1.0.7 (<a href="https://github-redirect.dependabot.com/actions/cache/issues/562">#562</a>)</li>
    <li><a href="https://github.com/actions/cache/commit/981fa981ed950efef5277587ee4ba0eead30cadf"><code>981fa98</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/actions/cache/issues/469">#469</a> from ericmj/patch-1</li>
    <li><a href="https://github.com/actions/cache/commit/4498c5b4d8b0673dbc7d9731bc11d9cc5a2c6087"><code>4498c5b</code></a> Drop the example based on using pip's internals (<a href="https://github-redirect.dependabot.com/actions/cache/issues/519">#519</a>)</li>
    <li><a href="https://github.com/actions/cache/commit/4134e6de47156381d31ff74f8aabf86718858f70"><code>4134e6d</code></a> It is not recommended to cache node_modules (<a href="https://github-redirect.dependabot.com/actions/cache/issues/537">#537</a>)</li>
    <li><a href="https://github.com/actions/cache/commit/62a4d754427893bc6d043c6d4f5486490cab29b6"><code>62a4d75</code></a> Also cache _build for Elixir</li>
    <li>See full diff in <a href="https://github.com/actions/cache/compare/v2.1.4...1a9e2138d905efd099035b49d8b7a3888c653ca8">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit fa6d4dbd53a1c8261494c42439e87f04193334a7[m
Author: Mariusz KryÅski <mrk@sed.pl>
Date:   Mon Apr 19 21:07:19 2021 +0000

    add render_to_texture example (#1927)
    
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 3d4b1b9ff2015e2c9a900b8afe8bf895e4784fcd[m
Author: Alister Lee <dev@shortepic.com>
Date:   Mon Apr 19 20:45:41 2021 +0000

    Fix alien_cake_addict: cake should not be at height of player's location (#1954)
    
    Just to avoid confusion to close readers of the example, this fix ensures cake is transformed to the height at the cake's cell, rather than the height at the player's cell.
    
    Without this, cake may be floating or buried, depending on where the player is standing at time of spawning.
    
    Love your work!

[33mcommit 4f1689ec3742b8722532af6a1b36dc8bd295ccfa[m
Author: Yoh Deadfall <yoh.deadfall@hotmail.com>
Date:   Mon Apr 19 20:28:02 2021 +0000

    Added example of entity sorting by components (#1817)
    
    We discussed with @alice-i-cecile privately on iterators and agreed that making a custom ordered iterator over query makes no sense since materialization is required anyway and it's better to reuse existing components or code. Therefore, just adding an example to the documentation as requested.
    
    Fixes #1470.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 07cf088f331eff0d206166a95e3e027aeee64e45[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Apr 19 19:30:39 2021 +0000

    fix memory size for PointLightBundle (#1940)
    
    Introduced in #1778, not fixed by #1931
    
    The size of `Lights` buffer currently is :
    ```rust
        16 // (color, `[f32; 4]`)
        + 16 // (number of lights, `f32` encoded as a `[f32; 4]`)
        + 10 // (maximum number of lights)
            * ( 16 // (light position, `[f32; 4]`
              + 16 // (color, `[16; 4]`)
              + 4 // (inverse_range_squared, `f32`)
              )
    
    -> 392
    ```
    
    This makes the pbr shader crash when running with Xcode debugger or with the WebGL2 backend. They both expect a buffer sized 512. This can also be seen on desktop by adding a second light to a scene with a color, it's position and color will be wrong.
    
    adding a second light to example `load_gltf`:
    ```rust
        commands
            .spawn_bundle(PointLightBundle {
                transform: Transform::from_xyz(-3.0, 5.0, -3.0),
                point_light: PointLight {
                    color: Color::BLUE,
                    ..Default::default()
                },
                ..Default::default()
            })
            .insert(Rotates);
    ```
    
    before fix:
    <img width="1392" alt="Screenshot 2021-04-16 at 19 14 59" src="https://user-images.githubusercontent.com/8672791/115060744-866fb080-9ee8-11eb-8915-f87cc872ad48.png">
    
    after fix:
    <img width="1392" alt="Screenshot 2021-04-16 at 19 16 44" src="https://user-images.githubusercontent.com/8672791/115060759-8cfe2800-9ee8-11eb-92c2-d79f39c7b36b.png">
    
    
    
    
    This PR changes `inverse_range_squared` to be a `[f32; 4]` instead of a `f32` to have the expected alignement

[33mcommit 2bc126e2ce69734c548d4491d2a63f9075fbc03d[m
Author: James Higgins <james.isaac.higgins@gmail.com>
Date:   Mon Apr 19 19:15:27 2021 +0000

    Label for ui_focus_system (#1926)
    
    Needed a label because of a conflict with some custom ui systems

[33mcommit 97b26d7647e2685d7cc16d800ba939bd805a2e26[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Apr 19 18:57:58 2021 +0000

    limit number of lights (#1946)
    
    Fixes #1921
    
    Buffer was growing with the actual number of lights instead of being limited to the max number of lights.
    
    As it's a query that can be exactly sized, I also switched `count()` to `len()`

[33mcommit 2bd8ed57d0a116672abb929923ba0310fe7e0954[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Apr 19 18:41:42 2021 +0000

    par_for_each: split batches when iterating on a sparse query (#1945)
    
    Fixes #1943
    
    Each batch was iterating over the complete query

[33mcommit 20673dbe0e935d9b7b4fdc8947830bfcff6bc071[m
Author: MinerSebas <scherthan_sebastian@web.de>
Date:   Fri Apr 16 19:13:08 2021 +0000

    Doctest improvments (#1937)

[33mcommit 4c86b99d2f900b1a8e3f71343001b9fc92f3164b[m
Author: MinerSebas <scherthan_sebastian@web.de>
Date:   Fri Apr 16 18:57:08 2021 +0000

    Update cargo_features.md (#1939)
    
    This adds missing features to the cargo_features.md file.
    
    closes #1391

[33mcommit d508923eb7d3605d426135fe306e3ba8737c161a[m
Author: Logan Magee <mageelog@gmail.com>
Date:   Fri Apr 16 18:40:49 2021 +0000

    Allow deriving `SystemParam` on private types (#1936)
    
    Examples creating a public type to derive `SystemParam` on were updated
    to create a private type where a public one is no longer needed.
    
    Resolves #1869

[33mcommit cf221f9659127427c99d621b76c8085c4860e2ef[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Thu Apr 15 21:06:49 2021 +0000

    calculate flat normals for mesh if missing (#1808)
    
    If the gltf loader encounters a mesh without normal attributes, it will duplicate the vertex attributes and compute flat normals, as defined by https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#meshes:
    
    > **Implementation Note**: When normals are not specified, client implementations should calculate flat normals.
    
    ![image](https://user-images.githubusercontent.com/22177966/113483243-bb204880-94a2-11eb-8fa1-c4828a4882c5.png)
    
    Helps with #1802
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 0a6fee5d17c2d633f35cd309fdc4a0a0ea9d09d7[m
Author: Lukas Wirth <lukastw97@gmail.com>
Date:   Thu Apr 15 20:36:16 2021 +0000

    Improve bevy_ecs::system module docs (#1932)
    
    This includes a lot of single line comments where either saying more wasn't helpful or due to me not knowing enough about things yet to be able to go more indepth. Proofreading is very much welcome.

[33mcommit 9657f58f6a84b82f508cf5f09765db3d26d139ff[m
Author: Boxy <supbscripter@gmail.com>
Date:   Thu Apr 15 20:17:59 2021 +0000

    Fix unsoundness in query component access (#1929)
    
    Pretty much does what it says in the title lol

[33mcommit 9b7ed18f72ee99c07dbb11dfe49404d676e85597[m
Author: Anselmo Sampietro <ans.samp@gmail.com>
Date:   Thu Apr 15 19:49:31 2021 +0000

    Add animate shaders example (#1765)
    
    This PR adds an example on how to animate a shader by passing the global `time.seconds_since_startup()` to a component, and accessing that component inside the shader.
    
    Hopefully this is the current proper solution, please let me know if it should be solved in another way.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 8a6b92991e6a53dc130c95d788e07eef34f47984[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Apr 15 19:29:47 2021 +0000

    fix markdownlint ci after master branch deletion (#1933)
    
    remove reference to master branch

[33mcommit 86f3308308646d43f90eb23e0386a35036270d40[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Apr 15 00:57:37 2021 +0000

    examples on how to tests systems (#1714)
    
    well... those are examples on how to tests systems despawning entities, modifying components, accessing resources, spawning entities

[33mcommit 6ed51c23556a3151f94f49c220cb2f909d211ded[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Apr 15 00:16:42 2021 +0000

    add new ci job for examples to bors (#1928)
    
    followup on https://github.com/bevyengine/bevy/pull/1826#issuecomment-819874735: adding the new job to Bors

[33mcommit 22314923d9bba5996e1c7b63b4a5c3eb61ff5528[m
Author: Yoh Deadfall <yoh.deadfall@hotmail.com>
Date:   Thu Apr 15 00:16:40 2021 +0000

    Angle bracket annotated types to support generics (#1919)
    
    Fixes #1873. Types should be enclosed in angular brackets to avoid ambiquity and to correctly resolve associated functions.

[33mcommit 490a9575424b3f15c1d82be47cdf82ac4470bdfc[m
Author: Richard Tjerngren <git@richodemus.com>
Date:   Thu Apr 15 00:16:39 2021 +0000

    Document Query.single() (#1915)

[33mcommit 92e543d51d7598fb0a65ddcca1e0a5055cd068ec[m
Author: Alex.F <gfreezy@gmail.com>
Date:   Thu Apr 15 00:16:37 2021 +0000

    `-Csplit-debuginfo=unpacked` is default on nightly (#1913)
    
    https://github.com/rust-lang/cargo/pull/9298

[33mcommit 55d6c2c34acfef5ffe8133416227c18f5d6d0e67[m
Author: bg <blamelessgames@heinousjay.com>
Date:   Wed Apr 14 23:58:29 2021 +0000

    fixing compilation error on macos aarch64 (#1905)
    
    just so

[33mcommit a137df7d578777d8300c3532786b67fd6a4ca79f[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Wed Apr 14 23:58:27 2021 +0000

    Fix SytemParam handling of Commands (#1899)
    
    Fixes https://github.com/bevyengine/bevy/issues/1896

[33mcommit e0b52079daeec08e5d349d686e217c8ba11c1f64[m
Author: TehPers <tehperz@gmail.com>
Date:   Wed Apr 14 23:58:25 2021 +0000

    Implement RenderResource for Box<T> (#1893)
    
    Allows render resources to move data to the heap by boxing them. I did this as a workaround to #1892, but it seems like it'd be useful regardless. If not, feel free to close this PR.

[33mcommit d8392e7a3ead6ddcedc08982d7e91b6f63f7cfb1[m
Author: Denis Laprise <git@2ni.net>
Date:   Wed Apr 14 23:39:58 2021 +0000

    Add a UV sphere implementation (#1887)
    
    Added a UV sphere implementation

[33mcommit ad546a9502f023030fb9aad43021c89ebafcfc2e[m
Author: Philipp Mildenberger <philipp@mildenberger.me>
Date:   Wed Apr 14 23:39:57 2021 +0000

    Fix pbr shader compiliation error, `#version` has to be in the first line (#1884)
    
    I've had problems with compiling and running the pbr example:
    
    ```
    thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Compilation("glslang_shader_preprocess:\nInfo log:\nERROR: 0:40: \'#version\' : must occur first in shader \nERROR: 0:40: \'#version\' : bad profile name; use es, core, or compatibility \nERROR: 0:40: \'#version\' : bad tokens following profile -- expected newline \nERROR: 3 compilation errors.  No code generated.\n\n\nDebug log:\n\n")', crates/bevy_render/src/pipeline/pipeline_compiler.rs:161:22
    ```
    
    I've checked each shader, and only one shader hasn't had `#version` in the first line.
    
    This change fixed my issue.

[33mcommit 57e3d4f1c25a452564e3ed0375c1aa66329b97a1[m
Author: follower <follower@rancidbacon.com>
Date:   Wed Apr 14 23:39:56 2021 +0000

    Fix the left/right movement direction in state example. (#1879)
    
    Direction of movement was reversed, previously.
    
    (i.e. Left arrow key moved sprite to the right; Right arrow key moved sprite to the left.)
    
    This PR changes the code to now be consistent with, for example, the breakout example: https://github.com/bevyengine/bevy/blob/81b53d15d4e038261182b8d7c8f65f9a3641fd2d/examples/game/breakout.rs#L184-L190
    
    i.e. AFAICT it's not an issue with the keycode being different/wrong.

[33mcommit 294feeedc073f02cfd13f31dfb063202450ea5ce[m
Author: aloucks <aloucks@cofront.net>
Date:   Wed Apr 14 23:21:53 2021 +0000

    Add additional vertex formats (#1878)
    
    - `Short2`
    - `Short2Norm`
    - `Ushort2`
    - `Ushort2Norm`
    - `Short4`
    - `Short4Norm`
    - `Ushort4`
    - `Ushort4Norm`
    - `Char2`
    - `Char2Norm`
    - `Uchar2`
    - `Uchar2Norm`
    - `Char4`
    - `Char4Norm`
    - `Uchar4`

[33mcommit c86d490a2007420296ddb321cd3389c2d13d7325[m
Author: therealstork <x.arthur.welch@gmail.com>
Date:   Wed Apr 14 22:52:43 2021 +0000

    More detailed errors when resource not found (#1864)
    
    Fixes #1846
    
    Got scared of the other "Requested resource does not exist" error at line 395 in `system_param.rs`, under `impl<'a, T: Component> SystemParamFetch<'a> for ResMutState<T> {`. Someone with better knowledge of the code might be able to go in and improve that one.

[33mcommit 8aa22ba4776fdd88821e4453a4a28d804ac21e89[m
Author: Yoh Deadfall <yoh.deadfall@hotmail.com>
Date:   Wed Apr 14 22:38:04 2021 +0000

    Removed frame rate updates from fixed step example (#1850)
    
    Fixes #1751.
    
    Output before:
    
    ```
    ...
    update: 0.016478100000000495
    update: 0.01955749999999945
    fixed_update: 2.0052284
      overstep_percentage: 0.00946374999999966
    update: 0.013902800000000326
    update: 0.02283240000000042
    ...
    ```
    
    Output after:
    
    ```
    ...
    fixed_update: 2.0053731
      overstep_percentage: 0.0031439500000001175
    fixed_update: 1.9976363
      overstep_percentage: 0.0019621000000002997
    fixed_update: 2.0069121999999995
      overstep_percentage: 0.005418200000000262
    ...
    ```

[33mcommit deb9f23667ee53ec69404950aad129119258b8d2[m
Author: TehPers <tehperz@gmail.com>
Date:   Wed Apr 14 22:20:25 2021 +0000

    Implement Byteable and RenderResource for [T; N] (#1872)
    
    Implements `Byteable` and `RenderResource` for any array containing `Byteable` elements. This allows `RenderResources` to be implemented on structs with arbitrarily-sized arrays, among other things:
    
    ```rust
    #[derive(RenderResources, TypeUuid)]
    #[uuid = "2733ff34-8f95-459f-bf04-3274e686ac5f"]
    struct Foo {
        buffer: [i32; 256],
    }
    ```

[33mcommit df3f40afd4b419344117cc76a31981b955d6a208[m
Author: Patrik Buhring <patrikbuhring@gmail.com>
Date:   Wed Apr 14 22:20:24 2021 +0000

    Fix IcoSphere UV coordinates (#1871)
    
    Changes made:
    - Swap Y/Z when calculating UV coordinates
    - Correct mapping in the UV coordinates
    - Fix typo in Azimuth

[33mcommit b80814681a530cf79fd818590f26ff47d8ee98c3[m
Author: Saverio Miroddi <saverio.pub2@gmail.com>
Date:   Wed Apr 14 22:02:52 2021 +0000

    Add g++ to the Ubuntu dependencies (#1874)
    
    The g++ package may not be preinstalled.
    
    Also, replaced the mention of "fast" compiles, with generic instructions about how to install clang; this is because on my test system, clang didn't make any difference, and it's likely not to do any in general, as it is a relatively small part of the build.
    
    Closes #1294.

[33mcommit d868d07d0bce1b57965928577426c877a689e069[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Apr 14 21:40:36 2021 +0000

    run some examples on CI using swiftshader (#1826)
    
    From suggestion from Godot workflows: https://github.com/bevyengine/bevy/issues/1730#issuecomment-810321110
    
    * Add a feature `bevy_debug` that will make Bevy read a debug config file to setup some debug systems
      * Currently, only one that will exit after x frames
      * Could add option to dump screen to image file once that's possible
    * Add a job in CI workflow that will run a few examples using [`swiftshader`](https://github.com/google/swiftshader)
      * This job takes around 13 minutes, so doesn't add to global CI duration
    
    |example|number of frames|duration|
    |-|-|-|
    |`alien_cake_addict`|300|1:50|
    |`breakout`|1800|0:44|
    |`contributors`|1800|0:43|
    |`load_gltf`|300|2:37|
    |`scene`|1800|0:44|

[33mcommit d119c1ce14da59089a65373d59715a41d05251ad[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Tue Apr 13 21:30:32 2021 +0000

    gltf-loader: support data url for images (#1828)
    
    This allows the `glTF-Embedded` variants in the [sample models](https://github.com/KhronosGroup/glTF-Sample-Models/) to be used.
    The data url format is relatively small, so I didn't include a crate like [docs.rs/data-url](https://docs.rs/data-url/0.1.0/data_url/).
    
    Also fixes the 'Box With Spaces' model as URIs are now percent-decoded.
    
    cc #1802

[33mcommit 04a37f722a2d6ce3b6559cc6ab7bbd69d3dd42ef[m
Author: Yoh Deadfall <yoh.deadfall@hotmail.com>
Date:   Tue Apr 13 20:36:37 2021 +0000

    Moved events to ECS (#1823)
    
    Fixes #1809. It makes it also possible to use `derive` for `SystemParam` inside ECS and avoid manual implementation. An alternative solution to macro changes is to use `use crate as bevy_ecs;` in `event.rs`.

[33mcommit 01142a137ea05472076ffa82b5d14f7a3b546bec[m
Author: Aaron Winter <winter.aaron93@gmail.com>
Date:   Tue Apr 13 20:18:56 2021 +0000

    Many Sprites Example Fix (#1897)
    
    This example is supposed to use frustum culling, but doesn't. :P
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 203c7c1aca35aec13d55d18353cb5b586a0d28f2[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Tue Apr 13 20:18:54 2021 +0000

    Issue template for documentation improvements (#1732)
    
    The existing issue templates don't fit well for "the docs are not very good" and are too high friction.
    
    This is intended as a very-low friction tool to provide the basis for more thorough docs PRs.

[33mcommit 50df6b61f21bf38e70e9fe5db95665c83ef57c94[m
Author: follower <follower@rancidbacon.com>
Date:   Tue Apr 13 20:02:20 2021 +0000

    Typo fix: "wit" -> "with". (#1876)

[33mcommit dae835705765a58bcab07b551883011123278d48[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Apr 13 17:18:47 2021 +0000

    markdown lint on CHANGELOG.md and examples/READE.md (#1906)
    
    new lints after #1783, fixes current CI break

[33mcommit 7342d463b8b7eb32a1392e23b014d214284c4ed7[m
Author: Jonas Matser <github@jonasmatser.nl>
Date:   Tue Apr 13 03:31:29 2021 +0000

    Use a sorted Map for vertex buffer attributes (#1796)
    
    The `VertexBufferLayout` returned by `crates\bevy_render\src\mesh\mesh.rs:308` was unstable, because `HashMap.iter()` has a random order. This caused the pipeline_compiler to wrongly consider a specialization to be different (`crates\bevy_render\src\pipeline\pipeline_compiler.rs:123`), causing each mesh changed event to potentially result in a different `PipelineSpecialization`. This in turn caused `Draw` to emit a `set_pipeline` much more often than needed.
    
    This fix shaves off a `BindPipeline` and two `BindDescriptorSets` (for the Camera and for global renderresources) for every mesh after the first that can now use the same specialization, where it didn't before (which was random).
    
    `StableHashMap` was not a good replacement, because it isn't `Clone`, so instead I replaced it with a `BTreeMap` which is OK in this instance, because there shouldn't be many insertions on `Mesh.attributes` after the mesh is created.

[33mcommit 4c1099a77ffa1a38df6b4e5195c556557b68b7e9[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Apr 13 03:13:48 2021 +0000

    add documentation on `Input` (#1781)
    
    related to #1700
    
    This PR:
    * documents all methods on `Input<T>`
    * adds documentation on the struct about how to use it, and how to implement it for a new input type
    * renames method `update` to a easier to understand `clear`
    * adds two methods to check for state and clear it after, allowing easier use in the case of #1700
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 9e55d8dbb46c8aa8da38e46d84c20c55aa434a22[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Tue Apr 13 02:56:30 2021 +0000

    Error message improvements for shader compilation/gltf loading (#1786)
    
    - prints glsl compile error message in multiple lines instead of `thread 'main' panicked at 'called Result::unwrap() on an Err value: Compilation("glslang_shader_parse:\nInfo log:\nERROR: 0:335: \'assign\' :  l-value required \"anon@7\" (can\'t modify a uniform)\nERROR: 0:335: \'\' : compilation terminated \nERROR: 2 compilation errors.  No code generated.\n\n\nDebug log:\n\n")', crates/bevy_render/src/pipeline/pipeline_compiler.rs:161:22`
    - makes gltf error messages have more context
    
    New error:
    ```rust
    thread 'Compute Task Pool (5)' panicked at 'Shader compilation error:
    glslang_shader_parse:
    Info log:
    ERROR: 0:12: 'assign' :  l-value required "anon@1" (can't modify a uniform)
    ERROR: 0:12: '' : compilation terminated
    ERROR: 2 compilation errors.  No code generated.
    ', crates/bevy_render/src/pipeline/pipeline_compiler.rs:364:5
    ```
    
    
    These changes are a bit unrelated. I can open separate PRs if someone wants that.

[33mcommit 73c8e9a5961ef71af86d5e90757ccdc98b7fa51c[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Apr 13 02:56:29 2021 +0000

    Bump github/super-linter from v3.15.2 to v3.15.5 (#1783)
    
    Bumps [github/super-linter](https://github.com/github/super-linter) from v3.15.2 to v3.15.5.
    <details>
    <summary>Release notes</summary>
    <p><em>Sourced from <a href="https://github.com/github/super-linter/releases">github/super-linter's releases</a>.</em></p>
    <blockquote>
    <h2>Release v3.15.5</h2>
    <p>No release notes provided.</p>
    <h2>Release v3.15.3</h2>
    <h2>Changelog</h2>
    <ul>
    <li>Updated Deployment scripts</li>
    <li>Updated Security Scripts</li>
    <li>Support <code>.env.*</code> for various <code>.env</code> files</li>
    </ul>
    <h2>Bugs</h2>
    <ul>
    <li>Various security bumps</li>
    </ul>
    </blockquote>
    </details>
    <details>
    <summary>Commits</summary>
    <ul>
    <li><a href="https://github.com/github/super-linter/commit/286abe2b0349da9c074c0fed8e8ec0a86cd13279"><code>286abe2</code></a> Updating action.yml with new release version</li>
    <li><a href="https://github.com/github/super-linter/commit/1d0751b749663e61a6baa2ff86ae8e957b6ecbae"><code>1d0751b</code></a> cleanup (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1378">#1378</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/be0e288e1eb8b6295c661692c95d6b912907334e"><code>be0e288</code></a> Bump cljkondo/clj-kondo from 2021.03.03-alpine to 2021.03.22-alpine (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1379">#1379</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/8ff48a47d3446575d60ecde8df1e4b2f866bfaa2"><code>8ff48a4</code></a> Bump isort from 5.7.0 to 5.8.0 in /dependencies (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1382">#1382</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/55cc19dbbcb5fbb4d270bdddbd567ee9c7fe6413"><code>55cc19d</code></a> Bump immer from 8.0.3 to 9.0.1 in /dependencies (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1381">#1381</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/a68b522bc18d1df3ef7f8604b01f73cb2fe22bd1"><code>a68b522</code></a> Bump sql-lint from 0.0.15 to 0.0.16 in /dependencies (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1380">#1380</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/701fd3b339ccf0b81596950adba6306c6e4164f0"><code>701fd3b</code></a> Adding a11y eslint to npm dependencies (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1375">#1375</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/4016de6222c95f0175927d6a0bbe06e87f33bddb"><code>4016de6</code></a> Bump immer from 8.0.2 to 8.0.3 in /dependencies (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1376">#1376</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/43e054faf75478c49505b382dd972c2c6b18cb05"><code>43e054f</code></a> Bump immer from 8.0.1 to 8.0.2 in /dependencies (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1374">#1374</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/46d76783c7c682ed91137e01cf91c556016bec56"><code>46d7678</code></a> Bump eslint-plugin-jest from 24.3.1 to 24.3.2 in /dependencies (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1372">#1372</a>)</li>
    <li>Additional commits viewable in <a href="https://github.com/github/super-linter/compare/v3.15.2...286abe2b0349da9c074c0fed8e8ec0a86cd13279">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit 5bccb67aa32d7802620d99fdcf2ea03917c8d115[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Apr 13 02:39:50 2021 +0000

    Remove unused material (#1898)
    
    This doesn't do anything and complicates the example.

[33mcommit 5c4f3554f9db400cee6f5de67d06977ce0e99a97[m
Author: Jonas Matser <github@jonasmatser.nl>
Date:   Tue Apr 13 02:21:24 2021 +0000

    Rename Light => PointLight and remove unused properties (#1778)
    
    After an inquiry on Reddit about support for Directional Lights and the unused properties on Light, I wanted to clean it up, to hopefully make it ever so slightly more clear for anyone wanting to add additional light types.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 8f1eaa6db508ac86158280d1c57affe3a9beb875[m
Author: Julian Heinken <Julian.Heinken@haw-hamburg.de>
Date:   Tue Apr 13 01:47:25 2021 +0000

    glTF: added color attribute support (#1775)

[33mcommit 0fce6f0406fc0aacc824f2c32059c121360438f5[m
Author: MinerSebas <scherthan_sebastian@web.de>
Date:   Tue Apr 13 01:28:14 2021 +0000

     Override size_hint for all Iterators and add ExactSizeIterator where applicable (#1734)
    
    After #1697 I looked at all other Iterators from Bevy and added overrides for `size_hint` where it wasn't done.
    Also implemented `ExactSizeIterator` where applicable.

[33mcommit b060e16f62f5269e2a62c7579013fb157c881f94[m
Author: Guim Caballero <guim@caballerocoll.com>
Date:   Mon Apr 12 21:53:05 2021 +0000

    Add synonyms for transform relative vectors (#1667)
    
    Fixes #1663.
    
    I think the directions are correct (same as [here](https://docs.godotengine.org/en/stable/classes/class_vector3.html?highlight=forward#constants)), but please double check because I might have mixed them up.
    
    Co-authored-by: guimcaballero <guim.caballero@gmail.com>
    Co-authored-by: Guim Caballero <guim.caballero@gmail.com>

[33mcommit 6ce57c85d64f3c0c973faca2926e9b6dd3f0dc4b[m
Author: Alessandro Re <alessandro@standard.ai>
Date:   Mon Apr 12 19:47:12 2021 +0000

    Example on how to draw using custom mesh and shader (#1565)
    
    I was looking into "lower level" rendering and I saw no example on how to do that. Yet, I think it's something relevant to show, so I set up a simple example on how to do that. I hope it's welcome.
    
    I'm not confident about the code and a review is definitely nice to have, especially because there are a few things that are not great.
    Specifically, I think it would be nice to see how to render with a completely custom set of attributes (position and color, in this case), but I couldn't manage to get it working without normals and uv.
    
    It makes sense if bevy Meshes need these two attributes, but I'm not sure about it.
    
    Co-authored-by: Alessandro Re <ale@ale-re.net>
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 9186c4c8d2a5d8186fe83633a4198779dbb9487d[m
Author: Mike <mike.hsu@gmail.com>
Date:   Mon Apr 12 19:29:08 2021 +0000

    Change breakout to use fixed timestamp (#1541)
    
    This PR fixes https://github.com/bevyengine/bevy/issues/1240, where the ball is escaping the playing field at low framerates.  I did this by moving the movement and physics system into a Fixed Timestep system set and changing the movement steps to a constant.  So we lose the example use of delta_time for changing position, but gain a use of FixedTimestep.
    
    If this is accepted https://github.com/bevyengine/bevy-website/pull/102 will need to be updated to match.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 60f286d56ddbfefd1deb6fd8cd347e194e9fcfca[m
Author: Nathan Stocks <cleancut@github.com>
Date:   Mon Apr 12 19:11:40 2021 +0000

    Update linters.md with info about `cargo ci` xtask (#1507)
    
    Update `linters.md` with info about `cargo ci` xtask as per https://github.com/bevyengine/bevy/pull/1463#pullrequestreview-593747890
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit ed36c21e7e3cb76914e9e008b10e3efd8d36045c[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Sat Apr 10 16:33:35 2021 +0000

    fix 'attempted to subtract with overflow' for State::inactives (#1668)

[33mcommit 6a4051be3abcd7a9bfa513e742c43fa9a846f6fd[m
Author: bjorn3 <bjorn3@users.noreply.github.com>
Date:   Sat Apr 10 16:17:32 2021 +0000

    Make some asset loading functions monomorphic (#1861)
    
    This reduces the size of executables when using bevy as dylib by
    ensuring that they get codegened in bevy_assets instead of the game
    itself. This by extension avoids pulling in parts of bevy_tasks and
    async_task.
    
    Before this change the breakout example was 923k big after this change
    it is only 775k big for cg_clif. For cg_llvm in release mode breakout
    shrinks from 356k to 316k. For cg_llvm in debug mode breakout shrinks
    from 3814k to 3057k.

[33mcommit 100e516014d803392a81a4e001d3e6ddf5cca414[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Thu Apr 8 21:33:46 2021 +0000

    Release Checklist (#1834)
    
    To help make the process easier and more fool-proof, aid delegation and document institutional knowledge.
    
    I'm not entirely sure where this belongs.

[33mcommit 9ac908893382da8c5388743fbcc376dea07eff4f[m
Author: Grindv1k <torstein.grindvik@gmail.com>
Date:   Thu Apr 8 17:42:15 2021 +0000

    Remove leftover pbr_textures example (#1845)
    
    `examples/3d/pbr_textures.rs` was missing in both `Cargo.toml` and in the examples
    `README.md`.

[33mcommit bc13d11c78c0593e6bce61b65ec3bfc1da7842df[m
Author: r00ster <r00ster91@protonmail.com>
Date:   Tue Apr 6 21:05:08 2021 +0000

    Update old docs mentioning Camera2dBundle (#1836)
    
    This replaces some outdated mentions of the `Camera2dBundle` that is removed now with 0.5.

[33mcommit 97d8e4e1793ede3df8c77ed44736e800b38ff7a4[m[33m ([m[1;33mtag: v0.5.0[m[33m)[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Apr 6 18:48:48 2021 +0000

    Release 0.5.0 (#1835)

[33mcommit aaf204cbac66c6e7b8d4bb1d00010eba96a43634[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Tue Apr 6 17:09:28 2021 +0000

    remove active camera entity when despawned (#1825)
    
    fixes #1452
    
    This should probably be in 0.5, as the previous workaround isn't possible after https://github.com/bevyengine/bevy/commit/dd4a19632928556b88ffd53a9f8c3f615fce0095 because the hashmap is now private.

[33mcommit 3118ebdfd3215e171e57f8b9a5ef8793e6d1af94[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Apr 6 09:58:34 2021 -0700

    update changelog (#1829)

[33mcommit 3e285d5c0bd49cf1aff11cf3848270bafdd48646[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Apr 3 23:30:30 2021 +0000

    allow deriving bundle for struct with generics with where clause (#1811)
    
    fixes #1777
    
    Seems the `_where_clause` parameter to lost somewhere, adding it back

[33mcommit 9098df3034f6693aee480af01601c26602993b48[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Apr 3 23:30:28 2021 +0000

    make pbr shader std140 compatible (#1798)
    
    In shaders, `vec3` should be avoided for `std140` layout, as they take the size of a `vec4` and won't support manual padding by adding an additional `float`.
    
    This change is needed for 3D to work in WebGL2. With it, I get PBR to render
    <img width="1407" alt="Screenshot 2021-04-02 at 02 57 14" src="https://user-images.githubusercontent.com/8672791/113368551-5a3c2780-935f-11eb-8c8d-e9ba65b5ee98.png">
    
    Without it, nothing renders... @cart Could this be considered for 0.5 release?
    
    Also, I learned shaders 2 days ago, so don't hesitate to correct any issue or misunderstanding I may have
    
    bevy_webgl2 PR in progress for Bevy 0.5 is here if you want to test: https://github.com/rparrett/bevy_webgl2/pull/1

[33mcommit 276a81cc302be401942d9f75d853358034eab491[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Apr 3 23:13:54 2021 +0000

    allow up to 16 parameters for systems (#1805)
    
    fixes #1772
    
    1st commit: the limit was at 11 as the macro was not using a range including the upper end. I changed that as it feels the purpose of the macro is clearer that way.
    
    2nd commit: as suggested in the `// TODO`, I added a `Config` trait to go to 16 elements tuples. This means that if someone has a custom system parameter with a config that is not a tuple or an `Option`, they will have to implement `Config` for it instead of the standard `Default`.

[33mcommit 1df3b74d3854a39aebd84e5a4c462b547519ff3a[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Sat Apr 3 22:51:52 2021 +0000

    fix attempt to modify emissive uniform (#1771)
    
    Previously loading the boom box gltf file panic'd with `ERROR: 0:335: 'assign' :  l-value required "anon@7" (can't modify a uniform)`

[33mcommit f520a341d5737600dbf89015b7729109d67cf041[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Apr 1 02:24:42 2021 +0000

    flip resource scope order (#1793)
    
    I think [collection, thing_removed_from_collection] is a more natural order than [thing_removed_from_collection, collection]. Just a small tweak that I think we should include in 0.5.

[33mcommit b657a9b39fac53f44ce9a2059e9f81696c8e8643[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Wed Mar 31 20:24:04 2021 +0000

    Add on_in_stack_update to SystemSet (#1792)

[33mcommit d6bc414bf063441cac61f88debbb98a277a42a4d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Mar 30 21:21:47 2021 +0000

    check for duplicate archetypes in QueryState::new_archetype (#1789)
    
    Fixes #1788
    
    See discussion in that issue for details.

[33mcommit 9193fc57d04fb492ac2b60cd75445930423f4425[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Mar 30 18:34:53 2021 +0000

    CI break: fix syn version (#1787)
    
    This is a temporary fix for the CI (and anyone building for wasm) break until `wgpu` can update
    
    * `syn` released a version that fixed a bug in how they parsed attributes
    * `wasm_bindgen` released a version that uses that fix
    * but we're stuck with old `wasm_bindgen` as `wgpu` uses a fixed version: https://github.com/gfx-rs/wgpu-rs/blob/c5ee9cd98310aee66fb49bc98f4f65590304e4aa/Cargo.toml#L118
    
    So, to fix this, either we update everyone to latest version of `wasm_bindgen` or we keep using old version of `syn`.
    
    On Bevy side, it should be faster to fix the version of `syn` to one that works.
    
    More details: https://github.com/rustwasm/wasm-bindgen/pull/2510 & https://github.com/rustwasm/wasm-bindgen/issues/2508

[33mcommit 94c41840680afd414acb1195889bb88588901100[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Mar 27 03:03:47 2021 +0000

    Text responds to scale factor changes (#1769)
    
    Fixes #1768
    
    If the scale factor changes, queue up all text to be drawn instead of just changed text.

[33mcommit 9a78addff0b6fed8faf514916bab5a8aa221cc73[m
Author: Jonas Matser <github@jonasmatser.nl>
Date:   Fri Mar 26 21:00:34 2021 +0000

    Add PBR textures (#1632)
    
    This PR adds normal maps on top of PBR #1554. Once that PR lands, the changes should look simpler.
    
    Edit: Turned out to be so little extra work, I added metallic/roughness texture too. And occlusion and emissive.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 0c374df71264c386227fabed919d2fb33b567523[m
Author: davier <bricedavier@gmail.com>
Date:   Fri Mar 26 20:03:12 2021 +0000

    Add `insert_children` and `push_children` to EntityMut (#1728)
    
    The only API to add a parent/child relationship between existing entities is through commands, there is no easy way to do it from `World`. Manually inserting the components is not completely possible since `PreviousParent` has no public constructor.
    
    This PR adds two methods to set entities as children of an `EntityMut`: `insert_children` and `push_children`. ~~The API is similar to the one on `Commands`, except that the parent is the `EntityMut`.~~ The API is the same as in #1703.
    However, the `Parent` and `Children` components are defined in `bevy_transform` which depends on `bevy_ecs`, while `EntityMut` is defined in `bevy_ecs`, so the methods are added to the `BuildWorldChildren` trait instead.
    If #1545 is merged this should be fixed too.
    
    I'm aware cart was experimenting with entity hierarchies, but unless it's a coming soon this PR would be useful to have meanwhile.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit d90d19f1c704acf8ec69ec6f6dd7c9e2683ea982[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Mar 26 18:47:47 2021 +0000

    gltf: load normal and occlusion as linear textures (#1762)
    
    Load textures from gltf as linear when needed.
    
    This is for #1632, but can be done independently and won't have any visible impact before.
    
    * during iteration over materials, register textures that need to be loaded as linear
    * during iteration over textures
      * directly load bytes from external files instead of adding them as dependencies in the load context
      * configure the texture the same way for buffered and external textures
      * if the texture is linear rgb, set as linear rgb

[33mcommit 80bd378aa005877bb4b05d80ac6638a0e87da43d[m
Author: Ixentus <alexvermaat@gmail.com>
Date:   Fri Mar 26 18:30:28 2021 +0000

    Fix tiny state docs inconsistency (#1764)
    
    @TheRawMeatball

[33mcommit 7a511394ac6c4f90b5398ab6333f1bd4fd665613[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Mar 26 04:15:07 2021 +0000

    Add `register_component` to AppBuilder and improve error message (#1750)

[33mcommit 500d7469e7405ffb95bac320d8a2891fd12a697e[m
Author: Alexander Sepity <alexander.sepity@gmail.com>
Date:   Fri Mar 26 00:31:58 2021 +0000

    Fixed criteria-less systems being re-ran unnecessarily (#1754)
    
    Fixes #1753.
    
    The problem was introduced while reworking the logic around stages' own criteria. Before #1675 they used to be stored and processed inline with the systems' criteria, and systems without criteria used that of their stage. After, criteria-less systems think they should run, always. This PR more or less restores previous behavior; a less cludge solution can wait until after 0.5 - ideally, until stageless.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit bf053218bf394abc27897bd90aa338bb3cd580f9[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Mar 25 22:05:28 2021 +0000

    Disable frustum culling and add warning (#1761)
    
    Frustum culling has some pretty major gaps right now (such as not supporting sprite transform scaling and not taking into account projections). It should be disabled by default until it provides a solid experience across all bevy use cases.

[33mcommit ad6004698232b75e505955fce037d51e8826da53[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Thu Mar 25 20:48:18 2021 +0000

    fix clippy lints (#1756)

[33mcommit 1d7196da4fff00bbc15fe75a04849de915f587d5[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Mar 25 06:12:14 2021 +0000

    Add state app builder docs (#1746)
    
    This is intended to help protect users against #1671. It doesn't resolve the issue, but I think its a good stop-gap solution for 0.5. A "full" fix would be very involved (and maybe not worth the added complexity).

[33mcommit 80961d1bd07d2bf6d8de509fdfd4cf856032a3bc[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Mar 25 05:56:00 2021 +0000

    Fix sparse insert (#1748)
    
    Removing the checks on this line https://github.com/bevyengine/bevy/blob/main/crates/bevy_sprite/src/frustum_culling.rs#L64 and running the "many_sprites" example revealed two corner case bugs in bevy_ecs. The first, a simple and honest missed line introduced in #1471. The other, an insidious monster that has been there since the ECS v2 rewrite, just waiting for the time to strike:
    
    1. #1471 accidentally removed the "insert" line for sparse set components with the "mutated" bundle state. Re-adding it fixes the problem. I did a slight refactor here to make the implementation simpler and remove a branch.
    2. The other issue is nastier. ECS v2 added an "archetype graph". When determining what components were added/mutated during an archetype change, we read the FromBundle edge (which encodes this state) on the "new" archetype.  The problem is that unlike "add edges" which are guaranteed to be unique for a given ("graph node", "bundle id") pair, FromBundle edges are not necessarily unique:
    
    ```rust
    // OLD_ARCHETYPE -> NEW_ARCHETYPE
    
    // [] -> [usize]
    e.insert(2usize);
    // [usize] -> [usize, i32]
    e.insert(1i32);
    // [usize, i32] -> [usize, i32]
    e.insert(1i32);
    // [usize, i32] -> [usize]
    e.remove::<i32>();
    // [usize] -> [usize, i32]
    e.insert(1i32);
    ```
    
    Note that the second `e.insert(1i32)` command has a different "archetype graph edge" than the first, but they both lead to the same "new archetype".
    
    The fix here is simple: just remove FromBundle edges because they are broken and store the information in the "add edges", which are guaranteed to be unique.
    
    FromBundle edges were added to cut down on the number of archetype accesses / make the archetype access patterns nicer. But benching this change resulted in no significant perf changes and the addition of get_2_mut() for archetypes resolves the access pattern issue.

[33mcommit 78edec2e450b0bfed5493e4351a0fb180a71e204[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Thu Mar 25 03:28:40 2021 +0000

    Change State::*_next to *_replace, add proper next (#1676)
    
    In the current impl, next clears out the entire stack and replaces it with a new state. This PR moves this functionality into a replace method, and changes the behavior of next to only change the top state.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 621cba4864fd5d2c0962151b126769eff45797fd[m
Author: Aaron Winter <winter.aaron93@gmail.com>
Date:   Thu Mar 25 01:46:22 2021 +0000

    Example for 2D Frustum Culling (#1503)
    
    This adds a new project for showing off Frustum Culling.
    (Master runs this at sub 1 FPS while with the frustum culling it runs at 144 FPS on my system)
    
    Short clip of the project running:
    https://streamable.com/vvzh2u

[33mcommit b65ec82d461929d27da41418983249774b1f9951[m
Author: Aaron Winter <winter.aaron93@gmail.com>
Date:   Wed Mar 24 21:29:53 2021 +0000

    Frustum Culling (for Sprites) (#1492)
    
    This PR adds two systems to the sprite module that culls Sprites and AtlasSprites that are not within the camera's view.
    This is achieved by removing / adding a new  `Viewable` Component dynamically.
    
    Some of the render queries now use a `With<Viewable>` filter to only process the sprites that are actually on screen, which improves performance drastically for scene swith a large amount of sprites off-screen.
    
    https://streamable.com/vvzh2u
    
    This scene shows a map with a 320x320 tiles, with a grid size of 64p.
    This is exactly 102400 Sprites in the entire scene.
    
    Without this PR, this scene runs with 1 to 4 FPS.
    
    With this PR..
    .. at 720p, there are around 600 visible sprites and runs at ~215 FPS
    .. at 1440p there are around 2000 visible sprites and runs at ~135 FPS
    
    The Systems this PR adds take around 1.2ms (with 100K+ sprites in the scene)
    
    Note:
    This is only implemented for Sprites and AtlasTextureSprites.
    There is no culling for 3D in this PR.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit d3e020a1e7ed035b59b2f91833d86e252ab22ada[m
Author: Alexander Sepity <alexander.sepity@gmail.com>
Date:   Wed Mar 24 20:11:55 2021 +0000

    System sets and run criteria v2 (#1675)
    
    I'm opening this prematurely; consider this an RFC that predates RFCs and therefore not super-RFC-like.
    
    This PR does two "big" things: decouple run criteria from system sets, reimagine system sets as weapons of mass system description.
    
    ### What it lets us do:
    
    * Reuse run criteria within a stage.
    * Pipe output of one run criteria as input to another.
    * Assign labels, dependencies, run criteria, and ambiguity sets to many systems at the same time.
    
    ### Things already done:
    * Decoupled run criteria from system sets.
    * Mass system description superpowers to `SystemSet`.
    * Implemented `RunCriteriaDescriptor`.
    * Removed `VirtualSystemSet`.
    * Centralized all run criteria of `SystemStage`.
    * Extended system descriptors with per-system run criteria.
    * `.before()` and `.after()` for run criteria.
    * Explicit order between state driver and related run criteria. Fixes #1672.
    * Opt-in run criteria deduplication; default behavior is to panic.
    * Labels (not exposed) for state run criteria; state run criteria are deduplicated.
    
    ### API issues that need discussion:
    
    * [`FixedTimestep::step(1.0).label("my label")`](https://github.com/Ratysz/bevy/blob/eaccf857cdaeb5a5632b6e75feab5c1ad6267d1d/crates/bevy_ecs/src/schedule/run_criteria.rs#L120-L122) and [`FixedTimestep::step(1.0).with_label("my label")`](https://github.com/Ratysz/bevy/blob/eaccf857cdaeb5a5632b6e75feab5c1ad6267d1d/crates/bevy_core/src/time/fixed_timestep.rs#L86-L89) are both valid but do very different things.
    
    ---
    
    I will try to maintain this post up-to-date as things change. Do check the diffs in "edited" thingy from time to time.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 10ef750899f19faf7edd7edc356da12e7a7abb82[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Wed Mar 24 01:00:13 2021 +0000

    Expose resource change detection on World (#1715)

[33mcommit 1c573de4f94c0d90685ee34a4c519813c81a8ef9[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Wed Mar 24 00:39:54 2021 +0000

    Fix panic in multiple_windows example (#1737)
    
    Fixes #1736
    
    There seemed to be an obvious transcription error where `setup_pipeline` was being called during `on_update` of `AppState::CreateWindow` instead of `AppState::Setup`.
    
    However, the example still panicked after fixing that.
    
    I'm not sure if there's some intended or unintended change in event processing during state transitions or something, but this PR make the example work again.
    
    Cleaned up an unused `Stage` label while I was in there.
    
    Please feel free to close this in favor of another approach.

[33mcommit 248ec1ed954477c139e9bc530f37592d89a9fb23[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Mar 24 00:21:37 2021 +0000

    update rectangle-pack to latest release (#1742)
    
    update to release of rectangle-pack  0.3.0 after #1741

[33mcommit 9c252e904a9206716db62f518f5314deeb97ddcd[m
Author: Nolan Darilek <nolan@thewordnerd.info>
Date:   Tue Mar 23 20:29:28 2021 +0000

    Add `LogPlugin`, otherwise the ambiguity detector doesn't work. (#1740)

[33mcommit 9ae56e860468aa3158a702cbcf64e511b84a4b1c[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Mar 23 19:07:33 2021 +0000

    update for rectangle-pack 0.2.1 (fix CI) (#1741)
    
    crate `rectangle-pack` just published version 0.2.1 with a breaking change: https://github.com/chinedufn/rectangle-pack/commit/c9ecd58f7a68f65a77ebabad36e3e3269f260c65
    
    I also opened an issue on their repo so that they are aware of it: https://github.com/chinedufn/rectangle-pack/issues/3

[33mcommit 47004dfcb415a049e4c6e68fdf56c26de72f51a1[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Tue Mar 23 00:41:54 2021 +0000

    Added remove_non_send to World (#1716)
    
    
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 81b53d15d4e038261182b8d7c8f65f9a3641fd2d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Mar 23 00:23:40 2021 +0000

    Make Commands and World apis consistent (#1703)
    
    Resolves #1253 #1562
    
    This makes the Commands apis consistent with World apis. This moves to a "type state" pattern (like World) where the "current entity" is stored in an `EntityCommands` builder.
    
    In general this tends to cuts down on indentation and line count. It comes at the cost of needing to type `commands` more and adding more semicolons to terminate expressions.
    
    I also added `spawn_bundle` to Commands because this is a common enough operation that I think its worth providing a shorthand.

[33mcommit 94f45586cee905a1cf96d36403f3009ff851e9dd[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Mar 22 19:07:15 2021 +0000

    alien-cake-addict example: ensure the cake doesn't spawn on the player (#1713)
    
    fixes #1707
    
    In the game, it makes sense to never spawn the cake on the player.

[33mcommit 2dd2e5e9feaf3a06697c05132a7deab764abe44d[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Mon Mar 22 18:49:26 2021 +0000

    make ComponentTicks::set_changed public (#1711)
    
    fixes #1710

[33mcommit 3dc7b685abf9a42e2809ef137b8fd7aa9f06fe02[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Mon Mar 22 18:27:52 2021 +0000

    Fix #1704 (#1705)
    
    So I think that the underlying issue is actually a system order ambiguity thing between `spawn_bonus` and `rotate_bonus`, but I'm not confident enough about `run_criteria`, `FixedTimeStep`, etc. to sort that out.

[33mcommit cd8025d0a798fa61dd58eea47cf636373eee01d1[m
Author: Jonas Matser <github@jonasmatser.nl>
Date:   Mon Mar 22 18:10:35 2021 +0000

    Remove remaining camerapos bindings (#1708)
    
    Fixes #1706
    
    @JeanMertz already solved it. I just ran all examples and tests.

[33mcommit 42924d22272fb0a38a01bab1116ad7b6f8865e8a[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Mar 22 07:06:04 2021 +0000

    Update fixedbitset requirement from 0.3 to 0.4 (#1726)
    
    Updates the requirements on [fixedbitset](https://github.com/bluss/fixedbitset) to permit the latest version.
    <details>
    <summary>Commits</summary>
    <ul>
    <li>See full diff in <a href="https://github.com/bluss/fixedbitset/commits">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit 45b2db70705da24a89426e6b6e77d603a3983025[m
Author: Jonas Matser <github@jonasmatser.nl>
Date:   Sat Mar 20 03:22:33 2021 +0000

    Rebase of existing PBR work (#1554)
    
    This is a rebase of StarArawns PBR work from #261 with IngmarBitters work from #1160 cherry-picked on top.
    
    I had to make a few minor changes to make some intermediate commits compile and the end result is not yet 100% what I expected, so there's a bit more work to do.
    
    Co-authored-by: John Mitchell <toasterthegamer@gmail.com>
    Co-authored-by: Ingmar Bitter <ingmar.bitter@gmail.com>

[33mcommit b6be8a5314e027a0b0f3ee48d04c14b52fe74676[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Mar 19 23:32:31 2021 +0000

    Fix table reserve logic (#1698)
    
    Fixes #1692
    Alternative to #1696
    
    This ensures that the capacity actually grows in increments of grow_amount, and also ensures that Table capacity is always <= column and entity vec capacity.
    
    Debug logs that describe the new logic (running the example in #1692)
    [out.txt](https://github.com/bevyengine/bevy/files/6173808/out.txt)

[33mcommit c78b76bba8def0d72b579b4a06673843f32e8532[m
Author: MinerSebas <scherthan_sebastian@web.de>
Date:   Fri Mar 19 20:52:44 2021 +0000

    Provide better size_hint for QueryIter (#1697)
    
    This PR overrides the default size_hint for QueryIter.
    This is mainly done to provide inline documentation of Issue #1686.

[33mcommit dd4a19632928556b88ffd53a9f8c3f615fce0095[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Mar 19 20:36:40 2021 +0000

    Flexible camera bindings (#1689)
    
    Alternative to #1203 and #1611
    
    Camera bindings have historically been "hacked in". They were _required_ in all shaders and only supported a single Mat4. PBR (#1554) requires the CameraView matrix, but adding this using the "hacked" method forced users to either include all possible camera data in a single binding (#1203) or include all possible bindings (#1611).
    
    This approach instead assigns each "active camera" its own RenderResourceBindings, which are populated by CameraNode. The PassNode then retrieves (and initializes) the relevant bind groups for all render pipelines used by visible entities.
    
    * Enables any number of camera bindings , including zero (with any set or binding number ... set 0 should still be used to avoid rebinds).
    * Renames Camera binding to CameraViewProj
    * Adds CameraView binding

[33mcommit 6121e5f933bfa215576a83cbed65292a498e2b52[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Fri Mar 19 17:53:26 2021 +0000

    Reliable change detection (#1471)
    
    # Problem Definition
    
    The current change tracking (via flags for both components and resources) fails to detect changes made by systems that are scheduled to run earlier in the frame than they are.
    
    This issue is discussed at length in [#68](https://github.com/bevyengine/bevy/issues/68) and [#54](https://github.com/bevyengine/bevy/issues/54).
    
    This is very much a draft PR, and contributions are welcome and needed.
    
    # Criteria
    1. Each change is detected at least once, no matter the ordering.
    2. Each change is detected at most once, no matter the ordering.
    3. Changes should be detected the same frame that they are made.
    4. Competitive ergonomics. Ideally does not require opting-in.
    5. Low CPU overhead of computation.
    6. Memory efficient. This must not increase over time, except where the number of entities / resources does.
    7. Changes should not be lost for systems that don't run.
    8. A frame needs to act as a pure function. Given the same set of entities / components it needs to produce the same end state without side-effects.
    
    **Exact** change-tracking proposals satisfy criteria 1 and 2.
    **Conservative** change-tracking proposals satisfy criteria 1 but not 2.
    **Flaky** change tracking proposals satisfy criteria 2 but not 1.
    
    # Code Base Navigation
    
    There are three types of flags:
    - `Added`: A piece of data was added to an entity / `Resources`.
    - `Mutated`: A piece of data was able to be modified, because its `DerefMut` was accessed
    - `Changed`: The bitwise OR of `Added` and `Changed`
    
    The special behavior of `ChangedRes`, with respect to the scheduler is being removed in [#1313](https://github.com/bevyengine/bevy/pull/1313) and does not need to be reproduced.
    
    `ChangedRes` and friends can be found in "bevy_ecs/core/resources/resource_query.rs".
    
    The `Flags` trait for Components can be found in "bevy_ecs/core/query.rs".
    
    `ComponentFlags` are stored in "bevy_ecs/core/archetypes.rs", defined on line 446.
    
    # Proposals
    
    **Proposal 5 was selected for implementation.**
    
    ## Proposal 0: No Change Detection
    
    The baseline, where computations are performed on everything regardless of whether it changed.
    
    **Type:** Conservative
    
    **Pros:**
    - already implemented
    - will never miss events
    - no overhead
    
    **Cons:**
    - tons of repeated work
    - doesn't allow users to avoid repeating work (or monitoring for other changes)
    
    ## Proposal 1: Earlier-This-Tick Change Detection
    
    The current approach as of Bevy 0.4. Flags are set, and then flushed at the end of each frame.
    
    **Type:** Flaky
    
    **Pros:**
    - already implemented
    - simple to understand
    - low memory overhead (2 bits per component)
    - low time overhead (clear every flag once per frame)
    
    **Cons:**
    - misses systems based on ordering
    - systems that don't run every frame miss changes
    - duplicates detection when looping
    - can lead to unresolvable circular dependencies
    
    ## Proposal 2: Two-Tick Change Detection
    
    Flags persist for two frames, using a double-buffer system identical to that used in events.
    
    A change is observed if it is found in either the current frame's list of changes or the previous frame's.
    
    **Type:** Conservative
    
    **Pros:**
    - easy to understand
    - easy to implement
    - low memory overhead (4 bits per component)
    - low time overhead (bit mask and shift every flag once per frame)
    
    **Cons:**
    - can result in a great deal of duplicated work
    - systems that don't run every frame miss changes
    - duplicates detection when looping
    
    ## Proposal 3: Last-Tick Change Detection
    
    Flags persist for two frames, using a double-buffer system identical to that used in events.
    
    A change is observed if it is found in the previous frame's list of changes.
    
    **Type:** Exact
    
    **Pros:**
    - exact
    - easy to understand
    - easy to implement
    - low memory overhead (4 bits per component)
    - low time overhead (bit mask and shift every flag once per frame)
    
    **Cons:**
    - change detection is always delayed, possibly causing painful chained delays
    - systems that don't run every frame miss changes
    - duplicates detection when looping
    
    ## Proposal 4: Flag-Doubling Change Detection
    
    Combine Proposal 2 and Proposal 3. Differentiate between `JustChanged` (current behavior) and `Changed` (Proposal 3).
    
    Pack this data into the flags according to [this implementation proposal](https://github.com/bevyengine/bevy/issues/68#issuecomment-769174804).
    
    **Type:** Flaky + Exact
    
    **Pros:**
    - allows users to acc
    - easy to implement
    - low memory overhead (4 bits per component)
    - low time overhead (bit mask and shift every flag once per frame)
    
    **Cons:**
    - users must specify the type of change detection required
    - still quite fragile to system ordering effects when using the flaky `JustChanged` form
    - cannot get immediate + exact results
    - systems that don't run every frame miss changes
    - duplicates detection when looping
    
    ## [SELECTED] Proposal 5: Generation-Counter Change Detection
    
    A global counter is increased after each system is run. Each component saves the time of last mutation, and each system saves the time of last execution. Mutation is detected when the component's counter is greater than the system's counter. Discussed [here](https://github.com/bevyengine/bevy/issues/68#issuecomment-769174804). How to handle addition detection is unsolved; the current proposal is to use the highest bit of the counter as in proposal 1.
    
    **Type:** Exact (for mutations), flaky (for additions)
    
    **Pros:**
    - low time overhead (set component counter on access, set system counter after execution)
    - robust to systems that don't run every frame
    - robust to systems that loop
    
    **Cons:**
    - moderately complex implementation
    - must be modified as systems are inserted dynamically
    - medium memory overhead (4 bytes per component + system)
    - unsolved addition detection
    
    ## Proposal 6: System-Data Change Detection
    
    For each system, track which system's changes it has seen. This approach is only worth fully designing and implementing if Proposal 5 fails in some way.
    
    **Type:** Exact
    
    **Pros:**
    - exact
    - conceptually simple
    
    **Cons:**
    - requires storing data on each system
    - implementation is complex
    - must be modified as systems are inserted dynamically
    
    ## Proposal 7: Total-Order Change Detection
    
    Discussed [here](https://github.com/bevyengine/bevy/issues/68#issuecomment-754326523). This proposal is somewhat complicated by the new scheduler, but I believe it should still be conceptually feasible. This approach is only worth fully designing and implementing if Proposal 5 fails in some way.
    
    **Type:** Exact
    
    **Pros:**
    - exact
    - efficient data storage relative to other exact proposals
    
    **Cons:**
    - requires access to the scheduler
    - complex implementation and difficulty grokking
    - must be modified as systems are inserted dynamically
    
    # Tests
    
    - We will need to verify properties 1, 2, 3, 7 and 8. Priority: 1 > 2 = 3 > 8 > 7
    - Ideally we can use identical user-facing syntax for all proposals, allowing us to re-use the same syntax for each.
    - When writing tests, we need to carefully specify order using explicit dependencies.
    - These tests will need to be duplicated for both components and resources.
    - We need to be sure to handle cases where ambiguous system orders exist.
    
    `changing_system` is always the system that makes the changes, and `detecting_system` always detects the changes.
    
    The component / resource changed will be simple boolean wrapper structs.
    
    ## Basic Added / Mutated / Changed
    
    2 x 3 design:
    - Resources vs. Components
    - Added vs. Changed vs. Mutated
    - `changing_system` runs before `detecting_system`
    - verify at the end of tick 2
    
    ## At Least Once
    
    2 x 3 design:
    - Resources vs. Components
    - Added vs. Changed vs. Mutated
    - `changing_system` runs after `detecting_system`
    - verify at the end of tick 2
    
    ## At Most Once
    
    2 x 3 design:
    - Resources vs. Components
    - Added vs. Changed vs. Mutated
    - `changing_system` runs once before `detecting_system`
    - increment a counter based on the number of changes detected
    - verify at the end of tick 2
    
    ## Fast Detection
    2 x 3 design:
    - Resources vs. Components
    - Added vs. Changed vs. Mutated
    - `changing_system` runs before `detecting_system`
    - verify at the end of tick 1
    
    ## Ambiguous System Ordering Robustness
    2 x 3 x 2 design:
    - Resources vs. Components
    - Added vs. Changed vs. Mutated
    - `changing_system` runs [before/after] `detecting_system` in tick 1
    - `changing_system` runs [after/before] `detecting_system` in tick 2
    
    ## System Pausing
    2 x 3 design:
    - Resources vs. Components
    - Added vs. Changed vs. Mutated
    - `changing_system` runs in tick 1, then is disabled by run criteria
    - `detecting_system` is disabled by run criteria until it is run once during tick 3
    - verify at the end of tick 3
    
    ## Addition Causes Mutation
    
    2 design:
    - Resources vs. Components
    - `adding_system_1` adds a component / resource
    - `adding system_2` adds the same component / resource
    - verify the `Mutated` flag at the end of the tick
    - verify the `Added` flag at the end of the tick
    
    First check tests for: https://github.com/bevyengine/bevy/issues/333
    Second check tests for: https://github.com/bevyengine/bevy/issues/1443
    
    ## Changes Made By Commands
    
    - `adding_system` runs in Update in tick 1, and sends a command to add a component
    - `detecting_system` runs in Update in tick 1 and 2, after `adding_system`
    - We can't detect the changes in tick 1, since they haven't been processed yet
    - If we were to track these changes as being emitted by `adding_system`, we can't detect the changes in tick 2 either, since `detecting_system` has already run once after `adding_system` :(
    
    # Benchmarks
    
    See: [general advice](https://github.com/bevyengine/bevy/blob/master/docs/profiling.md), [Criterion crate](https://github.com/bheisler/criterion.rs)
    
    There are several critical parameters to vary:
    1. entity count (1 to 10^9)
    2. fraction of entities that are changed (0% to 100%)
    3. cost to perform work on changed entities, i.e. workload (1 ns to 1s)
    
    1 and 2 should be varied between benchmark runs. 3 can be added on computationally.
    
    We want to measure:
    - memory cost
    - run time
    
    We should collect these measurements across several frames (100?) to reduce bootup effects and accurately measure the mean, variance and drift.
    
    Entity-component change detection is much more important to benchmark than resource change detection, due to the orders of magnitude higher number of pieces of data.
    
    No change detection at all should be included in benchmarks as a second control for cases where missing changes is unacceptable.
    
    ## Graphs
    1. y: performance, x: log_10(entity count), color: proposal, facet: performance metric. Set cost to perform work to 0.
    2. y: run time, x: cost to perform work, color: proposal, facet: fraction changed. Set number of entities to 10^6
    3. y: memory, x: frames, color: proposal
    
    # Conclusions
    1. Is the theoretical categorization of the proposals correct according to our tests?
    2. How does the performance of the proposals compare without any load?
    3. How does the performance of the proposals compare with realistic loads?
    4. At what workload does more exact change tracking become worth the (presumably) higher overhead?
    5. When does adding change-detection to save on work become worthwhile?
    6. Is there enough divergence in performance between the best solutions in each class to ship more than one change-tracking solution?
    
    # Implementation Plan
    
    1. Write a test suite.
    2. Verify that tests fail for existing approach.
    3. Write a benchmark suite.
    4. Get performance numbers for existing approach.
    5. Implement, test and benchmark various solutions using a Git branch per proposal.
    6. Create a draft PR with all solutions and present results to team.
    7. Select a solution and replace existing change detection.
    
    Co-authored-by: Brice DAVIER <bricedavier@gmail.com>
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 348e2a3d404bc61afe534371b100dc173f6d076f[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Mar 19 03:54:53 2021 +0000

    documentation on Transform and GlobalTransform (#1687)
    
    fixes #1599
    
    * Added doc on `Transform` and `GlobalTransform` to describe usage and how `GlobalTransform` is updated
    * Documented all methods on `Transform`
    * `#[doc(hidden)]` most constructors and methods mutating `GlobalTransform`, documented the other
    * Mentioned z-ordering for `Transform` in 2d

[33mcommit 8d1e52be31cc2626e9477fe049d7709d3d011e68[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Mar 19 02:53:26 2021 +0000

    fix dyn warning (#1690)
    
    This is now a warning on nightly.

[33mcommit 0a875f647de791c753cfc3244b2986414f89ba1f[m
Author: Zaszi <admin@zaszi.net>
Date:   Thu Mar 18 23:47:34 2021 +0000

    Derive PartialEq for WindowMode (#1688)
    
    Many a game will provide some sort of video settings where a window mode option is a common inclusion. I ran into problems, however, with [egui's](https://github.com/emilk/egui) `combo_box` that imposes a `PartialEq` necessity. Deriving the trait would fix this problem, and as this does not break any existing API it should be a non-controversial change.

[33mcommit cd4c684ad5563c99b01e4ee6eea7c9b560c5dd5a[m
Author: Alec Deason <alec@tinycountry.com>
Date:   Thu Mar 18 01:28:21 2021 +0000

    Fix tiny typo in ambiguity checker message (#1682)
    
    Add one missing word

[33mcommit bcd53182476b4acd246006c28eadbea3d501d849[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Mar 17 23:59:51 2021 +0000

    color spaces and representation (#1572)
    
    `Color` can now be from different color spaces or representation:
    - sRGB
    - linear RGB
    - HSL
    
    This fixes #1193 by allowing the creation of const colors of all types, and writing it to the linear RGB color space for rendering.
    
    I went with an enum after trying with two different types (`Color` and `LinearColor`) to be able to use the different variants in all place where a `Color` is expected.
    
    I also added the HLS representation because:
    - I like it
    - it's useful for some case, see example `contributors`: I can just change the saturation and lightness while keeping the hue of the color
    - I think adding another variant not using `red`, `green`, `blue` makes it clearer there are differences
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit ab0165d20d0df77c3b38a3d2f1d9f15299b77a71[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Wed Mar 17 23:42:19 2021 +0000

    Improved documentation for Events (#1669)
    
    Explains subtle behavior more explicitly, documents `add_event`, mentions `EventWriter`.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 5fedb6029a3ced7d5df1e9095bbdf28cde5fef0b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Mar 17 22:46:46 2021 +0000

    Make Reflect impls unsafe (Reflect::any must return `self`) (#1679)
    
    Fixes #1100
    
    Implementors must make sure that `Reflect::any` and `Reflect::any_mut` both return the `self` reference passed in (both for logical correctness and downcast safety).

[33mcommit 107dd736874d07d6c79d0c44ce6ee9763aed9a12[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Mar 17 19:53:24 2021 +0000

    update ColorMaterial when Texture changed (#1461)
    
    fixes #1161, fixes #1243
    
    this adds two systems:
    - first is keeping an hashmap of textures and their containing color materials, then listening to events on textures to select color materials that should be updated
    - second is chained to send a modified event for all color materials that need updating

[33mcommit 284889c64b2a4a4f67018e42a14062392edbd0aa[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Mon Mar 15 22:12:04 2021 +0000

    Redo State architecture (#1424)
    
    An alternative to StateStages that uses SystemSets. Also includes pop and push operations since this was originally developed for my personal project which needed them.

[33mcommit c3a72e9dc85b53a1448138270c72e806fc91ec85[m
Author: Guim Caballero <guim@caballerocoll.com>
Date:   Sun Mar 14 21:00:36 2021 +0000

    Add keyboard modifier example (#1656) (#1657)
    
    This PR adds a small example that shows how to use Keyboard modifiers, as shown in [this](https://github.com/bevyengine/bevy/issues/1654#issuecomment-798966921) snippet.
    
    Fixes #1656.
    
    Co-authored-by: guimcaballero <guim.caballero@gmail.com>

[33mcommit 48ee167531ad90b45fb2858715294f0d81ea24df[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Sun Mar 14 20:44:51 2021 +0000

    expose stages and system containers (#1647)
    
    This allows third-party plugins to analyze the schedule, e.g. `bevy_mod_picking` can [display a schedule graph](https://github.com/jakobhellermann/bevy_mod_debugdump/tree/schedule-graph#schedule-graph):
    
    ![schedule graph](https://raw.githubusercontent.com/jakobhellermann/bevy_mod_debugdump/schedule-graph/docs/schedule_graph.svg)

[33mcommit de55e0566924c0272be8756e273c23ceaf591478[m
Author: davier <bricedavier@gmail.com>
Date:   Sun Mar 14 20:02:10 2021 +0000

    Fix error in DynamicScene (#1651)
    
    The wrong error was returned when using an unregistered type in a scene, leading to a confusing error message.

[33mcommit 01bb68b685388c5b1689b5565a270477648c919b[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Sun Mar 14 19:45:09 2021 +0000

    implement Debug, Copy, Clone for shapes (#1653)

[33mcommit f6ff80c5b1ff23d6fffa088fc1d232c05c1fb2be[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Sun Mar 14 20:45:00 2021 +0100

    add Debug, Copy, Clone for all shapes (#1653)

[33mcommit ac661188c8679e767c4f2abebee22b4db3128e99[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Sun Mar 14 00:36:16 2021 +0000

    better error message: specify which resource is missing (#1648)

[33mcommit 86e2fc53d01a5507756098f7383b5f73eee595c5[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sun Mar 14 00:36:15 2021 +0000

    improve error message when asset type hasn't beed added to app (#1487)
    
    Error message noticed in #1475
    
    When an asset type hasn't been added to the app but a load was attempted, the error message wasn't helpful:
    ```
    thread 'IO Task Pool (0)' panicked at 'Failed to find AssetLifecycle for label Some("Mesh0/Primitive0"), which has an asset type 8ecbac0f-f545-4473-ad43-e1f4243af51e. Are you sure that is a registered asset type?', /.cargo/git/checkouts/bevy-f7ffde730c324c74/89a41bc/crates/bevy_asset/src/asset_server.rs:435:17
    ```
    means that
    ```rust
    .add_asset::<bevy::render::prelude::Mesh>()
    ```
    needs to be added.
    
    * type name was not given, only UUID, which may make it hard to identify type across bevy/plugins
    * instruction were not helpful as the `register_asset_type` method is not public
    
    new error message:
    ```
    thread 'IO Task Pool (1)' panicked at 'Failed to find AssetLifecycle for label 'Some("Mesh0/Primitive0")', which has an asset type "bevy_render::mesh::mesh::Mesh" (UUID 8ecbac0f-f545-4473-ad43-e1f4243af51e). Are you sure this asset type has been added to your app builder?', /bevy/crates/bevy_asset/src/asset_server.rs:435:17
    ```

[33mcommit aa81aaf3fa5e65efa5392fc37bbd61e1b3506ed2[m
Author: Simon Guillot <sgu@pm.me>
Date:   Sun Mar 14 00:19:44 2021 +0000

    Small improvement of code quality of Assets::set* methods (#1649)
    
    As mentioned in #1609.
    
    I'm not sure if this is desirable, but on top of factoring the `set` and `set_untracked` methods I added a warning when the return value of `set` isn't used to mitigate similar issues.
    
    I silenced it for the only occurence where it's currently done  https://github.com/bevyengine/bevy/blob/68606934e32ab45828c628e1cefd3873273f8708/crates/bevy_asset/src/asset_server.rs#L468

[33mcommit 2e72755b8a4246f671473b2863d0e1941f3adfa9[m
Author: Jasen Borisov <jamadazi@protonmail.ch>
Date:   Sat Mar 13 18:44:26 2021 +0000

    GLTF loader: support mipmap filters (#1639)
    
    This removes the `GltfError::UnsupportedMinFilter` error.
    
    I don't think this error should have existed in the first place, because it prevents users from using assets that bevy could totally render (without mipmap support as of yet).
    
    It's much better to load the asset properly and then render it (even if it looks a little ugly), than to refuse to load the asset at all, giving users a confusing error.

[33mcommit bbb984950620b575b08c605db29b1e1903bf798b[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Mar 13 18:23:39 2021 +0000

    Replace `default` method calls from Glam types with explicit const (#1645)
    
    it's a followup of #1550
    
    I think calling explicit methods/values instead of default makes the code easier to read: "what is `Quat::default()`" vs "Oh, it's `Quat::IDENTITY`"
    
    `Transform::identity()` and `GlobalTransform::identity()` can also be consts and I replaced the calls to their `default()` impl with `identity()`

[33mcommit 8acb0d20127a7b4f36423f4e13a98864a723084c[m
Author: davier <bricedavier@gmail.com>
Date:   Sat Mar 13 18:23:38 2021 +0000

    Fix cargo doc warnings (#1640)
    
    Fixes all warnings from `cargo doc --all`.
    Those related to code blocks were introduced in #1612, but re-formatting using the experimental features in `rustfmt.toml` doesn't seem to reintroduce them.

[33mcommit 75ae20dc4a11f04fb0aad62e2a92ffe2b974ea89[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sat Mar 13 18:07:14 2021 +0000

    use std clamp instead of Bevy's (#1644)
    
    Rust std's `clamp` has been stabilised in 1.50: https://github.com/rust-lang/rust/issues/44095
    
    This is already the minimum supported version, so no change there ð

[33mcommit 785aad92f4355159c0d4ceacc77d66b537cfac04[m
Author: Simon Guillot <sgu@pm.me>
Date:   Fri Mar 12 22:12:07 2021 +0000

    Fix pipeline initialisation of wireframe mode (fixes #1609) (#1623)
    
    More details are in the associated issue #1609.
    
    While looking for the source of this issue, I've noticed that the `set` and `set_untracked` methods aren't really DRY:
    https://github.com/bevyengine/bevy/blob/68606934e32ab45828c628e1cefd3873273f8708/crates/bevy_asset/src/assets.rs#L76-L85
    
    https://github.com/bevyengine/bevy/blob/68606934e32ab45828c628e1cefd3873273f8708/crates/bevy_asset/src/assets.rs#L91-L99
    
    Shouldn't `set` call `set_untracked`? Also, given the bug that arose from a misusage of these functions, maybe some refactoring is needed?

[33mcommit 03601db51c929c859f33fab2f5cd91fb91053bc7[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Fri Mar 12 19:59:55 2021 +0000

    Basic documentation for Entities, Components and Systems (#1578)
    
    These are largely targeted at beginners, as `Entity`, `Component` and `System` are the most obvious terms to search when first getting introduced to Bevy.

[33mcommit 32af4b7dc3f3711df05566cb9ea7cadc7f2e47f2[m
Author: Jonas Matser <github@jonasmatser.nl>
Date:   Fri Mar 12 18:59:24 2021 +0000

    Add separate brightness field to AmbientLight (#1605)
    
    Idea being this would be easier to grasp for end-users. Problem with the logical defaults is this breaks current setups, because light will become 20 times less bright. But most folks won't have customized this resource or will not have used `..Default::default()` due to lack of other fields.

[33mcommit 8a9f475edb51ea45c976c000113ca55bac751f96[m
Author: MinerSebas <scherthan_sebastian@web.de>
Date:   Fri Mar 12 03:05:14 2021 +0000

    Remove the Clippy "-A clippy::manual-strip" override (#1619)
    
    That override was added to support pre 1.45 Versions of Rust, but Bevy requires currently the latest stable rust release.
    This means that the reason for the override doesn't apply anymore.

[33mcommit 8e3532e8f786b3bad2962d446c5db1451da64e61[m
Author: Jasen Borisov <jamadazi@protonmail.ch>
Date:   Fri Mar 12 02:46:51 2021 +0000

    README/examples: better direct users to the release version (#1624)
    
    1. The instructions in the main README used to point users to the git main version. This has likely misdirected and confused many new users. Update to direct users to the latest release instead.
    2. Rewrite the notice in the examples README to make it clearer and more concise, and to show the `latest` git branch.
    
    See also: https://github.com/bevyengine/bevy-website/pull/109 for similar changes to the website and official book.

[33mcommit 68606934e32ab45828c628e1cefd3873273f8708[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Mar 11 18:38:22 2021 +0000

    remove unsafe get_unchecked (and mut variant) from Tables and Archetypes (#1614)
    
    Removes `get_unchecked` and `get_unchecked_mut` from `Tables` and `Archetypes` collections in favor of safe Index implementations. This fixes a safety error in `Archetypes::get_id_or_insert()` (which previously relied on TableId being valid to be safe ... the alternative was to make that method unsafe too). It also cuts down on a lot of unsafe and makes the code easier to look at. I'm not sure what changed since the last benchmark, but these numbers are more favorable than my last tests of similar changes. I didn't include the Components collection as those severely killed perf last time I tried. But this does inspire me to try again (just in a separate pr)!
    
    Note that the `simple_insert/bevy_unbatched` benchmark fluctuates a lot on both branches (this was also true for prior versions of bevy). It seems like the allocator has more variance for many small allocations. And `sparse_frag_iter/bevy` operates on such a small scale that 10% fluctuations are common.
    
    Some benches do take a small hit here, but I personally think its worth it.
    
    This also fixes a safety error in Query::for_each_mut, which needed to mutably borrow Query (aaahh!).
    
    ![image](https://user-images.githubusercontent.com/2694663/110726926-2b52eb80-81cf-11eb-9ea3-bff951060c7c.png)
    ![image](https://user-images.githubusercontent.com/2694663/110726991-4c1b4100-81cf-11eb-9199-ca79bef0b9bd.png)

[33mcommit b17f8a4bce5551b418654fffb1fe97ff0f9852f0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Mar 11 00:27:30 2021 +0000

    format comments (#1612)
    
    Uses the new unstable comment formatting features added to rustfmt.toml.

[33mcommit be1c317d4e861aeafb97f7a2f44e1f55fcb26598[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Mar 10 22:37:02 2021 +0000

    Resolve (most) internal system ambiguities (#1606)
    
    * Adds labels and orderings to systems that need them (uses the new many-to-many labels for InputSystem)
    * Removes the Event, PreEvent, Scene, and Ui stages in favor of First, PreUpdate, and PostUpdate (there is more collapsing potential, such as the Asset stages and _maybe_ removing First, but those have more nuance so they should be handled separately)
    * Ambiguity detection now prints component conflicts
    * Removed broken change filters from flex calculation (which implicitly relied on the z-update system always modifying translation.z). This will require more work to make it behave as expected so i just removed it (and it was already doing this work every frame).

[33mcommit 1e42de64af9560fe1de3c19473fecb241c8534af[m
Author: MartÃ­n Maita <47983254+mnmaita@users.noreply.github.com>
Date:   Wed Mar 10 01:00:55 2021 +0000

    Adds rustfmt configs to wrap and limit comment width (#1603)
    
    Aims to close https://github.com/bevyengine/bevy/issues/1594.
    
    These options are unstable and depend on the following PR's:
    
    [wrap_comments](https://rust-lang.github.io/rustfmt/?version=v1.4.36&search=#wrap_comments): https://github.com/rust-lang/rustfmt/issues/3347
    
    [comment_width](https://rust-lang.github.io/rustfmt/?version=v1.4.36&search=#comment_width): https://github.com/rust-lang/rustfmt/issues/3349
    
    [normalize_comments](https://rust-lang.github.io/rustfmt/?version=v1.4.36&search=#normalize_comments): https://github.com/rust-lang/rustfmt/issues/3350
    
    @alice-i-cecile do you think this will solve the issue? When enabled, running the formatter locally should take the configurations into account to format comments. `--check` runs should also be considering them. This should be testable on the `nightly` toolchain.
    
    ~I didn't delve into normalizing `//` vs `/* */` though, should I take a look into that too? [normalize_comments](https://rust-lang.github.io/rustfmt/?version=v1.4.36&search=#normalize_comments) seems to be the solution for that but it's also unstable (tracking issue: https://github.com/rust-lang/rustfmt/issues/3350). I can also add this configuration (commented out, of course) if it's desirable.~ Added `normalize_comments` option.

[33mcommit e9a501e6b8f95d1e7b4b803750f4ee85475c1c36[m
Author: MartÃ­n Maita <47983254+mnmaita@users.noreply.github.com>
Date:   Wed Mar 10 00:44:45 2021 +0000

    Fixes potential panic when unwrapping touch event on Moved phase (#1591)
    
    Should fix https://github.com/bevyengine/bevy/issues/1516.
    
    I don't have any devices available to test this tbh but I feel like this was the only spot that could be causing a panic.
    
    @ptircylinder since you posted this issue, could you please try to run the example on this branch and check if you get the same behavior while using your device? Thank you!

[33mcommit faeccd7a09d6871abd332a46eab892612acd3620[m
Author: Nathan Stocks <cleancut@github.com>
Date:   Tue Mar 9 23:39:41 2021 +0000

    Reflection cleanup (#1536)
    
    This is an effort to provide the correct `#[reflect_value(...)]` attributes where they are needed.
    
    Supersedes #1533 and resolves #1528.
    
    ---
    
    I am working under the following assumptions (thanks to @bjorn3 and @Davier for advice here):
    
    - Any `enum` that derives `Reflect` and one or more of { `Serialize`, `Deserialize`, `PartialEq`, `Hash` } needs a `#[reflect_value(...)]` attribute containing the same subset of { `Serialize`, `Deserialize`, `PartialEq`, `Hash` } that is present on the derive.
    - Same as above for `struct` and `#[reflect(...)]`, respectively.
    - If a `struct` is used as a component, it should also have `#[reflect(Component)]`
    - All reflected types should be registered in their plugins
    
    I treated the following as components (added `#[reflect(Component)]` if necessary):
    - `bevy_render`
      - `struct RenderLayers`
    - `bevy_transform`
      - `struct GlobalTransform`
      - `struct Parent`
      - `struct Transform`
    - `bevy_ui`
      - `struct Style`
    
    Not treated as components:
    - `bevy_math`
      - `struct Size<T>`
      - `struct Rect<T>`
      - Note: The updates for `Size<T>` and `Rect<T>` in `bevy::math::geometry` required using @Davier's suggestion to add `+ PartialEq` to the trait bound. I then registered the specific types used over in `bevy_ui` such as `Size<Val>`, etc. in `bevy_ui`'s plugin, since `bevy::math` does not contain a plugin.
    - `bevy_render`
      - `struct Color`
      - `struct PipelineSpecialization`
      - `struct ShaderSpecialization`
      - `enum PrimitiveTopology`
      - `enum IndexFormat`
    
    Not Addressed:
    - I am not searching for components in Bevy that are _not_ reflected. So if there are components that are not reflected that should be reflected, that will need to be figured out in another PR.
    - I only added `#[reflect(...)]` or `#[reflect_value(...)]` entries for the set of four traits { `Serialize`, `Deserialize`, `PartialEq`, `Hash` } _if they were derived via `#[derive(...)]`_. I did not look for manual trait implementations of the same set of four, nor did I consider any traits outside the four.  Are those other possibilities something that needs to be looked into?

[33mcommit 514723295eaebea14bf1552ee387e70e4e33685c[m
Author: MinerSebas <scherthan_sebastian@web.de>
Date:   Tue Mar 9 23:25:49 2021 +0000

    Add missing wireframe example to example readme (#1580)
    
    #562 added a new Example, but forgot to also document it in the examples readme.

[33mcommit d51130d4ab0ceefd8cc02d2963ac9c6705e66c1a[m
Author: Alexander Sepity <alexander.sepity@gmail.com>
Date:   Tue Mar 9 23:08:34 2021 +0000

    Many-to-many system labels (#1576)
    
    * Systems can now have more than one label attached to them.
    * System labels no longer have to be unique in the stage.
    
    Code like this is now possible:
    ```rust
    SystemStage::parallel()
        .with_system(system_0.system().label("group one").label("first"))
        .with_system(system_1.system().label("group one").after("first"))
        .with_system(system_2.system().after("group one"))
    ```
    
    I've opted to use only the system name in ambiguity reporting, which previously was only a fallback; this, obviously, is because labels aren't one-to-one with systems anymore. We could allow users to name systems to improve this; we'll then have to think about whether or not we want to allow using the name as a label (this would, effectively, introduce implicit labelling, not all implications of which are clear to me yet wrt many-to-many labels).
    
    Dependency cycle errors are reported using the system names and only the labels that form the cycle, with each system-system "edge" in the cycle represented as one or several labels.
    
    Slightly unrelated: `.before()` and `.after()` with a label not attached to any system no longer crashes, and logs a warning instead. This is necessary to, for example, allow plugins to specify execution order with systems of potentially missing other plugins.

[33mcommit ea9c7d58ffd5bd196406d72a9331ca30188b1137[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Tue Mar 9 03:49:48 2021 +0000

    Fix label macro for types with generics (#1498)
    
    Fixes #1497
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 8f363544ad2812e08384dbbc3e8ea6fea0fb138c[m
Author: MinerSebas <scherthan_sebastian@web.de>
Date:   Tue Mar 9 01:07:01 2021 +0000

    Reorder Imports in Examples (#1598)
    
    This only affected 2 Examples:
    * `generic_reflection`: For some reason, a `pub use` statement was used. This was removed, and alphabetically ordered.
    * `wireframe`: This example used the `bevy_internal` crate directly. Changed to use `bevy` instead.
    
    All other Example Imports are correct.
    
    One potential subjective change is the `removel_detection` example.
    Unlike all other Examples, it has its (first) explanatory comment before the Imports.

[33mcommit 9d60563adf4167059fcd1a0addc11487a4394c15[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Mon Mar 8 21:21:47 2021 +0000

    Query::get_unique (#1263)
    
    Adds `get_unique` and `get_unique_mut` to extend the query api and cover a common use case. Also establishes a second impl block where non-core APIs that don't access the internal fields of queries can live.

[33mcommit 2c203f7b8fd8daad5af836040898d316466c81b8[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Mar 8 20:27:44 2021 +0000

    Bump github/super-linter from v3.15.1 to v3.15.2 (#1596)
    
    Bumps [github/super-linter](https://github.com/github/super-linter) from v3.15.1 to v3.15.2.
    <details>
    <summary>Release notes</summary>
    <p><em>Sourced from <a href="https://github.com/github/super-linter/releases">github/super-linter's releases</a>.</em></p>
    <blockquote>
    <h2>Release v3.15.2</h2>
    <h2>Changelog</h2>
    <ul>
    <li>Fix issue with grabbing history</li>
    </ul>
    <h2>Bugs</h2>
    <p>we found a bad one...</p>
    </blockquote>
    </details>
    <details>
    <summary>Commits</summary>
    <ul>
    <li><a href="https://github.com/github/super-linter/commit/16f5c4067d70b7e90445a32524a96d02f973ca4b"><code>16f5c40</code></a> Updating action.yml with new release version</li>
    <li><a href="https://github.com/github/super-linter/commit/68c8bf9f11fb6aba220497a4dcb30b991d46bca9"><code>68c8bf9</code></a> fix, checkout DEFAULT_BRANCH for diff base (<a href="https://github.com/github/super-linter/issues/1308">#1308</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/11720172cb14049c18cffbce4f14e4ab7c0fefe4"><code>1172017</code></a> Fix get file diff on pr event (<a href="https://github.com/github/super-linter/issues/1305">#1305</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/5294082063edae0da40593d3323bddc2285f5e2a"><code>5294082</code></a> Bump golangci/golangci-lint from v1.37.1 to v1.38.0 (<a href="https://github.com/github/super-linter/issues/1301">#1301</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/4f51c7dd0300bca3ac3e003d9b43533a24322a7d"><code>4f51c7d</code></a> Bump cljkondo/clj-kondo from 2021.02.28-alpine to 2021.03.03-alpine (<a href="https://github.com/github/super-linter/issues/1300">#1300</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/505a708ba3fd5ce46b2dfc160281231ebb826700"><code>505a708</code></a> Bump snakemake from 6.0.0 to 6.0.2 in /dependencies (<a href="https://github.com/github/super-linter/issues/1302">#1302</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/bbb3b6c4cd92fb3d4d972c43fc58f1e5b26e8ee2"><code>bbb3b6c</code></a> Bump markdownlint-cli from 0.26.0 to 0.27.1 in /dependencies (<a href="https://github.com/github/super-linter/issues/1293">#1293</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/779c472cfa48f951cacea11ba5de474a05ef9a21"><code>779c472</code></a> Bump @typescript-eslint/parser from 4.15.2 to 4.16.1 in /dependencies (<a href="https://github.com/github/super-linter/issues/1290">#1290</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/a648a4e067325b3740d168a4d82608296090100c"><code>a648a4e</code></a> Bump @typescript-eslint/eslint-plugin in /dependencies (<a href="https://github.com/github/super-linter/issues/1291">#1291</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/46df94844cf76441a9e64578c934daffc7d083fc"><code>46df948</code></a> Add debug info for multi status api calls (<a href="https://github.com/github/super-linter/issues/1287">#1287</a>)</li>
    <li>Additional commits viewable in <a href="https://github.com/github/super-linter/compare/v3.15.1...16f5c4067d70b7e90445a32524a96d02f973ca4b">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit 13aef0503859925425e11cb9785ac0bb623b83e9[m
Author: Jasen Borisov <jamadazi@protonmail.ch>
Date:   Mon Mar 8 20:12:22 2021 +0000

    impl SystemParam for Option<Res<T>> / Option<ResMut<T>> (#1494)
    
    This allows users to write systems that do not panic if a resource does not exist at runtime (such as if it has not been inserted yet).
    
    This is a copy-paste of the impls for `Res` and `ResMut`, with an extra check to see if the resource exists.
    
    There might be a cleaner way to do it than this check. I don't know.

[33mcommit d9b8b3e618755aa8492024efee4267c74d2af8ea[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Sun Mar 7 20:42:04 2021 +0000

    Add EventWriter (#1575)
    
    This adds a `EventWriter<T>` `SystemParam` that is just a thin wrapper around `ResMut<Events<T>>`. This is primarily to have API symmetry between the reader and writer, and has the added benefit of easily improving the API later with no breaking changes.

[33mcommit 2b0a48d945ec9d10f326f4c97e55b107ab97b054[m
Author: Joshua J. Bouw <dev@joshuajbouw.com>
Date:   Sun Mar 7 19:50:20 2021 +0000

    feat: clone indices (#1574)
    
    Super simple and straight forward. I need this for the tilemap because if I need to update all chunk indices, then I can calculate it once and clone it. Of course, for now I'm just returning the Vec itself then wrapping it but would be nice if I didn't have to do that.

[33mcommit 58d687b86d29e2a7ecf23de9f7206fd7b85e0bc3[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sun Mar 7 19:50:19 2021 +0000

    fix flip of contributor bird (#1573)
    
    Since 89217171b49eebba527b575eb0a89df0c3533ac6, some birds in example `contributors` where not colored.
    
    Fix is to use `flip_x` of `Sprite` instead of setting `transform.scale.x` to `-1` as described in #1407.
    
    
    It may be an unintended side effect, as now we can't easily display a colored sprite while changing it's scale from `1` to `-1`, we would have to change it's scale from `1` to `0`, then flip it, then change scale from `0` to `1`.

[33mcommit a7308155ee2e5e138964358ac5c84cd3075dcbec[m
Author: Jonas Matser <github@jonasmatser.nl>
Date:   Sun Mar 7 19:50:18 2021 +0000

    Make TypeRegistration::get_short_name() pub (#1571)
    
    This would allow for example `bevy_mod_debugdump` to use it, instead of custom typename shortening.

[33mcommit 891f6a1f487603b09993a97cbbfadfb424253841[m
Author: Nathan Stocks <cleancut@github.com>
Date:   Sun Mar 7 19:50:17 2021 +0000

    Silence annoying rustfmt config warnings (#1508)
    
    Silence those [annoying rustfmt config warnings](https://github.com/bevyengine/bevy/pull/1499/checks?check_run_id=1950282111#step:5:66) that happen because we have unstable rustfmt options in `rustfmt.toml`, but we run it in stable on CI.  Thanks to @Ratysz for [calling it out](https://github.com/bevyengine/bevy/pull/1499#issuecomment-783190586). ð
    
    The final approach we settled on was to comment out the unstable options in `rustfmt.toml`.  Those who are using `nightly` may  uncomment the unstable options locally if they wish. Once the options stabilize, we can uncomment them again.
    
    We also decided that instead of fixing the alias, we would remove the alias entirely so that we do not introduce a custom `.cargo/config.toml` that would conflict with users' custom version of the same file. This means that instead of using a `cargo ci` alias you should use `cargo run -p ci` or `cargo run --package ci` instead.
    
    <details><summary>Original Approach (abandoned)</summary>
    <p>
    
    _We decided **not** to go this way..._
    
    In my quest to find a portable way to filter out the warnings I switched the library used to execute commands from `xshell` to `duct` (as advised by the `xshell` project itself when you want to do less simple things).  This still uses the "xtask" pattern of using a cargo command alias and a rust project for what would have usually been done with a bash script (on posix), just a different helper library is being used internally.
    
    NOTE 1: Also, thanks to some sleuthing by @DJMcNab we were able to fix the broken cargo alias.  The issue turned out to be that `.cargo/config.toml` was being ignored because of `.gitignore`.
    
    NOTE 2: This is a [known breaking change](https://github.com/bevyengine/bevy/pull/1309#discussion_r564023753) for anyone working on bevy who has their own local `.cargo/config.toml`.
    </p>
    </details>

[33mcommit dabf41909556a1b58e786de3e62d9a2cb329812d[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sun Mar 7 19:32:19 2021 +0000

    update archetypes if needed before running system in SingleThreadedExecutor (#1586)
    
    fixes #1585
    
    I copied most of the logic from the `ParallelSystemExecutor` impl, simplifying it a little as systems can't run in parallel

[33mcommit 2a3a32b66fe8e6797ebff7aac083ec05b596976c[m
Author: Psychoticpotato <Antagonisticapple@gmail.com>
Date:   Sun Mar 7 19:17:25 2021 +0000

    Add `mesa-vulkan-drivers` to Debian install (#1489)
    
    I received the `Unable to find GPU` error, but I got it to render by using this package.  Not 100% sure if a better option exists.

[33mcommit f61e44db2824c0cc4b4815748c4d3f051002ada7[m
Author: Cameron Hart <cameron.hart@gmail.com>
Date:   Sat Mar 6 19:39:16 2021 +0000

    Update glam to 0.13.0. (#1550)
    
    See https://github.com/bitshifter/glam-rs/blob/master/CHANGELOG.md for details on changes.
    
    Co-authored-by: Cameron Hart <c_hart@wargaming.net>

[33mcommit 0eba5f38b9fbf6e975f0f1224f3ac333cd6ddce7[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Mar 6 19:23:04 2021 +0000

    update hexasphere to 3.2 (#1577)

[33mcommit 03e0a9f23e6556d2c3821a9536f7e0795470bcec[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Sat Mar 6 01:57:03 2021 +0000

    Docs for Bundle showing how to nest bundles (#1570)
    
    I've also added a clearer description of what bundles are used for, and explained that you can't query for bundles (a very common beginner confusion).
    
    Co-authored-by: MinerSebas <scherthan_sebastian@web.de>
    Co-authored-by: Renato Caldas <renato@calgera.com>

[33mcommit 006848311c3072480fd12ec861a9355c0cbbb326[m
Author: sdfgeoff <sdfgeoff@gmail.com>
Date:   Sat Mar 6 01:57:02 2021 +0000

    Documented some of the Mesh properties (#1566)
    
    I was fiddling with creating a mesh importer today, and decided to write some more docs.
    
    A lot of this is describing general renderer/GL stuff, so you'll probably find most of it self explanatory anyway, but perhaps it will be useful for someone.

[33mcommit 64b29617d682e44aafd981a501a03475b7a643e5[m
Author: sdfgeoff <sdfgeoff@gmail.com>
Date:   Sat Mar 6 01:57:01 2021 +0000

    Added documentation on the query filters (#1553)
    
    This documents both the non-obvious interaction with non-explicit system ordering
    and adds examples for Changed and Added. This likely closes #1551

[33mcommit 87399c35606575a5058471a5a84a8c5f8a3658c1[m
Author: Renato Caldas <renato@calgera.com>
Date:   Sat Mar 6 01:42:57 2021 +0000

    Fix staging buffer required size calculation (fixes #1056) (#1509)
    
    Fix staging buffer required size calculation (fixes #1056)
    
    The `required_staging_buffer_size` is currently calculated differently in two places, each will be correct in different situations:
    
    * `prepare_staging_buffers()` based on actual `buffer_byte_len()`
    * `set_required_staging_buffer_size_to_max()` based on item_size
    
    In the case of render assets, `prepare_staging_buffers()` would only operate over changed assets. If some of the assets didn't change, their size wouldn't be taken into account for the `required_staging_buffer_size`. In some cases, this meant the buffers wouldn't be resized when they should. Now `prepare_staging_buffers()` is called over all assets, which may hit performance but at least gets the size right.
    
    Shortly after `prepare_staging_buffers()`,  `set_required_staging_buffer_size_to_max()` would unconditionally overwrite the previously computed value, even if using `item_size` made no sense. Now it only overwrites the value if bigger.
    
    This can be considered a short term hack, but should prevent a few hard to debug panics.

[33mcommit b2d654cbf6a47f22d03a6bd55adf8cffa31f051c[m
Author: MinerSebas <scherthan_sebastian@web.de>
Date:   Sat Mar 6 00:53:42 2021 +0000

    Use rand 0.8 again (#1567)
    
    #1525 accidentally moved back to rand 0.7

[33mcommit ab407aa697f3615e186a998ae5b67e60f5c264b6[m
Author: Chris Janaqi <chris.janaqi@gmail.com>
Date:   Fri Mar 5 19:59:14 2021 +0000

    â»ï¸ `Timer` refactor to duration.â¨ Add `Stopwatch` struct. (#1151)
    
    This pull request is following the discussion on the issue #1127. Additionally, it integrates the change proposed by #1112.
    
    The list of change of this pull request:
    
    * â¨ Add `Timer::times_finished` method that counts the number of wraps for repeating timers.
    * â»ï¸ Refactored `Timer`
    * ð Fix a bug where 2 successive calls to `Timer::tick` which makes a repeating timer to finish makes `Timer::just_finished` to return `false` where it should return `true`. Minimal failing example:
    ```rust
    use bevy::prelude::*;
    let mut timer: Timer<()> = Timer::from_seconds(1.0, true);
    timer.tick(1.5);
    assert!(timer.finished());
    assert!(timer.just_finished());
    timer.tick(1.5);
    assert!(timer.finished());
    assert!(timer.just_finished()); // <- This fails where it should not
    ```
    * ð Add extensive documentation for Timer with doc examples.
    * â¨ Add a `Stopwatch` struct similar to `Timer` with extensive doc and tests.
    
    Even if the type specialization is not retained for bevy, the doc, bugfix and added method are worth salvaging ð.
    This is my first PR for bevy, please be kind to me â¤ï¸ .
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 4686437d7a250f6e1208e87742712d5c8535e9fe[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Fri Mar 5 18:33:20 2021 +0000

    add Or back to prelude (#1564)
    
    The bevy ecs v2 rewrite seems to have removed the `Or` query filter from the prelude, which I assume was done on accident, since `With` and `Without` are still there.

[33mcommit 3a2a68852c0a1298c0678a47adc59adebe259a6f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Mar 5 07:54:35 2021 +0000

    Bevy ECS V2 (#1525)
    
    # Bevy ECS V2
    
    This is a rewrite of Bevy ECS (basically everything but the new executor/schedule, which are already awesome). The overall goal was to improve the performance and versatility of Bevy ECS. Here is a quick bulleted list of changes before we dive into the details:
    
    * Complete World rewrite
    * Multiple component storage types:
        * Tables: fast cache friendly iteration, slower add/removes (previously called Archetypes)
        * Sparse Sets: fast add/remove, slower iteration
    * Stateful Queries (caches query results for faster iteration. fragmented iteration is _fast_ now)
    * Stateful System Params (caches expensive operations. inspired by @DJMcNab's work in #1364)
    * Configurable System Params (users can set configuration when they construct their systems. once again inspired by @DJMcNab's work)
    * Archetypes are now "just metadata", component storage is separate
    * Archetype Graph (for faster archetype changes)
    * Component Metadata
        * Configure component storage type
        * Retrieve information about component size/type/name/layout/send-ness/etc
        * Components are uniquely identified by a densely packed ComponentId
        * TypeIds are now totally optional (which should make implementing scripting easier)
    * Super fast "for_each" query iterators
    * Merged Resources into World. Resources are now just a special type of component
    * EntityRef/EntityMut builder apis (more efficient and more ergonomic)
    * Fast bitset-backed `Access<T>` replaces old hashmap-based approach everywhere
    * Query conflicts are determined by component access instead of archetype component access (to avoid random failures at runtime)
        * With/Without are still taken into account for conflicts, so this should still be comfy to use
    * Much simpler `IntoSystem` impl
    * Significantly reduced the amount of hashing throughout the ecs in favor of Sparse Sets (indexed by densely packed ArchetypeId, ComponentId, BundleId, and TableId)
    * Safety Improvements
        * Entity reservation uses a normal world reference instead of unsafe transmute
        * QuerySets no longer transmute lifetimes
        * Made traits "unsafe" where relevant
        * More thorough safety docs
    * WorldCell
        * Exposes safe mutable access to multiple resources at a time in a World
    * Replaced "catch all" `System::update_archetypes(world: &World)` with `System::new_archetype(archetype: &Archetype)`
    * Simpler Bundle implementation
    * Replaced slow "remove_bundle_one_by_one" used as fallback for Commands::remove_bundle with fast "remove_bundle_intersection"
    * Removed `Mut<T>` query impl. it is better to only support one way: `&mut T`
    * Removed with() from `Flags<T>` in favor of `Option<Flags<T>>`, which allows querying for flags to be "filtered" by default
    * Components now have is_send property (currently only resources support non-send)
    * More granular module organization
    * New `RemovedComponents<T>` SystemParam that replaces `query.removed::<T>()`
    * `world.resource_scope()` for mutable access to resources and world at the same time
    * WorldQuery and QueryFilter traits unified. FilterFetch trait added to enable "short circuit" filtering. Auto impled for cases that don't need it
    * Significantly slimmed down SystemState in favor of individual SystemParam state
    * System Commands changed from `commands: &mut Commands` back to `mut commands: Commands` (to allow Commands to have a World reference)
    
    Fixes #1320
    
    ## `World` Rewrite
    
    This is a from-scratch rewrite of `World` that fills the niche that `hecs` used to. Yes, this means Bevy ECS is no longer a "fork" of hecs. We're going out our own!
    
    (the only shared code between the projects is the entity id allocator, which is already basically ideal)
    
    A huge shout out to @SanderMertens (author of [flecs](https://github.com/SanderMertens/flecs)) for sharing some great ideas with me (specifically hybrid ecs storage and archetype graphs). He also helped advise on a number of implementation details.
    
    ## Component Storage (The Problem)
    
    Two ECS storage paradigms have gained a lot of traction over the years:
    
    * **Archetypal ECS**:
        * Stores components in "tables" with static schemas. Each "column" stores components of a given type. Each "row" is an entity.
        * Each "archetype" has its own table. Adding/removing an entity's component changes the archetype.
        * Enables super-fast Query iteration due to its cache-friendly data layout
        * Comes at the cost of more expensive add/remove operations for an Entity's components, because all components need to be copied to the new archetype's "table"
    * **Sparse Set ECS**:
        * Stores components of the same type in densely packed arrays, which are sparsely indexed by densely packed unsigned integers (Entity ids)
        * Query iteration is slower than Archetypal ECS because each entity's component could be at any position in the sparse set. This "random access" pattern isn't cache friendly. Additionally, there is an extra layer of indirection because you must first map the entity id to an index in the component array.
        * Adding/removing components is a cheap, constant time operation
    
    Bevy ECS V1, hecs, legion, flec, and Unity DOTS are all "archetypal ecs-es". I personally think "archetypal" storage is a good default for game engines. An entity's archetype doesn't need to change frequently in general, and it creates "fast by default" query iteration (which is a much more common operation). It is also "self optimizing". Users don't need to think about optimizing component layouts for iteration performance. It "just works" without any extra boilerplate.
    
    Shipyard and EnTT are "sparse set ecs-es". They employ "packing" as a way to work around the "suboptimal by default" iteration performance for specific sets of components. This helps, but I didn't think this was a good choice for a general purpose engine like Bevy because:
    
    1. "packs" conflict with each other. If bevy decides to internally pack the Transform and GlobalTransform components, users are then blocked if they want to pack some custom component with Transform.
    2. users need to take manual action to optimize
    
    Developers selecting an ECS framework are stuck with a hard choice. Select an "archetypal" framework with "fast iteration everywhere" but without the ability to cheaply add/remove components, or select a "sparse set" framework to cheaply add/remove components but with slower iteration performance.
    
    ## Hybrid Component Storage (The Solution)
    
    In Bevy ECS V2, we get to have our cake and eat it too. It now has _both_ of the component storage types above (and more can be added later if needed):
    
    * **Tables** (aka "archetypal" storage)
        * The default storage. If you don't configure anything, this is what you get
        * Fast iteration by default
        * Slower add/remove operations
    * **Sparse Sets**
        * Opt-in
        * Slower iteration
        * Faster add/remove operations
    
    These storage types complement each other perfectly. By default Query iteration is fast. If developers know that they want to add/remove a component at high frequencies, they can set the storage to "sparse set":
    
    ```rust
    world.register_component(
        ComponentDescriptor::new::<MyComponent>(StorageType::SparseSet)
    ).unwrap();
    ```
    
    ## Archetypes
    
    Archetypes are now "just metadata" ... they no longer store components directly. They do store:
    
    * The `ComponentId`s of each of the Archetype's components (and that component's storage type)
        * Archetypes are uniquely defined by their component layouts
        * For example: entities with "table" components `[A, B, C]` _and_ "sparse set" components `[D, E]` will always be in the same archetype.
    * The `TableId` associated with the archetype
        * For now each archetype has exactly one table (which can have no components),
        * There is a 1->Many relationship from Tables->Archetypes. A given table could have any number of archetype components stored in it:
            * Ex: an entity with "table storage" components `[A, B, C]` and "sparse set" components `[D, E]` will share the same `[A, B, C]` table as an entity with `[A, B, C]` table component and `[F]` sparse set components.
            * This 1->Many relationship is how we preserve fast "cache friendly" iteration performance when possible (more on this later)
    * A list of entities that are in the archetype and the row id of the table they are in
    * ArchetypeComponentIds
        * unique densely packed identifiers for (ArchetypeId, ComponentId) pairs
        * used by the schedule executor for cheap system access control
    * "Archetype Graph Edges" (see the next section)
    
    ## The "Archetype Graph"
    
    Archetype changes in Bevy (and a number of other archetypal ecs-es) have historically been expensive to compute. First, you need to allocate a new vector of the entity's current component ids, add or remove components based on the operation performed, sort it (to ensure it is order-independent), then hash it to find the archetype (if it exists). And thats all before we get to the _already_ expensive full copy of all components to the new table storage.
    
    The solution is to build a "graph" of archetypes to cache these results. @SanderMertens first exposed me to the idea (and he got it from @gjroelofs, who came up with it). They propose adding directed edges between archetypes for add/remove component operations. If `ComponentId`s are densely packed, you can use sparse sets to cheaply jump between archetypes.
    
    Bevy takes this one step further by using add/remove `Bundle` edges instead of `Component` edges. Bevy encourages the use of `Bundles` to group add/remove operations. This is largely for "clearer game logic" reasons, but it also helps cut down on the number of archetype changes required. `Bundles` now also have densely-packed `BundleId`s. This allows us to use a _single_ edge for each bundle operation (rather than needing to traverse N edges ... one for each component). Single component operations are also bundles, so this is strictly an improvement over a "component only" graph.
    
    As a result, an operation that used to be _heavy_ (both for allocations and compute) is now two dirt-cheap array lookups and zero allocations.
    
    ## Stateful Queries
    
    World queries are now stateful. This allows us to:
    
    1. Cache archetype (and table) matches
        * This resolves another issue with (naive) archetypal ECS: query performance getting worse as the number of archetypes goes up (and fragmentation occurs).
    2. Cache Fetch and Filter state
        * The expensive parts of fetch/filter operations (such as hashing the TypeId to find the ComponentId) now only happen once when the Query is first constructed
    3. Incrementally build up state
        * When new archetypes are added, we only process the new archetypes (no need to rebuild state for old archetypes)
    
    As a result, the direct `World` query api now looks like this:
    
    ```rust
    let mut query = world.query::<(&A, &mut B)>();
    for (a, mut b) in query.iter_mut(&mut world) {
    }
    ```
    
    Requiring `World` to generate stateful queries (rather than letting the `QueryState` type be constructed separately) allows us to ensure that _all_ queries are properly initialized (and the relevant world state, such as ComponentIds). This enables QueryState to remove branches from its operations that check for initialization status (and also enables query.iter() to take an immutable world reference because it doesn't need to initialize anything in world).
    
    However in systems, this is a non-breaking change. State management is done internally by the relevant SystemParam.
    
    ## Stateful SystemParams
    
    Like Queries, `SystemParams` now also cache state. For example, `Query` system params store the "stateful query" state mentioned above. Commands store their internal `CommandQueue`. This means you can now safely use as many separate `Commands` parameters in your system as you want. `Local<T>` system params store their `T` value in their state (instead of in Resources).
    
    SystemParam state also enabled a significant slim-down of SystemState. It is much nicer to look at now.
    
    Per-SystemParam state naturally insulates us from an "aliased mut" class of errors we have hit in the past (ex: using multiple `Commands` system params).
    
    (credit goes to @DJMcNab for the initial idea and draft pr here #1364)
    
    ## Configurable SystemParams
    
    @DJMcNab also had the great idea to make SystemParams configurable. This allows users to provide some initial configuration / values for system parameters (when possible). Most SystemParams have no config (the config type is `()`), but the `Local<T>` param now supports user-provided parameters:
    
    ```rust
    
    fn foo(value: Local<usize>) {
    }
    
    app.add_system(foo.system().config(|c| c.0 = Some(10)));
    ```
    
    ## Uber Fast "for_each" Query Iterators
    
    Developers now have the choice to use a fast "for_each" iterator, which yields ~1.5-3x iteration speed improvements for "fragmented iteration", and minor ~1.2x iteration speed improvements for unfragmented iteration.
    
    ```rust
    fn system(query: Query<(&A, &mut B)>) {
        // you now have the option to do this for a speed boost
        query.for_each_mut(|(a, mut b)| {
        });
    
        // however normal iterators are still available
        for (a, mut b) in query.iter_mut() {
        }
    }
    ```
    
    I think in most cases we should continue to encourage "normal" iterators as they are more flexible and more "rust idiomatic". But when that extra "oomf" is needed, it makes sense to use `for_each`.
    
    We should also consider using `for_each` for internal bevy systems to give our users a nice speed boost (but that should be a separate pr).
    
    ## Component Metadata
    
    `World` now has a `Components` collection, which is accessible via `world.components()`. This stores mappings from `ComponentId` to `ComponentInfo`, as well as `TypeId` to `ComponentId` mappings (where relevant). `ComponentInfo` stores information about the component, such as ComponentId, TypeId, memory layout, send-ness (currently limited to resources), and storage type.
    
    ## Significantly Cheaper `Access<T>`
    
    We used to use `TypeAccess<TypeId>` to manage read/write component/archetype-component access. This was expensive because TypeIds must be hashed and compared individually. The parallel executor got around this by "condensing" type ids into bitset-backed access types. This worked, but it had to be re-generated from the `TypeAccess<TypeId>`sources every time archetypes changed.
    
    This pr removes TypeAccess in favor of faster bitset access everywhere. We can do this thanks to the move to densely packed `ComponentId`s and `ArchetypeComponentId`s.
    
    ## Merged Resources into World
    
    Resources had a lot of redundant functionality with Components. They stored typed data, they had access control, they had unique ids, they were queryable via SystemParams, etc. In fact the _only_ major difference between them was that they were unique (and didn't correlate to an entity).
    
    Separate resources also had the downside of requiring a separate set of access controls, which meant the parallel executor needed to compare more bitsets per system and manage more state.
    
    I initially got the "separate resources" idea from `legion`. I think that design was motivated by the fact that it made the direct world query/resource lifetime interactions more manageable. It certainly made our lives easier when using Resources alongside hecs/bevy_ecs. However we already have a construct for safely and ergonomically managing in-world lifetimes: systems (which use `Access<T>` internally).
    
    This pr merges Resources into World:
    
    ```rust
    world.insert_resource(1);
    world.insert_resource(2.0);
    let a = world.get_resource::<i32>().unwrap();
    let mut b = world.get_resource_mut::<f64>().unwrap();
    *b = 3.0;
    ```
    
    Resources are now just a special kind of component. They have their own ComponentIds (and their own resource TypeId->ComponentId scope, so they don't conflict wit components of the same type). They are stored in a special "resource archetype", which stores components inside the archetype using a new `unique_components` sparse set (note that this sparse set could later be used to implement Tags). This allows us to keep the code size small by reusing existing datastructures (namely Column, Archetype, ComponentFlags, and ComponentInfo). This allows us the executor to use a single `Access<ArchetypeComponentId>` per system. It should also make scripting language integration easier.
    
    _But_ this merge did create problems for people directly interacting with `World`. What if you need mutable access to multiple resources at the same time? `world.get_resource_mut()` borrows World mutably!
    
    ## WorldCell
    
    WorldCell applies the `Access<ArchetypeComponentId>` concept to direct world access:
    
    ```rust
    let world_cell = world.cell();
    let a = world_cell.get_resource_mut::<i32>().unwrap();
    let b = world_cell.get_resource_mut::<f64>().unwrap();
    ```
    
    This adds cheap runtime checks (a sparse set lookup of `ArchetypeComponentId` and a counter) to ensure that world accesses do not conflict with each other. Each operation returns a `WorldBorrow<'w, T>` or `WorldBorrowMut<'w, T>` wrapper type, which will release the relevant ArchetypeComponentId resources when dropped.
    
    World caches the access sparse set (and only one cell can exist at a time), so `world.cell()` is a cheap operation.
    
    WorldCell does _not_ use atomic operations. It is non-send, does a mutable borrow of world to prevent other accesses, and uses a simple `Rc<RefCell<ArchetypeComponentAccess>>` wrapper in each WorldBorrow pointer.
    
    The api is currently limited to resource access, but it can and should be extended to queries / entity component access.
    
    ## Resource Scopes
    
    WorldCell does not yet support component queries, and even when it does there are sometimes legitimate reasons to want a mutable world ref _and_ a mutable resource ref (ex: bevy_render and bevy_scene both need this). In these cases we could always drop down to the unsafe `world.get_resource_unchecked_mut()`, but that is not ideal!
    
    Instead developers can use a "resource scope"
    
    ```rust
    world.resource_scope(|world: &mut World, a: &mut A| {
    })
    ```
    
    This temporarily removes the `A` resource from `World`, provides mutable pointers to both, and re-adds A to World when finished. Thanks to the move to ComponentIds/sparse sets, this is a cheap operation.
    
    If multiple resources are required, scopes can be nested. We could also consider adding a "resource tuple" to the api if this pattern becomes common and the boilerplate gets nasty.
    
    ## Query Conflicts Use ComponentId Instead of ArchetypeComponentId
    
    For safety reasons, systems cannot contain queries that conflict with each other without wrapping them in a QuerySet. On bevy `main`, we use ArchetypeComponentIds to determine conflicts. This is nice because it can take into account filters:
    
    ```rust
    // these queries will never conflict due to their filters
    fn filter_system(a: Query<&mut A, With<B>>, b: Query<&mut B, Without<B>>) {
    }
    ```
    
    But it also has a significant downside:
    ```rust
    // these queries will not conflict _until_ an entity with A, B, and C is spawned
    fn maybe_conflicts_system(a: Query<(&mut A, &C)>, b: Query<(&mut A, &B)>) {
    }
    ```
    
    The system above will panic at runtime if an entity with A, B, and C is spawned. This makes it hard to trust that your game logic will run without crashing.
    
    In this pr, I switched to using `ComponentId` instead. This _is_ more constraining. `maybe_conflicts_system` will now always fail, but it will do it consistently at startup. Naively, it would also _disallow_ `filter_system`, which would be a significant downgrade in usability. Bevy has a number of internal systems that rely on disjoint queries and I expect it to be a common pattern in userspace.
    
    To resolve this, I added a new `FilteredAccess<T>` type, which wraps `Access<T>` and adds with/without filters. If two `FilteredAccess` have with/without values that prove they are disjoint, they will no longer conflict.
    
    ## EntityRef / EntityMut
    
    World entity operations on `main` require that the user passes in an `entity` id to each operation:
    
    ```rust
    let entity = world.spawn((A, )); // create a new entity with A
    world.get::<A>(entity);
    world.insert(entity, (B, C));
    world.insert_one(entity, D);
    ```
    
    This means that each operation needs to look up the entity location / verify its validity. The initial spawn operation also requires a Bundle as input. This can be awkward when no components are required (or one component is required).
    
    These operations have been replaced by `EntityRef` and `EntityMut`, which are "builder-style" wrappers around world that provide read and read/write operations on a single, pre-validated entity:
    
    ```rust
    // spawn now takes no inputs and returns an EntityMut
    let entity = world.spawn()
        .insert(A) // insert a single component into the entity
        .insert_bundle((B, C)) // insert a bundle of components into the entity
        .id() // id returns the Entity id
    
    // Returns EntityMut (or panics if the entity does not exist)
    world.entity_mut(entity)
        .insert(D)
        .insert_bundle(SomeBundle::default());
    {
        // returns EntityRef (or panics if the entity does not exist)
        let d = world.entity(entity)
            .get::<D>() // gets the D component
            .unwrap();
        // world.get still exists for ergonomics
        let d = world.get::<D>(entity).unwrap();
    }
    
    // These variants return Options if you want to check existence instead of panicing
    world.get_entity_mut(entity)
        .unwrap()
        .insert(E);
    
    if let Some(entity_ref) = world.get_entity(entity) {
        let d = entity_ref.get::<D>().unwrap();
    }
    ```
    
    This _does not_ affect the current Commands api or terminology. I think that should be a separate conversation as that is a much larger breaking change.
    
    ## Safety Improvements
    
    * Entity reservation in Commands uses a normal world borrow instead of an unsafe transmute
    * QuerySets no longer transmutes lifetimes
    * Made traits "unsafe" when implementing a trait incorrectly could cause unsafety
    * More thorough safety docs
    
    ## RemovedComponents SystemParam
    
    The old approach to querying removed components: `query.removed:<T>()` was confusing because it had no connection to the query itself. I replaced it with the following, which is both clearer and allows us to cache the ComponentId mapping in the SystemParamState:
    
    ```rust
    fn system(removed: RemovedComponents<T>) {
        for entity in removed.iter() {
        }
    }
    ```
    
    ## Simpler Bundle implementation
    
    Bundles are no longer responsible for sorting (or deduping) TypeInfo. They are just a simple ordered list of component types / data. This makes the implementation smaller and opens the door to an easy "nested bundle" implementation in the future (which i might even add in this pr). Duplicate detection is now done once per bundle type by World the first time a bundle is used.
    
    ## Unified WorldQuery and QueryFilter types
    
    (don't worry they are still separate type _parameters_ in Queries .. this is a non-breaking change)
    
    WorldQuery and QueryFilter were already basically identical apis. With the addition of `FetchState` and more storage-specific fetch methods, the overlap was even clearer (and the redundancy more painful).
    
    QueryFilters are now just `F: WorldQuery where F::Fetch: FilterFetch`. FilterFetch requires `Fetch<Item = bool>` and adds new "short circuit" variants of fetch methods. This enables a filter tuple like `(With<A>, Without<B>, Changed<C>)` to stop evaluating the filter after the first mismatch is encountered. FilterFetch is automatically implemented for `Fetch` implementations that return bool.
    
    This forces fetch implementations that return things like `(bool, bool, bool)` (such as the filter above) to manually implement FilterFetch and decide whether or not to short-circuit.
    
    ## More Granular Modules
    
    World no longer globs all of the internal modules together. It now exports `core`, `system`, and `schedule` separately. I'm also considering exporting `core` submodules directly as that is still pretty "glob-ey" and unorganized (feedback welcome here).
    
    ## Remaining Draft Work (to be done in this pr)
    
    * ~~panic on conflicting WorldQuery fetches (&A, &mut A)~~
        * ~~bevy `main` and hecs both currently allow this, but we should protect against it if possible~~
    * ~~batch_iter / par_iter (currently stubbed out)~~
    * ~~ChangedRes~~
        * ~~I skipped this while we sort out #1313. This pr should be adapted to account for whatever we land on there~~.
    * ~~The `Archetypes` and `Tables` collections use hashes of sorted lists of component ids to uniquely identify each archetype/table. This hash is then used as the key in a HashMap to look up the relevant ArchetypeId or TableId. (which doesn't handle hash collisions properly)~~
    * ~~It is currently unsafe to generate a Query from "World A", then use it on "World B" (despite the api claiming it is safe). We should probably close this gap. This could be done by adding a randomly generated WorldId to each world, then storing that id in each Query. They could then be compared to each other on each `query.do_thing(&world)` operation. This _does_ add an extra branch to each query operation, so I'm open to other suggestions if people have them.~~
    * ~~Nested Bundles (if i find time)~~
    
    ## Potential Future Work
    
    * Expand WorldCell to support queries.
    * Consider not allocating in the empty archetype on `world.spawn()`
        * ex: return something like EntityMutUninit, which turns into EntityMut after an `insert` or `insert_bundle` op
        * this actually regressed performance last time i tried it, but in theory it should be faster
    * Optimize SparseSet::insert (see `PERF` comment on insert)
    * Replace SparseArray `Option<T>` with T::MAX to cut down on branching
        * would enable cheaper get_unchecked() operations
    * upstream fixedbitset optimizations
        * fixedbitset could be allocation free for small block counts (store blocks in a SmallVec)
        * fixedbitset could have a const constructor
    * Consider implementing Tags (archetype-specific by-value data that affects archetype identity)
        * ex: ArchetypeA could have `[A, B, C]` table components and `[D(1)]` "tag" component. ArchetypeB could have `[A, B, C]` table components and a `[D(2)]` tag component. The archetypes are different, despite both having D tags because the value inside D is different.
        * this could potentially build on top of the `archetype.unique_components` added in this pr for resource storage.
    * Consider reverting `all_tuples` proc macro in favor of the old `macro_rules` implementation
        * all_tuples is more flexible and produces cleaner documentation (the macro_rules version produces weird type parameter orders due to parser constraints)
        * but unfortunately all_tuples also appears to make Rust Analyzer sad/slow when working inside of `bevy_ecs` (does not affect user code)
    * Consider "resource queries" and/or "mixed resource and entity component queries" as an alternative to WorldCell
        * this is basically just "systems" so maybe it's not worth it
    * Add more world ops
        * `world.clear()`
        * `world.reserve<T: Bundle>(count: usize)`
     * Try using the old archetype allocation strategy (allocate new memory on resize and copy everything over). I expect this to improve batch insertion performance at the cost of unbatched performance. But thats just a guess. I'm not an allocation perf pro :)
     * Adapt Commands apis for consistency with new World apis
    
    ## Benchmarks
    
    key:
    
    * `bevy_old`: bevy `main` branch
    * `bevy`: this branch
    * `_foreach`: uses an optimized for_each iterator
    * ` _sparse`: uses sparse set storage (if unspecified assume table storage)
    * `_system`: runs inside a system (if unspecified assume test happens via direct world ops)
    
    ### Simple Insert (from ecs_bench_suite)
    
    ![image](https://user-images.githubusercontent.com/2694663/109245573-9c3ce100-7795-11eb-9003-bfd41cd5c51f.png)
    
    ### Simpler Iter (from ecs_bench_suite)
    
    ![image](https://user-images.githubusercontent.com/2694663/109245795-ffc70e80-7795-11eb-92fb-3ffad09aabf7.png)
    
    ### Fragment Iter (from ecs_bench_suite)
    
    ![image](https://user-images.githubusercontent.com/2694663/109245849-0fdeee00-7796-11eb-8d25-eb6b7a682c48.png)
    
    ### Sparse Fragmented Iter
    
    Iterate a query that matches 5 entities from a single matching archetype, but there are 100 unmatching archetypes
    
    ![image](https://user-images.githubusercontent.com/2694663/109245916-2b49f900-7796-11eb-9a8f-ed89c203f940.png)
    
    ### Schedule (from ecs_bench_suite)
    
    ![image](https://user-images.githubusercontent.com/2694663/109246428-1fab0200-7797-11eb-8841-1b2161e90fa4.png)
    
    ### Add Remove Component (from ecs_bench_suite)
    
    ![image](https://user-images.githubusercontent.com/2694663/109246492-39e4e000-7797-11eb-8985-2706bd0495ab.png)
    
    
    ### Add Remove Component Big
    
    Same as the test above, but each entity has 5 "large" matrix components and 1 "large" matrix component is added and removed
    
    ![image](https://user-images.githubusercontent.com/2694663/109246517-449f7500-7797-11eb-835e-28b6790daeaa.png)
    
    
    ### Get Component
    
    Looks up a single component value a large number of times
    
    ![image](https://user-images.githubusercontent.com/2694663/109246129-87ad1880-7796-11eb-9fcb-c38012aa7c70.png)

[33mcommit d9fb61d474518eba06d0c3dce5cb81db9f7ed66a[m
Author: Zhixing Zhang <account@neoto.xin>
Date:   Thu Mar 4 01:23:24 2021 +0000

    Wireframe Rendering Pipeline (#562)
    
    This PR implements wireframe rendering.
    
    Usage:
    
    This is now ready as soon as #1401 gets merged.
    
    
    Usage:
    
    ```rust
        app
            .insert_resource(WgpuOptions {
                name: Some("3d_scene"),
                features: WgpuFeatures::NON_FILL_POLYGON_MODE,
                ..Default::default()
            }) // To enable the NON_FILL_POLYGON_MODE feature
            .add_plugin(WireframePlugin)
            .run();
    
    ```
    
    Now we just need to add the Wireframe component on an entity, and it'll draw. its wireframe.
    
    
    We can also enable wireframe drawing globally by setting the global property in the `WireframeConfig` resource to `true`.
    
    
    
    Co-authored-by: Zhixing Zhang <me@neoto.xin>

[33mcommit 079b3ade89195ef1aa4bcf1f8c0740a6572b84b6[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Mar 4 00:52:38 2021 +0000

    Bump github/super-linter from v3 to v3.15.1 (#1538)
    
    Bumps [github/super-linter](https://github.com/github/super-linter) from v3 to v3.15.1.
    <details>
    <summary>Release notes</summary>
    <p><em>Sourced from <a href="https://github.com/github/super-linter/releases">github/super-linter's releases</a>.</em></p>
    <blockquote>
    <h2>Release v3.15.1</h2>
    <h2>Changelog</h2>
    <ul>
    <li>Fixed Deployment process</li>
    <li>Updated Branch protections</li>
    </ul>
    </blockquote>
    </details>
    <details>
    <summary>Commits</summary>
    <ul>
    <li><a href="https://github.com/github/super-linter/commit/a4de8540a1162d917a5c0918467143c98c2176b2"><code>a4de854</code></a> Updating action.yml with new release version</li>
    <li><a href="https://github.com/github/super-linter/commit/0031981b465666f0ad5ef57d50c97ca53c54a687"><code>0031981</code></a> fixed deploy (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1269">#1269</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/7ea2fd764e32c531678aadff2ebc87a81b0bc029"><code>7ea2fd7</code></a> Updating action.yml with new release version (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1268">#1268</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/0b756c57e8a95eb0aee22b05d53b464c5113dfa7"><code>0b756c5</code></a> only error on rstats lintr errors, not all lints (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1233">#1233</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/a91f07d277661cb0a804803197c95345560090f9"><code>a91f07d</code></a> Bump bobheadxi/deployments from v0.4.3 to v0.5.1 (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1266">#1266</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/f47b363f716a693e6baa3bab5f4b5add30a8a6ed"><code>f47b363</code></a> Add rustfmt for Rust (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1250">#1250</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/141a09cdbf6705dd3155633edd336286a8e15873"><code>141a09c</code></a> Bump yoheimuta/protolint from v0.28.2 to v0.29.0 (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1261">#1261</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/71d36c41c276be439b5091e9b4255495139e7c18"><code>71d36c4</code></a> Add logic to check command output before maping the files (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1259">#1259</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/7a9c11b753552a10e57a3f1c2956448942f467f8"><code>7a9c11b</code></a> Bump eslint-config-prettier from 8.0.0 to 8.1.0 in /dependencies (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1262">#1262</a>)</li>
    <li><a href="https://github.com/github/super-linter/commit/acf858ae792c51e3ed36b53dc80f0e2a61926699"><code>acf858a</code></a> Adding release process (<a href="https://github-redirect.dependabot.com/github/super-linter/issues/1260">#1260</a>)</li>
    <li>Additional commits viewable in <a href="https://github.com/github/super-linter/compare/v3...a4de8540a1162d917a5c0918467143c98c2176b2">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit 4f1a65113de9aec2ba09d000182523d6a2999be4[m
Author: Alexander Sepity <alexander.sepity@gmail.com>
Date:   Wed Mar 3 23:36:01 2021 +0000

    Fixed commands for coerced exclusive systems (#1531)
    
    Fixes #1530.

[33mcommit 8bc7320a35355c4393b5fd0f837bab805a94fd1e[m
Author: lambdagolem <31174944+lambdagolem@users.noreply.github.com>
Date:   Wed Mar 3 23:36:00 2021 +0000

    Fix typo in Xtask CI (#1526)
    
     I think there was a typo here. If this is not a typo and I misunderstood the comment please just ignore this PR.

[33mcommit 15aaa2b29700932867e12d6f477eb4e5ea58703f[m
Author: Niklas Eicker <hello@nikl.me>
Date:   Wed Mar 3 23:17:48 2021 +0000

    Fix broken link in plugin guidelines (#1513)
    
    I stumbled over a broken link in the plugin guidelines
    
    Co-authored-by: Niklas Eicker <git@nikl.me>

[33mcommit 1fcafc42108920691efccd9e15352261d07fffd0[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Mar 3 21:36:16 2021 +0000

    Glb textures should use bevy_render to load images (#1454)
    
    Fixes #1396
    
    <img width="1392" alt="Screenshot 2021-02-16 at 02 24 01" src="https://user-images.githubusercontent.com/8672791/108011774-1b991a80-7008-11eb-979e-6ebfc51fba3c.png">
    
    Issue was that, when loading an image directly from its bytes in the binary glb file, it didn't follow the same flow as when loaded as a texture file. This PR removes the dependency to `image` from `bevy_gltf`, and load the image using `bevy_render` in all cases. I also added support for more mime types while there.
    
    <img width="1392" alt="Screenshot 2021-02-16 at 02 44 56" src="https://user-images.githubusercontent.com/8672791/108011915-674bc400-7008-11eb-83d4-ded96a38919b.png">

[33mcommit 6e14ed23bc75dd61a3f6c0908fe1ec036e72f5fc[m
Author: Zhixing Zhang <account@neoto.xin>
Date:   Wed Mar 3 21:20:46 2021 +0000

    Enable wgpu device limits (#1544)
    
    Follow up on #547 and #1401
    
    Co-authored-by: Zhixing Zhang <me@neoto.xin>

[33mcommit 6a0968b2ead51c14ffe5e512a639348bc15cfa04[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Mar 3 21:20:45 2021 +0000

    convert grayscale images to rgb (#1524)
    
    Fixes #1518
    
    Issue was that images loaded as [`ImageLumaA8`](https://docs.rs/image/0.23.13/image/enum.DynamicImage.html#variant.ImageLumaA8) (grayscale with alpha channel) from `image` were considered as [`Rg8Unorm`](https://docs.rs/wgpu/0.7.0/wgpu/enum.TextureFormat.html#variant.Rg8Unorm) (red green channels) from `wgpu`.
    Same for `ImageLuma8` (grayscale) that was converted to `R8Unorm` (only red channel).
    
    As `wgpu` doesn't seem to have grayscale texture formats, I converted the grayscale textures to rgba.

[33mcommit 319e75c7aa06822d3a190460bb71d892ac8c55e5[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Mar 3 21:01:41 2021 +0000

    Update tracing-wasm requirement from 0.1 to 0.2 (#1539)
    
    Updates the requirements on [tracing-wasm](https://github.com/storyscript/tracing-wasm) to permit the latest version.
    <details>
    <summary>Commits</summary>
    <ul>
    <li><a href="https://github.com/storyscript/tracing-wasm/commit/09a0d75c452ec6f6867f6d39a4b47b5794f58e5e"><code>09a0d75</code></a> Disable default features for dependencies and release 0.2.0</li>
    <li><a href="https://github.com/storyscript/tracing-wasm/commit/bbeca396eddbb3afd3e8d8ca80a7eeff6eeed75b"><code>bbeca39</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/storyscript/tracing-wasm/issues/12">#12</a> from storyscript/readme-clarification</li>
    <li><a href="https://github.com/storyscript/tracing-wasm/commit/e35b182232de7de422afc0b4019380ff89b46f61"><code>e35b182</code></a> add clarifying note to README.</li>
    <li><a href="https://github.com/storyscript/tracing-wasm/commit/259e118e7fcefcee1667ab369004e5e401b89766"><code>259e118</code></a> rustfmt</li>
    <li><a href="https://github.com/storyscript/tracing-wasm/commit/f2099cfe5ee866fb03eb5a53b05f71a06101babc"><code>f2099cf</code></a> Apply clippy suggestions</li>
    <li><a href="https://github.com/storyscript/tracing-wasm/commit/fde480fa117b8661d1675447f5c8411fcf7ed56c"><code>fde480f</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/storyscript/tracing-wasm/issues/6">#6</a> from storyscript/config-builder</li>
    <li><a href="https://github.com/storyscript/tracing-wasm/commit/ad9d4b1903a20736eef8c5e0fbb8fa078a4fc05a"><code>ad9d4b1</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/storyscript/tracing-wasm/issues/7">#7</a> from storyscript/feat/default-level</li>
    <li><a href="https://github.com/storyscript/tracing-wasm/commit/64fedbd2670ec829f551f5fbb52e1551e7acfe3d"><code>64fedbd</code></a> chore(config): change level to max_level</li>
    <li><a href="https://github.com/storyscript/tracing-wasm/commit/7cb160a7a91e1f50f0d88da3a061e96a45c2e8b6"><code>7cb160a</code></a> feat(level): add default level in config from the builder</li>
    <li><a href="https://github.com/storyscript/tracing-wasm/commit/a9e7f2a4b87dd0c31d1b5b360ab708316d593346"><code>a9e7f2a</code></a> WIP: Builder pattern for WASMLayerConfig</li>
    <li>Additional commits viewable in <a href="https://github.com/storyscript/tracing-wasm/compare/0.1.0...v0.2.0">compare view</a></li>
    </ul>
    </details>
    <br />
    
    
    Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
    - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
    
    
    </details>

[33mcommit b8961a957e609cf865cc9a2ac6b23f1b939020ac[m
Author: verzuz <verzuz@gmx.de>
Date:   Wed Mar 3 20:07:26 2021 +0000

    enable wgpu device features (#547)
    
    Should wait for https://github.com/bevyengine/bevy/pull/542 and new wgpu_rs release.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 89217171b49eebba527b575eb0a89df0c3533ac6[m
Author: Zicklag <zicklag@katharostech.com>
Date:   Wed Mar 3 19:26:45 2021 +0000

    Add Sprite Flipping (#1407)
    
    OK, here's my attempt at sprite flipping. There are a couple of points that I need review/help on, but I think the UX is about ideal:
    
    ```rust
            .spawn(SpriteBundle {
                material: materials.add(texture_handle.into()),
                sprite: Sprite {
                    // Flip the sprite along the x axis
                    flip: SpriteFlip { x: true, y: false },
                    ..Default::default()
                },
                ..Default::default()
            });
    ```
    
    Now for the issues. The big issue is that for some reason, when flipping the UVs on the sprite, there is a light "bleeding" or whatever you call it where the UV tries to sample past the texture boundry and ends up clipping. This is only noticed when resizing the window, though. You can see a screenshot below.
    
    ![image](https://user-images.githubusercontent.com/25393315/107098172-397aaa00-67d4-11eb-8e02-c90c820cd70e.png)
    
    I am quite baffled why the texture sampling is overrunning like it is and could use some guidance if anybody knows what might be wrong.
    
    The other issue, which I just worked around, is that I had to remove the `#[render_resources(from_self)]` annotation from the Spritesheet because the `SpriteFlip` render resource wasn't being picked up properly in the shader when using it. I'm not sure what the cause of that was, but by removing the annotation and re-organizing the shader inputs accordingly the problem was fixed.
    
    I'm not sure if this is the most efficient way to do this or if there is a better way, but I wanted to try it out if only for the learning experience. Let me know what you think!

[33mcommit e61d7920e30c4fd0da43726875eb21b7b53d52eb[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Wed Mar 3 03:43:15 2021 +0000

    Add suffixes to diagnostics and other cleanup (#1505)
    
    Also a few related clean ups to diagnostics
    Old look (from the log_diagnostics_example):
    <details>
    <summary>Old look hidden to avoid clutter </summary>
    
    ![image](https://user-images.githubusercontent.com/36049421/108776774-bc349080-755a-11eb-8569-d4832abf6bc3.png)
    
    </details>
    New look:
    
    ![image](https://user-images.githubusercontent.com/36049421/108776587-82638a00-755a-11eb-96eb-539026d59bcb.png)
    
    In particular, notice that the width of the diagnostics has been significantly reduced - within vscode the value no longer wraps on my 1920 width monitor. The value is still 105 columns wide, so there is room for improvement however.

[33mcommit a5170625dcb3d89965251a50dad33c673a8888de[m
Author: Marek Fajkus <marek.faj@gmail.com>
Date:   Wed Mar 3 03:27:02 2021 +0000

    Update and simplify NixOS documentation (#1495)
    
    Some updates and simplifications to the NixOS specific part of documentation.

[33mcommit 74cb13aa705b4bb29cad971aa4192823795de734[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Mar 3 03:11:12 2021 +0000

    update libloading (#1543)
    
    Alternative to #1418

[33mcommit 000dd4c1c2a7c707ea059243e836301e45a5276a[m
Author: Wouter Buckens <wouter@epicteddy.com>
Date:   Wed Mar 3 03:11:11 2021 +0000

    Add docs & example for SystemParam (#1435)
    
    It took me a little while to figure out how to use the `SystemParam` derive macro to easily create my own params. So I figured I'd add some docs and an example with what I learned.
    
    - Fixed a bug in the `SystemParam` derive macro where it didn't detect the correct crate name when used in an example (no longer relevant, replaced by #1426 - see further)
    - Added some doc comments and a short example code block in the docs for the `SystemParam` trait
    - Added a more complete example with explanatory comments in examples

[33mcommit b8a0ab01bac3792a393f16f56d10b4b344633615[m
Author: Archina <archina5thrider@gmail.com>
Date:   Wed Mar 3 03:11:10 2021 +0000

    add to lower case to make asset loading case insensitive (#1427)
    
    This should fix bug #1425

[33mcommit 8dcba7f4a115d0a95c71b24e773c0a43724b68dd[m
Author: Digital Seven <gabriel.gheorghe.it@gmail.com>
Date:   Wed Mar 3 02:56:50 2021 +0000

    Add Window Resize Constraints (#1409)
    
    You should be able to set the minimum and maximum desired resolution of a system window.
    This also fixes a bug on Windows operating system: When you try to resize to 0 on the height it crashes.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 4c1bc33b52ba5fd0431ddfcf76919e7ce948eb7c[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Mar 2 18:34:38 2021 -0800

    Bump actions/cache from v2 to v2.1.4 (#1417)
    
    Bumps [actions/cache](https://github.com/actions/cache) from v2 to v2.1.4.
    - [Release notes](https://github.com/actions/cache/releases)
    - [Commits](https://github.com/actions/cache/compare/v2...26968a09c0ea4f3e233fdddbafd1166051a095f6)
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

[33mcommit 87ada5b589f910656a383b81d8fed997f338620e[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Wed Mar 3 01:59:40 2021 +0000

    Get rid of ChangedRes (#1313)
    
    This replaces `ChangedRes` with simple associated methods that return the same info, but don't block execution. Also, since ChangedRes was infectious and was the only reason `FetchSystemParam::get_params` and `System::run_unsafe` returned `Option`s, their implementation could be simplified after this PR is merged, or as part of it with a future commit.

[33mcommit e035ce1f2a228c8ea39e76e72c3ba1e0038e3c2e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Mar 3 01:39:02 2021 +0000

    remove dev-dependencies from bevy_ecs (#1542)
    
    These are no longer used, increase build times, and currently break builds due to a broken criterion dependency on nightly.

[33mcommit bc4fe9b186db3f32eef38fc4241289df480fa949[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Mon Feb 22 09:15:29 2021 +0000

    keep track of type name in NodeState (#1444)
    
    Adds the original type_name to `NodeState`, enabling plugins like [this](https://github.com/jakobhellermann/bevy_mod_debugdump).
    This does increase the `NodeState` type by 16 bytes, but it is already 176 so it's not that big of an increase.

[33mcommit a1ec6841311b75c5b10222bad7760fdeca4c7aa7[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Mon Feb 22 09:15:27 2021 +0000

    fix bevy_ecs macro path handling (#1426)
    
    - It now doesn't search in the dev-dependencies anymore
    - and the behaviour is consistent for derive_bundle and derive_system_param

[33mcommit 72f2a7b581e96c9d0bc702a8b717ece790ce7999[m
Author: Jonas Matser <github@jonasmatser.nl>
Date:   Mon Feb 22 08:59:14 2021 +0000

    Add getter for RenderGraph Node uuid (#1499)
    
    `RenderGraph` errors only give the `Uuid` of the node. So for my graphviz dot based visualization of the `RenderGraph` I really wanted to show it to the user. I think it makes sense to have it accessible for at least debugging purposes.

[33mcommit 13b602ee3f3bf602acd3ea871f8da3771600c4e7[m
Author: Nathan Stocks <cleancut@github.com>
Date:   Mon Feb 22 08:42:19 2021 +0000

    Xtask CI (#1387)
    
    This PR is easiest to review commit by commit.
    
    Followup on https://github.com/bevyengine/bevy/pull/1309#issuecomment-767310084
    
    - [x] Switch from a bash script to an xtask rust workspace member.
      - Results in ~30s longer CI due to compilation of the xtask itself
      - Enables Bevy contributors on any platform to run `cargo ci` to run linting -- if the default available Rust is the same version as on CI, then the command should give an identical result.
    - [x] Use the xtask from official CI so there's only one place to update.
    - [x] Bonus: Run clippy on the _entire_ workspace (existing CI setup was missing the `--workspace` flag
      - [x] Clean up newly-exposed clippy errors
    
    ~#1388 builds on this to clean up newly discovered clippy errors -- I thought it might be nicer as a separate PR.~  Nope, merged it into this one so CI would pass.
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit c9f19d86639a2e08d98649335549196e7c824d92[m
Author: MinerSebas <scherthan_sebastian@web.de>
Date:   Mon Feb 22 04:50:05 2021 +0000

    Cleanup of Markdown Files and add CI Checking (#1463)
    
    I have run the VSCode Extension [markdownlint](https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint) on all Markdown Files in the Repo.
    The provided Rules are documented here: https://github.com/DavidAnson/markdownlint/blob/v0.23.1/doc/Rules.md
    
    Rules I didn't follow/fix:
    * MD024/no-duplicate-heading
      * Changelog: Here Heading will always repeat.
      * Examples Readme: Platform-specific documentation should be symmetrical.
    * MD025/single-title
    * MD026/no-trailing-punctuation
      * Caused by the ! in "Hello, World!".
    * MD033/no-inline-html
      * The plugins_guidlines file does need HTML, so the shown badges aren't downscaled too much.
    * ~~MD036/no-emphasis-as-heading:~~
      * ~~This Warning only Appears in the Github Issue Templates and can be ignored.~~
    * ~~MD041/first-line-heading~~
      * ~~Only appears in the Readme for the AlienCake example Assets, which is unimportant.~~
    
    ---
    
    I also sorted the Examples in the Readme and Cargo.toml in this order/Priority:
    * Topic/Folder
    * Introductionary Examples
    * Alphabetical Order
    
    The explanation for each case, where it isn't Alphabetical :
    * Diagnostics
      * log_diagnostics: The usage of inbuild Diagnostics is more important than creating your own.
    * ECS (Entity Component System)
      * ecs_guide: The guide should be read, before diving into other Features.
    * Reflection
      * reflection: Basic Explanation should be read, before more advanced Topics.
    * WASM Examples
      * hello_wasm: It's "Hello, World!".

[33mcommit e5b0c65c86e005b93508ed5222fd35e7e515235a[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Mon Feb 22 04:33:33 2021 +0000

    rename bevy_ui::node module so that bevy_ui::render::node isn't shadowed (#1464)
    
    Previously the `mod node` shadowed the `pub use render::node`, and `CAMERA_UI`, `NODE` and `UI_PASS` constants couldn't be used.

[33mcommit e76d6566d72800e274a52751b46b24b4c50b7d66[m
Author: Alexander KrivÃ¡cs SchrÃ¸der <alexschrod@gmail.com>
Date:   Mon Feb 22 04:15:50 2021 +0000

    Add backend feature metadata to make bevy_winit build on docs.rs again (#1430)
    
    The `bevy_winit` crate hasn't been able to build on docs.rs [since 0.2.1](https://docs.rs/crate/bevy_winit/0.4.0). This PR restores the ability of docs.rs to build `bevy_winit` again.
    
    (The choice of backend is essentially arbitrary, but choosing one *is required* for the crate to build)

[33mcommit ba2226a48724fdc0d68bac8f0fd66f79c26c9aad[m
Author: maxwellodri <maxwellodri@gmail.com>
Date:   Mon Feb 22 03:59:37 2021 +0000

    Added Hash and Deserialize/Serialize traits to ElementState (#1447)
    
    This adds traits that are already implemented for KeyCodes/Mouse Button etc.

[33mcommit 9bf80a856607f9eff2ddd52890aca0129107d436[m
Author: Anders Rasmussen <divinegod@gmail.com>
Date:   Mon Feb 22 03:59:36 2021 +0000

    Fix warning in scene example (#1441)
    
    I noticed the following error when trying out the `scene` example
    
    ```bash
    Feb 13 22:11:13.997  WARN bevy_asset::asset_server: encountered an error while loading an asset: No registration found for glam::f32::vec3::Vec3
    ```
    
    This PR fixes the error and makes the scene file load correctly

[33mcommit cd688d7a4112e7ea0e71a720d8f168c28d4eb4f5[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Mon Feb 22 03:59:35 2021 +0000

    fix rustdoc warnings (#1437)
    
    Every warning is fixed except for
    https://github.com/bevyengine/bevy/blob/b39df9a8d27076a8181c813b38e85833ad713be4/crates/bevy_render/src/texture/texture_descriptor.rs#L61
    because I didn't know what the required feature is.
    I opened https://github.com/gfx-rs/wgpu/issues/1213 for that.

[33mcommit d85b89b43040ba21fbdadc116ca5affe2e44f070[m
Author: Aevyrie <aevyrie@gmail.com>
Date:   Mon Feb 22 03:43:28 2021 +0000

    Update example with new stage terminology (#1496)
    
    Updates old comments from the old `stage::UPDATE` terminology to the new `CoreStage` enum.

[33mcommit 97a78c36989e5ea083d8c06d518a863b6c026f51[m
Author: Alec Deason <alec@tinycountry.com>
Date:   Mon Feb 22 03:43:27 2021 +0000

    Make vertex buffers optional (#1485)
    
    For some cases, like driving a full screen fragment shader, it is sometimes convenient to not have to create and upload a mesh because the necessary vertices are simple to synthesize in the vertex shader. Bevy's existing pipeline compiler assumes that there will always be a vertex buffer. This PR changes that such that vertex buffer descriptor is only added to the pipeline layout if there are vertex attributes in the shader.

[33mcommit 2e3af84590b6f6848855d4d8b839a5f601591fe4[m
Author: Niklas Eicker <hello@nikl.me>
Date:   Mon Feb 22 03:43:26 2021 +0000

    Add remove resource to commands (#1478)
    
    resolves #1468
    
    Co-authored-by: Niklas Eicker <git@nikl.me>

[33mcommit f73c6d18efbf188670b967eaef8c3cd2ae4668d5[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Mon Feb 22 03:23:57 2021 +0000

    better error message on failed derive (#1491)
    
    Before, when deriving `SystemLabel` for a type without `Clone`, the error message was:
    ```
    the trait `SystemLabel` is not implemented for `&TransformSystem`
    ```
    Now it is
    ```
    the trait `Clone` is not implemented for `TransformSystem`
    ```
    which directly shows what's needed to fix the problem.

[33mcommit 3319195f9036e9ee301545632b98f1090a3ba3b0[m
Author: Renato Caldas <renato@calgera.com>
Date:   Fri Feb 19 22:25:07 2021 +0000

    Implement Reflect for integer glam vectors. (#1455)
    
    This is a very simple change that allows the (reflected) use of integer glam vectors (UVec2 for instance) in components.

[33mcommit 578a5b1b881fdddb7141cd307586c15aa55b347b[m
Author: Yoh Deadfall <yoh.deadfall@hotmail.com>
Date:   Fri Feb 19 22:11:00 2021 +0000

    Moved benchmarks to a single place (#1477)
    
    Closes #1472.

[33mcommit 041fd27b0a26d29cff33a3f0755cd359eb869a95[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Fri Feb 19 21:25:52 2021 +0000

    Update all references to use main (#1483)
    
    In this case, the previous section header linked to in second badge in `plugins_guidelines` didn't actually exist, so I just linked to the same section as the first badge
    
    Also I need to check that github handles the relative links correctly

[33mcommit 59066c4854b8180c621820b97dca7077848d0458[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Fri Feb 19 21:15:29 2021 +0000

    Bors (#1482)
    
    * Time to do the bors tango

[33mcommit 89a41bc62843be5f92b4b978f6d801af4de14a2d[m
Author: Niklas Eicker <git@nikl.me>
Date:   Fri Feb 19 21:05:41 2021 +0100

    Replace merge_imports with imports_granularity=Crate (#1479)
    
    See rust-lang/rustfmt#4634

[33mcommit fa73036f9dd15d0439de3c47d47d2934f969bc99[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Fri Feb 19 22:36:34 2021 +0300

    Extend AppBuilder api with `add_system_set` and similar methods (#1453)
    
    Extend AppBuilder api with `add_system_set` and similar methods

[33mcommit 884dc46ffe5a6a08732ccdd100bdbfee265dd53c[m
Author: Niklas Eicker <git@nikl.me>
Date:   Fri Feb 19 19:51:26 2021 +0100

    Replace right/up/forward and counter parts with local_x/local_y and local_z (#1476)

[33mcommit c2a427f1a38db6b1d9798e631a7da7a8507fe18c[m
Author: Alexander Sepity <alexander.sepity@gmail.com>
Date:   Fri Feb 19 00:20:37 2021 +0300

    Non-string labels (#1423 continued) (#1473)
    
    Non-string labels

[33mcommit 82d0e84a5c563c81aa7253ff6340479d11ddc0c6[m
Author: Alexander Sepity <alexander.sepity@gmail.com>
Date:   Thu Feb 18 22:30:13 2021 +0300

    Explicit execution order ambiguities API (#1469)
    
    Explicit execution order ambiguities API.

[33mcommit a5d2501b75eccbe241a70ad8ccf09787e709fe1f[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Feb 17 03:00:12 2021 +0100

    add labels and ordering for transform and parent systems in POST_UPDATE stage (#1456)

[33mcommit a8952569253c5712e890e250cd10c999c1a6b379[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Tue Feb 16 14:18:08 2021 -0500

    Better documentation for explicit dependencies (#1428)
    
    * More in-depth ambiguity checker docs
    * Updated ecs_guide example with explicit dependencies

[33mcommit d021a3c3748ca921fa7c0aa94bfb09e6f30090d0[m
Author: Alexander Sepity <alexander.sepity@gmail.com>
Date:   Mon Feb 15 03:20:16 2021 +0300

    Relaxed bounds on `NonSend`. (#1448)

[33mcommit f8292ccf7ef99b254e936329de9dd7e079760e55[m
Author: Hans W. Uhlig <huhlig@gmail.com>
Date:   Fri Feb 12 21:32:32 2021 -0800

    Simple Implementation to address #1327 by adding a focused field to the window and related system (#1386)
    
    * Simple Implementation to address #1327 by adding a focused field to the window and related system
    
    * Changing Window update function from bevy_window to bevy_winit.
    
    * Removing unused imports.

[33mcommit b39df9a8d27076a8181c813b38e85833ad713be4[m
Author: Wouter Buckens <wou.buc@gmail.com>
Date:   Fri Feb 12 00:59:11 2021 +0100

    Fix missing paths in ECS SystemParam derive macro (#1434)

[33mcommit 3a32a21fe9caf19426542c93b466959c3cf23132[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Thu Feb 11 22:09:01 2021 +0000

    Fix clippy stuff (#1433)
    
    * Fix clippy stuff
    
    * Add comments explaining inconsistency
    
    Also explains that the code is unused

[33mcommit 7be096a254e86bd6388d96ea10b56b9ed6210685[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Tue Feb 9 20:37:49 2021 +0000

    Fix the z_sort_debug example from #1361 (#1419)
    
    Fixes #1411

[33mcommit d5a733043108972c51a785d61ad1a04c70d51d42[m
Author: Alexander Sepity <alexander.sepity@gmail.com>
Date:   Tue Feb 9 23:14:10 2021 +0300

    System sets and parallel executor v2 (#1144)
    
    System sets and parallel executor v2

[33mcommit b71ada03465a0343b4ead1b2896f44587e719a47[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Feb 8 18:13:37 2021 -0800

    revert default vsync mode to Fifo (#1416)
    
    the mailbox option doesn't do framelimiting on some devices. we need to rely on vsync for framelimiting until bevy supports framelimiting internally. #1343

[33mcommit 3475a64a2c04b237b4d3b8988722a48d29c17739[m
Author: MinerSebas <66798382+MinerSebas@users.noreply.github.com>
Date:   Sat Feb 6 02:44:34 2021 +0100

    More Doctest changes (#1405)
    
    * Add system() to DocTests
    
    * Hide use statements

[33mcommit c87d4c110f60fc0a92c2b37d999e1787a303f1c5[m
Author: szunami <sam.szuflita@gmail.com>
Date:   Fri Feb 5 15:57:47 2021 -0500

    Update example system in documentation (#1403)
    
    The existing snippet fails to compile with:
    
    ```
    no method named `system` found for fn item `fn(bevy::prelude::Commands) {example_system}` in the current scope
    ```

[33mcommit 110ff77db9cdbc2906d0bde0763a8527d79ff243[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Thu Feb 4 21:17:11 2021 -0700

    Fix regression causing "flipped" sprites to be invisible (#1399)
    
    Regressed in 81809c71ce139adbc49de78096722a9bf2495bab

[33mcommit 3adcba9461f79e7f63fb190e9606f522e9ab95cd[m
Author: dinococo <61065398+undinococo@users.noreply.github.com>
Date:   Thu Feb 4 00:15:25 2021 -0300

    Grammar fixes (#1390)
    
    * Minor grammar fixes
    
    * Minor grammar fixes
    
    Fixed punctuation and wording.
    
    * Minor grammar fixes
    
    FIxed spelling, wording and formatting.

[33mcommit 5b115397baf15f66e40b50ccacbc4a1422937abb[m
Author: davier <bricedavier@gmail.com>
Date:   Tue Feb 2 21:57:26 2021 +0000

    Fix Reflect serialization of tuple structs (#1366)
    
    * Fix  DynamicTupleStruct::type_name()
    
    * Fix type_name() for DynamicList, DynamicMap  and DynamicTuple

[33mcommit 4796ea8d22b9210d61f6749de011dbcbb4fe23d4[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Tue Feb 2 22:25:16 2021 +0100

    move texture_to_image and image_to_texture into new module (#1381)
    
    The `Texture::convert` function previously was only compiled when
    one of the image format features (`png`, `jpeg` etc.) were enabled.
    The `bevy_sprite` crate needs this function though, which led
    to compilation errors when using `cargo check --no-default-features
    --features render`.
    
    Now the `convert` function has no features and the `texture_to_image`
    and `image_to_texture` utilites functions are in an unconditionally
    compiled module.

[33mcommit 1ca8ce4a799af8dab2d926366de9ac3c8d30939c[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Feb 1 13:51:44 2021 -0800

    Update crossbeam-utils requirement from 0.7.2 to 0.8.1 (#959)
    
    Updates the requirements on [crossbeam-utils](https://github.com/crossbeam-rs/crossbeam) to permit the latest version.
    - [Release notes](https://github.com/crossbeam-rs/crossbeam/releases)
    - [Changelog](https://github.com/crossbeam-rs/crossbeam/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/crossbeam-rs/crossbeam/compare/crossbeam-0.7.2...crossbeam-utils-0.8.1)
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 05b8b5c8c23fa33b54ed3a464e62491c7d6b1e3d[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Feb 1 13:30:38 2021 -0800

    Update crossbeam-channel requirement from 0.4.4 to 0.5.0 (#668)
    
    Updates the requirements on [crossbeam-channel](https://github.com/crossbeam-rs/crossbeam) to permit the latest version.
    - [Release notes](https://github.com/crossbeam-rs/crossbeam/releases)
    - [Changelog](https://github.com/crossbeam-rs/crossbeam/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/crossbeam-rs/crossbeam/compare/crossbeam-channel-0.4.4...crossbeam-channel-0.5.0)
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

[33mcommit 89df94e6904e1215aa304b5f006881af4d38c11b[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Feb 1 13:29:54 2021 -0800

    Update ahash requirement from 0.6.1 to 0.7.0 (#1370)
    
    Updates the requirements on [ahash](https://github.com/tkaitchuck/ahash) to permit the latest version.
    - [Release notes](https://github.com/tkaitchuck/ahash/releases)
    - [Commits](https://github.com/tkaitchuck/ahash/commits)
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

[33mcommit b9b4a494190afb5e3c8469ddf73947fe281d99e7[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Feb 1 12:26:55 2021 -0800

    fix rebase workflow (again)

[33mcommit 7095dfe4c8b4575159e9078eadfaf3bf4db47eac[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Feb 1 12:23:18 2021 -0800

    fix rebase workflow

[33mcommit 32114c1ca8ca951e53dc5b89b51d3cad7ec58208[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Feb 1 12:18:58 2021 -0800

    add rebase action (#1368)

[33mcommit 6b8f8a7ed020acb4301326d8bdcefa80bba9f957[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Feb 1 20:30:11 2021 +0100

    Texture atlas format and conversion (#1365)
    
    * can specify texture format for a texture atlas
    * add automatic conversion

[33mcommit cf5f3b500820344fc9162084da4fa9a884f155a3[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Feb 1 05:19:10 2021 +0100

    Plugin guidelines (#1250)
    
    * add plugin guidelines
    * refactor features list

[33mcommit 81809c71ce139adbc49de78096722a9bf2495bab[m
Author: Zhixing Zhang <me@neoto.xin>
Date:   Sun Jan 31 23:06:42 2021 -0500

    Update to wgpu-rs 0.7 (#542)
    
    Update to wgpu-rs 0.7

[33mcommit e6e23fdfa97b0ebfad3495407d9dff27d75ab843[m
Author: Will Crichton <wcrichto@cs.stanford.edu>
Date:   Sun Jan 31 20:13:16 2021 -0500

    Add support for gltf::Material::unlit (#1341)
    
    * Add support for gltf::Material::unlit

[33mcommit 06dbfffe2eeb5e076c560feff66fc230021402e9[m
Author: Spencer Burris <sburris@posteo.net>
Date:   Sun Jan 31 17:03:54 2021 -0800

    Update default features in docs/cargo_features.md (#1287)

[33mcommit 1d3dfd39382cefeafde11c6203c58059c1cf0f2c[m
Author: davier <bricedavier@gmail.com>
Date:   Mon Feb 1 01:03:25 2021 +0000

    Fix Interaction not resetting to None sometimes (#1315)
    
    * Fix Interaction getting stuck when pressing and releasing mouse button in one frame
    
    * Fix Interaction not resetting in some cases with FocusPolicy::Pass

[33mcommit 0867dc76a3c50c60f4b6d7e45daecede5c41ca8a[m
Author: Nathan Stocks <cleancut@github.com>
Date:   Sun Jan 31 17:35:23 2021 -0700

    Use Cow<'static, str> in Name (#1308)
    
    * Implement Name { name } as Cow<'static, str>
    * Attempt impl Reflect for Cow<'static, str.>

[33mcommit 7d065eeb718bffd55bf8c2dfc5add2220c51d830[m
Author: Jasen Borisov <40234599+jamadazi@users.noreply.github.com>
Date:   Mon Feb 1 01:22:06 2021 +0100

    3D OrthographicProjection improvements + new example (#1361)
    
    * use `length_squared` for visible entities
    
    * ortho projection 2d/3d different depth calculation
    
    * use ScalingMode::FixedVertical for 3d ortho
    
    * new example: 3d orthographic

[33mcommit 83e30a841a35bb6d3688d96f05cc650f3a62d9c0[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sun Jan 31 22:54:15 2021 +0100

    bind the labeled asset type to the actual loaded asset (#1363)
    
    bind the labeled asset type to the actual loaded asset

[33mcommit 49040803823f6314e5ea0f6066d0fcddc3448a53[m
Author: Jeremiah Senkpiel <fishrock123@rocketmail.com>
Date:   Sun Jan 31 13:41:13 2021 -0800

    examples: add rng coloring to bevymark birds (#1192)
    
    This is something done by a lot of the "bunnymark" tests, and it makes it easier to really see how many you've added.

[33mcommit 83777e0ccfb0bc52bcbdec4a3abae8e136b23335[m
Author: Wojciech Olejnik <Divoolej@users.noreply.github.com>
Date:   Sun Jan 31 22:29:04 2021 +0100

    Update config_fast_builds for latest nightly (#1362)
    
    `-Zrun-dsymutil` has been recently replaced with `-Csplit-debuginfo` (still nightly-only)
    See: https://github.com/rust-lang/rust/pull/79570

[33mcommit bff44f76ec8a532b0cac88fa02cc2583a2e860e1[m
Author: Zicklag <zicklag@katharostech.com>
Date:   Sat Jan 30 15:32:46 2021 -0600

    Fix Un-Renamed add_resource Compile Error (#1357)

[33mcommit 6f5a4d9debb039aebc5f728705f71c0806ec08f1[m
Author: Alice Cecile <alice.i.cecile@gmail.com>
Date:   Sat Jan 30 15:55:13 2021 -0500

    Rename add_resource to insert_resource (#1356)
    
    * Renamed add_resource to insert_resource
    
    * Changed usage of add_resource to insert_resource
    
    * Renamed add_thread_local_resource

[33mcommit b922a3ec601cf0eb2d6724b8e47a8dd526cc5b7d[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Sat Jan 30 20:48:11 2021 +0000

    Update init_resource to not overwrite (#1349)
    
    Update init_resource to not overwrite

[33mcommit 8e0e4223e5a8bae91b4408a0da95cdb2c582aa86[m
Author: Renato Caldas <renato@calgera.com>
Date:   Sat Jan 30 20:47:27 2021 +0000

    Improve clarity of WindowTextureNode and WindowSwapchainNode error messages (#1355)
    
    Improve clarity of WindowTextureNode and WindowSwapchainNode error messages

[33mcommit 61c9a40fdedda31a686a24447688004615ac1ba7[m
Author: Telzhaak <da.ahrens@outlook.de>
Date:   Sat Jan 30 21:10:14 2021 +0100

    [Bugfix] add_stage now checks Stage existence (#1346)
    
    add_stage now checks stage existence

[33mcommit 57f9ac18d7ac039d94466c479b70802597569259[m
Author: Jasen Borisov <40234599+jamadazi@users.noreply.github.com>
Date:   Sat Jan 30 11:31:03 2021 +0100

    OrthographicProjection scaling mode + camera bundle refactoring (#400)
    
    * add normalized orthographic projection
    
    * custom scale for ScaledOrthographicProjection
    
    * allow choosing base axis for ScaledOrthographicProjection
    
    * cargo fmt
    
    * add general (scaled) orthographic camera bundle
    
    FIXME: does the same "far" trick from Camera2DBundle make any sense here?
    
    * fixes
    
    * camera bundles: rename and new ortho constructors
    
    * unify orthographic projections
    
    * give PerspectiveCameraBundle constructors like those of OrthographicCameraBundle
    
    * update examples with new camera bundle syntax
    
    * rename CameraUiBundle to UiCameraBundle
    
    * update examples
    
    * ScalingMode::None
    
    * remove extra blank lines
    
    * sane default bounds for orthographic projection
    
    * fix alien_cake_addict example
    
    * reorder ScalingMode enum variants
    
    * ios example fix

[33mcommit af6723156782b5579c90b4eac1fa49b1646dbaf5[m
Author: Zicklag <zicklag@katharostech.com>
Date:   Fri Jan 29 15:26:21 2021 -0600

    Fix Bug in Asset Server Error Message Formatter (#1340)

[33mcommit 8e69ff2c2b69f7f67edd220169f21dfe6fb8a180[m
Author: Jasen Borisov <40234599+jamadazi@users.noreply.github.com>
Date:   Fri Jan 29 20:36:02 2021 +0100

    README: explicitly link to Learning section of awesome-bevy (#1330)
    
    README: link to Learning section of awesome-bevy

[33mcommit cc9ed52ea7f72449215f13710fcb6370d02d9ac8[m
Author: Zicklag <zicklag@katharostech.com>
Date:   Thu Jan 28 16:14:50 2021 -0600

    Update Scene Example to Use scn.ron File (#1339)

[33mcommit 5146112f5f5c085805ad6f162d36bac168c18489[m
Author: TotalKrill <kristoffer.odmark90@gmail.com>
Date:   Thu Jan 28 23:05:09 2021 +0100

    Add discord shield badge to README (#1332)
    
    This would highlight how active the community really is at just a glance, which is nice. It will however require an admin of the discord server to activate this under Server Settings->Widget-> enable server widget

[33mcommit 4a6b2c5f8e93c87d347ab3b75d9532377e1cabf4[m
Author: Mark <61286840+Marruk-pixel@users.noreply.github.com>
Date:   Thu Jan 28 21:58:20 2021 +0000

    Update README.md (#1338)
    
    - added some missing examples
    - changed the order of a few examples (app/empty came after app/empty_default for example)
    - added a table with the examples for Android and iOS, like it was done for wasm
    
    see [`issue 1326`](https://github.com/bevyengine/bevy/issues/1326)

[33mcommit 3529dd6fdf14352879c0d78128e6ed3d1f001d48[m
Author: Nathan Stocks <cleancut@github.com>
Date:   Tue Jan 26 18:11:38 2021 -0700

    CI Tuning (#1318)
    
    * Simplify syntax & lint. Combine apt installations into a single step.  Future-proof OS selections.
    
    * Remove caching
    
    * Run clippy within the linux stable build. Parallelize all the builds. Cargo check is unneeded.
    
    * build and run tests on windows and macos

[33mcommit 940bcf9b0f68e4a94a26e415b6afb13d4cb776eb[m
Author: Nathan Stocks <cleancut@github.com>
Date:   Tue Jan 26 13:05:33 2021 -0700

    Add Contributing Info (#1309)
    
    * Add a CONTRIBUTING.md
    
    * Point to book. Add tools/ci script.
    
    * Update contributing link to point to book

[33mcommit f3306e5490676f1ccb5894633b445fe35176b429[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Tue Jan 26 20:58:46 2021 +0100

    implement Debug for Flags regardless of underlying type (#1323)

[33mcommit 528c2858e0652bbba78997926304b8e0319cd473[m
Author: davier <bricedavier@gmail.com>
Date:   Tue Jan 26 19:53:55 2021 +0000

    Expose more info in PositionedGlyph (#1319)

[33mcommit b6485ccf29e23f24c972d2f9a57c0c2da1f1a1df[m
Author: Zicklag <zicklag@katharostech.com>
Date:   Mon Jan 25 14:37:23 2021 -0600

    Process Asset File Extensions With Multiple Dots (#1277)
    
    Process Asset File Extensions With Multiple Dots
    Fixes #1276

[33mcommit 5edf2d2395508e856a420f7fe9bc7ad85a2aba11[m
Author: davier <bricedavier@gmail.com>
Date:   Mon Jan 25 05:00:20 2021 +0000

    Prevent ImageBundles from causing constant layout recalculations (#1299)
    
    Prevent ImageBundles from causing constant layout recalculations

[33mcommit 32acbfb632a4085dede1234d8b3bd51a8b15bd9d[m
Author: Toniman20 <toniman575@gmail.com>
Date:   Mon Jan 25 05:06:06 2021 +0100

    Added `set_minimized` and `set_position` to `Window` (#1292)
    
    Added `set_minimized` and `set_position` to `Window`

[33mcommit 7e368e0b782161813890722d3768a11852d5e391[m
Author: RedlineTriad <39059512+RedlineTriad@users.noreply.github.com>
Date:   Mon Jan 25 04:05:30 2021 +0000

    Add more transform relative vectors (#1300)
    
    * Add more transform relative vectors (#1298)
    
    * Add inverse of relative directions (#1298)

[33mcommit 40b5bbd028703e38abc28a591fb5019fff105458[m
Author: tigregalis <38416468+tigregalis@users.noreply.github.com>
Date:   Mon Jan 25 09:07:43 2021 +0800

    Rich text (#1245)
    
    Rich text support (different fonts / styles within the same text section)

[33mcommit 3d0c4e380ca0776f810252730a6d9cc53119a155[m
Author: Will Crichton <wcrichto@cs.stanford.edu>
Date:   Sat Jan 23 16:23:16 2021 -0500

    Don't panic on error when loading assets (#1286)
    
    * Don't panic on IO errors
    * Better formatting for asset server errors

[33mcommit f2b73eaa8a25ca97618377cad251d41546a37ddd[m
Author: Tomasz Sterna <tomasz@sterna.link>
Date:   Sat Jan 23 22:18:28 2021 +0100

    Fix documentation comment for State::overwrite_next (#1291)

[33mcommit 7166a28bafa669eac40f5864cce8a150b330dd5f[m
Author: Will Crichton <wcrichto@cs.stanford.edu>
Date:   Fri Jan 22 18:15:08 2021 -0500

    Enable dynamic mutable access to component data  (#1284)
    
    * Enable dynamic mutable access to component data
    
    * Add clippy allowance, more documentation

[33mcommit ebcab3638abbb1a3ac1e64f299550c5ba68072e9[m
Author: Will Crichton <wcrichto@cs.stanford.edu>
Date:   Fri Jan 22 17:13:26 2021 -0500

    Change Name to take Into<String> instead of String (#1283)

[33mcommit 6bd5ec8404c9e375661bf47a7c20117f272c9075[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Fri Jan 22 22:09:14 2021 +0000

    Change to using add_run_criteria (#1282)

[33mcommit 0a39c81be6b5712c24a75a7c215dbe254097adff[m
Author: Renato Caldas <renato@calgera.com>
Date:   Fri Jan 22 01:53:43 2021 +0000

    Add support for reading from mapped buffers (#1274)
    
    * Add support for mapping buffers for reading.
    
    * Add support for reading from a mapped buffer.

[33mcommit 18e4fa8cdfaa34ee0f1f5987a899eed9da4a1d4c[m
Author: Aevyrie <aevyrie@gmail.com>
Date:   Thu Jan 21 17:49:29 2021 -0800

    world coords to screen space (#1258)
    
    Add Camera::world_to_screen to convert world coordinates to screen space

[33mcommit f15d62c0f1f89a73fbc32679baf01bb9ad33a797[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Fri Jan 22 03:05:23 2021 +0300

    More types (#1267)

[33mcommit 8c33da0051ef1c7076764134878d33515d8c30ab[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Jan 21 23:10:02 2021 +0100

    3d game example (#1252)
    
    3d game example

[33mcommit 7aefd727f6faa4e2cd2157a6a7a636b2c1de3715[m
Author: bjorn3 <bjorn3@users.noreply.github.com>
Date:   Wed Jan 20 23:24:57 2021 +0100

    Use valid keys to initialize AHasher in FixedState (#1268)
    
    Using 0 as keys causes the hasher to get stuck

[33mcommit ac7d2de67c6f5ba05ff61a4ee1835dc0d111dac2[m
Author: reidbhuntley <reidbhuntley@gmail.com>
Date:   Tue Jan 19 17:41:37 2021 -0500

    Count number of times a repeating Timer wraps around in a tick (#1112)
    
    Added just_finished_count() function

[33mcommit 1e8060a5a28edcb615f50733aab982fc85d0ece6[m
Author: Alec Deason <alec-deason@users.noreply.github.com>
Date:   Tue Jan 19 13:07:45 2021 -0800

    Add missing spawn_local method to Scope in the single threaded executor case (#1266)

[33mcommit 50ceaf3559660a34ffd3bf4b399a9aeb2c76e06c[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Tue Jan 19 23:56:50 2021 +0300

    re-export integer vectors from glam (#1264)

[33mcommit a880b5450829411b0248e47cc066915234371d86[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Tue Jan 19 09:23:30 2021 +0300

    Make EventReader a SystemParam (#1244)
    
    * Add generic support for `#[derive(SystemParam)]`
    * Make EventReader a SystemParam

[33mcommit 71c6a19ed85593d87ecc07984c604f4462c2b11e[m
Author: Alec Deason <alec-deason@users.noreply.github.com>
Date:   Mon Jan 18 16:52:06 2021 -0800

    Minimal change to support instanced rendering (#1262)

[33mcommit a0475e9ad50f4e59a1dc74fc8bad0f067993bd6e[m
Author: Nathan Stocks <cleancut@github.com>
Date:   Mon Jan 18 17:50:36 2021 -0700

    Change 'components' to 'bundles' where it makes sense semantically (#1257)
    
    change 'components' to 'bundles' where it makes sense semantically

[33mcommit 3c5f1f8a804de52c8f3e78213279c45828dd99a0[m
Author: Alec Deason <alec-deason@users.noreply.github.com>
Date:   Mon Jan 18 13:48:28 2021 -0800

    Support for !Send tasks (#1216)
    
    Support for !Send tasks

[33mcommit e7dab0c359b55bba113e4cb99f1bef5ca3f976c7[m
Author: Cameron Hart <cameron.hart@gmail.com>
Date:   Mon Jan 18 10:44:55 2021 +1300

    Update glam to 0.12.0 (#1249)

[33mcommit 4d5ba7918be1a471a61b737e067fa7123ea14fd0[m
Author: Christopher Durham <cad97@cad97.com>
Date:   Sun Jan 17 16:43:03 2021 -0500

    Update rand requirement from 0.7 to 0.8 (#1114)
    
    * Update rand requirement from 0.7 to 0.8
    
    * Update examples' usage of Rng::gen_range

[33mcommit cf0e9f9968bb1bceb92a61cd773478675d35cbd6[m
Author: Zhixing Zhang <account@neoto.xin>
Date:   Thu Jan 14 14:01:07 2021 -0500

    Adding copy_texture_to_buffer and copy_texture_to_texture (#1236)
    
    * Adding copy_texture_to_buffer and copy_texture_to_texture
    
    * Adding CopyTextureToTexture and CopyTextureToBuffer in CommandQueue

[33mcommit 6a0116e994cb7d9d105cb0897f542701d955db88[m
Author: Yoh Deadfall <yoh.deadfall@hotmail.com>
Date:   Tue Jan 12 23:06:01 2021 +0100

    Removed unreferenced trait (#1230)

[33mcommit 478f947768b5c72814abcc9a55fb822ffb13dd0d[m
Author: JoÃ£o Capucho <jcapucho7@gmail.com>
Date:   Tue Jan 12 22:05:13 2021 +0000

    Don't panic if there's no index buffer and call draw (#1229)

[33mcommit fbf08ac54512f8b3b1b10e4796c1c553db88e76d[m
Author: bjorn3 <bjorn3@users.noreply.github.com>
Date:   Tue Jan 12 22:21:45 2021 +0100

    Faster compilation of bevy_diagnostic (#1235)
    
    * Remove AHashExt
    
    There is little benefit of Hash*::new() over Hash*::default(), but it
    does require more code that needs to be duplicated for every Hash* in
    bevy_utils. It may also slightly increase compile times.
    
    * Add StableHash* to bevy_utils
    
    * Use StableHashMap instead of HashMap + BTreeSet for diagnostics
    
    This is a significant reduction in the release mode compile times of
    bevy_diagnostics
    
    ```
    Benchmark #1: touch crates/bevy_diagnostic/src/lib.rs && cargo build --release -p bevy_diagnostic -j1
      Time (mean Â± Ï):      3.645 s Â±  0.009 s    [User: 3.551 s, System: 0.094 s]
      Range (min â¦ max):    3.632 s â¦  3.658 s    20 runs
    ```
    
    ```
    Benchmark #1: touch crates/bevy_diagnostic/src/lib.rs && cargo build --release -p bevy_diagnostic -j1
      Time (mean Â± Ï):      2.938 s Â±  0.012 s    [User: 2.850 s, System: 0.090 s]
      Range (min â¦ max):    2.919 s â¦  2.969 s    20 runs
    ```

[33mcommit c434f57de1da4e1d05ca0daa6e1080460e0caa9c[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Jan 11 23:28:32 2021 +0100

    use biggest RenderResources instead of first (#1208)

[33mcommit 4a0837048cba3028ca3ec136f72fd9c1dcb97edd[m
Author: Adamaq01 <adamthibert01@gmail.com>
Date:   Sat Jan 9 03:29:03 2021 +0100

    Made ReflectMut::Tuple enum variant use a mutable reference (#1226)

[33mcommit a6a242cb868edfa6a778869227d223d748fbe6f2[m
Author: Schell Carl Scivally <efsubenovex@gmail.com>
Date:   Fri Jan 8 12:45:54 2021 -0800

    Render Layers (#1209)
    
    Adds RenderLayers, which enable cameras and entities to opt in to layers that apply to them

[33mcommit 3f2dd22cb50064dcab559a290f425f1d0b4acbab[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Fri Jan 8 20:39:33 2021 +0100

    bevy_render: add torus and capsule shape (#1223)
    
    * bevy_render: add torus shape
    
    * bevy_render: add capsule shape
    
    * bevy_render: reorganize shape module
    
    * bevy_render: add more docs

[33mcommit 5e7456115aa636df76b32b526410823e8d9e4a18[m
Author: TehPers <tehperz@gmail.com>
Date:   Thu Jan 7 19:50:09 2021 -0800

    Implement Reflect for tuples up to length 12 (#1218)
    
    Add Reflect impls for tuples up to length 12

[33mcommit 9bce8712b5591d70be1f5ba6bcdf84fe185a8e2f[m
Author: AngelicosPhosphoros <xuzin.timur@gmail.com>
Date:   Fri Jan 8 04:42:09 2021 +0300

    Use fxhash in TypeIdMap. (#1119)
    
    Relying on TypeId being some hash internally isn't future-proof because there is no guarantee about internal layout or structure of TypeId. I benchmarked TypeId noop hasher vs fxhash and found that there is very little difference.
    Also fxhash is likely to be better supported because it is widely used in rustc itself.
    [Benchmarks of hashers](https://github.com/bevyengine/bevy/issues/1097)
    [Engine wide benchmarks](https://github.com/bevyengine/bevy/pull/1119#issuecomment-751361215)

[33mcommit 0e0906d22ed10346c3467ce089ed91e139c026cd[m
Author: David Ackerman <enfipy@gmail.com>
Date:   Thu Jan 7 23:37:22 2021 +0200

    Fix iOS touch location (#1224)

[33mcommit 599f381a6a98eded6c96c1d2225a1a2b30384aaf[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Thu Jan 7 21:35:40 2021 +0100

    fix repeated gamepad events (#1221)
    
    Previously, if the actual value of LeftStickX was e.g. 0.034 and fluctuated a little
    bit (less than the threshold) it would repeatedly send out events,
    because it compared the value to the *filtered* old one - 0.0 - which is
    more then `0.01` (the threshold) away.
    
    The is fixed by first doing the deadzone and then comparing to the old
    value.
    Another possible solution would be to store both the actual old value
    and the filtered one, but that would add complexity.

[33mcommit 9f2410a4ac8cf035ce48662028bb1a8674b8367c[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Thu Jan 7 01:17:06 2021 +0000

    Add `from_xyz` to `Transform` (#1212)
    
    * Add the from_xyz helper method to Transform
    
    * Use `from_xyz` where possible

[33mcommit 12d4184d7c854a498caf88bb13bff9b25d3429de[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Jan 7 01:15:59 2021 +0100

    fix label to load gltf scene (#1204)

[33mcommit c69aa98a60e378a1b54d24bf26eefe49dcb372bf[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Sun Jan 3 23:39:30 2021 +0300

    Refactor `Box<dyn System>` to BoxedSystem (#1191)
    
    Added BoxedSystem

[33mcommit 60be99859a38587e2e9ae4ba992b2b15b67659a0[m
Author: Nathan Jeffords <blunted2night@gmail.com>
Date:   Sun Jan 3 12:39:11 2021 -0800

    Subpixel text positioning (#1196)
    
    * cleanup unnecessary changes from PR #1171
    
    * add feature to correctly render glyphs with sub-pixel positioning

[33mcommit 8a330a889d8000ad6edacc23d18667f7b2fa73b4[m
Author: Rob Parrett <robparrett@gmail.com>
Date:   Sun Jan 3 13:10:23 2021 -0700

    Add support for OTF fonts (#1200)

[33mcommit 820f37fccfbc305663ef4b786c09c580ae8d0d01[m
Author: Restioson <restiosondev@gmail.com>
Date:   Sun Jan 3 21:57:18 2021 +0200

    add convenience function (#1197)

[33mcommit ca310b856f76566c44acd07125d7c0628273aa56[m
Author: MsK` <msk@lywenn.eu.org>
Date:   Sun Jan 3 20:39:15 2021 +0100

    New mesh attribute: color (#1194)
    
    New mesh attribute: color

[33mcommit b7e35ef74470358421febb47c88236de9917cf7a[m
Author: Adam Bates <adam@adambates.ca>
Date:   Sun Jan 3 14:36:42 2021 -0500

    Made gilrs crate public within bevy so we can reference the plugin outside of DefaultPlugins. (#1195)

[33mcommit 804c068cc98fea71a9cec7e9a20f574569234214[m
Author: ThÃ©o Degioanni <30992420+Moxinilian@users.noreply.github.com>
Date:   Sun Jan 3 20:28:00 2021 +0100

    bevy_reflect incorrectly looks for bevy in dev-deps (#1182)
    
    * fix: bevy_reflect looking for bevy in dev-deps
    * fix: support bevy as dev-dep only in bevy_reflect

[33mcommit 6c07c80f81b592d622fdb69f159085412e09281f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jan 1 16:13:27 2021 -0600

    Update feature_request.md

[33mcommit c95d0ddfb998a06b8674ecb5837733aba76d0946[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Jan 1 23:06:40 2021 +0100

    remove panics when mixing UI and non UI entities in hierarchy (#1180)
    
    * replace unwrap with logs when mixing UI and non UI entities in hierarchy

[33mcommit b8fb462effa8964eb2ade0f2385fc08f2777439f[m
Author: Nathan Jeffords <blunted2night@gmail.com>
Date:   Fri Jan 1 13:36:00 2021 -0800

    Text2d render quality (#1171)
    
    improve quality of text2d rendering
    
    * remove coordinate tweaking in sprite-sheet shader
    * fixes glyph shimmering of animated text
    * reposition glyph before passing it to ab_glyph to normalize its rendering
    
    The result of layout of sequence of glyphs causes individuals to have fractional positions, but since glyph renderings are reused for future instances of that glyph, this produces errors. This change accepts the errors but repositions the glyph to "0, 0" in an effort to get the cleanest possible rendering.

[33mcommit a01f22e0c5f3efb98239fbd2adaa90a41d21bb1b[m
Author: Dimitri Belopopsky <ShadowMitia@users.noreply.github.com>
Date:   Fri Jan 1 22:31:22 2021 +0100

    Add basic file drag and drop support (#1096)
    
    Add basic file drag and drop support

[33mcommit 228c3df75134a5bf8140c2919349d721476790f0[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Jan 1 22:30:18 2021 +0100

    use Name on node when loading a gltf file (#1183)
    
    * export Name in prelude
    * use Name instead of Labels in gltf scenes

[33mcommit c25b41a0387a06693b502f2fbddc9b13e0d02ece[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Jan 1 21:58:49 2021 +0100

    add scene instance entity iteration  (#1058)
    
    add scene instance entity iteration

[33mcommit 030ccf1984d685f63ed96327910c5eb3eafe450e[m
Author: Matthias Seiffert <matthias-seiffert@hotmail.de>
Date:   Fri Jan 1 21:52:09 2021 +0100

    Derive Clone for SpriteSheetBundle and SpriteBundle (#1177)
    
    * Derive Clone for TextureAtlasSprite and SpriteSheetBundle
    
    * Derive Clone for Sprite and SpriteBundle

[33mcommit 271644a4f759de3d7a2877b232b47ac78dfd5fa1[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Dec 31 18:43:48 2020 -0600

    Update base64 requirement from 0.12.3 to 0.13.0 (#628)
    
    Updates the requirements on [base64](https://github.com/marshallpierce/rust-base64) to permit the latest version.
    - [Release notes](https://github.com/marshallpierce/rust-base64/releases)
    - [Changelog](https://github.com/marshallpierce/rust-base64/blob/master/RELEASE-NOTES.md)
    - [Commits](https://github.com/marshallpierce/rust-base64/compare/v0.12.3...v0.13.0)
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

[33mcommit 8f426b71c94dbcc7766c1cc1319569a56a37f44f[m
Author: Adam Bates <adam@adambates.ca>
Date:   Thu Dec 31 19:37:02 2020 -0500

    Minor grammar fix in code-comment for fn in state (#1173)

[33mcommit f71dc5daebb82fd6a5bfbd0e8f927238232bc4e2[m
Author: Patrik Buhring <patrikbuhring@gmail.com>
Date:   Thu Dec 31 17:51:21 2020 -0500

    Fix potential bug when using multiple lights. (#1055)

[33mcommit d91117d6e751f235ab881fe61c967db8a8daf1f7[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Dec 31 23:29:08 2020 +0100

    add `Flags<T>` as a query to get flags of component (#1172)
    
    add `Flags` as a query to get flags of component

[33mcommit bbae58a1f376dab4d33f8ef1b424beab361e6f84[m
Author: MinerSebas <66798382+MinerSebas@users.noreply.github.com>
Date:   Thu Dec 31 23:06:12 2020 +0100

    Remove outdated Documentation (#1178)

[33mcommit 38010d96ab47d5738a6d4c9ca788d5d6b923185a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Dec 31 16:05:37 2020 -0600

    remove unnecessary semicolon (#1179)

[33mcommit 21794fe6df65002521823f2f20eff5ab0a158373[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Dec 31 21:57:15 2020 +0100

    make more information available from loaded GLTF model (#1020)
    
    make more information available from loaded GLTF model
    * make gltf nodes available as assets
    * add list of primitive per mesh, and their associated material
    * complete gltf structure
    * get names of gltf assets
    * only load materials once
    * add labels with node names

[33mcommit 30fd302c7e1d3a34bde5f9c98bf31bc5ee26d075[m
Author: Felipe Jorge <felipe.jorge.pereira@gmail.com>
Date:   Thu Dec 31 17:52:02 2020 -0300

    Name component with fast comparisons (#1109)
    
    Name component with fast comparisons

[33mcommit 6531fcdfd27b3fbae050643116754916ca3f3b3d[m
Author: Nathan Jeffords <blunted2night@gmail.com>
Date:   Wed Dec 30 14:40:50 2020 -0800

    HIDPI Text (#1132)
    
    HIDPI Text
    * add more operator overloads to `bevy::math::Size`
    * render UI text at physical resolution

[33mcommit 2754a9dde825bee6411ef1fba40ed9c03edd22d4[m
Author: MsK` <msk@lywenn.eu.org>
Date:   Wed Dec 30 22:17:44 2020 +0100

    Mutable mesh accessors: indices_mut and attribute_mut (#1164)
    
    mutable mesh accessors: indices_mut and attribute_mut

[33mcommit 871b47f1c301140353fcfabf45c52607b90ffe5d[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Dec 28 22:31:23 2020 +0100

    let user disable feature png when using only other format (#1156)

[33mcommit adb249c39484671d6448597a4898fb463e71e072[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Dec 28 22:25:01 2020 +0100

    enable change detection for labels (#1155)

[33mcommit b94f26618364ed03b9db1ebc89ad4ff3e30c8581[m
Author: W. Brian Gourlie <bgourlie@gmail.com>
Date:   Mon Dec 28 15:24:31 2020 -0600

    Implement Copy for ElementState (#1154)

[33mcommit 3cb2e22e89f6e4c0622cec7ca7e863b91a86136c[m
Author: TheRawMeatball <therawmeatball@gmail.com>
Date:   Mon Dec 28 23:26:50 2020 +0300

    Added use_dpi setting to WindowDescriptor (#1131)
    
    Added scale_factor_override

[33mcommit 4825051c6a2faf097ff3976db10e06b782f04056[m
Author: Gilbert RÃ¶hrbein <gilbert@ifsr.de>
Date:   Mon Dec 28 01:28:49 2020 +0100

    Test entity labels, fixed corner cases, changed interface (#1152)
    
    * Test entity labels, fixed corner cases, changed interface
    
    * add tests for entity_labels_system
    * fixed filling label_entities map
    * fixed corner cases when removing entities, Labels component
    * changed EntityLabels::get to return slice or empty slice instead of
      None or Some empty or non-empty slice
    
    Changing the interface of EntityLabels::get is beneficial, since else
    you would get different results in case there was an entity before that
    with this missing label or not. You would either get None or Some(&[])
    and need to handle both, which is actually not necessary.
    
    * register type Labels in CorePlugin

[33mcommit 909b396b9e8d5068cb2037086d6dc42a20dee3ff[m
Author: Martin Lavoie <broemartino@gmail.com>
Date:   Sun Dec 27 19:24:31 2020 +0000

    Add option to ignore events when receving unknown WindowId (#1072)
    
    Ignore window events with unknown window id

[33mcommit f574c2c547c367aa7627647e372ead261ab553f3[m
Author: Nathan Stocks <cleancut@github.com>
Date:   Sun Dec 27 12:19:03 2020 -0700

    Render text in 2D scenes (#1122)
    
    Render text in 2D scenes

[33mcommit c32c78fc66be2a4a907784b2dcc552e7f9985f52[m
Author: ColonisationCaptain <52425971+ColonisationCaptain@users.noreply.github.com>
Date:   Thu Dec 24 19:30:36 2020 +0000

    Update fedora version (#1111)

[33mcommit b28365f966d74dccd306c7a584d082a09ac362e2[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Dec 24 20:28:31 2020 +0100

    updates on diagnostics (log + new diagnostics) (#1085)
    
    * move print diagnostics to log
    
    * entity count diagnostic
    
    * asset count diagnostic
    
    * remove useless `pub`s
    
    * use `BTreeMap` instead of `HashMap`
    
    * get entity count from world
    
    * keep ordered list of diagnostics

[33mcommit d3d6c3578953f6c5f73e538616b9e830fd5a2476[m
Author: Martin Lavoie <broemartino@gmail.com>
Date:   Thu Dec 24 18:43:30 2020 +0000

    Add an alternative winit runner that can be started when not on the main thread (#1063)

[33mcommit 0a51a26aba4d309bcc909b84b4b5b07922d9aec1[m
Author: Jakob Hellermann <jakob.hellermann@protonmail.com>
Date:   Thu Dec 24 02:41:34 2020 +0100

    bevy_render: load .spv assets (#1104)
    
    bevy_render: ShaderLoader can now load spv files

[33mcommit cbc0fe141651f62a99d291c5e829b86bf005fd6f[m
Author: Patrik Buhring <patrikbuhring@gmail.com>
Date:   Wed Dec 23 18:21:10 2020 -0500

    Modify Derive to allow unit structs for RenderResources. (#1089)

[33mcommit acc29ec719814d4814444d26cca023c08307c316[m
Author: Ryan Lee <drdgvhbh@gmail.com>
Date:   Wed Dec 23 17:53:02 2020 -0500

    Add bmp as a supported texture format (#1081)

[33mcommit 09c15ea890c3d2d13e6238ec4fa45ea58901a450[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Dec 23 23:10:39 2020 +0100

    do not check for focus until cursor position has been set (#1070)
    
    do not check for focus until cursor position has been set

[33mcommit 61ce3f7bcfbff808f2eb51e914f03d3807a8f92a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Dec 22 22:35:17 2020 -0600

    make wgpu options public (#1133)

[33mcommit 906b406f6aeca4ffb42593d4d814830dee732ec1[m
Author: Martin Lavoie <broemartino@gmail.com>
Date:   Tue Dec 22 20:21:21 2020 +0000

    Prevent double panic in the Drop of TaksPoolInner (#1064)

[33mcommit 814c413372c0c4fceb2de18cf5a3845f855db5c8[m
Author: Alec Deason <alec-deason@users.noreply.github.com>
Date:   Tue Dec 22 11:49:40 2020 -0800

    Fix lock order to remove the chance of deadlock (#1121)

[33mcommit dd668c1970cdf555f3fc08861a7781d3c9544d60[m
Author: Agorgianitis Loukas <agorg_louk@icloud.com>
Date:   Tue Dec 22 21:31:01 2020 +0200

    Expose wgpu backend in WgpuOptions and allow it to be configured from the environment (#1042)

[33mcommit 3b2c6ce49b3b9ea8bc5cb68f8d350a80ff928af6[m[33m ([m[1;33mtag: v0.4.0[m[33m)[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Dec 19 11:28:00 2020 -0800

    release 0.4.0 (#1093)

[33mcommit 410183b7e73067a86e0b467d013c088f5375a181[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Dec 19 10:33:28 2020 -0800

    update changelog (#1092)

[33mcommit caf3d8b3ef70ab861de7056afb29c70df1a9e129[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Dec 19 10:31:47 2020 -0800

    add with_enter_stage (and other variants) (#1091)

[33mcommit 9db38b7b977775e2f68744ef1b7d34dba61bb6a8[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Dec 18 16:01:00 2020 -0800

    fix multiple windows example (#1088)

[33mcommit 18e5411d7d83d075a1c915905bc4ee11b5c44202[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Dec 18 22:21:37 2020 +0100

    set is_transparent to true by default for UI bundles (#1071)
    
    set is_transparent to true by default for UI bundles

[33mcommit d0840bd721b4eba2a10b857c1abecad1b726b40d[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Fri Dec 18 22:08:26 2020 +0100

    Fix example return_after_run (#1082)
    
    * ignore error when setting global tracing subscriber
    
    * ignore unfocus event on window closed previously
    
    * update example to show how to disable LogPlugin

[33mcommit 596bed8ce2e863cc031011910e8a2a270d51b142[m
Author: Nathan Jeffords <blunted2night@gmail.com>
Date:   Fri Dec 18 11:34:44 2020 -0800

    add ability to provide custom a `AssetIo` implementation (#1037)
    
    make it easier to override the default asset IO instance

[33mcommit 841755aaf23acfd55b375c37390daeb302c5b30b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Dec 15 21:57:16 2020 -0800

    Adopt a Fetch pattern for SystemParams (#1074)

[33mcommit 51650f114fbf31fc89db7bd69542dc21edf2dcb7[m
Author: Nathan Jeffords <blunted2night@gmail.com>
Date:   Mon Dec 14 23:17:34 2020 -0800

    run stretch's layout on physical coordinates to fix pixel alignment (#1061)
    
    run stretch's layout on physical coordinates to fix pixel alignment of the results

[33mcommit 2e2423139e0cd8efda3aa0d474d3eb231dad566b[m
Author: Tiago Ferreira <Tiagojdferreira@gmail.com>
Date:   Tue Dec 15 08:10:58 2020 +0100

    Update dependencies for Enable Fast Compiles (#1065)
    
    Added clang as an optional dependency to avoid frustration of running into compile error the first time you run a cargo build

[33mcommit 45e2be384756dbd6cb2c0d3c87f6dc2a9719edcc[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Dec 14 17:15:07 2020 -0800

    suppress wgpu warnings by default. they are generally unactionable and noisy (#1066)

[33mcommit b12e3bf3bbec14d2ea987377ea2bb2acc20a4db3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Dec 14 17:13:22 2020 -0800

    Improve usability of StateStage and cut down on "magic" (#1059)
    
    Improve usability of StateStage and cut down on "magic"

[33mcommit d2e4327b14956b5028838fda538d45d2300e73f9[m
Author: Nathan Jeffords <blunted2night@gmail.com>
Date:   Sun Dec 13 15:05:56 2020 -0800

    update `Window`'s `width` & `height` methods to return `f32` (#1033)
    
    update `Window`'s `width` & `height` methods to return `f32`

[33mcommit e511cdbda7508e8482509de0761efb149a14bac3[m
Author: Alec Deason <alec-deason@users.noreply.github.com>
Date:   Sun Dec 13 12:12:09 2020 -0800

    More informative error message on missing stage (#1048)
    
    More informative error message on missing state

[33mcommit 002e22fca083d79bdac0ff1dcfdfa278b0c50472[m
Author: sapir <yasapir@gmail.com>
Date:   Sun Dec 13 21:55:32 2020 +0200

    Fix hang on missing state update handler (#1051)

[33mcommit 9a4327b3e2d03c4d567d4356cb49afa22220b863[m
Author: Mariusz KryÅski <mrk@sed.pl>
Date:   Sun Dec 13 20:31:50 2020 +0100

    fix contributors example (#1050)

[33mcommit 9602b24d0ffe390a02666ea7616d8758042e90e8[m
Author: Corey Farwell <coreyf@rwell.org>
Date:   Sun Dec 13 14:27:54 2020 -0500

    Add support for Apple Silicon by upgrading winit. (#1043)

[33mcommit 509b138e8fa3ea250393de40c33cc857c72134d3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Dec 12 18:04:42 2020 -0800

    Schedule v2 (#1021)
    
    Schedule V2

[33mcommit 61b181a699ed2b450bebc8c14d96c6af55fa41cf[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Dec 12 17:17:35 2020 -0800

    add .cargo/config.toml to .gitignore

[33mcommit fd3706b8dea2aa7732092f1d60354618390f3713[m
Author: Nathan Stocks <cleancut@github.com>
Date:   Sat Dec 12 17:55:20 2020 -0700

    Just spawn one CameraUiBundle (not 4) (#1047)

[33mcommit 9239621ffc9c653b27ce857448d82bbf770f8933[m
Author: Nathan Jeffords <blunted2night@gmail.com>
Date:   Wed Dec 9 18:34:27 2020 -0800

    add ability to load `.dds`, `.tga`, and `.jpeg` texture formats (#1038)
    
    add ability to load `.dds`, `.tga`, and `.jpeg` texture formats

[33mcommit 4a5bcccde2d125acf666dd257b851ec8f78f7c70[m
Author: James R <71466513+ColdIce1605@users.noreply.github.com>
Date:   Wed Dec 9 18:34:22 2020 -0600

    Don't panic when attempting to set shader defs from an asset that hasn't loaded yet (#1035)
    
    Don't panic when attempting to set shader defs from an asset that hasn't loaded yet

[33mcommit 7ab0eeece017ff9f8a443378403e727492523aae[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Dec 9 13:38:48 2020 -0800

    Break out Visible component from Draw (#1034)
    
    Break out Visible component from Draw

[33mcommit 66f972c850f90d1e4080b403911ce1f1a0ec0652[m
Author: Corey Farwell <coreyf@rwell.org>
Date:   Wed Dec 9 16:02:43 2020 -0500

    Use shaderc for aarch64-apple-darwin. (#1027)

[33mcommit f53ee54eb670c482cee3615a4cba281b02e3ab40[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Dec 9 21:41:49 2020 +0100

    can spawn a scene from a ChildBuilder, or directly set its parent when spawning it (#1026)
    
    can spawn a scene from a ChildBuilder, or directly set its parent when spawning one

[33mcommit c54179b1829e90d6da8323b67bbab8fe3d4af4b4[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Dec 9 05:01:54 2020 +0100

    only update components for entities in map (#1023)

[33mcommit 19c4f331ac6ccf65ed85c98c7f70ac9f0b22702a[m
Author: rod-salazar <51817379+rod-salazar@users.noreply.github.com>
Date:   Tue Dec 8 19:36:41 2020 -0800

    Ensure default material is loaded (#1016)

[33mcommit 3d386a77b406ee65d6965ad91b29ea3acb8bcf3a[m
Author: Nathan Jeffords <blunted2night@gmail.com>
Date:   Mon Dec 7 13:32:57 2020 -0800

    attempt to deal with rounding issue when creating the swap chain (#997)
    
    attempt to deal with rounding issue when creating the swap chain on high DPI displays

[33mcommit 08b6aa59f82ba30f0f3c8e0901cc521e6f7bf3a8[m
Author: thebluefish <sean.kaufman92@gmail.com>
Date:   Mon Dec 7 13:24:25 2020 -0800

    Added WindowFocused event (#956)

[33mcommit e1b995f0b0915c3e2771a2cc15e24953949d80b0[m
Author: Lukas OrsvÃ¤rn <lukas@orsvarn.com>
Date:   Mon Dec 7 21:41:40 2020 +0100

    Add documentation for bevy::ecs::Query::removed (#950)
    
    Add documentation for bevy::ecs::Query::removed

[33mcommit 2c9b7956d10d4d7bdf1d78556ef62bf3f1dbabe2[m
Author: Al M <yrns@users.noreply.github.com>
Date:   Mon Dec 7 13:32:13 2020 -0700

    Live reloading of shaders (#937)
    
    * Add ShaderLoader, rebuild pipelines for modified shader assets
    * New example
    * Add shader_update_system, ShaderError, remove specialization assets
    * Don't panic on shader compilation failure

[33mcommit a3bca7e4644ebebb00c9ca51fa799db38fb42b4f[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Mon Dec 7 20:57:15 2020 +0100

    Fix ci (#1024)
    
    * fix format
    
    * fix clippy
    
    * used fixed nightly

[33mcommit 1398d7833007e85198cfd35d5fabc70b51b4db31[m
Author: Corey Farwell <coreyf@rwell.org>
Date:   Fri Dec 4 17:31:17 2020 -0500

    Allow windows to maximized. (#1004)
    
    Adds a new `set_maximized` method to allow users to maximize windows.

[33mcommit fcbae57489f58bb9eb7522131e86b1cf86291037[m
Author: Patrik Buhring <patrikbuhring@gmail.com>
Date:   Fri Dec 4 13:38:25 2020 -0500

    Update Hexasphere to improve MSRV (#994)
    
    Assumes hexasphere will follow semver (I will try to make sure it does!)

[33mcommit d601eeb829ea911b06420d6579e683ed2846b0db[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Dec 4 10:37:41 2020 -0800

    account for "still loading" textures in RenderResourceNodes (#1000)

[33mcommit 44b5cfeda18323cf26345828bec015ca391e17cd[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Dec 4 10:37:27 2020 -0800

    fix example bindings (#1001)

[33mcommit 704a11677881e762415b15e384c1b7a05fee7c1e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Dec 3 13:57:36 2020 -0800

    fix scene loading (#988)

[33mcommit 59d98de194b1a40725c31870a6c9dd30d95d2052[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Dec 3 22:46:15 2020 +0100

    naming coherence for cameras (#995)
    
    naming coherence for cameras

[33mcommit 7699f8b6db0af6ca62fcd033e05df4f6c71ecb23[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Dec 3 12:39:29 2020 -0800

    optimize asset gpu data transfer (#987)

[33mcommit 1aff709d27da15096e4740c64d7058495f751a2c[m
Author: Nathan Jeffords <blunted2night@gmail.com>
Date:   Thu Dec 3 12:39:03 2020 -0800

    Set cursor updates (#993)
    
    * update `Window::set_cursor_position` to take a `Vec2` instead of `i32`s
    
    this allows fractional coordinates to work correctly

[33mcommit 1f2e4171cff995570353833a1c08d1975d59cb23[m
Author: Tomasz Sterna <tomek@sterna.link>
Date:   Thu Dec 3 20:30:27 2020 +0100

    Store mouse cursor position in Window (#940)

[33mcommit b8f8d468db4f17896d63772816e3a21a22cf682e[m
Author: Joshua J. Bouw <dev@joshuajbouw.com>
Date:   Thu Dec 3 11:54:13 2020 +0700

    Change`TextureAtlasBuilder` into expected Builder conventions (#969)
    
    * Change`TextureAtlasBuilder` into expected Builder conventions

[33mcommit ff12f69233870f87d482531e363beb69682f8ed7[m
Author: Michael Tang <tangmi@users.noreply.github.com>
Date:   Wed Dec 2 19:11:28 2020 -0800

    Document part of bevy_ecs::Commands (#976)
    
    Document part of bevy_ecs::Commands

[33mcommit 71e2c7f4e4439acd51aed3e62cbc48fe124d6993[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Thu Dec 3 01:15:31 2020 +0100

    Debug text example: render fps and frame time (#978)
    
    Display fps and frame time in text_debug example

[33mcommit 59010caff5b7c6c089e4864e9fcdb060f4501f04[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Thu Dec 3 01:14:02 2020 +0100

    Tracing chrome span names (#979)
    
    * Update tracing-chrome to 0.3.0
    
    * bevy_log: Add fields to span names for tracing-chrome
    
    * Conditionally import tracing_subscriber modules based on feature

[33mcommit c097af49f3261362d4af976996f9be5ac94b8add[m
Author: memoryruins <memoryruinsmusic@gmail.com>
Date:   Wed Dec 2 17:35:27 2020 -0500

    Update examples readme (#983)

[33mcommit c346d282b68ce9f2e6e707b8d8ba53cfac569d8d[m
Author: Tomasz Sterna <tomek@sterna.link>
Date:   Wed Dec 2 23:33:17 2020 +0100

    Add Archetype TypeInfo::type_name accessor (#985)

[33mcommit 915024bf35e4da465651266498129d9fc6792d64[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Dec 2 14:23:49 2020 -0800

    fix changed meshes (#984)

[33mcommit 5a77339df06e1bfa69621159836852664bf4b20d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Dec 2 12:58:39 2020 -0800

    Revert "Add Archetype TypeInfo::type_name accessor (#980)" (#982)
    
    This reverts commit 4833c2a7f4ea16a6f19e06b2307fa0cf34973fbf.

[33mcommit ccb31bc94929ea1d6a5d9bd08956ebf25ae83c5f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Dec 2 12:38:20 2020 -0800

    Optimize Text rendering / SharedBuffers (#972)
    
    optimize Text rendering / SharedBuffers

[33mcommit 4833c2a7f4ea16a6f19e06b2307fa0cf34973fbf[m
Author: Tomasz Sterna <tomek@sterna.link>
Date:   Wed Dec 2 21:37:40 2020 +0100

    Add Archetype TypeInfo::type_name accessor (#980)

[33mcommit 9f4c8b1b9a355355b8d817016bae6fe9fb3d4b01[m
Author: Joshua J. Bouw <dev@joshuajbouw.com>
Date:   Thu Dec 3 02:31:16 2020 +0700

    Fix errors and panics to typical Rust conventions (#968)
    
    Fix errors and panics to typical Rust conventions

[33mcommit f54eb12efc3dc7fd2cedfa13726808152443b087[m
Author: Patrik Buhring <patrikbuhring@gmail.com>
Date:   Wed Dec 2 00:48:25 2020 -0500

    Fixed Hexasphere versioning. (#974)

[33mcommit c05c1dc1191f1ba74d480a748c6fffeb17b56c4b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Dec 1 20:25:31 2020 -0800

    hidpi swap chains (#973)
    
    hidpi swap chains

[33mcommit b5ffab7135fbf6e7b50b1733d2d58e8a21d9b65e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Dec 1 13:17:48 2020 -0800

    Renderer Optimization Round 1 (#958)
    
    * only update global transforms when they (or their ancestors) have changed
    
    * only update render resource nodes when they have changed (quality check plz)
    
    * only update entity mesh specialization when mesh (or mesh component) has changed
    
    * only update sprite size when changed
    
    * remove stale bind groups
    
    * fix setting size of loading sprites
    
    * store unmatched render resource binding results
    
    * reduce state changes
    
    * cargo fmt + clippy
    
    * remove cached "NoMatch" results when new bindings are added to RenderResourceBindings
    
    * inline current_entity in world_builder
    
    * try creating bind groups even when they havent changed
    
    * render_resources_node: update all entities when resized
    
    * fmt

[33mcommit 3cee95e59a68f1c80d80231976f4eb2444bbd29c[m
Author: Nathan Stocks <cleancut@github.com>
Date:   Tue Dec 1 12:15:07 2020 -0700

    Rename reflect 'hash' method to 'reflect_hash' and `partial_eq` to `reflect_partial_eq` (#954)
    
    * Rename reflect 'hash' method to 'reflect_hash' to avoid colliding with std::hash::Hash::hash to resolve #943.
    
    * Rename partial_eq to reflect_partial_eq to avoid collisions with implementations of PartialEq on primitives.

[33mcommit 0b818d7b323d7a9104580351778b2943e08c2775[m
Author: Andre Kuehne <andre.kuehne.77@gmail.com>
Date:   Tue Dec 1 09:33:52 2020 +0100

    Fix collision detection by calculating positive penetration depth. (#966)

[33mcommit ef99e59469f5d8c4654a4e297ed42f09401af11d[m
Author: Amber Kowalski <amberkowalski03@gmail.com>
Date:   Tue Dec 1 01:58:49 2020 -0500

    Test more areas of the codebase (#953)
    
    Test more areas of the codebase

[33mcommit 8675fea0f2f4b5ed0b83aed51027dc5708bd2c81[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Nov 30 22:36:38 2020 -0800

    consolidate find-crate (#964)

[33mcommit 048e6e2561a77075b98abdedc8ede9f47213e74a[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Nov 30 22:25:42 2020 -0800

    Update glam requirement from 0.10.0 to 0.11.0 (#961)
    
    Updates the requirements on [glam](https://github.com/bitshifter/glam-rs) to permit the latest version.
    - [Release notes](https://github.com/bitshifter/glam-rs/releases)
    - [Changelog](https://github.com/bitshifter/glam-rs/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/bitshifter/glam-rs/compare/0.10.0...0.11.0)
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

[33mcommit 3da653e4dd74671a6ea62f22a35ee24eed4644f4[m
Author: Patrik Buhring <patrikbuhring@gmail.com>
Date:   Tue Dec 1 01:25:33 2020 -0500

    Update Hexasphere & Usage. (#965)

[33mcommit 6b004f7d16795c413ca64ff8e3973dbb453da66c[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Tue Dec 1 03:24:49 2020 +0100

    switch winit size to logical to be dpi independent (#947)
    
    * switch winit size to logical
    
    * make scale factor available from bevy_window

[33mcommit 4cd3dd70b7d8f3677653d7ca3117e365a6939dfc[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Nov 30 18:21:02 2020 -0800

    Update ahash requirement from 0.5.3 to 0.6.1 (#960)
    
    Updates the requirements on [ahash](https://github.com/tkaitchuck/ahash) to permit the latest version.
    - [Release notes](https://github.com/tkaitchuck/ahash/releases)
    - [Commits](https://github.com/tkaitchuck/ahash/commits)
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

[33mcommit bc2f43c1c3f4721ea03d14c06ac1459e2ff8357e[m
Author: Toothbrush <toothbrush7777777@gmail.com>
Date:   Tue Dec 1 02:12:09 2020 +0000

    Fix examples in bevy_reflect/README.md (#963)

[33mcommit 4c1bc027231c8759a173019dfb0e5778fb4f6fd4[m
Author: Amber Kowalski <amberkowalski03@gmail.com>
Date:   Mon Nov 30 20:14:08 2020 -0500

    Change bevy_input::Touch API to match similar APIs (#952)

[33mcommit c7b9ad50970edf7587f97dc574f19e2978784822[m
Author: Joshua J. Bouw <dev@joshuajbouw.com>
Date:   Tue Dec 1 04:33:52 2020 +0700

    Fix `RenderResources` index slicing (#948)

[33mcommit d9c428e32c870abe62968d4cfe3a26fc55a5503a[m
Author: Lukas OrsvÃ¤rn <lukas@orsvarn.com>
Date:   Mon Nov 30 22:25:49 2020 +0100

    Add removal_detection example (#945)
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit f35f813137d797da7e0d919317773c4da7c068c1[m
Author: Nick <nic96@users.noreply.github.com>
Date:   Mon Nov 30 14:05:03 2020 -0700

    additional vertex attribute value types (#946)

[33mcommit 52d6799544a93ef3e15a17e27dfba796c14725ff[m
Author: Jonathan Cornaz <jcornaz@users.noreply.github.com>
Date:   Sun Nov 29 23:07:47 2020 +0100

    Run parent-update and transform-propagation during the "post-startup" stage (instead of "startup") (#955)
    
    * Propagate transforms during the POST_STARTUP start-up stage
    
    * Update changelog

[33mcommit 1f3d50619be31578a9ada10778b2f9ffe95d9567[m
Author: Amber Kowalski <amberkowalski03@gmail.com>
Date:   Sat Nov 28 17:23:27 2020 -0500

    Updated changelog (#942)

[33mcommit dbf226be49c239d348e56e19f5db1b900fd4f1a5[m
Author: Mariusz KryÅski <mrk@sed.pl>
Date:   Sat Nov 28 22:10:18 2020 +0100

    store PipelineSpecialization.dynamic_bindings in HashSet (#936)

[33mcommit 097a55948cf85aae1c9cd35503155a41e032803e[m
Author: Amber Kowalski <amberkowalski03@gmail.com>
Date:   Sat Nov 28 16:08:31 2020 -0500

    Refactor Time API and internals (#934)
    
    Refactor Time API and internals

[33mcommit f3b49e44c931e10e2b397677d6dbc91a3d2c023f[m
Author: Nick <nic96@users.noreply.github.com>
Date:   Sat Nov 28 13:44:25 2020 -0700

    removed redundant v_Normal in shader (#938)

[33mcommit 72b2fc98437f39a8099efcc137697efc32a21800[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Nov 27 16:39:59 2020 -0800

    Bevy Reflection (#926)
    
    Bevy Reflection

[33mcommit 01c4dd96cfaed4d4b505365d3a45fd66bc01f430[m
Author: rmsthebest <11652273+rmsthebest@users.noreply.github.com>
Date:   Fri Nov 27 22:37:19 2020 +0100

    make the timer trigger (#935)
    
    Co-authored-by: Tony <mostlyharmless@riseup.net>

[33mcommit ec8fd57c4533ea245bfe4630177bb1677d2c33eb[m
Author: Philip Degarmo <aclysma@gmail.com>
Date:   Fri Nov 27 12:14:44 2020 -0800

    When a task scope produces <= 1 task to run, run it on the calling thread immediately. (#932)
    
    While generally speaking the calling thread would have picked up the task first anyways, I don't think it makes much sense usually to block the calling thread until another thread wakes and does the work.

[33mcommit 7d4cb70d92875ced139bce4b0eed61c6717cee8f[m
Author: RiskLove <heshuai9506@163.com>
Date:   Sat Nov 28 03:55:55 2020 +0800

    BugFix: Archetype grow with defferent size. (#930)
    
    Co-authored-by: heshuai <heshuai@163.com>

[33mcommit 12f29bd38cddb946744742c7f50cfff7a4c010b9[m
Author: Nathan Stocks <cleancut@github.com>
Date:   Fri Nov 27 12:39:33 2020 -0700

    Timer Polishing (#931)
    
    * Pause stops ticks. Consistent getter method names. Update tests.
    
    * Add timing example
    
    * Format with the nightly formatter
    
    Co-authored-by: Amber Kowalski <amberkowalski03@gmail.com>

[33mcommit f69cc6f94c9df675457b56297d582c16b5d37cef[m
Author: Amber Kowalski <amberkowalski03@gmail.com>
Date:   Thu Nov 26 13:25:36 2020 -0600

    Allow timers to be paused and encapsulate fields (#914)
    
    Allow timers to be paused and encapsulate fields

[33mcommit 8e4eb417570bc071554e614033f7aa1ea3ddf5bd[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Nov 25 18:46:13 2020 -0800

    Update shaderc requirement from 0.6.3 to 0.7.0 (#823)
    
    Updates the requirements on [shaderc](https://github.com/google/shaderc-rs) to permit the latest version.
    - [Release notes](https://github.com/google/shaderc-rs/releases)
    - [Commits](https://github.com/google/shaderc-rs/compare/v0.6.3...v0.7.0)
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

[33mcommit cf75c22c9aa76b6d7e0ffed06c78d99a4c951436[m
Author: Philip Degarmo <aclysma@gmail.com>
Date:   Wed Nov 25 18:05:55 2020 -0800

    Fix a deadlock that can occur when using scope() on ComputeTaskPool from within a system. (#892)

[33mcommit bd5bd3bc073dd3d65d428ed19f1dd1b584a22144[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Nov 25 17:46:37 2020 -0800

    temporarily suppress new clipply lint (#929)

[33mcommit de5ff0aa5ae5933e008023614f537d416e475c2c[m
Author: SvenTS <73037851+SvenTS@users.noreply.github.com>
Date:   Thu Nov 26 02:33:59 2020 +0100

    Remove Changed from parent update system (#907)
    
    System has to check for actual change of the value anyway. This way,
    children inserted after postupdate get synced in the next frame and are
    not lost.

[33mcommit fd6b787efc6edae10f5713caf5590a1b7c0619af[m
Author: Tomasz Sterna <tomek@sterna.link>
Date:   Thu Nov 26 02:32:41 2020 +0100

    Create winit windows before app.initialize() (#916)
    
    This is required so startup systems have access
    to Windows and WinitWindows resources.

[33mcommit b2c82955fffb21a8afce338b393304ed61e85385[m
Author: Tomasz Sterna <tomek@sterna.link>
Date:   Thu Nov 26 02:31:10 2020 +0100

    Add set_cursor_position method to Window (#917)

[33mcommit 86d724e04edca1c1c5e0a641092b08eb7e481111[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Nov 25 17:28:58 2020 -0800

    wgpu: use mailbox instead of fifo for vsync (#920)

[33mcommit 69603904ab2c2f2a508118ceccabe82279f09156[m
Author: SvenTS <73037851+SvenTS@users.noreply.github.com>
Date:   Thu Nov 26 02:13:11 2020 +0100

    Allow despawning of hierarchies in threadlocal systems (#908)
    
    * Rename test components for easier understanding of failures
    
    * Make recursive despawn public
    
    This way, threadlocal systems can despawn hierarchies.
    
    * Swap children before despawning

[33mcommit dd1b08ef8b8711fa1ee89c09d96e6999cf2e810b[m
Author: SvenTS <73037851+SvenTS@users.noreply.github.com>
Date:   Thu Nov 26 01:55:55 2020 +0100

    Improve ui depth system (#905)
    
    * Add test for ui-z system
    
    * Remove generic hierarchy runner and refactor ui z-system
    
    * Remove different handling for childless nodes
    
    Having an empty children list should be the same as having no child
    component.
    
    * Further simplify system after change

[33mcommit 2f408cf0538ab7826404715c9d2ac7842c5d24d7[m
Author: Nathan Stocks <cleancut@github.com>
Date:   Wed Nov 25 17:43:16 2020 -0700

    Improve timer ergonomics. Add tests (#923)

[33mcommit 01ba7c44255059f833c2b90d3d6b7ac7e9c025ca[m
Author: bg <40744358+blamelessgames@users.noreply.github.com>
Date:   Sun Nov 22 12:29:26 2020 -0800

    avoid exclusive lock during `update_asset_storage` (#909)
    
    avoid exclusive lock during `update_asset_storage`
    
    Co-authored-by: Jay <jay@heinousjay.com>

[33mcommit c1e499d5fe26ff5ad518720bd7ab6d9e685ed16f[m
Author: Felipe Jorge <felipe.jorge.pereira@gmail.com>
Date:   Sun Nov 22 17:05:58 2020 -0300

    Fix duplicated chilren in Scene spawn (#904)
    
    Fix duplicated chilren in Scene spawn

[33mcommit 46fac78774700c08a6e7bd0a2eb804abc7de89ee[m
Author: Duncan <bonsairobo@gmail.com>
Date:   Sun Nov 22 12:04:47 2020 -0800

    Extend the Texture asset type to support 3D data (#903)
    
    Extend the Texture asset type to support 3D data
    
    Textures are still loaded from images as 2D, but they can be reshaped
    according to how the render pipeline would like to use them.
    
    Also add an example of how this can be used with the texture2DArray uniform type.

[33mcommit eb587b2f10f4a5c2a4c6b0fa272db89a006fb6cc[m
Author: marius851000 <marius851000@gmail.com>
Date:   Sun Nov 22 20:57:52 2020 +0100

    do not spend time drawing text with is_visible = false (#893)
    
    do not draw text with is_visible = false

[33mcommit 1e9a0544bdaf2794664b71d3567600e786eefd10[m
Author: Joel NordstrÃ¶m <e.joel.nordstrom@gmail.com>
Date:   Sun Nov 22 04:08:50 2020 +0100

    Fix pixel format conversion in bevy_gltf (#897)
    
    * Fix pixel format conversion in bevy_gltf
    
    * Update renamed image::DynamicImage method calls
    
    * Remove unused GltfError variant

[33mcommit 3a9a5b4e070c644d68daa58bef97bd57f5db909a[m
Author: Plecra <marli@frost.red>
Date:   Sun Nov 22 03:08:02 2020 +0000

    fix: update image version (#911)
    
    into_bgra8 was added in 0.23.12

[33mcommit d96493a42a0fec8f5937bf80108b8f4309f662f7[m
Author: Mariusz KryÅski <mrk@sed.pl>
Date:   Sun Nov 22 01:38:24 2020 +0100

    use wasm-friendly instant::Instant everywhere (#895)
    
    * use instant::Instant everywhere
    * reexport instant::{Duration, Instant} from bevy_utils

[33mcommit d45840654051ffe470d45321b26ee66432f248d8[m
Author: Valentin <vakevk+github@gmail.com>
Date:   Sat Nov 21 23:51:24 2020 +0100

    Add box shape (#883)
    
    * Add rectangular cuboid shape
    
    Co-authored-by: Jason Lessard <jason.lessard@usherbrooke.ca>
    Co-authored-by: Jason Lessard <jason.lessard@usherbrooke.ca>
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 0dbbcd98b6b9b8e3b52f33ee7c6846d43789b834[m
Author: bjorn3 <bjorn3@users.noreply.github.com>
Date:   Sat Nov 21 23:03:18 2020 +0100

    Expose an EventId for events (#894)
    
    * Expose an EventId for events
    
    This can be helpful for correlating the place where an event is created
    to the place where the event is processed.

[33mcommit 85ecab8bb9dd1f890cabc3faa11c080864db1621[m
Author: rod-salazar <51817379+rod-salazar@users.noreply.github.com>
Date:   Sat Nov 21 12:55:25 2020 -0800

    Tweaks to TextureAtlasBuilder.finish() (#887)
    
    Tweaks to TextureAtlasBuilder.finish()

[33mcommit 106486bd99a4281be461626bad6d862d0e65bcb9[m
Author: bg <40744358+blamelessgames@users.noreply.github.com>
Date:   Sat Nov 21 12:26:35 2020 -0800

    fix deprecation error in image_texture_loader (and CI error) (#906)
    
    fix deprecation error in image_texture_loader (and CI error)

[33mcommit d11be437cb79c06f8594384d0a87a925dcff90cc[m
Author: Vladyslav Batyrenko <mvlabat@gmail.com>
Date:   Sat Nov 21 21:52:44 2020 +0200

    Switch to default PartialEq implementation for RenderResourceBinding (#877)
    
    * Switch to default PartialEq implementation for RenderResourceBinding
    * Move specialized RenderResourceBinding Hash implementation to BindGroupBuilder

[33mcommit b4a864ba5acc9e92f1c3f205d1cd054c574dcb1f[m
Author: Joshua J. Bouw <dev@joshuajbouw.com>
Date:   Sun Nov 22 02:48:10 2020 +0700

    Replace Bytes with Byteable for TextureAtlasSprite (#874)
    
    Replace Bytes with Byteable for TextureAtlasSprite

[33mcommit 4fecb899aaa33cf2ebc42ac94a32d4b5336c6e93[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Nov 17 17:06:47 2020 -0800

    initialize chained systems (#886)

[33mcommit 457a8bd17d5f5d30a5a2fb6eabce7fc0b95bfc94[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Nov 17 17:04:44 2020 -0800

    ecs: replace "bool" component states with bitflags (#878)

[33mcommit d6eb64745176c42cd225492405df25b0e42793b3[m
Author: bjorn3 <bjorn3@users.noreply.github.com>
Date:   Tue Nov 17 22:40:18 2020 +0100

    Misc cleanups (#879)
    
    * Remove cfg!(feature = "metal-auto-capture")
    
    This cfg! has existed since the initial commit, but the corresponding
    feature has never been part of Cargo.toml
    
    * Remove unnecessary handle_create_window_events call
    
    * Remove EventLoopProxyPtr wrapper
    
    * Remove unnecessary statics
    
    * Fix unrelated deprecation warning to fix CI

[33mcommit db2d20ec1ad89592f0f3c5f9af5f806256cf8a72[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Nov 17 01:04:55 2020 -0800

    Update system_chaining.rs

[33mcommit 3a6f6de277604658d0c1b776fab04088ddec6762[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Nov 16 18:18:00 2020 -0800

    System Inputs, Outputs, Chaining, and Registration Ergo  (#876)
    
    System Inputs, Outputs, Chaining, and Registration Ergo

[33mcommit 50c7e229b23e02c52d4ea010675c2d5bb358381e[m
Author: bjorn3 <bjorn3@users.noreply.github.com>
Date:   Tue Nov 17 01:55:59 2020 +0100

    Rework ResourceData to use VecResourceStorage instead of Archetype (#873)

[33mcommit 601411d201ec1fff6b88b9a27219595450dd13c1[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Nov 16 16:39:26 2020 -0800

    Update find-crate requirement from 0.5 to 0.6 (#872)
    
    Updates the requirements on [find-crate](https://github.com/taiki-e/find-crate) to permit the latest version.
    - [Release notes](https://github.com/taiki-e/find-crate/releases)
    - [Changelog](https://github.com/taiki-e/find-crate/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/taiki-e/find-crate/compare/v0.5.0...v0.6.1)
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

[33mcommit 3fca8c60bba1714f128a7e9d297614b3833e75f5[m
Author: rod-salazar <51817379+rod-salazar@users.noreply.github.com>
Date:   Mon Nov 16 16:38:14 2020 -0800

    Remove redundant texture copies in TextureCopyNode (#871)
    
    Remove redundant texture syncs in TextureCopyNode

[33mcommit fcf9d525e15677b546755cb58fb613712d11a780[m
Author: Julian Heinken <Julian.Heinken@haw-hamburg.de>
Date:   Tue Nov 17 01:36:57 2020 +0100

    Removed vertex fallback buffer (#870)
    
    removed fallback buffer

[33mcommit 7aac4223d05088289a473426b20a1177c42a3703[m
Author: Rob <13954303+robertwayne@users.noreply.github.com>
Date:   Mon Nov 16 19:33:19 2020 -0500

    Fixed property typos, KeyCode typo. (#857)
    
    * Fixed property typos, KeyCode typo.
    
    * cargo fmt

[33mcommit 7628f4a64e6f3eacfc4aad3bb6b3d54309722682[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Nov 15 20:32:23 2020 -0800

    combine bevy_ecs and bevy_hecs crates. rename XComponents to XBundle (#863)
    
    combine bevy_ecs and bevy_hecs crates. rename XComponents to XBundle

[33mcommit 02f543eca3dec76d66e93f7ef6ae94aa46e7f52f[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Sun Nov 15 23:32:54 2020 +0100

    Fall back to remove components one by one when failing to remove a bundle (#719)
    
    Fall back to remove components one by one when failing to remove a bundle

[33mcommit b3541a9a3131d44510d87b00d1106c92b05a7639[m
Author: milkybit <70766653+milkybit@users.noreply.github.com>
Date:   Sun Nov 15 22:44:02 2020 +0200

    Add all basic color constants (#859)
    
    Add all basic color constants

[33mcommit 4bdff66b80eb4c64cfd4892cc2f062d8ff507caa[m
Author: memoryruins <memoryruinsmusic@gmail.com>
Date:   Sun Nov 15 15:42:43 2020 -0500

    Check for conflicting system resource parameters (#864)

[33mcommit bb4a7392c07c474fcba4fad559489b419be52ea3[m
Author: Joshua J. Bouw <dev@joshuajbouw.com>
Date:   Mon Nov 16 03:08:03 2020 +0700

    Remove redundant `.into` for mesh set_attributes with impl (#866)

[33mcommit 515d750004ff51b6a7fe2e68e55b4d5a270c4bd7[m
Author: Mariusz KryÅski <mrk@sed.pl>
Date:   Sun Nov 15 21:07:17 2020 +0100

    wasm32: non-spirv shader specialization (#843)
    
    wasm32: non-spirv shader specialization

[33mcommit 18195bfa91d0e294f28b51e46709ed54482a6dd0[m
Author: Jackson Lango <5734630+no1hitjam@users.noreply.github.com>
Date:   Sun Nov 15 11:34:55 2020 -0800

    Controllable ambient light color (#852)
    
    Control ambient light color via resource
    
    The AmbientLight resource now controls the ambient light color in the
    pbr fragment shader.

[33mcommit 23fcdfae565772aea4a87f0b14e963db93978de8[m
Author: MGlolenstine <MGlolenstine@gmail.com>
Date:   Sun Nov 15 20:33:21 2020 +0100

    Grammar correction (#856)
    
    * Grammar correction
    * Adjust for cart's personal taste
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 7bd6cc6a556a49b01ec8d1ac0b8edb99d6cad38e[m
Author: Nathan Stocks <nathan@agileperception.com>
Date:   Sun Nov 15 12:24:18 2020 -0700

    Refresh the examples readme (#854)
    
    Refresh the examples readme: organize, alphabetize, add missing entries, remove outdated entries.

[33mcommit 43aac1a78480e196f9b8b29339a34d78bc44b663[m
Author: MinerSebas <66798382+MinerSebas@users.noreply.github.com>
Date:   Fri Nov 13 03:22:46 2020 +0100

    More query filter usage (#851)
    
    * Examples now use With<>
    
    * More Bevy systems now use With<>
    
    * parent_update_system now uses Changed<>

[33mcommit 6b8b8e75e503b1e6e4507f79900ca9183ad296cf[m
Author: Robbie Davenport <zerve0@hotmail.com>
Date:   Fri Nov 13 11:03:57 2020 +0900

    add bevymark benchmark example (#273)
    
    add bevymark example

[33mcommit 1a92ec2638b433f95a94d68adbd2df459bc54562[m
Author: Marcus Buffett <marcusbuffett@me.com>
Date:   Thu Nov 12 18:03:03 2020 -0800

    Make Timer.tick return &Self (#820)
    
    Make Timer::tick return &Self

[33mcommit a0b16e8620726ff49483cda9d03f1abaebf4bc33[m
Author: Nathan Stocks <cleancut@github.com>
Date:   Thu Nov 12 18:24:41 2020 -0700

    Clean up now-unused files due to changes in the transform system (#849)

[33mcommit e03f17ba7f4288b25d2c93947766ae7575ab65fd[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Nov 12 17:23:57 2020 -0800

    Log Plugin (#836)
    
    add bevy_log plugin

[33mcommit 465c3d4f7bc5d582966c51ef77ac0d1216ead0e3[m
Author: Olivier Pinon <oliv.pinon@gmail.com>
Date:   Fri Nov 13 01:21:48 2020 +0100

    Use glyph_brush_layout and add text alignment support (#765)
    
    Use glyph_brush_layout and add text alignment support
    
    Co-authored-by: Olivier Pinon <op@impero.com>
    Co-authored-by: tigregalis <anak.harimau@gmail.com>
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 1eff53462ad3cbad5022291c5be07111c3090182[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Nov 12 13:26:48 2020 -0800

    cross-platform main function (#847)

[33mcommit 55455853366fdbefc934a6030b3a391ee5575bc8[m
Author: memoryruins <memoryruinsmusic@gmail.com>
Date:   Wed Nov 11 21:57:13 2020 -0500

    Fix example ToC links (#848)

[33mcommit d846e46998981e86a2fa171014ef1de65637c149[m
Author: memoryruins <memoryruinsmusic@gmail.com>
Date:   Wed Nov 11 20:15:19 2020 -0500

    Add entries, ToC, and releases note on examples (#844)
    
    * Note difference between development and release examples
    
    * Add table of contents to examples
    
    * Add missing entries for examples

[33mcommit c3a37b2d6a15feb34bb74a5dbe4fcbcf95885e8d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Nov 11 16:31:16 2020 -0800

    android example polish (#845)

[33mcommit fae628797fb2dba7a95a323c44c0118875b87f1c[m
Author: Mariusz KryÅski <mrk@sed.pl>
Date:   Wed Nov 11 23:08:27 2020 +0100

    bevy_render: delegate buffer aligning to render_resource_context (#842)

[33mcommit ec7ad4254c32770f5531168e6bb09d7b943faa56[m
Author: MGlolenstine <MGlolenstine@gmail.com>
Date:   Wed Nov 11 21:09:02 2020 +0100

    Fixed grammar and wording (#840)
    
    Changed grammar and wording on two entries to make them easier to understand and fit better into the context (make MP3 format fit better alongside the audio formats).

[33mcommit e769974d6ac28787a600e3cd56f5543e86401b9b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Nov 10 20:48:34 2020 -0800

    query filters (#834)

[33mcommit a2665789922167afb59277b1fe988e6df0d68911[m
Author: Robert Swain <robert.swain@gmail.com>
Date:   Wed Nov 11 03:49:49 2020 +0100

    Add tracing spans to schedules, stages, systems (#789)
    
    Add tracing spans to schedules, stages, systems

[33mcommit b3e1048e73e91ffeef31ce2116e9946baa8918b6[m
Author: Mikail Khan <mikail.khan45@gmail.com>
Date:   Tue Nov 10 20:20:31 2020 -0500

    added #[inline] to more window accessor functions (#830)

[33mcommit c9acef04e33229dbfa306251000ad5976e0dca11[m
Author: Joshua J. Bouw <dev@joshuajbouw.com>
Date:   Wed Nov 11 08:06:55 2020 +0700

    Ahash constructor extensions and HashMap / HashSet (#790)
    
    Ahash constructor extensions and HashMap / HashSet

[33mcommit 0c30762ab7e582be3256cef0f6bb4a77f7ee003e[m
Author: rod-salazar <51817379+rod-salazar@users.noreply.github.com>
Date:   Tue Nov 10 16:21:41 2020 -0800

    Update FileAssetIo NotFound error to include full path (#821)

[33mcommit 096ac4aee8794099ba0aa8371b2418f0c2346ef3[m
Author: Amber Kowalski <amberkowalski03@gmail.com>
Date:   Tue Nov 10 18:19:55 2020 -0600

    Explain default behavior of AssetServer in the asset_loading example (#822)
    
    Add clarification for where assets are loaded from in the`asset_loading`example

[33mcommit a68c217ccf8536977c065c0ea4af8b98cbbc097f[m
Author: memoryruins <memoryruinsmusic@gmail.com>
Date:   Tue Nov 10 19:14:33 2020 -0500

    Mark Query and QuerySet contructors as pub(crate) (#829)
    
    Mark Query and QuerySet contructors as pub(crate)

[33mcommit 60fa2d5f9300db7c0819481cd5550ed9557c8e6b[m
Author: Mariusz KryÅski <mrk@sed.pl>
Date:   Tue Nov 10 22:20:05 2020 +0100

    delegate layout reflection to RenderResourceContext (#691)
    
    * delegate layout reflection to RenderResourceContext
    Also:
     * auto-reflect DynamicBindings
     * use RenderPipeline::new, update dynamic_bindings
    
    linting.
    
    * add dynamic binding generation
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 8607ccf66967dfc1fbb0052be0b5ad4f1ab194c5[m
Author: bjorn3 <bjorn3@users.noreply.github.com>
Date:   Tue Nov 10 19:58:51 2020 +0100

    Add readme key back to Cargo.toml (#831)
    
    cc https://github.com/bevyengine/bevy/pull/808#discussion_r520328433

[33mcommit 80a04484735406a6c15987c4fa221a1f7353be6a[m
Author: bjorn3 <bjorn3@users.noreply.github.com>
Date:   Tue Nov 10 04:26:08 2020 +0100

    Add bevy_dylib to force dynamic linking of bevy (#808)
    
    This easily improve compilation time by 2x

[33mcommit b113809fcdaf836b93df6c9417224c36830485bb[m
Author: memoryruins <memoryruinsmusic@gmail.com>
Date:   Mon Nov 9 17:13:24 2020 -0500

    Bump changelog version (#827)
    
    * Bump changelog version
    
    * Simplify instruction to compare git tags

[33mcommit 4ef6eb8a8535e9c6d8339497ab7c6f31dc47a115[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Nov 9 14:12:42 2020 -0800

    adjust to new clippy lints (#826)

[33mcommit 07f07a0736d173ba68874dcf86777fd6fa944253[m
Author: Bram Buurlage <brambuurlage@gmail.com>
Date:   Mon Nov 9 22:24:29 2020 +0100

    Added RenderPass::set_scissor_rect (#815)
    
    Added RenderPass::set_scissor_rect

[33mcommit 31a433b69ee2abe4b7877b5fbd1419e715ee4cf2[m
Author: easynam <the.easyname@gmail.com>
Date:   Mon Nov 9 21:04:27 2020 +0000

    add basic example of a custom update loop (#799)

[33mcommit b324f66135ce7c788332fea2dc97c786c850ae8d[m
Author: ThÃ©o Degioanni <30992420+Moxinilian@users.noreply.github.com>
Date:   Mon Nov 9 20:45:58 2020 +0100

    removed default labels in github issues (#825)

[33mcommit 213ba9629a27084f40e1d1cefab49d2819cf1f0b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Nov 8 13:48:00 2020 -0800

    ecs: fix system name in "conflicting system" error message (#816)

[33mcommit ebcdc9fb8cbff25b4f069a2a51cf059fad764c58[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Nov 8 12:34:05 2020 -0800

    Flexible ECS System Params (#798)
    
    system params can be in any order, faster compiles, remove foreach

[33mcommit f54788527be49c445ec6e1c8831496a821d4fcc2[m
Author: Oscar <osmithsi@sfu.ca>
Date:   Fri Nov 6 17:15:56 2020 -0800

    Add received character (#805)
    
    * Add ReceivedCharacter window event
    
    * Add ReceivedCharacter window event examples

[33mcommit 9224983897f878cb93680d31e9b0bffdd64edfec[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Nov 6 17:11:32 2020 -0800

    upgrade glam and hexasphere (#794)

[33mcommit 06f95e99824a4715b80a87c11e9e43d3b9ade9d4[m
Author: Rob <13954303+robertwayne@users.noreply.github.com>
Date:   Fri Nov 6 20:11:12 2020 -0500

    Fixed several typos. (#806)
    
    * Fixed common typo in several struct names.
    
    * Fixed minor doc typos.

[33mcommit 35d4fca0d07f9a00aea0b8970400135df270de4a[m
Author: Chrs Msln <christophe.massolin@gmail.com>
Date:   Sat Nov 7 02:08:15 2020 +0100

    [gltf] Support camera and fix hierarchy (#772)
    
    [gltf] Support camera and fix hierarchy

[33mcommit 1c38106f758975135989262c1d820c81e05643d3[m
Author: karroffel <thomas-github@poto.cafe>
Date:   Fri Nov 6 23:35:18 2020 +0100

    add example that represents contributors as bevy icons (#801)

[33mcommit fb7c651ab9b10356ddbac1970b855d7fb841cfe9[m
Author: Lukas Wirth <lukastw97@gmail.com>
Date:   Fri Nov 6 22:20:53 2020 +0100

    Port hecs derive macro improvements (#761)
    
    * Port derive macro changes from hecs
    
    * Emit more info on duplicate components in archetype creation

[33mcommit 26be22e73c2c988eae0f997a09bc5561930dc5fc[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Nov 6 12:49:20 2020 -0800

    fix unit test (#802)

[33mcommit 5bd6deb9749067143efb2dbb681448d94af54e83[m
Author: Guillaume DALLENNE <dallenneguillaume@gmail.com>
Date:   Thu Nov 5 02:51:54 2020 +0100

    Add mutated state when inserting an already existing component (#404)
    
    Add mutated state when inserting an already existing component

[33mcommit 0db9e9494d50f21da31d02eecf527c44a3cabcad[m
Author: iMplode nZ <rouli.freeman@gmail.com>
Date:   Wed Nov 4 16:38:05 2020 -0800

    Regularized Issue Templates so that the grammar is always the same. (#787)
    
    * Regularized Issue Templates so that the grammar is always the same.
    
    * Update bug_report.md
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit d682cc6e07be944421e88b57d18589088d0c6ebc[m
Author: Oscar <osmithsi@sfu.ca>
Date:   Tue Nov 3 15:11:37 2020 -0800

    Added #745 to changelog (#784)
    
    * Added #745 to changelog
    
    * Update CHANGELOG.md
    
    Co-authored-by: karroffel <thomas-github@poto.cafe>
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>
    Co-authored-by: karroffel <thomas-github@poto.cafe>

[33mcommit 1aa832be1d2ac1da87b906b25f8287291c3e32e8[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Nov 3 14:10:29 2020 -0800

    fix unsafe Query function names (#785)

[33mcommit 9afe196f1690a6a6e47bf67ac740b4edeffd97bd[m[33m ([m[1;33mtag: v0.3.0[m[33m)[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Nov 3 13:34:00 2020 -0800

    release: 0.3.0 (#783)

[33mcommit 8d2d2426fe40ea73c8d6abedbda2f88d9efa8e35[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Nov 3 12:00:47 2020 -0800

    rename example and readme titles (#781)

[33mcommit e21705bec6a40825c3d672ce93be7a9ffcd343e7[m
Author: memoryruins <memoryruinsmusic@gmail.com>
Date:   Tue Nov 3 14:38:37 2020 -0500

    Remove two unused deps (#780)

[33mcommit 7efb1b188712db3205f7e17213f3f27fa0b88422[m
Author: David Ackerman <enfipy@gmail.com>
Date:   Tue Nov 3 21:32:48 2020 +0200

    Fix initial Android support (#778)
    
    * Add force touches, fix ui focus system and touch screen system
    
    * Fix examples README. Update rodio with Android support. Add Android build CI
    
    * Alter android metadata in root Cargo.toml

[33mcommit 562190f5182061c1b8c69af1afd8c604fce542b0[m
Author: Rob <13954303+robertwayne@users.noreply.github.com>
Date:   Tue Nov 3 13:41:31 2020 -0500

    Fixed typo in example comments. (#776)

[33mcommit c9fab0b5958a63f7dc54ff60b22eae2ab095266a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Nov 2 23:19:03 2020 -0800

    Update CHANGELOG.md

[33mcommit 2e2fa4fef4e235ff12c9af36d505c068b9a593b6[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Nov 2 22:54:20 2020 -0800

    make Mesh::attribute() immutable (#774)

[33mcommit ce1d16d90d818683a579187f21eb897c9dba547c[m
Author: Nicholas Rishel <rishel.nick@gmail.com>
Date:   Mon Nov 2 22:54:08 2020 -0800

    Add Android instructions to example README (#775)
    
    Bonus: Fixed iOS formatted text by adding preceding newline.

[33mcommit 66f2f76a181471075736f0e228cc1e1a4e364ba0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Nov 2 19:01:17 2020 -0800

    rename add_plugin_group to add_plugins (#773)

[33mcommit 9871e7e24bf249bc36c0aa3f4488e260f68aa5e7[m
Author: Nathan Stocks <cleancut@github.com>
Date:   Mon Nov 2 19:38:37 2020 -0700

    Remove add_default_plugins and add MinimalPlugins for simple "headless" scenarios (#767)
    
    Remove add_default_plugins and add MinimalPlugins for simple "headless" scenarios

[33mcommit 2f87ff661824284990856575d8979923da9ee20d[m
Author: Nathan Stocks <cleancut@github.com>
Date:   Mon Nov 2 19:16:13 2020 -0700

    Move ElementState to top-level of bevy_input. Resolves #687. (#769)

[33mcommit d4dc115bd71fcc7bc614d9465717d687d265a3d2[m
Author: memoryruins <memoryruinsmusic@gmail.com>
Date:   Mon Nov 2 19:33:30 2020 -0500

    Add more notes about `bevy`'s modules (#771)

[33mcommit 53c4c45eca9cf60edbfe347d8f162bb18b02b631[m
Author: Nicholas Rishel <rishel.nick@gmail.com>
Date:   Mon Nov 2 16:30:30 2020 -0800

    Use embedded glslang for runtime glsl-to-spirv and add Android example (#740)
    
    Use embedded glslang for runtime glsl-to-spirv and add Android example

[33mcommit f81ecddafc885f359d1340ce87dc2a5aceae0e53[m
Author: Julian Heinken <Julian.Heinken@haw-hamburg.de>
Date:   Mon Nov 2 22:47:05 2020 +0100

    Example for custom mesh attributes (#757)
    
    example for custom attributes + changelog

[33mcommit 44b3e24e32baa9ac12c581193bdab0f3f28cda8c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Nov 2 13:15:07 2020 -0800

    fix mesh allocation bug and public mesh api improvements (#768)

[33mcommit a04e67d9dd27baa99e2a34b18b764819c2c5edac[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Nov 2 12:49:31 2020 -0800

    Temporarily disable nightly windows builds
    
    Theres a compiler ICE thats blocking us from publishing.

[33mcommit f81208adaaf4eb6d87ef053feef87b6cc6a7e11f[m
Author: memoryruins <memoryruinsmusic@gmail.com>
Date:   Sun Nov 1 19:51:51 2020 -0500

    impl ReadOnlyFetch for Or, FetchOr, and FetchMutated (#763)

[33mcommit 5cd67f7867c569e0803e17131c5781f52874e375[m
Author: Alec Deason <alec-deason@users.noreply.github.com>
Date:   Sun Nov 1 14:32:48 2020 -0800

    Change the ecs_guide example so it doesn't make it seem like startup systems have to be thread local (#759)

[33mcommit 9cc6368b28a2df2dff652ae1a087f74fd0362a6a[m
Author: simlay <simlay@users.noreply.github.com>
Date:   Sat Oct 31 14:36:24 2020 -0700

    An initial xcode setup for using xcode (#539)
    
    An example of bevy using xcode

[33mcommit ef86ce98ed8a21eeb00e60c0b3bd7d4f17544c92[m
Author: Alec Deason <alec-deason@users.noreply.github.com>
Date:   Sat Oct 31 00:12:56 2020 -0700

    Make event example use a local resource (#754)
    
    Make EventListenerState a local resource

[33mcommit e02bd9fde1ae08d831ee2561af57f2e477d98f04[m
Author: memoryruins <memoryruinsmusic@gmail.com>
Date:   Sat Oct 31 02:05:49 2020 -0400

    Update and fix changelog (#755)
    
    * Update changelog
    
    * Merge multiple mesh mentions and fix issue numbers

[33mcommit 4645da30c87ed7cde5d47ae5362a358991cafcec[m
Author: Julian Heinken <Julian.Heinken@haw-hamburg.de>
Date:   Sat Oct 31 03:21:53 2020 +0100

    Mesh overhaul with custom vertex attributes #592 (#599)
    
    Mesh overhaul with custom vertex attributes

[33mcommit ad940fbf6e72361005a6618aab48789effde358e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Oct 30 18:04:33 2020 -0700

    Rename query.entity() to query.get() and query.get() to query.get_component() (#752)

[33mcommit ff626f2f6f47584d1c8d550f30af482c9bc26e0a[m
Author: tigregalis <38416468+tigregalis@users.noreply.github.com>
Date:   Sat Oct 31 07:29:24 2020 +0800

    fix wavy text (#725)
    
    fix wavy text
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit b6004e44cff73876f2ba04f342bfe8129a7f5222[m
Author: Oscar <osmithsi@sfu.ca>
Date:   Fri Oct 30 12:21:57 2020 -0700

    Local resources don't create if already present (#745)
    
    Local<T> will no longer insert the inner resource if it already exists.

[33mcommit dea05e9af557b46c4893860bb94c03ee3649f1ae[m
Author: Boxy <supbscripter@gmail.com>
Date:   Fri Oct 30 18:43:39 2020 +0000

    Remove unsound cast in thread local resources (#749)
    
    * Remove unsound cast in thread local resources
    
    * Make ResourceRef(Mut)::new impossible to cause unsoundness with

[33mcommit 1d4a95db626e26e22c727d9ffee6957c317aa3c9[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Oct 29 23:39:55 2020 -0700

    ecs: ergonomic query.iter(), remove locks, add QuerySets (#741)

[33mcommit f41f2069a0a722dd023a4a66782ab0e2c35926aa[m
Author: memoryruins <memoryruinsmusic@gmail.com>
Date:   Thu Oct 29 22:41:00 2020 -0400

    Improve `bevy` crate's docs (#748)
    
    Change `bevy` crates re-exports to modules

[33mcommit 1b051d33532d6c85a69d95e51920431ba8050a3d[m
Author: Alex Hirsch <w4rh4wk@bluephoenix.at>
Date:   Thu Oct 29 22:22:45 2020 +0100

    Add SamplerDescriptor to Texture (#399) (#747)
    
    GLTF loader now grabs (some) sampler information from the respective
    GLTF sampler struct.

[33mcommit fb2b19def5f4720250d128126a57d6ee9fc9af58[m
Author: Utkarsh <37181756+simpuid@users.noreply.github.com>
Date:   Fri Oct 30 02:25:35 2020 +0530

    Fix bug of connection event of gamepad at startup (#730)
    
    * Removed f32==f32 comparision in gamepad.rs
    
    * Trigger gamepad connection event at start up

[33mcommit 7734b1ea6d323721d2f80d3f03175ee9c29267f1[m
Author: SvenTS <73037851+SvenTS@users.noreply.github.com>
Date:   Thu Oct 29 21:54:29 2020 +0100

    Fix PreviousParent lag by merging parent update systems (#713)
    
    * Sync previous parent in parent_update_system
    
    * Previous parent does not need to be an option now
    
    * Remove previous parent after parent deletion

[33mcommit bf2a917b81919dcee039708447d8868f9bc21552[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Oct 29 13:04:28 2020 -0700

    app: PluginGroups and DefaultPlugins (#744)

[33mcommit a592ef05626115dc379dbadc8a3859cdc3cbdc69[m
Author: Emanuel LindstrÃ¶m <emanuel.lindstrom@gmail.com>
Date:   Thu Oct 29 02:51:51 2020 +0100

    Add WSL 2 instructions to linux_dependencies.md (#727)
    
    Update linux_dependencies.md
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 0cddeed1c0490002157c4237c49121bbb283b17b[m
Author: David Ackerman <enfipy@gmail.com>
Date:   Thu Oct 29 02:08:33 2020 +0200

    Add support for android file system (#723)
    
    Add support for android file system

[33mcommit 040b8f72b3c7b31f8bf6b0c78cf7bb39fedb8a0d[m
Author: Freya <lmpriestley@tuta.io>
Date:   Wed Oct 28 18:59:45 2020 -0500

    Optimize returns in file_asset_io.rs and entities.rs (#728)
    
    Optimize returns in file_asset_io.rs and entities.rs

[33mcommit 8c053e7c6768743db1279036031d0c6786f25b88[m
Author: Boxy <supbscripter@gmail.com>
Date:   Wed Oct 28 23:43:17 2020 +0000

    Run app.initialize in the run_once runner (#736)

[33mcommit a7565e977449550c5292d43a1f9dad0a77688190[m
Author: memoryruins <memoryruinsmusic@gmail.com>
Date:   Thu Oct 22 14:58:02 2020 -0400

    Update changelog (#718)
    
    Update changelog

[33mcommit a6ac8faa8a06fc972ada26c884512cce854f9662[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Oct 22 11:53:59 2020 -0700

    port upstream hecs performance improvements (#716)

[33mcommit c743a96fe3a0ce76cb9d262a4a6ea14c3c832bf9[m
Author: Mariusz KryÅski <mrk@sed.pl>
Date:   Thu Oct 22 03:15:14 2020 +0200

    fix CI checks for wasm32 (#715)
    
    fix CI check for wasm32

[33mcommit 58eb7e7e05f954c3eebcc82adc370f18bec87f80[m
Author: CGMossa <cgmossa@gmail.com>
Date:   Thu Oct 22 00:57:03 2020 +0200

    Documenting small things here and there.. (#706)
    
    Documenting small things here and there..

[33mcommit 267599e577aa557dc37ef1a97933d4bfb198beee[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Oct 21 15:56:07 2020 -0700

    gamepad: expose raw and filtered gamepad events. (#711)

[33mcommit 894cc5e40a0c0053aae02b88db982a5063fa74d7[m
Author: Mariusz KryÅski <mrk@sed.pl>
Date:   Thu Oct 22 00:55:35 2020 +0200

    fix getrandom (#712)

[33mcommit 677cb1fc67d0f2499c10c672b2121f16460e4e64[m
Author: Mariusz KryÅski <mrk@sed.pl>
Date:   Thu Oct 22 00:55:15 2020 +0200

    fix wasm assets (#714)
    
    fix wasm assets

[33mcommit d01ba9e4fc3c7e8aa8cf71e707f1076d17bec113[m
Author: Utkarsh <37181756+simpuid@users.noreply.github.com>
Date:   Wed Oct 21 22:57:00 2020 +0530

    Separate gamepad state code from gamepad event code and other customizations (#700)
    
    Separated gamepad event and gamepad state code and made gamepad input more customizable

[33mcommit 0f43fb066f42e459e2f68bc5009af47c00fdc510[m
Author: James R <71466513+ColdIce1605@users.noreply.github.com>
Date:   Tue Oct 20 14:31:49 2020 -0500

    update glam (#707)

[33mcommit 0dba0fe45f60cf06e802e5ff08710290ad7870d6[m
Author: lee-orr <lee-orr@users.noreply.github.com>
Date:   Tue Oct 20 14:47:10 2020 -0400

    add flag for low power gpu as default (#397)

[33mcommit 0dbba3efffdb7d3ab46105cc894b943d648a9509[m
Author: Dashiell Elliott <48158656+Dash-L@users.noreply.github.com>
Date:   Tue Oct 20 14:44:50 2020 -0400

    Migrate to rodio 0.12 using thread local resources (#692)
    
    Migrate to rodio 0.12 using thread local resources

[33mcommit 67f87e1d2b4d023f10c76f300e0ba0ae839ce72a[m
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Oct 19 18:24:50 2020 -0700

    Update ahash requirement from 0.4.5 to 0.5.3 (#704)
    
    Updates the requirements on [ahash](https://github.com/tkaitchuck/ahash) to permit the latest version.
    - [Release notes](https://github.com/tkaitchuck/ahash/releases)
    - [Commits](https://github.com/tkaitchuck/ahash/commits)
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

[33mcommit f88cfabddeac1aab4a3682581dad4324dabab3fd[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Oct 19 17:29:31 2020 -0700

    asset: WasmAssetIo (#703)
    
    asset: WasmAssetIo

[33mcommit 03bc5d7fddbf3803672672731777fcce930abfea[m
Author: tigregalis <38416468+tigregalis@users.noreply.github.com>
Date:   Tue Oct 20 03:37:15 2020 +0800

    two-way conversions between `Color`-`Vec4` and `Color`-`[f32; 4]` (#688)
    
    two-way conversions between `Color`-`Vec4` and `Color`-`[f32; 4]` - use `impl From` instead of `impl Into`

[33mcommit c32e637384936d973918fb59d1c37c0a4f4f41f7[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Oct 18 13:48:15 2020 -0700

    Asset system rework and GLTF scene loading (#693)

[33mcommit a602f50c2c3d8bc963a4224110041dd37451e7ce[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Oct 18 13:20:42 2020 -0700

    small input example improvements (#701)

[33mcommit 5acebed73184175bf089aec5516782b094d08199[m
Author: Marek Legris <34162957+MarekLg@users.noreply.github.com>
Date:   Sun Oct 18 22:03:16 2020 +0200

    Transform and GlobalTransform are now Similarities (#596)
    
    Transform and GlobalTransform are now Similarities.
    
    This resolves precision errors and simplifies the api
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit 149c39950a69cc7c1c0265f94bc49905e0c3e739[m
Author: Tomasz Sterna <tomek@sterna.link>
Date:   Sun Oct 18 21:25:33 2020 +0200

    Runners explicitly call App.initialize() (#690)

[33mcommit a80469bd137f24b893543fce745fcc4f6c0d41cf[m
Author: Sergey Minakov <naithar@icloud.com>
Date:   Sun Oct 18 22:24:01 2020 +0300

    Touch support implementation (#696)
    
    Adds a basic touch input system

[33mcommit 5df6804daf056f75872c92800d3312ce71056692[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Oct 17 12:25:20 2020 -0700

    Delete pull_request_template.md

[33mcommit d004bce0c9d4049549a2f2a6f47aa217ff39d931[m
Author: Alex <a5.alex.b@gmail.com>
Date:   Fri Oct 16 17:07:01 2020 -0400

    Added basic mouse capture API (#679)
    
    Added basic cursor lock API

[33mcommit 7ba45849f3e8ab48a5fcf235891e36464943b95d[m
Author: David Ackerman <enfipy@gmail.com>
Date:   Fri Oct 16 20:44:31 2020 +0200

    Add default for texture format (#675)

[33mcommit fccfa12d3b7514e60e7f47e5aef941fe767e6d8b[m
Author: Mariusz KryÅski <mrk@sed.pl>
Date:   Fri Oct 16 20:12:55 2020 +0200

    do not depend on spirv on wasm target (#689)
    
    do not use spirv for wasm target

[33mcommit 9db8ae7a16d234414ea1f4ce127dbbdf111759c9[m
Author: Fuyang Liu <liufuyang@users.noreply.github.com>
Date:   Thu Oct 15 23:23:03 2020 +0200

    Fix breakout example bug - ball flying out when collide paddle and wall at the same time (#685)
    
    Fix breakout bug - ball flying out when collide paddle and wall

[33mcommit 90ea5b1e6bdad70a783fe39a0f38a430d6fa0b8f[m
Author: Logan Magee <mageelog@gmail.com>
Date:   Thu Oct 15 12:47:23 2020 -0800

    Add issue and pull request templates (#551)

[33mcommit 871790c6e0253c5404bc32c6090e042a672f7348[m
Author: Mat Hostetter <4849531+mjhostet@users.noreply.github.com>
Date:   Thu Oct 15 13:39:01 2020 -0700

    Adjust how `ArchetypeAccess` tracks mutable & immutable deps (#660)
    
    `ArchetypeAccess` was tracking `immutable` and `mutable` separately.
    This means that checking is_compatible requires three checks:
    m+m, m+i, i+m.
    
    Instead, continue tracking `mutable` accesses, but instead of
    `immutable` track `immutable | mutable` as another `accessed` bit mask.
    This drops the comparisons to two (m+a, a+m) and turns out to be
    what the rest of the code base wants too, unifying various duplicated
    checks and loops.

[33mcommit f66a72563efb39a3ef11528fd5975d1710ac452b[m
Author: Junfeng Liu <china.liujunfeng@gmail.com>
Date:   Fri Oct 16 04:31:34 2020 +0800

    Expose a pointer of EventLoopProxy to process custom messages (#674)

[33mcommit b03d8da9bb8e3a28aba4aea892179914373ad16e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Oct 15 12:49:56 2020 -0700

    fix clippy (#686)

[33mcommit dd91f8e1163115a84699d80e8744eeaf4597b739[m
Author: Utkarsh <37181756+simpuid@users.noreply.github.com>
Date:   Fri Oct 16 01:15:34 2020 +0530

    Add support to get gamepad button/trigger values using Axis<GamepadButton> (#683)

[33mcommit 76cc25823dcb6ccb65223215f2a19120cb6301fd[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Thu Oct 15 20:42:19 2020 +0200

    can change window settings at runtime (#644)
    
    can change window settings at runtime

[33mcommit 9c48e5cccbaebba18aad16c954c79ffc7f370d16[m
Author: M <9271353+sY9sE33@users.noreply.github.com>
Date:   Wed Oct 14 23:49:07 2020 -0400

    Add a way to specify padding/ margins between sprites in a TextureAtlas. (#460)
    
    Add a way to specify padding between sprites in a TextureAtlas

[33mcommit 1f7fe77f320da0389f7db1f6be57cc518cd5e2d3[m
Author: Catherine Gilbert <catherine.gilbert15@gmail.com>
Date:   Wed Oct 14 18:13:43 2020 -0400

    added frame count to FrameTimeDiagnosticsPlugin (#678)
    
    added frame count to FrameTimeDiagnosticsPlugin

[33mcommit 7e23e132ef6a859962055dce7e1c2bcb8bd9d072[m
Author: Nathan Jeffords <blunted2night@gmail.com>
Date:   Wed Oct 14 14:01:08 2020 -0700

    add version of the ecs's `write_world` method that takes a pre-boxed world writer (#661)
    
    Co-authored-by: Nathan Jeffords <njeffords@comtechefdata.com>

[33mcommit df64e1fc927e7ec5aad836d7a51c692021ab6817[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Oct 12 18:12:17 2020 -0700

    upgrade rectangle pack (#673)

[33mcommit 5e7c36d1c17fbbbd87ca8ec65d10da494747eda9[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Oct 12 16:54:22 2020 -0700

    Fix example colors (#672)

[33mcommit 930eba4ccdc4b500d9508299d226b4e9f353287f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Oct 12 15:09:44 2020 -0700

    add thread local resources (#671)

[33mcommit 53d6d1050639e3b4448ef3f57aa63402d72511a6[m[33m ([m[1;31morigin/better-audio[m[33m)[m
Author: walterpie <61631991+walterpie@users.noreply.github.com>
Date:   Mon Oct 12 19:22:10 2020 +0200

    Register `IndexFormat` as a property (#664)

[33mcommit 036b3bc0e67f0afc898ef524219aafbc7592fa8d[m
Author: Joshua J. Bouw <dev@joshuajbouw.com>
Date:   Tue Oct 13 00:21:28 2020 +0700

    add more methods to Assets for clearing and allocation reduction (#669)

[33mcommit 32b122e1c5b7fb91ff2f51475ee633b01b3e895f[m
Author: Julian Heinken <Julian.Heinken@haw-hamburg.de>
Date:   Mon Oct 12 19:19:06 2020 +0200

    Update color.rs (#670)
    
    Co-authored-by: Julian Heinken <julian.heinken@gmail.com>

[33mcommit f6fc76db1da0fa9c6dc67f7b3f0c288904f0eec9[m
Author: Nathan Stocks <cleancut@github.com>
Date:   Sat Oct 10 14:30:34 2020 -0600

    Upgrade to gilrs 0.8.0 to gain dpad support on macos from https://gitlab.com/gilrs-project/gilrs/-/merge_requests/50 (#653)

[33mcommit 1f27d8c727bf976b4ca2cb15577bdc7016fd57ec[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Oct 10 12:16:52 2020 -0700

    fix new clippy error (#656)

[33mcommit 333fd3f0e0802d961b5905580aafe1e4ded244e5[m
Author: Nathan Stocks <cleancut@github.com>
Date:   Thu Oct 8 19:43:41 2020 -0600

    Don't Panic (#651)
    
    Don't panic when despawning recursively

[33mcommit bf501b77ccf50eecafe80a2d9313590aba57ec9c[m
Author: Nathan Stocks <cleancut@github.com>
Date:   Thu Oct 8 17:58:19 2020 -0600

    Don't panic when despawning entity multiple times (#649)
    
    Emit a debug log message instead of a panic when despawning an entity which has already been despawned.

[33mcommit ebce1f9c4a9f3e3d3b93675a99c6fabd7facacc0[m
Author: memoryruins <memoryruinsmusic@gmail.com>
Date:   Thu Oct 8 18:32:25 2020 -0400

    Remove outdated ecs docs (#646)

[33mcommit 354d71cc1f80d0a8e4b37a80dba87154b4b6242b[m
Author: Grayson Burton <ocornoc@protonmail.com>
Date:   Thu Oct 8 11:43:01 2020 -0700

    The Great Debuggening (#632)
    
    The Great Debuggening

[33mcommit a92790c0111cad38a5e7e76afad90cc76dcbb502[m
Author: Julian Heinken <Julian.Heinken@haw-hamburg.de>
Date:   Thu Oct 8 19:30:23 2020 +0200

    sRGB awareness for Color (#616)
    
    Color is now sRGB aware, added SrgbColorSpace trait for f32

[33mcommit e89301ad2981b7a2a15b01955d0cc5a856d31e1a[m
Author: Kenneth Dodrill <kmdodrill@protonmail.com>
Date:   Thu Oct 8 12:28:56 2020 -0500

    Add Void Linux to linux dependencies file (#645)
    
    Figured I'd add it above NixOS since that one is way more verbose than the rest, but happy to move it below if desired :)

[33mcommit 52a4d49bbf08da249d02c4a1eec6b8442ba21e85[m
Author: FranÃ§ois <mockersf@gmail.com>
Date:   Wed Oct 7 20:09:17 2020 +0200

    set asset path relative to root when loading sync (#643)

[33mcommit 6f287fb81570b40a3ca4c1f4734d901cb254c41d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Oct 6 13:08:12 2020 -0700

    remove custom window mode from example (#637)

[33mcommit d61a1735e9d938de7da4fa4cd9aa1f61429ebc59[m
Author: Zach Gotsch <orbipedis@gmail.com>
Date:   Mon Oct 5 12:07:14 2020 -0700

    ui/text example: Use a unit component to identify the target Text (#612)

[33mcommit 125afb41ac28f9ce899f783fb05f3b742de48cda[m
Author: Downtime <40173605+Cupnfish@users.noreply.github.com>
Date:   Tue Oct 6 01:51:36 2020 +0800

    Exposing winit decorations (#627)
    
    Exposing winit decorations

[33mcommit 219527ed7d5709646c60d22001443d61fb077867[m
Author: Boutillier <boris.boutillier@gmail.com>
Date:   Mon Oct 5 19:41:34 2020 +0200

    Iter added camera to update their projection (#488)

[33mcommit 1bdb9d3b009c12433c2ef31127527afa7df33417[m
Author: Boutillier <boris.boutillier@gmail.com>
Date:   Mon Oct 5 19:38:12 2020 +0200

    Fix Added behaviour for QueryOne get. (#543)
    
    Query unchanged as impacts performances.
    Added tests in bevy_ecs/hecs

[33mcommit 9a4167ef7f5115f7fc045a881f5c865f568d34c0[m
Author: Andrew Hickman <andrew.hickman1@sky.com>
Date:   Sat Oct 3 20:56:25 2020 +0100

    Fix FloatOrd hash being different for different NaN values (#618)
    
    * Fix FloatOrd hash being different for different NaN values
    
    * Fix FloatOrd hashing +0.0 and -0.0 to different values

[33mcommit 22a2c88a476c85dcd23f19b25d5ac3f517d59edb[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Oct 2 12:24:30 2020 -0700

    winit: upgrade to 0.23.0 / move back upstream! (#617)

[33mcommit 4c753e258806999a69c680421ba3804148b4b33c[m
Author: EthanYidong <50757300+EthanYidong@users.noreply.github.com>
Date:   Thu Oct 1 13:04:06 2020 -0700

    move dynamic plugin loading to its own optional crate (#544)
    
    move dynamic plugin loading to its own crate

[33mcommit 8e876463ecc5f3d1ce57efcf294fc5919eb765b5[m
Author: jngbsn <1700220+jngbsn@users.noreply.github.com>
Date:   Thu Oct 1 14:43:26 2020 -0500

    Add hierarchy example (#565)
    
    add ecs/hierarchy example

[33mcommit 1beee4fd28b934edea8622b985ea038ea6c7ee41[m
Author: Will Hart <hart.wl@gmail.com>
Date:   Fri Oct 2 04:31:06 2020 +1000

    Add AppBuilder::asset_loader_from_instance (#580)
    
    * Implement add_asset_loader_from_instance
    
    * Add example of different data loaders

[33mcommit 056f84a2c1323e8b62b30db167c57c9ce0330370[m
Author: Gregor <gregorwbr@gmail.com>
Date:   Thu Oct 1 20:00:10 2020 +0200

    Expose current_entity in ChildBuilder (#595)

[33mcommit 3a4eacbdee33a723f335132f2808686452dabbd8[m
Author: Jonas Matser <github@jonasmatser.nl>
Date:   Thu Oct 1 19:58:21 2020 +0200

    Adds derive for missing debug implementations (#597)

[33mcommit d52f9e32aa643bbcf775dcd64fe07b390653e422[m
Author: Nolan Darilek <nolan@thewordnerd.info>
Date:   Thu Oct 1 12:54:20 2020 -0500

    Add `#[cfg_attr(feature = "serialize", derive(serde::Serialize, serde::Deserialize))]` to gamepad types. (#583)
    
    Seems these may have been missed in the gamepad implementation, copied them from keyboard.rs.

[33mcommit cd9e502b12c2cc1a6d4aba33a0fc82ab3db04b4a[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Thu Oct 1 18:52:29 2020 +0100

    Fix ScheduleRunnerPlugin (#610)
    
    Fixes #609

[33mcommit 408114269b36cbc088dc9b3a0a58ba8acba21acf[m
Author: Tomasz Sterna <tomek@sterna.link>
Date:   Sun Sep 27 21:55:06 2020 +0200

    Use instant::Instant with wasm-bindgen feature (#591)

[33mcommit 74ad1c375268cedfbb3b218cfc5e86b8d54e1885[m
Author: Raymond <raymond.lau.ca@gmail.com>
Date:   Sat Sep 26 14:27:56 2020 -0700

    Add remove bundle to bevy_ecs commands (#579)
    
    add remove bundle to bevy_ecs commands

[33mcommit 85a7f883d12dfd98c66913e2820c8f7096381b03[m[33m ([m[1;31morigin/pr-merge-helper[m[33m)[m
Author: Alexander Sepity <alexander.sepity@gmail.com>
Date:   Sat Sep 26 20:26:19 2020 +0300

    Fix typo in #569. (#582)

[33mcommit dd07674b594570024116d875341d54d878264fe9[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Sep 25 21:34:47 2020 -0700

    github actions: use stable clippy (#577)

[33mcommit 05db806e15397b2887e663f7c46baff694c51f81[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Sep 25 17:57:23 2020 -0700

    fix DrawableText crash (#574)

[33mcommit a3012d94bb4d24a1fb788896f42afb7178ca7de8[m
Author: Mariusz KryÅski <mrk@sed.pl>
Date:   Sat Sep 26 00:26:23 2020 +0200

    WASM asset loading (#559)
    
    wasm assets

[33mcommit afc656701d83bc09e1d444b4c33247a766ba8b37[m
Author: Gray Olson <gray@grayolson.com>
Date:   Fri Sep 25 14:29:30 2020 -0700

    switch to u32 indices by default (#572)

[33mcommit c2299c75636f98de27dc1de7f64215c07f02d47a[m
Author: Logan Magee <mageelog@gmail.com>
Date:   Fri Sep 25 12:51:54 2020 -0800

    Add dependabot config for cargo and GitHub Actions (#570)

[33mcommit 3abfcad7ab5e194e1b79daedc0234e2d3afbfb24[m
Author: Alexander Sepity <ratysz@gmail.com>
Date:   Fri Sep 25 22:33:27 2020 +0300

    Patch memory leak in `Archetype::grow()`. (#569)

[33mcommit f7c8882c0408902ce6d5e22ac05f51d0f5381ff1[m
Author: Gray Olson <gray@grayolson.com>
Date:   Fri Sep 25 12:13:01 2020 -0700

    Index buffer specialization (#568)
    
    index buffer specialization

[33mcommit 3ca0a2b0ac36ddfb7ed36a66806c0e5686d58548[m
Author: Logan Magee <mageelog@gmail.com>
Date:   Thu Sep 24 17:52:32 2020 -0800

    Suggest -Zrun-dsymutil-no for macOS fast compiles (#552)
    
    This keeps original object files around after compilation in the event that
    debug information is needed.

[33mcommit 3dbc6550a0b5049be4453cd5b00a12591d8e3532[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Sep 24 18:45:17 2020 -0700

    add rg3d to "alternatives"

[33mcommit a768bae33b9902475d5b50326751b26e10ed36cf[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Sep 23 13:20:14 2020 -0700

    properly update bind group ids when setting dynamic bindings. (#560)

[33mcommit 028a22b12936797d3a7ca1ad5d715a98bdf27907[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Sep 21 20:23:09 2020 -0700

    asset: use bevy_tasks in AssetServer (#550)

[33mcommit dd6f0b5e046fbf78d13b8478b5356a4e3c53e13f[m
Author: Tomasz Sterna <tomek@sterna.link>
Date:   Tue Sep 22 01:12:34 2020 +0200

    Option to give existing canvas element as winit window (#515)

[33mcommit 74f881f20d6c3e8588be8e523424a2be99ed6bf5[m
Author: Stjepan Glavina <stjepang@gmail.com>
Date:   Tue Sep 22 00:47:38 2020 +0200

    Fix compilation error on wasm (#549)
    
    Fix compilation error on wasm

[33mcommit b5f3585d2e9093028e4c9e243545aa85dca6240e[m
Author: Logan Magee <mageelog@gmail.com>
Date:   Mon Sep 21 12:54:47 2020 -0800

    Merge some imports in bevy_winit/src/lib.rs (#522)

[33mcommit d562063abf19dee9b9da9dee6054fb425de1e94d[m
Author: LÃ©o Gillot-Lamure <leo.gillot@navaati.net>
Date:   Mon Sep 21 22:53:17 2020 +0200

    Add systemd-devel for Fedora Linux dependencies (#528)
    
    It is required for the dependency crate libudev-sys (error about missing libudev.pc)

[33mcommit 295e1f0a18ef579139890f33f81d4e8043ca9415[m
Author: HyperLightKitsune <71573365+HyperLightKitsune@users.noreply.github.com>
Date:   Mon Sep 21 16:51:38 2020 -0400

    use FnOnce in Commands and ChildBuilder where possible (#535)
    
    use FnOnce in Commands and ChildBuilder

[33mcommit 18a8532f320c0236ddf2b91a87c29fca1941fff5[m
Author: Zooce <zooce@hey.com>
Date:   Mon Sep 21 13:16:17 2020 -0700

    Add `libudev-dev` to Ubuntu dependencies (#538)

[33mcommit 5aa77979d15a13cf8b532f3eb03abb1c29981309[m
Author: Stjepan Glavina <stjepang@gmail.com>
Date:   Mon Sep 21 22:13:40 2020 +0200

    Remove some unsafe code (#540)

[33mcommit fd1d6a388d551da1dadd393d18776477093d832a[m
Author: memoryruins <memoryruinsmusic@gmail.com>
Date:   Sun Sep 20 19:32:07 2020 -0400

    Stop looping when scheduler receives an AppExit (#536)

[33mcommit 74dba5f36be1fc64bec8312e5d4fccfa08a02b8b[m[33m ([m[1;33mtag: v0.2.1[m[33m)[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Sep 20 15:58:32 2020 -0700

    release: 0.2.1 (#533)

[33mcommit b05708f66a4b4b1dbd92a42dfc62a11693dce628[m
Author: Stjepan Glavina <stjepang@gmail.com>
Date:   Sun Sep 20 20:27:24 2020 +0200

    Update async-executor to 1.3.0 (#526)

[33mcommit 924afc3c0c8b511fd190b5adad68f10fe26149ac[m
Author: memoryruins <memoryruinsmusic@gmail.com>
Date:   Sun Sep 20 02:25:07 2020 -0400

    Remove UI debug print (#521)

[33mcommit ba5af4dd56aa4e8e483f5be3e9fa94dfb3268b60[m[33m ([m[1;33mtag: v0.2.0[m[33m)[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Sep 19 15:29:08 2020 -0700

    release: 0.2.0 (#520)

[33mcommit 57a52e6ed7ce5f90783b8845a3dcd59a4f7e0927[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Sep 19 14:22:01 2020 -0700

    fix font atlas text width bug (#519)

[33mcommit ff54efe3e3b5ae6031fc78d654feeeb722f114b0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Sep 19 13:35:48 2020 -0700

    transform: add "setter" builder functions, make naming clearer, and fix examples (#516)

[33mcommit b9f18efd866bfde8417b83fd9b2a5c7f95234afa[m
Author: Boutillier <boris.boutillier@gmail.com>
Date:   Sat Sep 19 21:57:52 2020 +0200

    Do not assume font handle is present in assets. (#490)

[33mcommit 4b83cfc7295361a5e9d9d2885ce10ae44a90bebb[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Sep 19 02:34:37 2020 -0700

    update changelog

[33mcommit 35c323469f558a0308662294de76b86607ce0de9[m
Author: Zicklag <zicklag@katharostech.com>
Date:   Fri Sep 18 22:13:07 2020 -0500

    Improve README Readability Around Cargo Features (#511)

[33mcommit 5e3731ddce929a566f2b21a0dbeca4ae69b39cf2[m
Author: Tomasz Sterna <tomek@sterna.link>
Date:   Sat Sep 19 05:11:26 2020 +0200

    Create winit canvas under WebAssembly (#506)

[33mcommit 19d4694d24de236a180d73e434f712fb221a4a7b[m
Author: Utkarsh <37181756+simpuid@users.noreply.github.com>
Date:   Sat Sep 19 03:13:47 2020 +0530

    Added gamepad support using Gilrs (#280)
    
    Co-authored-by: Carter Anderson <mcanders1@gmail.com>

[33mcommit d4c8436457d2e5b0ebaad456ff149a1af0115bd4[m
Author: Boiethios <Boiethios@users.noreply.github.com>
Date:   Fri Sep 18 22:30:54 2020 +0200

    Add AppBuilder::add_startup_stage_[before/after] (#505)
    
    Co-authored-by: Boiethios <felix-dev@daudre-vignier.fr>

[33mcommit 70ad6671dba9e7dc93e8a085ad8bb73904ca1fa5[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Sep 17 17:16:38 2020 -0700

    ecs: use generational entity ids and other optimizations (#504)
    
    ecs: use generational entity ids and other optimizations

[33mcommit 34c6f5f41bd2bff7867e269985a54036b8d96771[m
Author: Tomasz Sterna <tomek@sterna.link>
Date:   Wed Sep 16 22:40:32 2020 +0200

    Implement WASM support for bevy_winit (#503)
    
    Also, replaced wasm_timer::Instant with instant::Instant as it is
    used by winit WASM implementation.

[33mcommit f5146c189648b2d7cbb6d419421e9f7d16f22d70[m
Author: memoryruins <memoryruinsmusic@gmail.com>
Date:   Wed Sep 16 16:02:53 2020 -0400

    Update headless example / add feature docs (#502)
    
    * Update headless example
    
    * Add missing docs for features

[33mcommit ad7613c67485ad468d33f1b68452c076b70db826[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Sep 16 00:19:14 2020 -0700

    Fix set_scale and set_rotation in new Transform api (#500)

[33mcommit d4ab2f4d4756000ce399ffd8d8924cf45b8d96eb[m
Author: verzuz <verzuz@gmx.de>
Date:   Wed Sep 16 03:06:10 2020 +0200

    fix font atlas overflow (#495)
    
    manage font_atlas overflow

[33mcommit 2b0ee24a5d213ad1d2e639ce6ab3f570a979ed28[m
Author: Tomasz Sterna <tomek@sterna.link>
Date:   Wed Sep 16 03:05:31 2020 +0200

    Implement single threaded task scheduler for WebAssembly (#496)
    
    * Add hello_wasm example
    
    * Implement single threaded task scheduler for WebAssembly

[33mcommit 1bfc147e7b3adaeeb7dac1a3509d03a07bad2cb8[m
Author: memoryruins <memoryruinsmusic@gmail.com>
Date:   Tue Sep 15 19:43:30 2020 -0400

    Update changelog (#497)
    
    Update changelog

[33mcommit b9f549efaac3215e63a2d2022d58f58648adf8cb[m
Author: Tomasz Sterna <tomek@sterna.link>
Date:   Tue Sep 15 21:20:20 2020 +0200

    Make "render" feature optional (#485)

[33mcommit e81111c1b11c8ecb5d3e1365543d7d4ca576ead1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Sep 14 18:20:20 2020 -0700

    simplify transform usage where possible (#494)

[33mcommit a5259ab45f5aaf22f4d1844ca67950496a06334a[m
Author: Smite Rust <x1627283564@hotmail.com>
Date:   Tue Sep 15 09:12:52 2020 +0800

    update dependencies (#493)

[33mcommit afe86b4b3a5bfd3a9a7f71375f4ad25296e6ba68[m
Author: figsoda <figsoda@pm.me>
Date:   Mon Sep 14 17:34:43 2020 -0400

    Provide shell.nix for easier compiling with nix-shell (#491)
    
    Embed shell.nix into docs/linux_dependencies.md

[33mcommit b3e339e58a90636c7fc5686d470051b9392c31b5[m
Author: Ilja KartaÅ¡ov <elias@lowenware.com>
Date:   Mon Sep 14 23:14:54 2020 +0200

    Fix missing asset info path for synchronous loading (#486)

[33mcommit b0e64d42953393eefa74b89a9006d152d72b16a1[m
Author: Smite Rust <x1627283564@hotmail.com>
Date:   Tue Sep 15 05:01:41 2020 +0800

    update async-executor (#484)
    
    update async-executor

[33mcommit 474bb5403e2fbe07ef1feb6df77fb3e2598879ae[m
Author: Marek Legris <34162957+MarekLg@users.noreply.github.com>
Date:   Mon Sep 14 23:00:32 2020 +0200

    Transform Rewrite (#374)
    
    Remove individual Translation / Rotation / Scale components in favor of a combined Transform component

[33mcommit 3bc5e4cb1edb623a35d3dbb4f1918411f133a644[m
Author: Logan Magee <mageelog@gmail.com>
Date:   Fri Sep 11 15:23:21 2020 -0800

    render: Export specific items outside of prelude (#473)
    
    It's a preference of some people to not use prelude modules at all in
    order to make their imports more explicit. Currently, items like
    `Camera3dComponent` are only exported in a prelude module, making an
    explicit import look like
    
    `use bevy::prelude::Camera3dComponent`
    
    which feels a bit hackish. This change doesn't remove such components
    from the prelude, but just re-exports them at the crate's
    (`bevy_render` in this case) root.

[33mcommit e7d254517e425878d9adebf84e9b238da68f708c[m
Author: Logan Magee <mageelog@gmail.com>
Date:   Fri Sep 11 15:22:42 2020 -0800

    Load assets from root path when loading directly (#478)

[33mcommit 5447592c07131d395a997de71a1e91762283a9fd[m
Author: Fabian LÃ¶schner <w1th0utnam3@users.noreply.github.com>
Date:   Fri Sep 11 21:37:59 2020 +0200

    Fix handling of nested generics in PropertyTypeRegistration (#458) (#458)

[33mcommit 12e0e9990069895c73ad1bc1611445553ea0ebaf[m
Author: Max Bruckner <max@maxbruckner.de>
Date:   Fri Sep 11 21:19:53 2020 +0200

    Fix cargo run command for running examples (#471)

[33mcommit 3b3b0195bc7addc014de029285dd8fbea0459be2[m
Author: Jonas Matser <github@jonasmatser.nl>
Date:   Fri Sep 11 21:14:36 2020 +0200

    Adds profiler_start/stop to parallel_executor (#474)

[33mcommit 4ef18e2608d6b642636471fe9d49f2f5f4c4fe0a[m
Author: BimDav <67792882+BimDav@users.noreply.github.com>
Date:   Thu Sep 10 22:15:02 2020 +0200

    Resource change tracking (#388)
    
    * Add mutated tracker on resources and ChangedRes query for added or mutated resources.
    
    * ResMut:::new() now takes a reference to a 'mutated' flag in its archetype.
    
    * Change FetchResource so that get() returns an Option. Systems using Resources will only be called if all fetched Resources are Some(). This is done to implement ChangedRes, which is Some iff the Resource has been changed.
    
    * Add OrRes for a logical or in tuples of Resource queries.
    
    * Separate resource query get() in is_some() and get() methods for clarity
    
    * Remove unneeded unsafe
    
    * Change ResMut::new()

[33mcommit 12deb0bd915062309f4a5f07ee01e4bd85f77b8e[m
Author: Tomasz Sterna <tomek@sterna.link>
Date:   Thu Sep 10 21:56:37 2020 +0200

    Initialize+Run systems when running the app (#444)
    
    This is required, so Local<> resources get initialized before systems run.

[33mcommit a9ce7f4e821dc9788ae1a361c6708993fd1b8921[m
Author: Smite Rust <x1627283564@hotmail.com>
Date:   Fri Sep 11 03:54:24 2020 +0800

    update dependencies (#470)

[33mcommit 9d0abeb0144bcb40cc7d9ebc750a807000b6e0ab[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Sep 9 18:54:20 2020 -0700

    fix formatting

[33mcommit 478fb0649a6030d4537c4fbbd8a93088e299e8d6[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Sep 9 18:51:59 2020 -0700

    use upstream ron

[33mcommit 612c2552a50e8009715e825504b9e8b74b56821e[m
Author: Philip Degarmo <aclysma@gmail.com>
Date:   Wed Sep 9 13:12:50 2020 -0700

    Update multitask dependency to async-executor (#452)
    
    * Switch from the deprecated `multitask` crate to `async-executor`
    * async-executor appears to be essentially multitask 0.3
    * use block_on in futures_lite instead of pollster because futures_lite is already in the dependency list of async-executor

[33mcommit ca4a2114a860c770a6c3cf6047e2b70d8108f16a[m
Author: Nolan Darilek <nolan@thewordnerd.info>
Date:   Wed Sep 9 14:38:24 2020 -0500

    Add pkg-config as a Ubuntu 20.04 dependency. (#463)
    
    This may need to be added for all Linux distros, but I'm testing in WSL2, and Ubuntu 20.04 was all I had.

[33mcommit 581d85b41340896d522836c6870bd594eaad3761[m
Author: memoryruins <memoryruinsmusic@gmail.com>
Date:   Wed Sep 9 14:39:37 2020 -0400

    Add parallel_query to the examples readme (#465)

[33mcommit 2667c24656b74fb6d3ee17206494f990678e52b3[m
Author: Cory Forsstrom <cforsstrom18@gmail.com>
Date:   Tue Sep 8 13:56:45 2020 -0700

    custom rodio source for audio (#145)
    
    support custom rodio source for audio

[33mcommit 9c850057c05f8d8b7cead75ae00ef4009367ed46[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Sep 8 13:30:44 2020 -0700

    move benches to separate crate to cut test/example build times

[33mcommit ac117019e2e9bf2d9f1859939e6dab119aad28df[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Sep 8 13:29:55 2020 -0700

    resolve unused variable warning in release builds

[33mcommit 586303fd537813b376f11dd80af7163f5ede4cd5[m
Author: Grant Moyer <grantmoyer@gmail.com>
Date:   Tue Sep 8 15:18:32 2020 -0400

    Parallel queries (#292)
    
    Add support for Parallel Queries

[33mcommit 52ae217b16cb485c91fb7d13d98ff451a6f84e65[m
Author: Sergey Minakov <devias.naith@gmail.com>
Date:   Tue Sep 8 22:04:22 2020 +0300

    Resize mode for Sprite component (#430)
    
    Adds a 'resize_mode' field for 'Sprite'.
    This allows different resize handling based on 'SpriteResizeMode' enum value.

[33mcommit 69aa9bf9fdc925d7325b79221706e9ff6c4b2bad[m
Author: Logan Magee <mageelog@gmail.com>
Date:   Mon Sep 7 17:32:08 2020 -0800

    Recommend `.cargo/config.toml` over `.cargo/config` (#459)
    
    As of Rust version 1.39.0, `config.toml` is the preferred filename for
    `cargo`s configuration file. Incidentally added a newline at EOF.
    
    https://doc.rust-lang.org/cargo/reference/config.html

[33mcommit 413caae7bbe54c5b605a57abe0a39a1543c11952[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Sep 7 15:00:03 2020 -0700

    resolve errors from latest clippy version

[33mcommit d86fae814781215baed5be68d67a0e704e69bdf4[m
Author: Boxy <supbscripter@gmail.com>
Date:   Mon Sep 7 21:52:03 2020 +0100

    Update docs for Updated, Changed and Mutated (#451)
    
    Update docs for Updated, Changed and Mutated

[33mcommit 54e9f446c4f54b42582a00255f7879f63f18b521[m
Author: Jeremiah Senkpiel <fishrock123@rocketmail.com>
Date:   Sun Sep 6 13:06:21 2020 -0700

    SceneSpawner: add unload() and unload_sync() (#339)
    
    This allows you to unload scenes.
    
    Refs: https://github.com/bevyengine/bevy/issues/255

[33mcommit 6e460a6a9795d7d854912078b2944ce22b554509[m
Author: Aevyrie <aevyrie@gmail.com>
Date:   Sun Sep 6 12:56:09 2020 -0700

    Add Copy to MouseScrollUnit (#270)
    
    add Copy to MouseScrollUnit

[33mcommit 43463a7a060ae6f48e14a0636eb74b6a5c2cb15a[m
Author: Tristan Pemble <github@tristan.pemble.dev>
Date:   Sun Sep 6 12:53:14 2020 -0700

    Optimize transform systems to only run on change (#417)
    
    Optimize transform systems to only run on change

[33mcommit 9eba19c8f0275b4622a9d49f6b7ba4f4e78bda5f[m
Author: Philip Degarmo <aclysma@gmail.com>
Date:   Sun Sep 6 12:07:34 2020 -0700

    Fix for bug #449 (#450)
    
    Fix for a bug (#449) in scheduler that could result in systems running concurrently when they shouldn't.

[33mcommit 8b3553002d5792082f2a821a730ae9ed8ed1207c[m
Author: Philip Degarmo <aclysma@gmail.com>
Date:   Sat Sep 5 22:05:33 2020 -0700

    Reworked parallel executor to not block (#437)
    
    Reworked parallel executor to not block

[33mcommit 8677e366811a3ac277b2b77293b1aa9f8eb734a7[m
Author: Philip Degarmo <aclysma@gmail.com>
Date:   Sat Sep 5 21:46:23 2020 -0700

    Replace some println spam in a test with an assertion (#439)

[33mcommit 972897690b0f73e0fd7ee4bbc042f7c8c44d5f8d[m
Author: memoryruins <memoryruinsmusic@gmail.com>
Date:   Sun Sep 6 00:45:31 2020 -0400

    Create CHANGELOG.md and add all unreleased changes since `0.1.3` (#443)

[33mcommit 5f1fef333cfddde1d4dbbc223338f7ea0edc0875[m
Author: Hugo Lindsay <8341280+ashneverdawn@users.noreply.github.com>
Date:   Fri Sep 4 17:09:20 2020 -0400

    Speed up fast compiles config (#433)
    
    optionally make "fast build" config 40% faster on mac by removing some debug info

[33mcommit 5288ec98593cab946d1f960da7b8d73607ff7414[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Sep 3 17:42:38 2020 -0700

    Revert "test github branch policy"
    
    This reverts commit 73f0b8e5f96086fbcbb14f0c59e4427538d548ec.

[33mcommit 73f0b8e5f96086fbcbb14f0c59e4427538d548ec[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Sep 3 17:40:34 2020 -0700

    test github branch policy

[33mcommit 08dc1c19363f985e890fb04b658afa59060decb8[m
Author: Marcel MÃ¼ller <com2040@gmail.com>
Date:   Fri Sep 4 02:32:17 2020 +0200

    Add access to pressed/just_pressed/just_released to Input<T> (#428)
    
    Add access to pressed/just_pressed to Input<T>

[33mcommit cc3e99388a3ecf406a23ee2223d611a18cfbbc70[m
Author: julhe <Julian.Heinken@haw-hamburg.de>
Date:   Fri Sep 4 02:30:10 2020 +0200

    Allowing glTFs to be loaded that don't have uvs and normals (#406)
    
    allowing gltfs to be loaded that don't have uvs and normals, by filling missing attributes them with zeros

[33mcommit a5f6cb03db88e727443c792b93f257b72dbc43b5[m
Author: Forest Anderson <forestkzanderson@gmail.com>
Date:   Wed Sep 2 21:10:42 2020 -0400

    Combined tests and check (#423)

[33mcommit 25f62f7250a0d750068dc32533b9433f7985af98[m
Author: BimDav <67792882+BimDav@users.noreply.github.com>
Date:   Wed Sep 2 03:12:54 2020 +0200

    Add support for 'or' in ECS querying for tuple queries (#358)
    
    Add Or query to do a logical or on a set of queries

[33mcommit a1e254d07509c36e7797bbc2f6963a0db59c811a[m
Author: Noah Callaway <ncallaway@gmail.com>
Date:   Tue Sep 1 17:12:36 2020 -0700

    Rename get_id_mut (#332)
    
    Renamed to get_with_id_mut to be parallel with get_with_id.

[33mcommit 4e587db775761c2253c9653779c89b4f9d743c00[m
Author: Waridley <marioaran64@gmail.com>
Date:   Tue Sep 1 19:02:11 2020 -0500

    Feature to disable libloading (#363)
    
    esp. helpful for wasm target
    Made default only for `bevy` crate

[33mcommit 3d6d2431fe52039548153f8441b5fca6f535d144[m
Author: Nathan Stocks <cleancut@github.com>
Date:   Tue Sep 1 17:39:22 2020 -0600

    Remove child from parent when it is despawned (#386)
    
    Remove child from parent when it is despawned

[33mcommit b91fd8a43a962e61777ea8730c9bc16082009f66[m
Author: Philip Degarmo <aclysma@gmail.com>
Date:   Tue Sep 1 11:06:45 2020 -0700

    Quick fix for #405 (#408)
    
    - Use saturating_sub to avoid overflow in core assignment to task pools
    - Temporarily force 4 minimum threads to avoid examples stalling

[33mcommit 38a982b28dc1eeb0f84e7d005463f142a92f0b56[m
Author: Michael Hills <MichaelHills@users.noreply.github.com>
Date:   Wed Sep 2 04:06:15 2020 +1000

    iOS: use shaderc-rs for glsl to spirv compilation (#324)

[33mcommit 57177c9e980e19a8a377ef8c45d34d6a5f68c22c[m
Author: Boxy <supbscripter@gmail.com>
Date:   Mon Aug 31 19:51:28 2020 +0100

    Bump entities to u128 to avoid collisions (#117) (#393)

[33mcommit 8106f770de2ae3c841651499e0637123d7ae6688[m
Author: wyhaya <wyhaya@gmail.com>
Date:   Mon Aug 31 02:27:37 2020 +0800

    Add Color::hex fn (#362)
    
    Add Color::hex fn

[33mcommit 61b5fe9cfc370d2517b44cc55517186db3e1239d[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Sun Aug 30 19:22:40 2020 +0100

    Fix hot asset reloading on Windows (#394)
    
    Fixes #348
    
    Changes to uses fully qualified names to work around
    https://github.com/rust-analyzer/rust-analyzer/issues/1165

[33mcommit ad460159b0a7972bdd9ad77dba6243707c8ac1c4[m
Author: Jasen Borisov <40234599+jamadazi@users.noreply.github.com>
Date:   Sun Aug 30 20:20:11 2020 +0200

    add bevy_render::pass::ClearColor to prelude (#396)
    
    It is common for users to want to set their clear color.

[33mcommit 3efbaca10452427385822f79208ff3a78ab9edda[m
Author: Boxy <supbscripter@gmail.com>
Date:   Sun Aug 30 02:38:05 2020 +0100

    Fix archetypes_generation being incorrectly updated for systems (#294) (#383)

[33mcommit 8101622f378641c90ecba5c6edaac26145a6436a[m
Author: Mariusz KryÅski <mrk@sed.pl>
Date:   Sun Aug 30 02:16:46 2020 +0200

    Fix deadlock in hot asset reloading (#375) (#376)

[33mcommit 00be5d083ea9caad1a148dd91e8740c114220a90[m
Author: Hugo Lindsay <8341280+ashneverdawn@users.noreply.github.com>
Date:   Sat Aug 29 19:49:39 2020 -0400

    UI component bundles derive clone (#390)
    
    make Draw, TextStyle, and the rest of the ui components derive clone

[33mcommit 17e764261189be7487f624c0680a69bc3aaad05d[m
Author: Lachlan Sneff <lachlan.sneff@gmail.com>
Date:   Sat Aug 29 15:35:41 2020 -0400

    Task System for Bevy (#384)
    
    Add bevy_tasks crate to replace rayon

[33mcommit db8ec7d55ffc966f8ee62722156aaaa3f3bb8a56[m
Author: Logan Collins <logan.neal.collins@gmail.com>
Date:   Fri Aug 28 18:09:44 2020 -0600

    add documentation for NixOS dependencies (#290)

[33mcommit 4aabe983ec154251ab6adf35e8fce35f3f7eecbf[m
Author: Robbie Davenport <zerve0@hotmail.com>
Date:   Sat Aug 29 09:08:51 2020 +0900

    Switch usage of std HashMap/HashSet default hasher, to aHash algo (#258)
    
    switch to ahash for HashMaps and HashSets via a new bevy_utils crate

[33mcommit c40e29bca38660781488dd5fee5ef7b950253d80[m
Author: Patrik Buhring <patrikbuhring@yahoo.com>
Date:   Fri Aug 28 19:52:06 2020 -0400

    Update icosphere dependency and add a limit to subdivisions. (#379)

[33mcommit d64882ffbf73522afe16cb8c9b65f279598beff5[m
Author: Guillaume DALLENNE <dallenneguillaume@gmail.com>
Date:   Sat Aug 29 01:50:49 2020 +0200

    add Color::rgb_u8 and Color::rgba_u8 (#381)

[33mcommit e6a57bad25d1ee86d29cdeebec4d1a5996e9b7e2[m
Author: Grant Moyer <grantmoyer@gmail.com>
Date:   Fri Aug 28 19:45:54 2020 -0400

    Fix sprite clipping at same depth (#385)

[33mcommit 63fd4ae33324e1720d2b473f3619cf314b7a7044[m
Author: Xavientois <34867186+Xavientois@users.noreply.github.com>
Date:   Thu Aug 27 15:26:00 2020 -0400

    Add target directory for sub-crates to gitignore (#372)

[33mcommit 421783c592ebbd0be9cddd6c58b7baf5b030c5ba[m
Author: Forest Anderson <forestkzanderson@gmail.com>
Date:   Thu Aug 27 15:24:02 2020 -0400

    Added windows and macos builds to CI (#373)

[33mcommit 89a1d360c1787cb53058307c69ec4f3727671713[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Aug 26 23:03:55 2020 -0700

    Fix despawn (#361)
    
    * simplify RenderResourcesNode gpu array management
    
    * support removals in RenderResourcesNode

[33mcommit 93040ef9a0f536f3866b75c59363eb13fe27e38b[m
Author: Telzhaak <da.ahrens@outlook.de>
Date:   Wed Aug 26 21:08:51 2020 +0200

    Check asset-path existence. Previously App just crashed if not (#345)
    
    * Check asset-path existence. Previously App just crashed if not
    
    * rustfmt
    
    * Relegated Error-message to ChannelAssetHandler
    
    * Removed needless return statement

[33mcommit b718a2063dc43a6d9e78a41641679372379b1509[m
Author: Forest Anderson <forestkzanderson@gmail.com>
Date:   Wed Aug 26 14:57:55 2020 -0400

    Set CI to run on master (#349)

[33mcommit 4562a0925a14a081d7227a38c27662e9b6b46616[m
Author: Forest Anderson <forestkzanderson@gmail.com>
Date:   Wed Aug 26 14:57:35 2020 -0400

    Separate CI jobs (#357)

[33mcommit 9aff0bcc2a8a39beda159f81bd7e8729f38f9773[m
Author: Elias <eliaspekkala98@gmail.com>
Date:   Wed Aug 26 01:55:08 2020 +0200

    Add support for binary glTF (.glb) (#271)
    
    Add support for binary glTF (.glb)

[33mcommit c9000deafa2270880c5d99382d7892fe4388c5a0[m
Author: Tom Bebb <tombebb@protonmail.com>
Date:   Wed Aug 26 00:50:44 2020 +0100

    Add solus deps to linux_dependencies doc (#331)
    
    Co-authored-by: Tom Bebbington <tophattedcoder@gmail.com>

[33mcommit 9413915e9737919a7cfe8f00bb03d96c2b8a281b[m
Author: stefee <stef.jones@condenast.com>
Date:   Wed Aug 26 00:48:21 2020 +0100

    Add .vscode to gitignore file (#347)

[33mcommit 034b5876aaa0a525496dacf936a9e9f4c912c5ab[m
Author: stefee <stef.jones@condenast.com>
Date:   Tue Aug 25 20:18:43 2020 +0100

    Fix default UI node size (#304)
    
    Fix default node size

[33mcommit 0ae74a4a4dd3acfeebb2d6e6040c25fad70a2c9f[m
Author: Xavientois <34867186+Xavientois@users.noreply.github.com>
Date:   Mon Aug 24 20:57:10 2020 -0400

    Some examples of documentation (#338)

[33mcommit 7b4bdef77cc10273903fc01bf8225566cbb54cdb[m
Author: Fabian WÃ¼rfl <bafdyce@tuta.io>
Date:   Tue Aug 25 02:13:24 2020 +0200

    Support multiline Texts (#183)

[33mcommit c78187e6df950f01e1feb5b2ba84edce4d07cf8b[m
Author: VitalyR <vitalyankh@gmail.com>
Date:   Tue Aug 25 08:06:08 2020 +0800

    add an option about display server protocol, and create document `docs/cargo_features.md` (#249)
    
    add an option about display server protocol, and create document `docs/cargo_features.md`

[33mcommit f7131509b94b3f70eb29be092d4fd82971f547fa[m
Author: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>
Date:   Mon Aug 24 19:20:41 2020 +0100

    Send an AssetEvent when modifying using get_id_mut (#323)
    
    Fixes #321

[33mcommit 6c43afff08d22136b5270fcf76b8a83f78f281c4[m
Author: Forest Anderson <forestkzanderson@gmail.com>
Date:   Mon Aug 24 14:16:52 2020 -0400

    Added CI badge to readme, changed workflow name (#325)

[33mcommit 37afd00149ba782442d675c93baf84324e9632e2[m
Author: Hugo Lindsay <8341280+ashneverdawn@users.noreply.github.com>
Date:   Mon Aug 24 14:15:41 2020 -0400

    Update zld path to use alias (mac fast compile config) (#314)
    
    update zld path

[33mcommit d00ce1c61c2938c35c495bb7d1af71346f9ee46e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Aug 24 00:42:07 2020 -0700

    1000 commits!

[33mcommit 8b6556c750735700e3986c9230b14a1306b11e46[m
Author: Daniel Jordaan <7001796+Incipium@users.noreply.github.com>
Date:   Mon Aug 24 08:55:06 2020 +0200

    Fix unresolved import in window settings example (#311)
    
    Got an unresolved import of 'bevy_window' with the window settings example. Hopefully this is the correct way to resolve it.

[33mcommit 986dd67cc8c8100c47e4b9f4f82b72308fb2561c[m
Author: Hugo Lindsay <8341280+ashneverdawn@users.noreply.github.com>
Date:   Sun Aug 23 22:05:24 2020 -0400

    make "fast build" config 40% faster on mac (#312)

[33mcommit 7b6fbcb932f240e7789bb4ea292cff7eb3682cc9[m
Author: wyhaya <wyhaya@gmail.com>
Date:   Mon Aug 24 04:18:46 2020 +0800

    Add Arch / Manjaro dependencies (#275)

[33mcommit 022a31fd8f0afc6fb869abf85de1729a457142e6[m
Author: multun <multun@users.noreply.github.com>
Date:   Sat Aug 22 18:35:40 2020 -0700

    fix formatting / clippy warnings (#295)

[33mcommit b925e22949ee1ca990dfc6a678d8e4636cae5271[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Aug 22 09:48:52 2020 -0700

    0.1.3 upgrade

[33mcommit 35c59d2d59d61dc4c5910b46903a5cc111620d3e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Aug 22 09:42:00 2020 -0700

    use wgpu 0.6.0 release

[33mcommit 4eb437ab2e3c2b69ade01f3661fe128fe8027daa[m
Author: Boutillier <boris.boutillier@gmail.com>
Date:   Sat Aug 22 18:28:38 2020 +0200

    Fixes #134 and #135  with a slight hit on performances as get_or_assign_index will now always assign (#247)

[33mcommit 2dadc86fb003f64db5e6870a327fd0ed969881e5[m
Author: kaflu <goldenchrysanthem@gmail.com>
Date:   Sat Aug 22 02:52:31 2020 +0000

    Change CullMode to none for sprites (#241)
    
    With `CullMode::Back`, a sprite image that is rotated in x,y plane won't display properly
    
    Co-authored-by: kaflu <kaflu@users.noreply.github.com>

[33mcommit 47f3a0b8be01c04782f28723d23afab7b2963aee[m
Author: mfrancis107 <mfrancis107@gmail.com>
Date:   Fri Aug 21 22:31:46 2020 -0400

    Changes ScheduleRunnerPlugin RunMode::Loop to run on fixed interval (#233)
    
    * Changes ScheduleRunnerPlugin RunMode::Loop to run on fixed interval
    
    * fix formatting

[33mcommit 7c3b49cb6ff4c8810c08b90c1d77a18c79dfd20b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Aug 13 13:58:36 2020 -0700

    upgrade to latest wgpu

[33mcommit 7a79dcc46c1cec60fedbe5ae77bea746417bd242[m
Author: TehPers <tehperz@gmail.com>
Date:   Fri Aug 21 18:13:50 2020 -0700

    Add serialize/deserialize to some input types (#281)

[33mcommit 20335d5643cae63c24cec8ab3bce2107504a50f4[m
Author: DGriffin91 <33357138+DGriffin91@users.noreply.github.com>
Date:   Fri Aug 21 18:11:03 2020 -0700

    Add links to Stack Overflow and Awesome Bevy (#282)

[33mcommit 6b11e58dcdc5173bb5e9c1d17b8f00fee86ae630[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Aug 21 15:06:50 2020 -0700

    readme formatting tweaks

[33mcommit bfd6e4a9354ff3e01eacfaf9d342c0beea656c3c[m
Author: Halfwhit <Halfwhit@gmail.com>
Date:   Fri Aug 21 22:59:34 2020 +0100

    Add linux dependencies to README.md (#257)
    
    * Add linux dependencies to README.md
    
    * Update README.md

[33mcommit 68d419d40f06de0454f87b730a49a385839f8db2[m
Author: 8bp <69628967+8bit-pudding@users.noreply.github.com>
Date:   Fri Aug 21 23:57:25 2020 +0200

    Add repeating flag to Timer (#165)
    
    Repeating timers will reset themselves upon finishing, carrying over any
    excess time during the last tick. This fixes timer drift upon resetting.

[33mcommit 1eca55e5719a8d142a001246e1417dc1390bbbf2[m
Author: Lachlan Sneff <lachlan.sneff@gmail.com>
Date:   Fri Aug 21 17:55:16 2020 -0400

    Replace std synchronization primitives with parking_lot  (#210)
    
    * Replace std::sync::Mutex with parking_lot::Mutex
    * Replace std::sync::RwLock with parking_lot::RwLock

[33mcommit fc53ff9a717c9b200d1e42c7580f6ba5c307e73a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Aug 21 12:50:05 2020 -0700

    Add "Focus Areas" to readme

[33mcommit db1bf6478c98d822292415179cb0d69863c8bc5b[m
Author: Jake Kerr <kodafox@gmail.com>
Date:   Fri Aug 21 14:37:19 2020 +0900

    Allow calling winit with the 'run_return' variant of the run function (#243)
    
    This adds a new WinitConfig resource that can be used to configure the behavior of winit.
    When `return_from_run` is set to `true`, `App::run()` will return on `target_os` configurations that
    support it.
    
    Closes bevyengine/bevy#167.

[33mcommit 505c79b60d0a82b37ad569da4681a72ef11e343c[m
Author: Thirds <50671761+thirdsgames@users.noreply.github.com>
Date:   Fri Aug 21 01:29:10 2020 +0100

    README.md link points to the correct example (#225)
    
    The 2D Rendering example texture_atlas URL was pointing to the ./2d/sprite_sheet.rs example. This has now been fixed.

[33mcommit 45312a945a385384cb9a3f78d52481fdb65093f0[m
Author: Claire C <69061963+ifletsomeclaire@users.noreply.github.com>
Date:   Thu Aug 20 19:04:01 2020 -0500

    Basic mouse scroll-wheel event (#222)
    
    add simple mouse wheel event + example

[33mcommit 3c5251f6f2bcba7c678e8e54e06245ef12ec84a3[m
Author: GabLotus <gab.campbell@outlook.com>
Date:   Thu Aug 20 17:03:26 2020 -0700

    Updating README.md with subreddit info and link to Code of Conduct (#263)
    
    * update readme

[33mcommit 38d3da5b86dd7c86180ed56c6bac7d9fc4db5a41[m
Author: Boutillier <boris.boutillier@gmail.com>
Date:   Fri Aug 21 01:09:04 2020 +0200

    Fix #187 . Multiple return instead of continue inside for loops. (#230)

[33mcommit 268b52010515e5435d12305a9cc18cb24c11e2b8[m
Author: CsÃ¡nyi IstvÃ¡n <csanyistvan02@gmail.com>
Date:   Thu Aug 20 23:06:16 2020 +0200

    Simplify GLTF loader code (#245)
    
    simplify gtlf loader code

[33mcommit 1ebb7e44ff75640362b4b85f077b7b8d9b6dd3a4[m
Merge: 979a1346 d4d68f66
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Aug 20 12:57:38 2020 -0700

    Merge pull request #189 from StarArawn/bind-group-reflect-fix
    
    Reflect shader stage for bind groups.

[33mcommit 979a1346a16898335bf1fe130c81d20297cd45e0[m
Merge: e31f5764 1f7cdbd4
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Aug 19 22:01:51 2020 -0700

    Merge pull request #236 from stefee/patch-1
    
    Add a code of conduct

[33mcommit e31f576484bde5f55d1291510f1a802832addd35[m
Merge: 7d1d9dcd e36b26c2
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Aug 19 21:33:28 2020 -0700

    Merge pull request #206 from multun/clippy
    
    Add clippy support and fix all warnings / errors

[33mcommit 1f7cdbd4ceed98a97419620ebd9608487f9f5256[m
Author: stefee <srilq.git@gmail.com>
Date:   Wed Aug 19 20:25:58 2020 +0100

    Update CODE_OF_CONDUCT.md
    
    * Remove 'when something happens' section
    
    * Add pledge from Contributor Covenant version 2.0

[33mcommit dc988818d7dc330295262e0a0c96770ba60d5591[m
Author: stefee <srilq.git@gmail.com>
Date:   Wed Aug 19 20:20:19 2020 +0100

    Update CODE_OF_CONDUCT.md
    
    * Remove harassment definition and link to Citizen Code of Conduct instead
    
    * Remove statement on reverse-isms to bring the doc more in line with the original Rust CoC

[33mcommit 322fad76c7ce144d1a9b66d0966432312197666b[m
Author: stefee <srilq.git@gmail.com>
Date:   Wed Aug 19 16:11:00 2020 +0100

    Update CODE_OF_CONDUCT.md
    
    * Tweak wording for readability

[33mcommit f12990feb9fd53d0c4e27e051472474931f9811e[m
Author: stefee <srilq.git@gmail.com>
Date:   Wed Aug 19 15:52:24 2020 +0100

    Update CODE_OF_CONDUCT.md
    
    * Move line about "reverse-isms" to the Conduct section

[33mcommit d4d68f6670c79f2ba1924fc442ed24894edde617[m
Author: John Mitchell <toasterthegamer@gmail.com>
Date:   Wed Aug 19 10:16:35 2020 -0400

    Fixed tests.

[33mcommit f1b0d04e53ba3683344fb372c36875d38fb0b9c5[m
Author: John Mitchell <toasterthegamer@gmail.com>
Date:   Wed Aug 19 10:00:45 2020 -0400

    Fixed formatting.

[33mcommit 131a5e91677e21ddfe24c9951313943952e68288[m
Merge: e11fa3e3 99e39b52
Author: John Mitchell <toasterthegamer@gmail.com>
Date:   Wed Aug 19 09:24:22 2020 -0400

    Merge branch 'master' into bind-group-reflect-fix

[33mcommit 9648008e0ff175b59182945167797d125dfc1eda[m
Author: stefee <srilq.git@gmail.com>
Date:   Wed Aug 19 09:34:21 2020 +0100

    Update CODE_OF_CONDUCT.md
    
    * Minor edit for clarity

[33mcommit 49d4784a6da782676c3abb661158c56851cefcef[m
Author: stefee <srilq.git@gmail.com>
Date:   Wed Aug 19 08:47:48 2020 +0100

    Update CODE_OF_CONDUCT.md
    
    * Move moderation section to the bottom
    
    * Add attribution links to each section

[33mcommit 4462eb495d9799e0b88d170d13e3cbeac5f8085c[m
Author: stefee <srilq.git@gmail.com>
Date:   Wed Aug 19 05:37:21 2020 +0100

    Update CODE_OF_CONDUCT.md

[33mcommit 900126b3bd044ccdbf056070ebcdad8870c5487d[m
Author: stefee <srilq.git@gmail.com>
Date:   Wed Aug 19 05:25:02 2020 +0100

    Create CODE_OF_CONDUCT.md
    
    This Code of Conduct is based on the Rust Code of Conduct, which is adapted from the Node.js Policy on Trolling as well as the Contributor Covenant version 1.3; and also the WeAllJS Code of Conduct, which is itself based on Contributor Covenant version 1.4, and the LGBTQ in Technology Slack Code of Conduct
    
    Rust Code of Conduct: https://www.rust-lang.org/policies/code-of-conduct
    Node.js Policy on Trolling: http://blog.izs.me/post/30036893703/policy-on-trolling
    Contributor Covenant version 1.3: https://www.contributor-covenant.org/version/1/3/0/code-of-conduct/
    WeAllJS Code of Conduct: https://wealljs.org/code-of-conduct
    Contributor Covenant version 1.4: https://www.contributor-covenant.org/version/1/4/code-of-conduct/
    LGBTQ in Technology Slack Code of Conduct: http://lgbtq.technology/coc.html

[33mcommit 7d1d9dcd13821a529bdaf14e46faebfa97f310b8[m
Merge: 6ffe0696 46636ed0
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Aug 18 20:42:13 2020 -0700

    Merge pull request #234 from multun/fix-formatting
    
    fix formatting

[33mcommit 46636ed0762736f43f116f78987f3661429432e4[m
Author: Victor "multun" Collod <victor.collod@epita.fr>
Date:   Tue Aug 18 19:48:03 2020 -0700

    fix formatting

[33mcommit 6ffe0696dbf7a415dc8a4288f514d6e5415a3de8[m
Merge: 6228e8a4 9883cd15
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Aug 18 13:44:10 2020 -0700

    Merge pull request #203 from lachlansneff/ironing-out-uniforms
    
    Replace vector of UniformProperty with a single UniformProperty

[33mcommit 6228e8a4bbdb966659f7dae1e87cf55e8318bde3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Aug 18 10:59:30 2020 -0700

    Create FUNDING.yml

[33mcommit 4a06bbf9f6828849d353d0732c1885077c32c0f4[m
Merge: 6e4c959e 81d30dd4
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Aug 17 19:24:33 2020 -0700

    Merge pull request #220 from 0x22fe/patch-1
    
    Created README for examples

[33mcommit 6e4c959e93d1773f056baa34aa3d936c8e50581f[m
Merge: 99e39b52 ccfa815c
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Aug 17 19:15:41 2020 -0700

    Merge pull request #211 from lachlansneff/bevy-render-draw-command
    
    Add Draw command to RenderCommand

[33mcommit 81d30dd42b6a38ca18aa1b73aed4cd9103c99691[m
Author: 0x22fe <0x22fe@gmail.com>
Date:   Mon Aug 17 23:02:59 2020 +0000

    Created README for examples

[33mcommit ccfa815cac1412181a26190d323f4813963afb81[m
Author: Lachlan Sneff <lachlan.sneff@gmail.com>
Date:   Mon Aug 17 10:56:27 2020 -0400

    Use can_draw in can_draw_indexed

[33mcommit 99e39b522775b1530bbe226f29f7368c37174bb9[m
Merge: 77ebb461 cf8bab27
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Aug 16 14:08:54 2020 -0700

    Merge pull request #212 from GabLotus/master
    
    Remove std::time::Duration from the thread_pool_resources.rs example

[33mcommit cf8bab27a09f582fa27f4024914024a85bcb618c[m
Author: Gab Campbell <gacampb@microsoft.com>
Date:   Sun Aug 16 13:43:42 2020 -0700

    unused import

[33mcommit e24aaf3dd396e6240c9d1c856703dbea9465bc22[m
Author: Lachlan Sneff <lachlan.sneff@gmail.com>
Date:   Sun Aug 16 16:28:52 2020 -0400

    Add Draw command to RenderCommand

[33mcommit 77ebb461f9dfefe74bd79f5556c4e8a5490b9e37[m
Merge: f92f6a4f d1386478
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Aug 16 12:45:46 2020 -0700

    Merge pull request #201 from multun/cargo-fmt
    
    enforce cargo fmt --check

[33mcommit f92f6a4f9b1fbc4cb2eb9277d66fa267a1d11369[m
Merge: 7db48212 ece54e96
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Aug 16 12:40:46 2020 -0700

    Merge pull request #204 from multun/fix-profiling-build
    
    profiling: fix build

[33mcommit e36b26c2263043a9389fd080abaaf4cd3f2699bb[m
Author: Victor "multun" Collod <victor.collod@epita.fr>
Date:   Sun Aug 16 03:12:30 2020 -0700

    render: fix RenderResourceBinding PartialEq impl

[33mcommit dfbdeeb27f710b4c390296942f88712329da3629[m
Author: Victor "multun" Collod <victor.collod@epita.fr>
Date:   Sun Aug 16 02:52:00 2020 -0700

    render: fix bind group PartialEq impl

[33mcommit c38420f1e9902d8288300f8d046db8dbdf7f842d[m
Author: Victor "multun" Collod <victor.collod@epita.fr>
Date:   Sun Aug 16 00:30:04 2020 -0700

    enforce clippy for all target and features

[33mcommit d13864781873428e7548e1686ae0efce261b3741[m
Author: Victor "multun" Collod <victor.collod@epita.fr>
Date:   Sat Aug 15 20:27:41 2020 -0700

    enforce cargo fmt --check

[33mcommit ece54e963ea0d800057e031846e7afd871d69a86[m
Author: Victor "multun" Collod <victor.collod@epita.fr>
Date:   Sun Aug 16 04:17:19 2020 -0700

    diagnostics: add missing feature dependency

[33mcommit 1ec718349472c6c33e24e45d183ac88608d0156e[m
Author: Victor "multun" Collod <victor.collod@epita.fr>
Date:   Sun Aug 16 02:05:05 2020 -0700

    profiling: fix build

[33mcommit 7db48212871cf244127f45855d2c1bb6ef94c183[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Aug 16 01:26:42 2020 -0700

    add more tracing docs

[33mcommit 9e1a1d15ea38839ea6fa5aad41c89cf0dcc0eae5[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Aug 16 01:21:37 2020 -0700

    Add wgpu trace docs

[33mcommit 5fdf36dbb1e842f87abda0ea9cac50f95978df7a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Aug 16 01:11:17 2020 -0700

    add optional wgpu tracing feature

[33mcommit 9883cd15cdfac9885e8431185a5d333b479a06f7[m
Author: Lachlan Sneff <lachlan.sneff@gmail.com>
Date:   Sun Aug 16 01:16:00 2020 -0400

    Replace vector of UniformProperty with a single property

[33mcommit f85867139bd14cb1cd1af53390958d6fc2ea7b71[m
Merge: 76ff107f 8472789b
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Aug 15 17:57:37 2020 -0700

    Merge pull request #199 from multun/query-mut-debug
    
    ecs: impl Debug for Mut<...>

[33mcommit 76ff107f8eb69a75f1ce2bb4573bc5180995f251[m
Merge: b2f1f2e5 c0d48774
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Aug 15 17:53:34 2020 -0700

    Merge pull request #196 from ifletsomeclaire/master
    
    Added 2 more draw.is_visible checks to render crate

[33mcommit 8472789bbb10a5123697bc9c80bf625a6dc6a834[m
Author: Victor "multun" Collod <victor.collod@epita.fr>
Date:   Sat Aug 15 17:46:36 2020 -0700

    ecs: impl Debug for Mut<...>

[33mcommit c0d4877486d632b43337dd709adff8ba84a4ed3a[m
Author: ifletsomeclaire <69061963+ifletsomeclaire@users.noreply.github.com>
Date:   Sat Aug 15 14:38:55 2020 -0500

    added draw.is_visible checks

[33mcommit e11fa3e316c0815ac644f5a7d396ed06a41e7fb1[m
Author: John Mitchell <toasterthegamer@gmail.com>
Date:   Sat Aug 15 15:03:57 2020 -0400

    Added hack to allow all of the examples to work.

[33mcommit eac53c1ab7bab30dba7a75e8fbe056b3541b2541[m
Author: John Mitchell <toasterthegamer@gmail.com>
Date:   Fri Aug 14 23:21:38 2020 -0400

    Fixed! :tada:

[33mcommit 76564a486ed41e65d7e396cd0654c19ccd52e787[m
Author: John Mitchell <toasterthegamer@gmail.com>
Date:   Fri Aug 14 16:59:18 2020 -0400

    Removed old comment.

[33mcommit b2f1f2e53055bdd0610cc8ecf5fb66e93244f27c[m
Merge: 9569beb6 74db5e2a
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Aug 14 12:48:39 2020 -0700

    Merge pull request #150 from PrototypeNM1/win-bundled-lld
    
    Use Rust bundled lld for msvc target

[33mcommit 9569beb613c2298bda982e00bc6446f38d3ea62c[m
Merge: 9d798160 458a169a
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Aug 14 12:47:32 2020 -0700

    Merge pull request #188 from BafDyce/168-thread-pool-options
    
    Add possibility to control num_threads and stack_size of global thread pool

[33mcommit 9d7981607f27a7943aaa7cf64c89a97dcd2df2bb[m
Merge: 95dce3ac 4a119dd0
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Aug 14 12:35:50 2020 -0700

    Merge pull request #181 from BafDyce/169-scene-example-ui-info-msg
    
    Add info message in UI for scene example

[33mcommit f3ef23bda7eccaa5dd6844d8896d3b398e407dc5[m
Author: John Mitchell <toasterthegamer@gmail.com>
Date:   Fri Aug 14 14:02:56 2020 -0400

    Working on correctly reflecting shader stage for bind groups.

[33mcommit 458a169ad27b74bf268eb23030619b7446edc600[m
Author: Fabian WÃ¼rfl <bafdyce@tuta.io>
Date:   Fri Aug 14 19:15:29 2020 +0200

    Add possibility to control num_threads and stack_size of rayon::ThreadPool

[33mcommit 4a119dd0e1648be19d48c383119a094bad0947ba[m
Author: Fabian WÃ¼rfl <bafdyce@tuta.io>
Date:   Fri Aug 14 12:56:39 2020 +0200

    Add info message in UI for scene example

[33mcommit 95dce3ac72f83261105021e85995d718a1134519[m
Merge: 1b2aca42 86c20eb6
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Aug 13 19:44:50 2020 -0700

    Merge pull request #154 from OptimisticPeach/master
    
    Add Icospheres mesh generation

[33mcommit 1b2aca42fc3a99cac2f7ac9c2bdc7a8d6f9d6946[m
Merge: 938d381d 576da505
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Aug 13 17:26:57 2020 -0700

    Merge pull request #177 from andreheringer/patch-1
    
    Update linux_dependencies.md with Fedora 32 dependencies.

[33mcommit 938d381d452285e622ed873685a2c7919f8503bb[m
Merge: 76c43939 589af3dc
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Aug 13 17:26:22 2020 -0700

    Merge pull request #178 from JohnDoneth/master
    
    Add Command::remove_one

[33mcommit 576da505471187360829193ca75208f3b1958f98[m
Author: AndrÃ© Heringer <andregomesh@dcc.ufmg.br>
Date:   Thu Aug 13 20:45:43 2020 -0300

    Update linux_dependencies.md
    
    Add Fedora 32 dependencies.

[33mcommit 589af3dc51a5b5640d14af4a28e0ce48758869aa[m
Author: John Doneth <doneth7@gmail.com>
Date:   Thu Aug 13 19:38:38 2020 -0400

    Add Command::remove_one

[33mcommit 76c439398f350480f5c5e23a984118bc002276f8[m
Merge: fb4b2d97 3f5aae87
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Aug 13 11:59:44 2020 -0700

    Merge pull request #173 from StarArawn/add-shader-stage-visibility-to-bindings
    
    Added BindingShaderStage in order to pass the correct shader stage to wgpu.

[33mcommit fb4b2d976352e23f72591d4b2495b77ca525e3dc[m
Merge: 317b3390 14bfd698
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Aug 13 11:56:03 2020 -0700

    Merge pull request #172 from Halfwhit/prelude-fix
    
    Added Mut to ECS prelude

[33mcommit 317b3390ec727bb8d46047d78c4758a9018d6d86[m
Merge: 4beab727 f539b6e7
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Aug 13 11:54:27 2020 -0700

    Merge pull request #149 from joejoepie/master
    
    Add resizable flag and windowmode option to window creation

[33mcommit 4beab7273efd0d397753401a3c01774411f12a2b[m
Merge: a7f1889a e96afc33
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Aug 13 11:33:05 2020 -0700

    Merge pull request #146 from MilanVasko/support-embedded-gltf-buffers
    
    Add support for embedded buffers in GLTF loader

[33mcommit 3f5aae877e03f83106647bdb5c161c299320286f[m
Author: John Mitchell <toasterthegamer@gmail.com>
Date:   Thu Aug 13 13:00:27 2020 -0400

    Removed some whitespace.

[33mcommit 5b99ad24836d698b4f0de2ccd84ec0a008afe70c[m
Author: John Mitchell <toasterthegamer@gmail.com>
Date:   Thu Aug 13 12:58:23 2020 -0400

    Use if statement instead of match as that didn't work as expected.

[33mcommit c40f39ec7e16bea0a05390f258f524ba36e76cc6[m
Author: John Mitchell <toasterthegamer@gmail.com>
Date:   Thu Aug 13 12:50:13 2020 -0400

    Make sure we translate the new type for wgpu.

[33mcommit 02b1907738f6b46b01dca45b57b080a51da770d9[m
Author: John Mitchell <toasterthegamer@gmail.com>
Date:   Thu Aug 13 12:44:21 2020 -0400

    Use BindingShaderStage to pass which program the binding is attached to.

[33mcommit 14bfd698c568673af69bfa42e1a7a18dbccb2d52[m
Author: Halfwhit <Halfwhit@gmail.com>
Date:   Thu Aug 13 17:39:33 2020 +0100

    Update lib.rs

[33mcommit e96afc33a7446389dd1007d2533b6657a6e08939[m
Author: Milan VaÅ¡ko <m.vasko2@gmail.com>
Date:   Wed Aug 12 19:23:54 2020 +0200

    Add support for embedded buffers in GLTF loader

[33mcommit f539b6e7f631c48287bee445a3b969e07269d222[m
Author: Wouter Standaert <wouter_standaert@hotmail.com>
Date:   Thu Aug 13 11:27:51 2020 +0200

    Using event_loop for getting video mode

[33mcommit a738771c937921ba0b5b7a0266b1155fb5faca36[m
Author: Wouter Standaert <wouter_standaert@hotmail.com>
Date:   Thu Aug 13 10:47:40 2020 +0200

    Add resizable and windowmode options to window creation

[33mcommit a7f1889a35f93b13edc2b1233189656289b0448e[m
Merge: 8bb52f84 8662ab36
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Aug 13 01:21:43 2020 -0700

    Merge pull request #153 from multun/remove-entities-current
    
    ecs: remove unused Entities::current

[33mcommit 8bb52f84906d572be46697825cf3377036c0af12[m
Merge: bf3fdf68 5102893e
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Aug 13 01:09:58 2020 -0700

    Merge pull request #161 from MatteoGgl/patch-1
    
    Creates linux_dependencies.md

[33mcommit bf3fdf68b12e04611657fb99005fa2a9806a6633[m
Merge: 19d2f9c2 ad446c5f
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Aug 13 01:05:23 2020 -0700

    Merge pull request #160 from jakerr/window-builder
    
    Use window_builder when configuring initial window

[33mcommit 5102893e715c88505052a4569665fcd690e59cfc[m
Author: Matteo Guglielmetti <MatteoGgl@users.noreply.github.com>
Date:   Thu Aug 13 09:59:03 2020 +0200

    Creates linux_dependecies.md
    
    This document will be linked in the new "Install OS dependencies" section on the "Setup" page of the book.
    
    See related issue at [this page](https://github.com/bevyengine/bevy-website/issues/6)

[33mcommit ad446c5f6003e9a01ac77d4d06bfd01f9d5f599e[m
Author: Jake Kerr <kodafox@gmail.com>
Date:   Thu Aug 13 15:18:10 2020 +0900

    Use window_builder when configuring initial window
    
    This fixes issue #159 where the window would briefly show with default options.

[33mcommit 8662ab3622b978a9eeb3cae152f23441dabdafea[m
Author: Victor "multun" Collod <victor.collod@epita.fr>
Date:   Wed Aug 12 21:16:20 2020 -0700

    ecs: remove unused Entities::current

[33mcommit 86c20eb6dfd450cd07dedba91d640b9545c51567[m
Author: OptimisticPeach <patrikbuhring@yahoo.com>
Date:   Thu Aug 13 00:13:56 2020 -0400

    Add Icospheres.
    
    Additionally documents the shapes module.

[33mcommit 19d2f9c2cd5f0190d71243d2aaaca7df3b6d511d[m
Merge: f65f600b 671862de
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Aug 12 18:57:21 2020 -0700

    Merge pull request #144 from BafDyce/fix-comment-keyboard-input-event-example
    
    Fix comment in keyboard_input_event example

[33mcommit f65f600bbb5d1254dd8ecf77805de81489ebe423[m
Merge: f49d07c0 e1d65c65
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Aug 12 18:56:01 2020 -0700

    Merge pull request #132 from reidbhuntley/master
    
    Cleaned up breakout example collision code, altered setup so ball doesn't clip through walls as often

[33mcommit f49d07c0ccfbe09bd2438c4a3f58ef40f78f0cba[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Aug 12 18:53:56 2020 -0700

    re-enable high performance gpu preference

[33mcommit 85b6c7d45cf040dbed7b422da134f6345191cff2[m
Merge: 090c06c5 241bd707
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Aug 12 18:51:44 2020 -0700

    Merge pull request #109 from MGlolenstine/gpu_missing_message
    
    Added missing gpu message instead of panicking on 'None'.

[33mcommit 090c06c55a6f035869fdf1cc2371112db0e15dde[m
Merge: d488d4e3 968fdbba
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Aug 12 18:50:03 2020 -0700

    Merge pull request #151 from zicklag/patch-2
    
    [Docs] Add Cargo Expand to Macro Debugging Tips

[33mcommit 968fdbba9b0b00302f175e00f93638362cf495a9[m
Author: Zicklag <zicklag@katharostech.com>
Date:   Wed Aug 12 19:22:01 2020 -0500

    Add Note About Cargo Expand Pager

[33mcommit 4977837fadce608eb39724f9b2ff4ff36e4540a1[m
Author: Zicklag <zicklag@katharostech.com>
Date:   Wed Aug 12 19:18:26 2020 -0500

    Add Cargo Expand to Macro Debugging Tips

[33mcommit 74db5e2a5bf14b5c997b391dafb0c425fd3eb7ae[m
Author: Nicholas Rishel <rishel.nick@gmail.com>
Date:   Wed Aug 12 16:44:22 2020 -0700

    -Clinker=lld was overwriting linker="lld-link.exe"; having both is unnecessary.
    
    Using the bundled lld (rust-lld) for Windows.

[33mcommit e1d65c652e497f8f474c085828775ffdf5e95efb[m
Author: reidbhuntley <reidbhuntley@gmail.com>
Date:   Wed Aug 12 17:50:55 2020 -0400

    Rename collider variable

[33mcommit 671862dedae821f11523c213704c297c4158875d[m
Author: Fabian WÃ¼rfl <bafdyce@tuta.io>
Date:   Wed Aug 12 18:13:32 2020 +0200

    Fix comment in keyboard_input_event example

[33mcommit e980b83ce228147a9e9e91235df71411c89f4fa2[m
Author: reidbhuntley <reidbhuntley@gmail.com>
Date:   Wed Aug 12 09:13:10 2020 -0400

    Clamp the timestep to stop ball from escaping

[33mcommit 241bd70797e1f448427564f4ba26f387f0e205e0[m
Author: MGlolenstine <mglolenstine@gmail.com>
Date:   Wed Aug 12 08:58:07 2020 +0200

    added missing gpu(drivers) message instead of panicking on 'None'

[33mcommit d488d4e308dd1304347d22ad8728d08eb6abf568[m
Merge: 5d0d3e83 0a8bf735
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Aug 11 23:46:57 2020 -0700

    Merge pull request #131 from aclysma/ignore-jetbrains-project-files
    
    Ignore CLion/intellij project files

[33mcommit 5d0d3e83eae70cc0e97625783f42f0a0e0916780[m
Merge: 00a88721 59122064
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Aug 11 23:44:28 2020 -0700

    Merge pull request #104 from bitshifter/glam-0.9
    
    Upgrade glam from 0.8.7 to 0.9.3

[33mcommit 59122064415d5c3034fa73d9bddbdf3ce2b8c2f6[m
Author: Cameron Hart <cameron.hart@gmail.com>
Date:   Tue Aug 11 14:26:48 2020 +1200

    Upgrade glam to 0.9.3

[33mcommit 11748456b6981eb4b611302eacde1c41d7ee7860[m
Author: reidbhuntley <reidbhuntley@gmail.com>
Date:   Tue Aug 11 23:43:27 2020 -0400

    Cleaned up collision code in breakout

[33mcommit 0a8bf7352680456f17f390030308e26f5b6872af[m
Author: Philip Degarmo <aclysma@gmail.com>
Date:   Tue Aug 11 20:41:37 2020 -0700

    Ignore CLion/intellij project files

[33mcommit 00a887214e406f6c2f7d7b501c963d0042a9d18a[m
Merge: 81879b77 58be36a0
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Aug 11 15:31:39 2020 -0700

    Merge pull request #108 from caelunshun/feature-gated-deps
    
    Make audio/image dependencies optional through feature flags

[33mcommit 81879b77cf50d0e5621389356d5052b4093f7a88[m
Merge: 2d6b0cca c42dad5f
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Aug 11 15:28:18 2020 -0700

    Merge pull request #106 from Dispersia/master
    
    Change Power Preference to High Performance

[33mcommit 2d6b0ccadda65b0290792aef728129dec5b27a60[m
Merge: 391b08a7 5f5875c8
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Aug 11 15:13:13 2020 -0700

    Merge pull request #118 from adekau/patch-1
    
    Fix 404 link to License file in README

[33mcommit 5f5875c8c95996393bfe61ae03ceeb660c3ef788[m
Author: adekau <alex.potatofarms@gmail.com>
Date:   Tue Aug 11 15:10:32 2020 -0400

    Fix 404 link to License file

[33mcommit 391b08a77962bc788f04d79a2f492ab04eedf186[m
Merge: 5e76a018 7363d1db
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Aug 11 01:22:29 2020 -0700

    Merge pull request #101 from GabLotus/dev/lotus/discord_readme
    
    Add discord server link to bevy readme

[33mcommit 58be36a09a6f77900ab6e32d1f43c9f6de657520[m
Author: caelunshun <caelunshun@gmail.com>
Date:   Tue Aug 11 00:49:17 2020 -0600

    Fix compilation when png or hdr features are disabled

[33mcommit a694d9a1b61787feec22258114c96a9b173d8ff4[m
Author: caelunshun <caelunshun@gmail.com>
Date:   Tue Aug 11 00:30:42 2020 -0600

    Make audio/image dependencies optional through feature flags

[33mcommit 7363d1dbe13ce9a1ed6d2beeac1c1c0809a5411f[m
Merge: 5d58fe3d aef78bcc
Author: Gab Campbell <gacampb@microsoft.com>
Date:   Mon Aug 10 23:21:31 2020 -0700

    Merge branch 'dev/lotus/discord_readme' of https://github.com/GabLotus/bevy into dev/lotus/discord_readme

[33mcommit 5d58fe3d120dc8e32746bbf073e869d5b8656dac[m
Author: Gab Campbell <gacampb@microsoft.com>
Date:   Mon Aug 10 15:46:48 2020 -0700

    Add discord server link to bevy readme

[33mcommit c42dad5f7c57a3e983e40813a6df58b785ab1f87[m
Author: Aaron Housh <dispersias@gmail.com>
Date:   Mon Aug 10 21:05:54 2020 -0700

    Change Power Preference to High Performance

[33mcommit 5e76a018c9893e52f98b58d8b168d2370299a222[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Aug 10 20:06:18 2020 -0700

    fix ron doc tests

[33mcommit aef78bcc7b7d45081c5f9fa1660919f0d1edfb31[m
Author: Gab Campbell <gacampb@microsoft.com>
Date:   Mon Aug 10 15:46:48 2020 -0700

    Add discord server link to bevy readme

[33mcommit 6db89da324895df8f9aed0dd4803f500e7abc52e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Aug 10 13:12:57 2020 -0700

    bump bevy_winit version

[33mcommit d549129d0ee343996b9918c089eb709d2269f65f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Aug 10 13:06:22 2020 -0700

    hopefully fix windows build

[33mcommit 7f6fc616dfb3c103e69ce8c24295943107f2e06c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Aug 10 02:22:36 2020 -0700

    exclude assets from published crate

[33mcommit c04d64440b1e6b83b6e33bd259e9dd9a60870cff[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Aug 10 02:09:38 2020 -0700

    update bevy version

[33mcommit 1d68094f59b01e14f44ed7db8907dbd011b59973[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Aug 10 02:08:55 2020 -0700

    add link to "introducing bevy" blog post

[33mcommit 88577d288011e685d1fd0a980f6a15a6b28b1217[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Aug 9 21:44:51 2020 -0700

    update readme

[33mcommit 7bdab60e31ec4796dc9924d6ded6ec4fd23b8b1c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Aug 9 21:26:34 2020 -0700

    use temporary wgpu fork and latest publish winit crate

[33mcommit 3deeb0526489fbdf78beddff43269f4817fbeb4d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Aug 9 18:56:25 2020 -0700

    use bevy-glsl-to-spirv

[33mcommit d67d05db97641d5c808815a5a3c0792f1569ecf5[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Aug 9 18:45:55 2020 -0700

    add temporary ron fork
    
    bevy requires changes we contributed to master, but those changes havent been published yet

[33mcommit 773b7bffa982f5ce2d932a7596923426dfd4ccb3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Aug 9 18:32:03 2020 -0700

    update publish script

[33mcommit 423c5e3e0fb1a8c3d459a15e3baba4550d41743f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Aug 9 17:58:56 2020 -0700

    ecs: prepare for publishing

[33mcommit 34752a27bdef256cd7855227499b22094a6efa0e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Aug 9 17:39:28 2020 -0700

    add "0.1" version to all bevy crate references

[33mcommit 9aee5323e1149711e7284faf6dc1378afb91e1f3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Aug 9 17:24:27 2020 -0700

    add crate metadata

[33mcommit c9d6acd932e7d351a7f40e6dc2f1090afb5bba5e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Aug 9 16:33:32 2020 -0700

    update readme

[33mcommit 3d0945981300f0fac72cbc27b5a27082e78c9bd0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Aug 9 16:13:04 2020 -0700

    add more doc comments and clean up some public exports

[33mcommit f963cd41dca7742eba67fcdb47a25fb9c08279a5[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Aug 7 20:22:17 2020 -0700

    app: rename AppPlugin to Plugin

[33mcommit bc6194a2f86432d8ffd84baed59965bbffd6fc47[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Aug 6 14:38:32 2020 -0700

    remove legion references from readme

[33mcommit 5647a17c8e6529f25e1f52e0304347c00a8df511[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Aug 6 13:58:13 2020 -0700

    update readme

[33mcommit 9d45a058b574955c16f6e9409b36af4ea242118d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Aug 4 19:57:55 2020 -0700

    update links

[33mcommit e3314ff4dd8816a955deffb8f7b00dd58c2e57bf[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Aug 3 12:00:00 2020 -0700

    re-add scene example

[33mcommit 07858aa3487f236a3233438ce11bf662bee8b829[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Aug 2 19:15:41 2020 -0700

    scene: fix dynamically loading RenderPipelines scenes

[33mcommit 3c1494eb64815716c3b9895eb04da8446d954f9a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Aug 2 12:57:30 2020 -0700

    scene: rename "spawn" to "instance"

[33mcommit bb111cbafa284ca77ebab94b38d438bcd332a7e5[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jul 31 17:10:29 2020 -0700

    more example cleanup and polish

[33mcommit 471639841bc70a0b2325ab3833058b0824841b23[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jul 31 12:26:36 2020 -0700

    more optional features

[33mcommit ccf81edd8f5f0181835e73dff59dce2f7e21f304[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 30 14:35:07 2020 -0700

    render: add atlas padding support to work around MSAA artifacts, disable MSAA by default

[33mcommit 54eaa2bdc6a12cc3ba243da0367806d77a63b544[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 30 13:20:27 2020 -0700

    render: easier msaa color attachments and fix multi-window example

[33mcommit f85ec04a4811bb12e890b635fb19107408c7c8d1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 30 13:19:55 2020 -0700

    ecs: prepare system ranges based on stage and thread locals

[33mcommit 44c08f90aaab3011d0bb3b7faa207e92dd19da50[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jul 29 18:28:32 2020 -0700

    render: remove Drawable implementation from RenderPipelines because it doesnt add any value

[33mcommit ca87359c6ed4e765fd22c4aa43156e4008001589[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jul 29 18:15:15 2020 -0700

    render: add MSAA support

[33mcommit a2c1a906958474a047dbce4e5f2666d1df62af59[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jul 29 01:16:42 2020 -0700

    fix ui in font atlas and breakout examples

[33mcommit db665b96c07084f081b0c9ab367e67297fe35132[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jul 29 00:28:44 2020 -0700

    ui: fix z indices and depth calculations

[33mcommit 2929197d9bce13507983b7a41650ec577fdc2384[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 28 20:11:27 2020 -0700

    render: add RenderPass queries. move ui to its own pass

[33mcommit bd8e979de81bb62666eb1a0036486edca8c0bf94[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 28 16:37:37 2020 -0700

    ecs: only borrow/iterate archetypes currently used by a given query

[33mcommit 64cc382477bb3b656b31e43e69c0f931e34a1db4[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 28 16:17:21 2020 -0700

    ecs: move copy of QueryBorrow into bevy_ecs and fix perf regressions

[33mcommit 77f4e60c8cc48089712a3cceeac4e867b7e3a665[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 28 14:26:12 2020 -0700

    cleanup import

[33mcommit 7212b70478c8465b178611794d5738703eb9f6f1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 28 14:24:03 2020 -0700

    rustfmt changes

[33mcommit 6dadf34401b02281f7bb59cdb4d22bcebbb5dc3d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 28 13:43:07 2020 -0700

    add more example comments

[33mcommit 543ec8653071ad5d0970ed2c2a302bcc75ddb716[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 28 12:09:18 2020 -0700

    remove cargo.toml opt level override

[33mcommit 3d2a4f6c394becf78dbce9e5af8a2ba24970003d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 28 01:20:19 2020 -0700

    ui: combine Click and Hover into Interaction

[33mcommit 4a8c6c335a325c54acbb50f7b538e37ccbabfa8a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 28 00:37:25 2020 -0700

    ui: feed computed image size into bevy_ui flex

[33mcommit cf9501a50e44f20e04397b51604d6a2966b199d5[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jul 27 21:04:04 2020 -0700

    ui: feed computed text position into bevy_ui flex
    
    and remove TextAlign because it is now redundant

[33mcommit 1f006c348d17990872fc7c7634eb0ad5a6697454[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jul 27 19:12:48 2020 -0700

    ui: fix examples, flip fix stretch axis incompatibility, ergonomics

[33mcommit 3d5e7e54f3cb5cfa607c94ba571d2727a757f74e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jul 26 12:27:09 2020 -0700

    ui: create bevy types for flex style

[33mcommit e7b22ac0436a7178ce8e86904bc7763eaf7908c0[m
Merge: 6a0c2d56 3007201e
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jul 27 15:35:23 2020 -0700

    Merge pull request #77 from Moxinilian/despawn-recursive
    
    transform: implement hierarchical entity despawn

[33mcommit 3007201eac14eb1f22b1fc9f4f133a2fb73f8ce9[m
Author: Moxinilian <moxinilian@tutanota.com>
Date:   Tue Jul 28 00:23:59 2020 +0200

    transform: improve despawn_recursive tests

[33mcommit 6a0c2d5673fea20de2e1f7a547dc14ea55744331[m
Merge: fb9f04ba 23149f17
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jul 27 15:13:56 2020 -0700

    Merge pull request #75 from karroffel/hdr-loading
    
    add more image loaders (HDR, JPEG, BMP) via `image` crate

[33mcommit 311f04f858adc4ef02a123e6d148451f1e3a68a3[m
Author: Moxinilian <moxinilian@tutanota.com>
Date:   Tue Jul 28 00:10:32 2020 +0200

    transform: implement hierarchical entity despawn

[33mcommit 23149f175340d7a1fab573f2df87b81644a67797[m
Author: Thomas Herzog <thomas-github@poto.cafe>
Date:   Mon Jul 27 20:41:41 2020 +0200

    add texture loader for more formats using `image` crate
    
    This adds support for PNG images only for now. More formats can be added
    relatively easily.
    Images with various pixel formats are supported (such as RGB-16bit or
    R-8bit).

[33mcommit 7412b0ec25b99b712f67107393c7053f0ecd32ee[m
Author: Thomas Herzog <thomas-github@poto.cafe>
Date:   Mon Jul 27 00:06:01 2020 +0200

    add HDR image loader
    
    Using the `image` crate, HDR images can be loaded into RGBA-f32 textures.

[33mcommit fb9f04ba90c43025c71c393faa9c2c33f9d55c59[m
Merge: 718f4751 4393af5e
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jul 26 13:15:56 2020 -0700

    Merge pull request #73 from Moxinilian/windows-winit-panic
    
    winit: fix panic on windows

[33mcommit 718f475160368d859e8f13213f939af42784d625[m
Merge: 339e9ad5 4cf0f53e
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jul 26 13:14:53 2020 -0700

    Merge pull request #72 from karroffel/texture-format
    
    add `TextureFormat` field to `Texture`

[33mcommit 4cf0f53eaef1a3573829f05fb0a64fc9c5e55e2a[m
Author: Thomas Herzog <thomas-github@poto.cafe>
Date:   Sun Jul 26 21:08:41 2020 +0200

    use TextureFormat for Textures
    
    This commit also inserts debug asserts that texture data roughly respects
    the format.

[33mcommit 4393af5e25424da21517836d7c3f0e57424d0548[m
Author: Moxinilian <moxinilian@tutanota.com>
Date:   Sun Jul 26 21:36:01 2020 +0200

    winit: fix panic on windows

[33mcommit b4c185eb0c6e712ceb831dc0ab37e0a4dd861095[m
Author: Thomas Herzog <thomas-github@poto.cafe>
Date:   Sun Jul 26 21:10:18 2020 +0200

    cargo fmt

[33mcommit 339e9ad52d8250de0f3d9863ec523f53e44e20f0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jul 25 13:14:36 2020 -0700

    ui: cleaner stretch integration

[33mcommit 93bb1d5b8e82149b03cb823aba23875a94c5a647[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jul 24 23:04:45 2020 -0700

    ui: initial flexbox support

[33mcommit bcf95a24dbe9acb8c5692f6517239dbd53e45252[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 23 18:55:21 2020 -0700

    transform: only update global transform with pos/rot/scale components when there is no local transform

[33mcommit 6cad80d57252e4f78ed26f612ca4e383f171cfa1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 23 18:26:08 2020 -0700

    transform|ui: fix transform update lag

[33mcommit d79339ea62718c63973cae6e679a363956b8b6fc[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 23 17:32:53 2020 -0700

    transform: add more control parent/child ordering and make parent/children insertion atomic

[33mcommit 89af5ea4e058be6283610daf803092383cb21b41[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 23 13:40:07 2020 -0700

    fix some doc tests

[33mcommit 70b12452b54456a4e6fca8f1c33df5a1fda652db[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 23 13:18:23 2020 -0700

    github actions: install alsa

[33mcommit 85bd0342d48af94363e2f77017df0b49aedced39[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 23 13:07:45 2020 -0700

    ecs: add write_world and write_resources to Commands
    
    this allows for custom commands

[33mcommit 1c976ea5b835fd2641d874772c0e65a50215e87a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jul 22 19:07:28 2020 -0700

    update readme

[33mcommit f82af10a69057572f0a8ede4bd9d6177f01d8921[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jul 22 17:56:04 2020 -0700

    ecs: component removal tracking

[33mcommit 141044aae7e82a93171d53b93776edb9491d2e1e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jul 22 16:19:27 2020 -0700

    ecs: publicly expose Added/Changed and inline some things

[33mcommit a4e291d9c883ae8bc2bbc24135523dd276c609cc[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jul 22 13:32:17 2020 -0700

    app: default app runner now runs the schedule once

[33mcommit 2d829f5a06d30ad803f934fe5a6a68bec29a30ac[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jul 22 13:20:22 2020 -0700

    ecs: add Changed<T> (added or modified)

[33mcommit e673faab7ce9c2d7b47e57d6b5601a4bc3fbc269[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jul 22 12:42:12 2020 -0700

    ecs: rename Changed<T> to Mutated<T>

[33mcommit 19d24e92aa69e0ceda20b1b23e59246efb125a79[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 21 22:02:18 2020 -0700

    transform: immediately set localltransform value

[33mcommit ae30175e185442fdc52f175cc641b01510fa4379[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 21 22:00:55 2020 -0700

    ecs: fix query.get::<T>() access

[33mcommit a6953049fb8fbeba14745a73771620bd7ea3fd9f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 21 22:00:11 2020 -0700

    ecs: Added<T> queries

[33mcommit 21cdaaf7eb023303463a17b1e90c95fc80815135[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 21 20:15:16 2020 -0700

    ecs: inline a few things

[33mcommit 0c2e26ddde10c14098a9669839c9a1203b51dfa8[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 21 20:12:15 2020 -0700

    Revert "ecs: remove &mut requirement on query iterators"
    
    This reverts commit 6dc1d07cbc4a66c7c9f3a0a56ddce7628a9862a5.

[33mcommit 6dc1d07cbc4a66c7c9f3a0a56ddce7628a9862a5[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jul 20 13:59:51 2020 -0700

    ecs: remove &mut requirement on query iterators

[33mcommit 6194944153f5be2889d24a782d789b661207e0e2[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jul 20 11:59:02 2020 -0700

    transform: apply LocalTransforms to root Transforms

[33mcommit 009141d453aeecf0a21b807e13470feab60cd46a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jul 20 02:05:56 2020 -0700

    window: customizable default descriptor

[33mcommit b1162f0c295e89a44e5c52af765bcccf3275bfe1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jul 20 01:51:06 2020 -0700

    ecs: fix resource scheduler test

[33mcommit b799ddc006f7ba6e4c3ee397a8bce8d56d36955e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jul 20 01:35:23 2020 -0700

    more interesting spawner perspective

[33mcommit b5d3f7e794ea867771f33a1bb69a2e4a1c7b7468[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jul 20 01:33:30 2020 -0700

    use right handed coordinate system in 3d

[33mcommit bd227859ebf6f13855c7efdba27b2eef40df76af[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jul 19 20:52:15 2020 -0700

    ui: only allow one thing to be hovered at a time

[33mcommit d8b3d078b4ceb82f69fccf590ae337903a04de6d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jul 19 20:34:04 2020 -0700

    core: add Labels

[33mcommit 9a236f492378eb925c650b981b3b91c5af0b6cd7[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jul 19 20:33:55 2020 -0700

    ui: remove translation/rotation/scale components (Node serves the same role)

[33mcommit 726eb371985eb17e9a159fdfe3f504bcd85808fb[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jul 19 17:00:08 2020 -0700

    use rh coordinate system in 2d
    
    z = 0 is now "farthest back" and z=1000 "farthest forward"

[33mcommit cadbb4c1b073595c2115fa7a3de8a3ae5b403107[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jul 19 16:15:19 2020 -0700

    render: fix "next swap chain texture" bug

[33mcommit 946d5d1024619c76c48e385889b8293383f78dfa[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jul 19 14:23:06 2020 -0700

    ecs: refactor resources
    fixes unintialized global resource memory

[33mcommit 2ec530da8c67b5360f8d606ccd9019fdad1eeb2b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jul 18 17:05:22 2020 -0700

    ui: fix right alignment

[33mcommit 6db82714dcb4d06979ab090ec5b03be79e330cb7[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jul 18 17:03:37 2020 -0700

    ui: text alignment and more complete button example event handling

[33mcommit a531c906a64e05f10911c5b51561db505c1b8a37[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jul 18 14:36:31 2020 -0700

    ui: improve button example

[33mcommit f0fc380a39add718abd0c2c585a03e8a0573c54c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jul 18 14:36:16 2020 -0700

    transform: impl deref/derefmut for components

[33mcommit fe1adb6cf60a9bad8566560e1205a1eccd1af3c5[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jul 18 14:08:46 2020 -0700

    ui: focus/click/hover system. initial buttons

[33mcommit 19fe299f5ae01b8d553d9f0e957b402e528f6178[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jul 18 02:09:55 2020 -0700

    ecs: use Mut<T> tracking pointer everywhere

[33mcommit bf164a593635ba2ed269902d1abd0d4f371df103[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jul 18 01:14:16 2020 -0700

    ecs: fix tuple query item skipping

[33mcommit fbcf3f89d04ca11fdea9376a841e9ef81d1f6465[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jul 18 01:05:06 2020 -0700

    ecs: rename ComMut<T> to Track<T> and fix nested change queries

[33mcommit 23b96a48a6feae1906cfc8c0b7d5203676762c25[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jul 18 01:03:47 2020 -0700

    ecs: make RefMut a tracking pointer

[33mcommit 85ec31bb65af55a4e0a6c9c4cc0d8065d04d66c3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jul 17 19:13:56 2020 -0700

    ecs: change state now moves when an entity moves to a different archetype

[33mcommit 31d00ad861cac2b808fcd0a43c82e12500c5e9cb[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jul 17 17:50:17 2020 -0700

    ecs: initial component change tracking
    
    (changing entity archetypes currently breaks tracking)

[33mcommit 81df34adcf6c684f904ffde5476e2f3b1e854af5[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 16 19:34:18 2020 -0700

    finish up import simplification

[33mcommit 7823c3a9e2289f7857fc29bca77fc940ff805863[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 16 19:29:00 2020 -0700

    property: simplify imports

[33mcommit 2a6e75a27e720ed5adc39a8a51dea2742e0ab6e1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 16 19:27:19 2020 -0700

    pbr: simplify imports

[33mcommit e2d2b41c675e09f4600fcf96790a1d6a34580ee5[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 16 19:23:47 2020 -0700

    math: simplify imports

[33mcommit 9f26a453c67cff6042133136161d0da75db392ed[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 16 19:20:51 2020 -0700

    ecs: simplify imports

[33mcommit f742ce3ef2c59611ec7f38e135453cb6b8047660[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 16 18:47:51 2020 -0700

    app: simplify app imports

[33mcommit b12c4d0a48b77cbbe3fbfa68365e46f51e79f088[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 16 18:26:21 2020 -0700

    render: simplify imports and cleanup prelude

[33mcommit 196bde64e3769d564ce20e19f36be17f0f6d14cf[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 16 17:23:50 2020 -0700

    cargo fmt

[33mcommit 1db77b2435675150b624a07891804c7fffa69148[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 16 17:20:42 2020 -0700

    examples: cleanup imports

[33mcommit 1110f9b8773107b3f1e034999157a5d4a840eef4[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 16 16:51:45 2020 -0700

    create bevy_math crate and move math types there

[33mcommit d9adea1b5ea2ed53021847022872f84b204ade55[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 16 16:32:39 2020 -0700

    transform: TransformPlugin

[33mcommit f546aad7f4c2a3f3d13fb4855b8519ccb33bcb98[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 16 14:23:57 2020 -0700

    audio: rename `play` to `play_source` and `queue` to `play`

[33mcommit 7bdca4e5f0d9e0b254b46c77796215bb93eeedc9[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 16 13:52:52 2020 -0700

    audio: rename `queue_play` to `queue`

[33mcommit 3eb393548d0f58e51a5184e19278a3832858f13f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 16 13:46:51 2020 -0700

    audio: initial (very minimal) audio plugin

[33mcommit af109174dd49fdc053267922db404b2caa08e8c1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 16 12:47:26 2020 -0700

    make scene folder plural

[33mcommit 362fb92cf8f2e9f2c9fc820b5e0076982398bacb[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jul 15 17:59:13 2020 -0700

    ecs: only prepare executor on changes. use parallel executor in App

[33mcommit 4712e96aa897b00f89d52d9ac89ffa3d57634142[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jul 15 17:20:36 2020 -0700

    ecs: make parallel executor resource-aware

[33mcommit 88781007b0644e08e813a2f347cebeb76d80b4fe[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 14 23:56:49 2020 -0700

    ecs: slightly improve perf with inlining changes

[33mcommit a7bab755eeb70eb9ced00647aa944f8240f9ac19[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 14 19:05:39 2020 -0700

    ecs: add query get safety checks

[33mcommit 1f6c9ece1dfbb39bde57c99210d40c1b062eb445[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 14 16:23:25 2020 -0700

    ecs: call prepare() inside ParallelExecutor::run()
    
    also moved some things around

[33mcommit 50335e21e2faa32c558d9f192cbd313a292693c9[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 14 16:16:01 2020 -0700

    derive: allow manually forcing modules to "crate", which prevents the need for ambiguous crates
    
    this fixes a failing doc test

[33mcommit 0dc810a37ac88a3ac340a178d664a3bced659733[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 14 14:19:17 2020 -0700

    ecs: add thread local system support to parallel executor

[33mcommit 98ed29aacc7d8e2bbad8160728ed9e09a82a8f06[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jul 14 11:08:02 2020 -0700

    ecs: fix local resource indexing

[33mcommit 8d3a5ae0f157037525db96a41f1cfbedbed1eda7[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jul 13 19:29:34 2020 -0700

    ecs: initial parallel schedule executor
    
    currently only considers component archetypes. still missing proper handling of thread local systems and resources

[33mcommit 67f1bd66ce48213115f6d147ba8c8c4675e0672f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jul 12 12:27:11 2020 -0700

    ecs: fix resource borrow safety

[33mcommit 17f3860d128dd27911f0de555bee02f655ed687d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jul 12 12:06:43 2020 -0700

    remove unsafe Clone implementation on Res/ResMut in favor of UnsafeClone

[33mcommit df17d166cff981225406b40568f941b4821ee944[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jul 12 10:54:40 2020 -0700

    update credits

[33mcommit 86f41ae0a483a8c584e0596082cf1a70d5996e0a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jul 11 20:12:34 2020 -0700

    add more informative "resource does not exist" errors

[33mcommit f4fe9abda88517a1d1e1f98e62104f946845421d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jul 11 20:12:11 2020 -0700

    remove vscode settings

[33mcommit e78f2aac0712d3b40fa0e1b052923baefaae449a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jul 11 12:52:25 2020 -0700

    breakout: fix input

[33mcommit 6d58a5a0331267dfec31595d990b8899e42d8023[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jul 11 12:29:07 2020 -0700

    render: add direct buffer mapping/unmapping

[33mcommit cb1ffb42c4b33c86fa7385d56c231f00b400f3bf[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jul 10 19:42:32 2020 -0700

    upgrade wgpu (removes some dependencies)

[33mcommit fb2dfba5e3062e5902c588cd465e41e292fc61f1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jul 10 16:11:25 2020 -0700

    upgrade libloading

[33mcommit 2ca6de2b81abaa3857046badef4339c0e83baa2c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jul 10 13:47:31 2020 -0700

    upgrade wgpu

[33mcommit fd219660d35b71200614e9b072783c99a319ecd9[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jul 10 12:25:13 2020 -0700

    remove env-logger from dependencies

[33mcommit a65658878804098947717ac759215cd6745c95e8[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jul 10 12:08:51 2020 -0700

    slim down gltf and winit features and remove unused dependencies

[33mcommit 2508a59f6810393253d95a91514bebe492155d18[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jul 10 02:53:31 2020 -0700

    remove darling

[33mcommit 3b68c7cc4ad0bbfb10bccbc12ee004dc7c498bde[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jul 10 01:49:23 2020 -0700

    transform: remove some dependencies and cleanup

[33mcommit c81ab99dac587fae4a0ee970cb262d9075ea2069[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jul 10 01:37:06 2020 -0700

    cargo fmt

[33mcommit db3191e47ba78332c5412b5e04d20ab010f54709[m
Merge: 5607da01 950e50bb
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jul 10 01:32:31 2020 -0700

    Merge pull request #49 from bevyengine/bevy_ecs
    
    Bevy ECS migration

[33mcommit 950e50bbb16069b2ccc75b31097a452f509e9b95[m[33m ([m[1;31morigin/bevy_ecs[m[33m)[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jul 9 21:18:35 2020 -0700

    Bevy ECS migration

[33mcommit 5607da019db1b85f1efb5befea714e200bda56f4[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 28 11:11:18 2020 -0700

    rename/move breakout because its a single file

[33mcommit 4f73dca34de6c51868d83d10026455cd2ad71f40[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 28 00:45:35 2020 -0700

    add system profile data to Diagnostics (opt in feature)

[33mcommit 0c9c0a9b3b040c90e4d3e43e70f0598b1c8dcb9e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jun 27 21:59:09 2020 -0700

    property: remove euclid impls

[33mcommit 941e441f3240634a84afb221d1b95c44eea437fa[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jun 27 18:35:38 2020 -0700

    property: fix short type name calculation

[33mcommit 0a348af630459de79939afc838db7736da27635d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jun 27 17:06:48 2020 -0700

    impl property for euclid types

[33mcommit 5787bcb2c50ec668beee3554ccb9b8e6d6e857b5[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jun 23 01:11:52 2020 -0700

    legion: upgrade

[33mcommit 1f129640262f4c386ae74bb8d1a78de0b8e8c608[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jun 27 12:06:12 2020 -0700

    legion: remove foreach system functions
    
    this is a bit sad, but upstream legion's new lifetimes appear to be incompatible with our foreach approach

[33mcommit 981687ae411b2b51226f0799cd4c4ba35b78865a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jun 27 10:20:26 2020 -0700

    remove ui camera now that default 2d camera is identical

[33mcommit e75496772ec1b98a668ab2ae4e975d79814dfdac[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jun 27 10:18:27 2020 -0700

    legion: change query system ordering

[33mcommit c5842fd92be280d1ebca68f894b6df200950e125[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jun 27 02:10:07 2020 -0700

    breakout: add scoreboard

[33mcommit 7441ac1a01d1f875747765227f6d9bfc807551cf[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jun 26 21:40:09 2020 -0700

    add breakout example game

[33mcommit 1e614e41f15d6a713b4e6c7803d292bc85399471[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jun 26 21:39:30 2020 -0700

    render: make ClearColor a tuple struct

[33mcommit a4afa4e7f3e572803bded6409fa5871e1a39fe03[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jun 26 14:27:22 2020 -0700

    render: only attempt to create camera bind group when the camera bind group descriptor exists
    
    this fixes panics in empty scenes

[33mcommit 5e1f81037d809e2842276e306281ae9a00592307[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jun 26 13:07:33 2020 -0700

    sprite: add sprite sheet floating point error correction

[33mcommit 69925f081716728dddee90d3f01735b91a6abf5e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 25 23:04:08 2020 -0700

    render: multi-window cameras ready to go!
    
    passes now bind camera buffers and cameras can now be assigned non-primary windows

[33mcommit ca4726ea7d0584551c2aeb5e84135de33c2c8acc[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 25 16:02:21 2020 -0700

    render to second window in multiple_windows example

[33mcommit 8a8d01aa8805ebc5e3c779f84ddcf43b7be2d0a1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 25 15:24:27 2020 -0700

    render: add ClearColor resource

[33mcommit dfde160741f1a3a489fa7d52c56fad47c474822c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 25 13:23:28 2020 -0700

    ecs: add ability to set the current entity in world builders

[33mcommit 4a0f8b88696869c9c25c69891fceb1718d197882[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 25 13:19:17 2020 -0700

    add root ui node to example

[33mcommit bcfc27483b209ca10fee6ba9afc8d53ef0840e07[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 25 13:15:59 2020 -0700

    ecs: allow infinite child nesting in WorldBuilder

[33mcommit 92c44320eedf512850676f7e2d27814a7df864a9[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 25 11:21:56 2020 -0700

    ecs: rename EntityArchetype to ComponentSet

[33mcommit f17cf82a874b74f038624d6a9fbe3b14c20e2c72[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 25 10:20:13 2020 -0700

    github actions: run once per day

[33mcommit 1ef4fbf0057f27159276fe6f70ec9bbf81038654[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 25 10:13:00 2020 -0700

    ui: rework so Nodes now use transforms and z-sort happens

[33mcommit 75429f46398cee2ba624980e15e1efb5a049dfe0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jun 24 15:29:10 2020 -0700

    render: use left-handed coordinate system and y-up

[33mcommit 4ba2f725729c26e2891c8977b30cc944f205e8f4[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jun 24 11:35:01 2020 -0700

    render: is_transparent flag. draw transparent object back-to-front and opaque objects front-to-back

[33mcommit 2b8fe144a8f7fc18b8e5891d49c19decec0df759[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jun 24 10:29:26 2020 -0700

    render: rename MainPassNode to PassNode
    there will be more than one and it is suitably generic

[33mcommit 2c7456028338301137f124986ce4848845f24451[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jun 23 19:27:00 2020 -0700

    render: draw in back-to-front mode to be safe (until we can do both at the same time). expand texture example

[33mcommit 3ee8aa8b0fcd87de885bbd483dde3e8203ba2f21[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jun 23 19:15:05 2020 -0700

    camera: make camera transform in world coordinates instead of the inverse

[33mcommit 41dc8a596793dce340025514b34fcb7d2e2b2885[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jun 23 16:52:50 2020 -0700

    render: add front-to-back drawing
    MainPassNodes now have assigned cameras and draw using those camera's VisibleEntities

[33mcommit ca8625c407cbd3fc0a7e4855044da698cf9390c0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jun 23 15:58:06 2020 -0700

    render: ActiveCameras resource and system

[33mcommit b6dbbf04dbbfd123ed0954147c1bbf7fcc370f5d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jun 23 13:42:37 2020 -0700

    render: visualize depth in z_sort_debug

[33mcommit 99bc2d0ea799be44dee2e5f6ba6f649b775d695e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jun 23 13:42:00 2020 -0700

    legion: backport upstream legion archetype filter fix

[33mcommit 2f5f6e017a03daa4cb126dee2ca244d51cb3e271[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 22 17:55:48 2020 -0700

    render: intitial VisibleEntities component and sort system

[33mcommit ec11a6a5f695efe7240d534208be717c60b6028f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 22 17:37:44 2020 -0700

    ecs: make build_children closure FnMut to allow mutation of closue values

[33mcommit 6022ad2c4f2852294edfc84a409c94d4ea292117[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 22 16:11:30 2020 -0700

    pbr: add "shaded" field to StandardMaterial

[33mcommit 031a0c6d587a21a823c6a6f20677ff85a5d6f3e3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 22 13:26:49 2020 -0700

    camera: add scale component to camera entities

[33mcommit 06b2b06e9d04d2edc47135efeabab535b2798082[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 22 13:21:39 2020 -0700

    camera: update cameras when windows are created

[33mcommit f72c4beadfa9a22bc3334327ede7848796afaaa4[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 22 12:55:54 2020 -0700

    transform: run transform systems at startup and move transform systems to POST_UPDATE

[33mcommit 6cd5af6f74620464dd6a93c70cf41c27ef169320[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 22 12:55:00 2020 -0700

    app: move startup stages to their own module

[33mcommit e921ae019922030d4edf4a5ec141b1442c125e8c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 22 12:35:33 2020 -0700

    sprite: use bevy_transform types in sprite sheet entities

[33mcommit f1786ec20a9962d76814ea407d660730f5198c51[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 22 12:14:40 2020 -0700

    sprite: use bevy_transform types in sprite entities

[33mcommit 9e12031a6bdc8eb251642a56dba8f43c5850c057[m
Author: carter <carter@carters-MacBook-Pro.local>
Date:   Mon Jun 22 11:33:12 2020 -0700

    example showcase: use a more cross-platform friendly timer

[33mcommit fa9348fe2b6c6d9bf6019e3271671bb5a08a0a6d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 21 18:55:47 2020 -0700

    text: use quad zindex when drawing labels

[33mcommit c654987ae359dcd2b396dcb6ece30d851395d135[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 21 18:55:22 2020 -0700

    fix bug where pipelines used unspecialized shaders

[33mcommit 99a3ee6570fc91b15f450cb0418aafeb1b9e51d8[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 21 18:26:11 2020 -0700

    fix texture atlas bytes test

[33mcommit faacd2778df909b240d8154e77c346f1d166bc97[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 21 17:43:36 2020 -0700

    sprite: add color to TextureAtlasSprite and make Vec3 16 bytes again to account for glsl UBO layout

[33mcommit 17d70f7d67fb5c9cfcfd57628a0f5fcaf2c598e2[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 21 12:25:36 2020 -0700

    bytes: FromBytes trait and round trip tests

[33mcommit ecea30cadb41aedd5e4d53d4110607d2088502be[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jun 20 12:39:12 2020 -0700

    text: new atlased rendering finally works!
    removed old render-to-texture rendering

[33mcommit da3d6983a767e7269ca41dbaa3052ff4c882ef4d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jun 19 13:45:26 2020 -0700

    text: immediate-mode atlased text rendering works, but theres no character positioning/layout yet

[33mcommit a3c1b7930e8a880869a345ed3287f7dcb6cf0f13[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jun 19 13:44:21 2020 -0700

    render: fix SharedBuffers render resource context

[33mcommit 4246d47fec8663e59edfff893889e9dbb61f07c7[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 18 17:27:20 2020 -0700

    render: move pipeline compilation and bind group creation into draw stage. impl ResourceSet for DrawContext. progress on text drawing. general cleanup

[33mcommit 085cda8bc64ef592bc5110c4a62ff9c6a1e69dd3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 18 11:53:06 2020 -0700

    legion: remove filter types from system_fn macro and IntoSystem and use "casting" instead

[33mcommit 74d0055a3dc692c949088f78444bb2bbcd83b481[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jun 17 18:10:29 2020 -0700

    render: move dynamic_bindings to PipelineSpecialization
    
    This is a temporary step back in ergonomics as we are no longer automatically inferring dynamic bindings from RenderResourceBindings

[33mcommit 0931fd0266ecf2de8aff9d1518be45f60f5c8775[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jun 17 17:27:49 2020 -0700

    fix a few things in shader examples

[33mcommit e89c693c4d939f427f131a8a3dd12a9a35f06cf1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jun 17 13:27:10 2020 -0700

    render: add SpecializedPipeline and SpecializedShader types

[33mcommit e57fdca1bcd7f97cb508cccc351439d9e2480844[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jun 17 13:10:33 2020 -0700

    render: more progress on immediate mode rendering and DrawableText

[33mcommit f4acbdddad90c288d6ca7aa55115bdb8004bebcc[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jun 16 22:23:33 2020 -0700

    SharedBuffersNode

[33mcommit 1dd81587ddb88590c57464c22f0e159e9594e4fd[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jun 16 22:20:08 2020 -0700

    events: iter_current_update_events

[33mcommit e855995145e76d3286ac4d1aa81eaf6392fb3ae6[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 15 12:47:35 2020 -0700

    cargo fmt

[33mcommit 8a704a3e2822ef9ace1a4a0dc68a8246ed075647[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 15 12:45:18 2020 -0700

    render: add AssetRenderResourceBindings

[33mcommit f799d3ac9305fe3a9ceb0ddf475cbdf1073c9f4d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 15 00:08:50 2020 -0700

    render: add RenderPipeline and begin moving logic there

[33mcommit 97edaa73434803495f9c072c8ba748968884c4c8[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 14 15:24:33 2020 -0700

    render: rename ResourceType to RenderResourceType

[33mcommit 3786224b28df2e5080eecdbdf32d51d098d1dcfd[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 14 15:22:31 2020 -0700

    render: replace ResourceInfo with ResourceType

[33mcommit 574656b767c95d0f8423f4ca90a3b3703ed26e3b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 14 12:32:06 2020 -0700

    render: remove RenderResources wrapper type

[33mcommit 0fec350411bdae6a8b35db753e16ec03be86bed6[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 14 12:02:19 2020 -0700

    render: rename "Assignment" to "Binding" and "AssignmentSet" to "BindGroup"

[33mcommit 0f608fc90fd6b7dbe7cfe2d0c65a3c222b9706af[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 14 11:41:42 2020 -0700

    render: add "specific" ids for buffers, textures, and samplers. Use them instead of RenderResourceIds wherever possible

[33mcommit 516cf9ddf0676e5ec24bfc48f96825bed960de5e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jun 13 18:53:31 2020 -0700

    text: font atlas generation. initial Drawable boilerplate. temporary font atlas debug example

[33mcommit 5f0363a4f5b1490da9291628a58c6e86cbefcd32[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jun 13 18:38:25 2020 -0700

    render: move more render code into system scheduler

[33mcommit eed40fee9c91138a92f36c494696a9709a0f2267[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jun 13 18:37:02 2020 -0700

    render: initial SharedBuffer

[33mcommit 6362b2a5166b86e6f11daf959235234a55c8f5ca[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jun 13 18:34:50 2020 -0700

    render: support arbitrary RenderResource byte lengths and temporarily disable RenderResource asset change events

[33mcommit 8803bcd92efca8fa80c9ef3af8981d95f29f3aa1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 11 11:11:20 2020 -0700

    include buffer range when hashing RenderResourceAssignments

[33mcommit fc4160ea4116fc8bf26b33c2dc51bc7c2af03cf3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jun 10 18:54:17 2020 -0700

    AssetRenderResourceNodes now consume asset change events. Remove EntitiesWaitingForAssets in favor of DrawState.

[33mcommit 2e48269923b0bb36569fef4ac6b00eb7b0860024[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jun 10 16:02:50 2020 -0700

    migrate UniformNode / AssetUniformNode to query system fns

[33mcommit 3c3449b7191fdafa64f204cfe1d5341cf0e6fea4[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jun 10 15:45:33 2020 -0700

    RenderResourceSet builder pattern

[33mcommit e8e3e3c20f913a2c628924d05d93baa0701593da[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jun 10 15:35:23 2020 -0700

    move FloatOrd to bevy_core

[33mcommit f4b07ec9c7657d00fe2f68a7bf94e5ea4179eacf[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jun 10 00:24:28 2020 -0700

    update profiling doc

[33mcommit 3d07fbdc81a8b0d4665bed46de928cc8aeb539b1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jun 9 23:16:48 2020 -0700

    render: "Immediate Mode" draw api
    
    This replaces Renderable with Draw/RenderPipelines components and makes various aspects of the renderer much simpler and legible

[33mcommit 3ccaebf9a522b88961aa5ac6a4555c4fc634d18e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jun 9 10:57:18 2020 -0700

    upgrade wgpu

[33mcommit 1426208e2f4346ed94c3626f846790c139307be7[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 8 14:35:13 2020 -0700

    remove DrawTargets in favor of PassNodes and in preparation for "immediate mode" drawing api

[33mcommit 6531ccddaba9623a353e65098e286e9148b878c6[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 8 10:09:03 2020 -0700

    remove lld linker config from macos

[33mcommit efbe794f7de0bf453904a41a02aad446e2fe03c2[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 8 10:08:36 2020 -0700

    fix error in fast build config

[33mcommit b965bfc1160f7b77ef95a2532000ce794e3b89f3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 8 10:06:27 2020 -0700

    github actions: remove cache (just caused hangs and failures)

[33mcommit 086059c11f9b7c4a6fb8107f29b89b57186ea326[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 8 01:37:55 2020 -0700

    github actions: move cargo home to local directory in attempt to correctly cache

[33mcommit 5bf7e92c23ae4bb678621d337c332ae53cdc9db7[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 8 01:31:31 2020 -0700

    remove shaderc from readme

[33mcommit 91edc6fa2b055404d7a7eaab557076aec03a9136[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 8 01:05:56 2020 -0700

    github actions: cargo check

[33mcommit 8fbbbba6743d650817ca9cc4723758a61711d960[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 7 23:40:33 2020 -0700

    add github action build cache

[33mcommit 50651fa5dd0673f3c92fb2cceb041f4817d8a57b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 7 23:37:36 2020 -0700

    specify rust stable toolchain

[33mcommit 4568f5dae3be6b08d4556c3d6db3a6c57c4bce80[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 7 23:35:40 2020 -0700

    remove specialization. bevy now builds on stable rust!

[33mcommit be23f119d5b5fbbfdccfb16d591518eee3003349[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 7 22:32:55 2020 -0700

    remove old uniform system

[33mcommit 62c434274f4dd0c1c62ff6ccfd4c32f6f329ff89[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 7 22:24:53 2020 -0700

    shader_defs: new leaner shader defs. they are now separate from uniforms

[33mcommit fd8f87400d1491a4227590c5b5ec96811e157248[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 7 19:12:41 2020 -0700

    add RenderResources/RenderResource traits to replace Uniforms/Uniform

[33mcommit 5add29f8cfbcf519f2e199aed6ec9f6c062bacec[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 7 13:39:50 2020 -0700

    rename LocalToWorld -> Transform and LocalToParent -> LocalTransform

[33mcommit d0298a4f89d6f0abe18cc6ea2f721fc249b98423[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 7 13:00:58 2020 -0700

    split AsVertexBufferDescriptor out from Uniforms

[33mcommit 70e9892e00ab2ae7007c5975786e2aa405d22131[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 7 12:22:16 2020 -0700

    remove bevy_derive from bevy crate and export derives from specific crates

[33mcommit 4a71cd128d7af3718e332e9102719e69663df094[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 7 12:10:14 2020 -0700

    render: rename RenderResource to RenderResourceId

[33mcommit c1dcc74e0f48f381297adba4c632ec5e14d578d8[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 7 11:45:18 2020 -0700

    asset: make asset folder loading permissive of non-assets

[33mcommit f2b3b909b4b8475437b77e004cf191b35480c778[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jun 7 11:30:04 2020 -0700

    sprite: use rectangle_pack crate for texture atlases. rename guillotiere implementation to DynamicTextureAtlasBuilder

[33mcommit 6164ea6eccf4d3446cfdd6da1c459ea19f7dbfc3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jun 6 16:16:58 2020 -0700

    sprite: dynamically resize atlas during build

[33mcommit 2705e5cbb49040a120636097a48e9591c1d72561[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jun 6 00:12:38 2020 -0700

    add texture atlases

[33mcommit ffc4246a74acfff9d4942003f5b65efef641d115[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jun 5 19:38:03 2020 -0700

    remove TextureType

[33mcommit 9a51b3e0fdef00dbef4168650b3dd312968d46c1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jun 5 17:32:32 2020 -0700

    asset: AssetServer versioning and load group status

[33mcommit 9d80b5965e384dd59335cecf01dbd16c774e5d41[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jun 5 17:25:55 2020 -0700

    example: add rpg assets for use in examples (maybe pair this down in the future)

[33mcommit 75218be11735ac479728be038a20a78ce73e4ddb[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jun 5 00:50:37 2020 -0700

    remove most "optional" bevy features

[33mcommit 5ea979dd0e7fe7294ac1ec5f4bbca30b32d3cd92[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jun 5 00:13:18 2020 -0700

    move shaders in examples into consts

[33mcommit 5aeb3b937ba5a7031db79781fa79802c39cc830d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 4 23:57:39 2020 -0700

    add "pressed" example to mouse_input

[33mcommit aa2928739c9cfbe709315027cd2dde246eae65c0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 4 23:55:12 2020 -0700

    simplify keyboard_input example

[33mcommit ed561d7f70f37f441b686540a822d77cf9f7d15c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 4 23:49:36 2020 -0700

    break up input examples

[33mcommit 5b6f24d6a2a7c04719d89c85a8e102ae128b7735[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 4 23:34:21 2020 -0700

    input: make new Input resource generic and add Input<MouseButton>

[33mcommit fcecf7860977270baab21c7fac837b7c7c091257[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 4 23:01:02 2020 -0700

    make input_keyboard example speed a normal variable

[33mcommit b3a57c21a78479601981b7bcd5550e1ddd4d3fb4[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 4 22:48:53 2020 -0700

    input: simpler input interface via an `Input` resource

[33mcommit fde8292a049cbb68bebc1f5912ddabad61ea5247[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 4 19:47:27 2020 -0700

    simplify input_keyboard example

[33mcommit c4600dbad8ef80581852511d2f238eb357cf18da[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 4 17:13:58 2020 -0700

    increase ui example label size

[33mcommit db6a365b134fa2d69711f8b81bbad9ca2a902650[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 4 17:09:24 2020 -0700

    saner orthographic projection

[33mcommit e72b5583d174e889284cc914947a15f779543705[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jun 4 15:58:02 2020 -0700

    wgpu: upgrade to latest master. use pollster instead of futures. texture copy alignment

[33mcommit 69ac775bfb43767d674ff7712668b8247828b266[m
Author: carter <carter@carters-MacBook-Pro.local>
Date:   Thu Jun 4 11:30:43 2020 -0700

    ignore reflected gl_VertexIndex attribute

[33mcommit ab31bf9d9e560f23354b5df6074365ebcbeabce0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jun 3 23:53:00 2020 -0700

    impl Default for EventReader

[33mcommit 4979a06e90fe3a1a8c06cc56d91eb88db360986e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jun 3 23:22:32 2020 -0700

    input: fix input example and add cursor move events

[33mcommit 6eea96366de64c6371149cc0830783b4c627af12[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jun 3 20:08:20 2020 -0700

    cargo fmt

[33mcommit a4c15f96dedbce9b39d50eac1651a7572cbbe0cc[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jun 3 19:53:41 2020 -0700

    Timer Resource/Component

[33mcommit 5927bad3822053701f86cfae6426ed4302e29741[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jun 3 19:00:19 2020 -0700

    sprite sheets are fully operational

[33mcommit 8c196139d4372114982707cec6027f98db27845d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jun 3 13:04:09 2020 -0700

    derive: break up derive crate into modules

[33mcommit 7019ff015b1a20f4214b51547e1df943658f6a93[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jun 3 12:54:02 2020 -0700

    improve "derive uniforms" clarity

[33mcommit 13d56907edad7ba876a02c8cfe816a59e1bf8f30[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jun 3 11:39:10 2020 -0700

    sprite: more sprite sheet work (not quite operable yet)

[33mcommit c9ae10a8a9efebda1cf3ef8b1bdd11746bd1f49c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jun 3 11:15:58 2020 -0700

    make mesh byte conversion zero-copy again

[33mcommit d65a2c783da7cab757e815dccb957420f9dad9ec[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jun 3 11:12:39 2020 -0700

    bytes: impl for Vec<T>

[33mcommit 97142a68d15b547a2e05f905b8e50a64424c5e65[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 1 22:24:36 2020 -0700

    remove redundant mesh binding code

[33mcommit 5bcd594cb4681bbac5d8d3ca5339188a340ef36c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 1 19:23:11 2020 -0700

    bytes: AsBytes trait, remove zerocopy, remove glam fork

[33mcommit d5d0107adac0e67512593a0e8dbf421376b08ccb[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jun 1 14:33:00 2020 -0700

    bytes: remove AsBytes in favor of Bytes

[33mcommit e68ae995f8c5f33191e8a7541b49e645ee8406e1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun May 31 23:39:20 2020 -0700

    rename rect to quad

[33mcommit 5d40bddf6cb97b0ea9f6dbb5cc8b4c298a86b291[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun May 31 23:18:24 2020 -0700

    add windows lld config

[33mcommit 4d8a567b36f48ef890d0842f8c7b5d2530bdd6c8[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun May 31 15:59:11 2020 -0700

    text: migrate to ab_glyph. this should give rendering consistency across platforms

[33mcommit 21a79c56a70fef42a317fa00bf4b66859fac52de[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun May 31 10:31:18 2020 -0700

    camera: add position and rotation components to Perspective camera. add "sync" toggle to LocalToWorld transform.

[33mcommit 19bf386de967dd63bcc7e8cc13e1f7c37f5404f0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat May 30 21:32:47 2020 -0700

    track time since startup

[33mcommit a463c040d73fccc27592890c913bdafbb945e476[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat May 30 21:15:55 2020 -0700

    use bottom left origin for ui

[33mcommit a5df2ca62bc15f9cbbebfca8b7966f5b06b8cc89[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat May 30 21:15:39 2020 -0700

    better time calculation

[33mcommit d79caf76b40ccdacb5e75caaacadbe52439634ef[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat May 30 13:10:20 2020 -0700

    fix bevy book link

[33mcommit e59385472ce1e46d5f2a09b5754c45a4f67e29a0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat May 30 12:43:27 2020 -0700

    camera: always update camera uniform buffers

[33mcommit 6e76296ce014728bf1489d0d3e9c39c679a388ea[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat May 30 12:31:04 2020 -0700

    sprite: create sprite crate. center 2d camera (split from ui camera). add 2d camera movement

[33mcommit 71b37556339ae976ea7dbef4e8d2791bc630fb26[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 29 22:30:07 2020 -0700

    camera: split 2d and ui camera. remove resource_name mod

[33mcommit 51d41b23027ae2b89266b751eb30ec2588e54dc2[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 29 22:07:55 2020 -0700

    camera: remove active camera components in favor of camera names

[33mcommit fec903464409daee0105ceedafa519ff6d7cf580[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 29 17:25:14 2020 -0700

    camera: break out projection components

[33mcommit db27d63b91b3f8fc570d107c9e8c9eef3f054874[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 29 16:06:23 2020 -0700

    upgrade ron

[33mcommit 651f213570424520b496cf64ced12d84b34ebe6b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 29 15:51:36 2020 -0700

    scene: spawning

[33mcommit 065a94aca8989b346adc4190f5922e8b50768628[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 29 12:56:32 2020 -0700

    scene: hot scene reloading. update load_scene example

[33mcommit a7d9f8d0ff4f2b8e8726b5e67185c964f6c0dc81[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 29 00:32:00 2020 -0700

    ignore legion and glam tests. don't run intro example as doc test

[33mcommit 8a14e61d0fc73f4fc0a4b1a4200335b1c37cc730[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu May 28 23:43:45 2020 -0700

    fix test and tweak github action

[33mcommit cb81f3a6f07d636c781892fdf05251bb786a157e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu May 28 23:07:59 2020 -0700

    github actions: no default features / run all tests

[33mcommit 43924ba8fcc8d53d94eeb6ddce3b0ac9a7000669[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu May 28 22:44:04 2020 -0700

    use nightly rust in github actions

[33mcommit ec0c0c7562335d0a13317455cf7a9f1eabea5dd7[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu May 28 22:37:28 2020 -0700

    tweak the ecs guide

[33mcommit bc5f53583bcb71e5b2348ad07fb2a42da7313749[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu May 28 20:48:18 2020 -0700

    Create rust.yml

[33mcommit 7429ab98f7c06875f3a43d49d8acbb8d7cef2cbd[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu May 28 17:54:58 2020 -0700

    remove glsl-to-spirv from repo

[33mcommit 0472cbfc7ca9ae71213b1f33d1433ca6d73886ff[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu May 28 17:32:51 2020 -0700

    start porting "query" systems from SystemBuilder to functions

[33mcommit 83d5275e109188042aa8a67701cc0afc25a87288[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu May 28 13:36:48 2020 -0700

    add "query system functions"

[33mcommit 1d4a574b526f7e25fda11ac44938589a36c4cdf0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu May 28 10:51:53 2020 -0700

    remove lifetime bound from IntoSystem

[33mcommit b96fec5f44d4bd84ba3f0cf62f2b2397431bd2b7[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu May 28 09:19:39 2020 -0700

    use inclusive ranges in legion system fn macro

[33mcommit 5b6001a4133ec4217a1e81ca59c9fc0462eba62a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu May 28 01:53:43 2020 -0700

    legion fn system proc macro

[33mcommit 55d6ea64f30d59afc21c86c6d2d11a029bc98eb8[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 27 22:59:52 2020 -0700

    slightly better short name calculation

[33mcommit 830565ae2b647e0c862895e7f99e0e47b1bbc06f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 27 19:27:55 2020 -0700

    scene: type registry refactor. use short type names when possible

[33mcommit 91af49ede342e6aed4edf6047984bb239042feb1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 27 16:06:44 2020 -0700

    props: move property impls to their own mod

[33mcommit 3ee5a67cdba3cc0146908b151787504b2119343b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 27 15:49:27 2020 -0700

    scenes: polish scene example. prop->property attribute. derive(Resources) to derive(FromResources)

[33mcommit a76bb8b50792840a0981b6f4d2294b7fc13aa6da[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 27 13:46:43 2020 -0700

    props: fix small issues. scene loading now works!

[33mcommit c03da2b7285020bbaf8468be7ae5c4653b6f8a02[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 27 13:30:05 2020 -0700

    props: fix dynamic property deserialization

[33mcommit 563a6fc57cdecf497e731476187fea940fec40dc[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 27 13:10:43 2020 -0700

    remove ron fork

[33mcommit 59dbf22e39d24c5886be3a83aeefa71106bb39f3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 27 13:07:32 2020 -0700

    rework scene format. use property value serializer, removing the need for ron fork / enabling any serde target

[33mcommit d86d3ddcbc8c7bb99945a2e99faca3d450d867d5[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 27 11:25:27 2020 -0700

    props: move property serde impls to their own mod

[33mcommit 76adb888d364780c8d8070012fc1e3809a45bef6[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 27 11:13:57 2020 -0700

    props: remove need for explicit serde::Deserialize impl. replace impl_property macro_rules with proc_macro_fn

[33mcommit 4bc3772749faa693687bfe013ed844ea31fafe61[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 27 00:47:17 2020 -0700

    revert rust-analyzer custom target folder

[33mcommit 9abe9b798575ae47e48f376add04d399d51e7d59[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 27 00:25:15 2020 -0700

    restore cargo.toml debug opt level 3

[33mcommit cb3a8633661f759acdb364f5162ed17961c4c854[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 27 00:18:08 2020 -0700

    component_registry: use FromResources trait instead of Default

[33mcommit da52b1b034494407376407199aa4eafeb1ec4758[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 27 00:14:57 2020 -0700

    props: properties no longer directly implement the Serialize trait

[33mcommit bb56b079736569d99bf20019c8c9881ec414c6aa[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue May 26 19:49:46 2020 -0700

    scene: use two spaces instead of four

[33mcommit d2d02f63f6ee8c10aec17b81a07e412a415f3efa[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue May 26 19:47:33 2020 -0700

    props: "Seq" properties

[33mcommit e337ff59b85b19df66c599b4673400cb4e54633e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 25 21:57:48 2020 -0700

    props: register "pbr" components

[33mcommit c8d55fe030728efec24aba9ac82860f0999e2219[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 25 18:49:29 2020 -0700

    register bevy_transform and bevy_render components

[33mcommit cb3d60a87f728ff4ac130451d0c41fbc9eb1cd8d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 25 18:27:04 2020 -0700

    props: add Property derive and implement Properties for Camera

[33mcommit a837741c647b0fb015d337988842d7911c783f5f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 25 18:20:36 2020 -0700

    props: move AsProperties into Property

[33mcommit 83889c44e7ca6f6beb2683a894f3a8468ec6992e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 25 17:57:56 2020 -0700

    fix glam prop build

[33mcommit f0cbe8cd86a161cc46ba398161ed68cb5d24d8ab[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 25 17:50:17 2020 -0700

    prop: impl prop macro. add impls for glam, legion, smallvec

[33mcommit cb6638ba069c97c8bfa3a38d1f1c69dfd2164496[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 25 16:35:46 2020 -0700

    props: add support for tuple structs

[33mcommit bab2ad335d00e598042f421080679214c27ec7bc[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 25 16:00:05 2020 -0700

    add post_startup stage

[33mcommit 4e1d953c95db6cf59b4d9d4a1aa98f323bd2ee1b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 25 15:44:28 2020 -0700

    remove unused erased-serde

[33mcommit 663f95e0fdd98a685526c3827bdae1d1743fff14[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 25 15:35:47 2020 -0700

    impl Property for std collections

[33mcommit f0f0e3c1a852993193690c29a4fc88e0a629d135[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 25 14:51:38 2020 -0700

    move component registry to its own crate. automatically register asset handles

[33mcommit ab66d21d2a1da979c062a38189489be422306264[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 25 12:53:26 2020 -0700

    fix scene formatting

[33mcommit 0826d741635d6ecdd0016e83abd96bfab0171e6e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 25 12:03:50 2020 -0700

    props: remove specialization, ignore fields, impl for Handle, fix world round tripping

[33mcommit 1cd3b4c987e4144883d1b0aa532238f52abb1a24[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun May 24 19:36:01 2020 -0700

    props: add type peeking to ron, support arbitrary property types

[33mcommit c5ab7df98f99fa0c5f4a2b42979c465f3b434845[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun May 24 12:39:23 2020 -0700

    automatically detect bevy meta crate in derive macros

[33mcommit d3e0196cbbb38510fd7d08cd6982e13a16af11f9[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun May 24 11:01:48 2020 -0700

    move derive(Properties) into bevy_properties

[33mcommit b7305046cf57221593fab05bf01107c401a00c5b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat May 23 22:39:23 2020 -0700

    remove SerializableProperties wrapper struct

[33mcommit 4c306e6d48c11f59716d4c5ee20e469e068c1446[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat May 23 22:07:17 2020 -0700

    props: migrate scenes to props. loading / saving worlds from / to props.

[33mcommit f36a67ee9612b42a26118bb17f4ce845831f9551[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat May 23 12:26:13 2020 -0700

    props: support nesting

[33mcommit 284afd4f943542e929dfdf5db4db471260cd2c9f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 22 19:01:48 2020 -0700

    props: deserialize (no nesting yet)

[33mcommit 6e31b90ec315c793395004433ad9a3282d07e4e8[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 22 18:07:26 2020 -0700

    upgrade ron and use decimal fork

[33mcommit f1d58609d527c96ea9d908233cd5d17675896623[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 22 17:07:14 2020 -0700

    add text label to ui example. fix 0x0 label textures

[33mcommit 159acf52af04eb98ae86c1173cf5913ab08d3807[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 22 15:36:48 2020 -0700

    props: rename prop/props to property/properties
    its longer but a bit clearer

[33mcommit e514bd14fedd9bba88955e94e020f23ba40a27c8[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 22 15:25:31 2020 -0700

    props: dynamic casting. reorganize

[33mcommit da8daa051b1fb7863470c5f3a00d0963275ea727[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu May 21 23:58:11 2020 -0700

    props: derive, get/set, example

[33mcommit 93682420130d183aebfd690b7e3ad9d67abee402[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu May 21 18:51:03 2020 -0700

    scene: require clone for registered components

[33mcommit fd26588dbd6c1b0e5523d513a09e1df3ebb83fa4[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu May 21 18:23:22 2020 -0700

    scene: rename id to entity

[33mcommit 38669107c9f9f3485a2276724d7a3fbde451d978[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu May 21 17:59:33 2020 -0700

    upgrade legion

[33mcommit d920100d35b8db8207aa4b2db15c712c6d5abd3d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu May 21 17:21:33 2020 -0700

    scenes: deserialization and refactor

[33mcommit 553b75449221a21f5b2cc50dc21dd674eb6e8da6[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 20 10:40:23 2020 -0700

    scenes: datatype and serialization

[33mcommit 64ce5b42c08143d2ff5110d9c8484627c461c274[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 20 10:39:52 2020 -0700

    Add stable legion entity ids (GuidEntityAllocator)

[33mcommit fb140ce4b07fdd24cfe62a7ff448e3c545333f98[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue May 19 13:22:14 2020 -0700

    remove tag serialization. round trip ron example

[33mcommit 3710196fdb7085e60c825abc1b875d185a537f8a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue May 19 12:55:58 2020 -0700

    remove type_uuid from serialization

[33mcommit dcdd552365b075fe6512ee0411ad0a33b2a99035[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue May 19 12:20:37 2020 -0700

    pull in ron. use static strings for types

[33mcommit a88982fbfbbfb9fbf0c8951ea62f33aaa8bf0fff[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue May 19 12:20:14 2020 -0700

    move universe into Resources

[33mcommit 8bc0eb45ee56feb75b79599dc136203abbd72eeb[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 18 14:53:57 2020 -0700

    print average fps and smooth out average a little bit

[33mcommit e65fe0e736bd51303d8d2674f401d1ed7327bedf[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 18 14:42:15 2020 -0700

    Clear bind groups on each frame

[33mcommit 29ad64f1d8c203d891733c76cb61f3dea4cd927b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 18 12:26:30 2020 -0700

    upgrade some dependencies to remove redundancies

[33mcommit c5a78d46160e4aefd63884b83592e5390864a618[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 18 11:31:11 2020 -0700

    TextureCopy render graph node, texture_resource_system
    
    Removed textures are now freed

[33mcommit 33d4d5f562f4f5b9d255366c8f6578a295b81022[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun May 17 18:48:14 2020 -0700

    Add asset removal. Clean up old/removed meshes

[33mcommit 86c18edbfd31fb1de03dbf55ff9f9abfdd22d4ca[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun May 17 18:09:29 2020 -0700

    Label component

[33mcommit e093a3243b6527ebb94b864dea3291fef5261bc4[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun May 17 10:29:42 2020 -0700

    phrasing tweaks

[33mcommit 870f715df359a60908ce3a398876796129db2f78[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat May 16 20:18:30 2020 -0700

    Hot asset reloading

[33mcommit 623c8a8d9a2a76890a75f60f20b84b25a6a9d682[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat May 16 12:53:49 2020 -0700

    remove unused fn

[33mcommit b1f07e37495cbefee495901deb380f8c7ac33993[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat May 16 00:27:30 2020 -0700

    cargo fmt

[33mcommit fcc0a6303bd31316519e8781c2cf77b572218c8c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat May 16 00:21:04 2020 -0700

    update mesh on gpu when it changes

[33mcommit 5d0d3d28c70926dc47d673d7333831831f4784c8[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 15 19:46:09 2020 -0700

    TextPlugin + FontLoader

[33mcommit ad66f87ff691713d67984670804611ae332524a1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 15 19:32:49 2020 -0700

    Entities wait for meshes to load

[33mcommit bf7f222318f47e86d7d7b8b14becdb5ad53ef125[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 15 19:30:02 2020 -0700

    Support async texture loading

[33mcommit 35adad655690e5bcef417ccba68c925df9415a63[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 15 17:22:45 2020 -0700

    Async mesh loading works

[33mcommit 4e1abea16118194ab51fc03965a72d666e23a5b1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 15 16:55:44 2020 -0700

    AssetServer: multithreaded sync/async asset loading

[33mcommit 8a61ef48d3f2acff97c404e57c5f677e88190874[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu May 14 15:25:43 2020 -0700

    use relative paths for assets

[33mcommit 2bcb8a2a41fb6455d1c24e6a740ee0f207f3abab[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 13 18:05:18 2020 -0700

    cargo fmt

[33mcommit 6381611e89385d4e5a6e1460830acdf3ba0a276b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 13 17:52:47 2020 -0700

    Resource -> Res, Ref->Com

[33mcommit fb8f9e8636c96241882f603a1e8462c947deebb4[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 13 17:35:48 2020 -0700

    RenderGraph::add_node now requires a name

[33mcommit 06f3a4efb9e009f782a151bd64aff6a91b4f0b26[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 13 17:31:56 2020 -0700

    Use system fns for all setup code

[33mcommit 70f122b92aa78a35f4cc4d2dfcc7af4306e3ca11[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 13 16:42:27 2020 -0700

    Rename AssetStorage to Assets

[33mcommit b58db0749ef4a21cae866c6bb4b6b999a7ea59a6[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 13 16:35:38 2020 -0700

    use init_resource everywhere

[33mcommit 16b568e00e2a22f21cb6b530849d6b28f4c6d65c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 13 16:17:44 2020 -0700

    Asset events and AddAsset builder

[33mcommit a7eaf32e7ca8bceec915f1cb30528b7e66f5c382[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 13 16:17:06 2020 -0700

    drainable/extendable events

[33mcommit c18ecf2a55a10464abf53bd035500606f67f7ae8[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 13 13:09:32 2020 -0700

    initial text rendering

[33mcommit 73cc20768cd27a01e49d7c0b19cc0a0a4e45b4d7[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue May 12 16:35:49 2020 -0700

    remove pathfinder code
    
    its not ready yet so it shouldnt be on master :)

[33mcommit 44717c7b109b26a85bcc0e4a77459de6fb12a3dd[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue May 12 14:31:03 2020 -0700

    pathfinder: small tweaks

[33mcommit 7508e6f02e1c7fa8bd48851e1d142a2b006492c3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue May 12 13:36:28 2020 -0700

    pathfinder: minor fixes

[33mcommit 6c29a2f52b1a2c7704b7d4399470f894318bea73[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue May 12 12:04:10 2020 -0700

    pathfinder: fill in missing uniforms

[33mcommit 4ca78fa89ec84cf973489010559f6616f87b0e26[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue May 12 12:00:01 2020 -0700

    update launch.json

[33mcommit a57e08075b7e4600b890624c64de0a1458b4b986[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue May 12 11:59:33 2020 -0700

    diagnostics: real bind group count

[33mcommit 10637c1010b36b64aaadf003e5d4e5290bacd960[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 11 21:28:11 2020 -0700

    add TextureDescriptor to ResourceInfo

[33mcommit 4eb562975f85d7a9ec67d1a0c3f134f83b8c52f7[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 11 20:12:48 2020 -0700

    pathfinder: data binding

[33mcommit 0dd55f2c4036e9559a6d1dad009eb6c4678bdb88[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 11 14:08:20 2020 -0700

    cleanup

[33mcommit f98918fd5cb31b4e59a1505b25427bff39b7898e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 11 14:07:09 2020 -0700

    remove buffer array info

[33mcommit 7a71873a32cfe493b0fd0d15bbc198892a014e88[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 11 13:55:23 2020 -0700

    RenderResourceAssignment refactor

[33mcommit ef2e5a1ba3e4481253eabccaed00d1d0d45218cb[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 11 12:37:04 2020 -0700

    pathfinder: set vertex buffer descriptors

[33mcommit 35e1d8b4984b4e9fb54f83597b683626353ea3f7[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 11 09:01:31 2020 -0700

    pathfinder: more backend work. it now renders the clear color without crashing

[33mcommit a5f47fd7daea20313a4e66307841da9ed92b3b2f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun May 10 12:53:26 2020 -0700

    use "32 bit alignment" and "explicit shaders" pathfinder branches

[33mcommit ff8c5292c221c176921835495b4ce0146a312f56[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 8 09:29:26 2020 -0700

    add pathfinder fork

[33mcommit 0fdf331552c7246b8af051d864a9ceffc855a6eb[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu May 7 23:10:57 2020 -0700

    pathfinder: vertex buffers, samplers, and glsl layout

[33mcommit 58ba15fbb6ca6d53319960fa227b3c9b44443fb0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu May 7 19:15:25 2020 -0700

    pathfinder: fix shader paths

[33mcommit e61c482bdf8904d846554d2915a23fff10f3ebcf[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu May 7 19:14:14 2020 -0700

    pathfinder: fix spirv makefile and generate outputs

[33mcommit 0e040680df6a91419f4a11a6868a1354eaf734bf[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu May 7 19:09:53 2020 -0700

    begin pathfinder plugin

[33mcommit 5e5df2bb87fb92b58d599cca5610ba996d5d628e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu May 7 19:09:25 2020 -0700

    toggle-able "bevy conventions" in shaders

[33mcommit 3d65a0d236a7ebdf4d9cf63d9cba4a896da86b0e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu May 7 11:21:25 2020 -0700

    move pipeline layout reflection to pipeline descriptor

[33mcommit 20cc41a6394f515350cfdbc055c777e74b121940[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 6 19:26:55 2020 -0700

    create shader module from source

[33mcommit e459b424187e72bce0bd859d7b93d5a9460795bf[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 6 19:26:28 2020 -0700

    handle::new now creates a new random handle

[33mcommit 75614f50844880194eb56b360eef3eeab42ebe66[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed May 6 13:49:07 2020 -0700

    Ui depth from parent (falls back to insertion order for orphans), do ui rect size offsets before rendering,

[33mcommit b5cdb7c5fc508a54d2e979e32171784680fa974d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue May 5 21:25:56 2020 -0700

    upgrade wgpu

[33mcommit c5ca59dc4d5c9f791e202c0c64e885328889209a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue May 5 18:44:32 2020 -0700

    cargo fmt

[33mcommit 800c4342ede93fa306102c296f80ef028ac0a7c2[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue May 5 13:37:13 2020 -0700

    disable threaded graph execution until leak is fixed

[33mcommit cb49e14ae0c9deb407c642dc8b9d126170f33db0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue May 5 13:34:15 2020 -0700

    remove todo

[33mcommit 2b0c9491a12efc36a67ff6b669a52802279bb389[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue May 5 13:34:05 2020 -0700

    remove unused primary_window

[33mcommit c38859899600a0fd1d6a6961d213226a151e770c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue May 5 13:33:47 2020 -0700

    use rwlock in graph executor instead of cloning

[33mcommit 2b8789dc8c588f826a81d087e7b02158ee8c90ba[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue May 5 13:12:50 2020 -0700

    queue frees in system nodes

[33mcommit 0d87ebe866703c4a1c637d17fc31f03865d4b596[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue May 5 12:45:37 2020 -0700

    simplify / consolidate wgpu resource mangement

[33mcommit 012a33ed32010221560b9795b47c69ebe1557d19[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 4 22:02:03 2020 -0700

    add headless render resource context

[33mcommit 2fd702064678b2d3b1aaeda04cda44c290b02432[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 4 19:34:15 2020 -0700

    rename GlobalRenderResourceContext to RenderResources

[33mcommit 7560ecf9d8c19cfe0904e0e06ce97461e05631e9[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 4 14:18:46 2020 -0700

    correct "its"

[33mcommit 4735c68ab41573cabd34d3f8704651748314dae5[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 4 14:14:49 2020 -0700

    add diagnostic examples

[33mcommit 704a74266199c7ee51b8d7c71a3a6dd375c816f3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 4 13:42:49 2020 -0700

    Print diagnostics plugin

[33mcommit ea16f6fc56545fe88d7022521c3207202739b494[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 4 13:21:14 2020 -0700

    frame time diagnostic plugin

[33mcommit 75f1362433cf69c163bdac42312375c3782255a3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 4 13:11:51 2020 -0700

    upgrade wgpu

[33mcommit 0e63fd383873cdfd97a6326e514d96a6ac632012[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 4 12:36:18 2020 -0700

    wgpu resource diagnostic plugin

[33mcommit 6f32d18dc5f10457010ca9d6b1102f057496abc6[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 4 11:43:21 2020 -0700

    diagnostic filtering

[33mcommit ac5b6c5046e33cdec749e1756a2a9ba3863528c0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 4 11:23:59 2020 -0700

    remove bevy versions

[33mcommit af2a111801532929716b2f172e707edfdda59af6[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 4 11:20:12 2020 -0700

    use ints instead of bytes for uuids

[33mcommit ba795fdfb5c3a6fe63f9c1b0ca4c6f412d56adcc[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 4 11:06:02 2020 -0700

    "fix" ui_bench

[33mcommit 916978307bd82543035347d1bfc9ff5016929dc6[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 4 11:03:52 2020 -0700

    fix anchor descriptions

[33mcommit 076fef873a74ad53ca48ff85229ffe69c87dbd87[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 4 11:02:04 2020 -0700

    Anchor constants

[33mcommit f5149cab051922930b8a79971464f9e52a55a12d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 4 11:01:57 2020 -0700

    move color constants to Color struct

[33mcommit dcc34473e58875de4729efcdbbbecab391a01b45[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon May 4 01:22:25 2020 -0700

    sprites

[33mcommit 1056b79abf648a2304137fbb194e31e586332a45[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun May 3 23:49:45 2020 -0700

    ui textures

[33mcommit 08c6679f382d7f9bc3005eaa84436ff18985db10[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun May 3 23:47:52 2020 -0700

    add color constants

[33mcommit 291b948b6102f885cc5fbf1662788d45c95f582c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun May 3 19:32:27 2020 -0700

    fix "ui_bench"

[33mcommit d50313c2855d385e291d5733b47eb64d383e0f5a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun May 3 19:30:31 2020 -0700

    ui is back!

[33mcommit 05dbf31fd1f673bf5d517b80e5378280643d7d97[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun May 3 17:54:16 2020 -0700

    derive struct as uniform

[33mcommit 736faa3f46ff475feaed7fd948c2b03dd173c265[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun May 3 17:05:45 2020 -0700

    import FromBytes for glam types

[33mcommit 41be55bf8d8adcdd3f54281a8bc412c02dda197f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun May 3 16:55:17 2020 -0700

    custom glam with zerocopy impls

[33mcommit dac9cac7766322bc798167062662f7f3e1a009ba[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun May 3 12:35:07 2020 -0700

    ui render graph

[33mcommit 5537eabb8c2d39db44c880f5f1682692afec0ac2[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun May 3 10:54:30 2020 -0700

    "base render graph": a common baseline graph

[33mcommit a4fe37add1ee6e7f0db3f811d285c350745735fc[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun May 3 01:30:10 2020 -0700

    add plugin example

[33mcommit ff0db0df149ca71fa26fd04921c18ab03c346ce0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun May 3 00:48:36 2020 -0700

    quality pass on ecs_guide

[33mcommit 2fb9e115ffb6bafaae5e940dc5ec2d2209d37d39[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun May 3 00:21:32 2020 -0700

    Make ecs_guide a "real game"

[33mcommit 24e5238e75fee8c8cb200d4f7b2740a502304a98[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat May 2 18:35:18 2020 -0700

    asset handles now use uuids instead of ascending ints

[33mcommit 71a4503df179e7527c6ebe8fe2c7fc548416c795[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat May 2 18:20:42 2020 -0700

    Move ecs_guide main function to the end of the file

[33mcommit 355e2196084fb70482e264ce1e295b36b789b2b7[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat May 2 17:56:30 2020 -0700

    begin porting ui to new render graph

[33mcommit dd84f185f81a9fb73d72f91192a6bba251f033c9[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat May 2 16:30:45 2020 -0700

    fix glsl-to-spirv test

[33mcommit 0f74c64a164e3b62ccd105636de7fdf186403ef5[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat May 2 14:03:37 2020 -0700

    add "temporary" note to glsl-to-spirv

[33mcommit a5a7edf07eb128aa7b0cfed0ad3976c1c6e2351f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat May 2 13:57:22 2020 -0700

    remove shaderc dependency (makes windows builds seamless)

[33mcommit 50f8134ca0c5b0047e3a7e8a94e81e4ae538e766[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat May 2 10:27:22 2020 -0700

    rewrite batcher to be fully generic

[33mcommit fd97bb7bc7df342769d74de7d0a8303b44b48636[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 1 13:55:07 2020 -0700

    fix showcase script

[33mcommit 7b79b3de8dedee4f9f9cdee376e47e6f758754ce[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 1 13:12:47 2020 -0700

    organize examples and add ecs guide

[33mcommit 368a1b8815990d345c39ae77e71f29a6e3d00dca[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 1 01:50:07 2020 -0700

    cargo fmt

[33mcommit 4315455859345f6723359afb9b6ac50d73b47270[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 1 01:47:59 2020 -0700

    add system fn todos

[33mcommit 5458c6daf450e91635f8d655dbe46f4b572f08f9[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 1 01:37:20 2020 -0700

    port a few more systems to functions and add some name clarity

[33mcommit 913d0163444f320579fab573a2bf3ee2be5bdf55[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 1 01:02:13 2020 -0700

    remove unnecessary custom type_name_of_val

[33mcommit a1cbf36b0c34ecbfc71a24b3fad201945513d80b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri May 1 00:55:32 2020 -0700

    Use system type name as default system name

[33mcommit 45a1f0515f63d4d6574d6c29d35f2ee4df42c1bf[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Apr 30 23:59:05 2020 -0700

    use immutable reference in FromResources

[33mcommit 3e3ab92ff54850bf17d1001af3b14e5ed95c743b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Apr 30 22:30:51 2020 -0700

    cargo fmt

[33mcommit b11a7f177bbaf2f63948da9b7967422cb9775de4[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Apr 30 16:29:52 2020 -0700

    system_fn: port exit_on_esc

[33mcommit e5a99fde4f6fa218f14200a699c191c350fa9c0b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Apr 30 16:19:28 2020 -0700

    port event_update to system function

[33mcommit 37b4dff1728bc9f51bcaeb03d1bcf3ad5744f9ca[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Apr 30 16:13:21 2020 -0700

    port time and diagnostic systems to system fns

[33mcommit 0800ce9b926a8f56a951b9b1aefad28ef7982f4c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Apr 30 14:16:52 2020 -0700

    add bevy icon to docs

[33mcommit 52e1f29e023a171ee3b4481825cf0c7beab15de3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Apr 30 13:55:51 2020 -0700

    use function system in bevy lib.rs docs

[33mcommit 2447672c6397e206900559414502b6ef0301cc50[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Apr 30 13:52:11 2020 -0700

    adapt examples to use system functions and state pattern

[33mcommit 98f9639050bf7499fcdc1db7142497fbd0c01016[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Apr 30 13:26:01 2020 -0700

    FromResource and derive macro

[33mcommit 4923ac02dedd4ca7b6785921647add1eba00de3e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Apr 30 12:28:41 2020 -0700

    remove entity builder example

[33mcommit 3cdee1b8adfeb6f272043ac7d9905317c7cfbdd0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Apr 30 12:22:35 2020 -0700

    system_fn named/id/anon. add "more-system-fn" cargo feature

[33mcommit 2047f9c0d9ac2947473ae9023c9d161f13ddca2c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Apr 30 10:42:22 2020 -0700

    Add command encoder system variants

[33mcommit c04b4a6c0bddba085f592529260995dd5308c323[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Apr 29 20:33:30 2020 -0700

    remove unused variable

[33mcommit 03e8c1caf7b9d30be0f27baf3ff965b982914b73[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Apr 29 20:05:13 2020 -0700

    flat system functions w/ arbitary resource inputs

[33mcommit 321ce4d4391ee74ed0ec8fb159336d3157ad9813[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Apr 29 17:10:31 2020 -0700

    refactor system impl macro to prevent warnings

[33mcommit d88f9a791324f8c941eb1a58ce0849623509138a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Apr 29 17:00:20 2020 -0700

    add support for empty functions as systems

[33mcommit 2d3903299b5297cf42e676ed4828b24041004d7c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Apr 29 16:32:19 2020 -0700

    Resource and ResourceMut pointers

[33mcommit 45a710fe6ac2e5ff9ebdd12f6ffb949a6364e458[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Apr 29 01:37:54 2020 -0700

    cargo fmt

[33mcommit 9230c370baba9326dea0cf1d0702b0db94fc66d1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Apr 28 23:02:21 2020 -0700

    Implement IntoSystem trait for flat functions using macros

[33mcommit f1a03a7a3acc75b390c816febe41219eec8d4feb[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Apr 28 13:46:07 2020 -0700

    some system_fn renaming and add system examples

[33mcommit 713c4a6056ca8ac139e270d400568eeea56f5cf3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Apr 28 11:25:24 2020 -0700

    move system function constructors to System

[33mcommit 9a3700d8f1f14efb4ef72a386f0b6870a788cb33[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Apr 28 10:59:42 2020 -0700

    Change events.iter(&mut reader) to reader.iter(&events)

[33mcommit 92182060a9dc87de2e700d4be1bff8f8a022fb7f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Apr 28 02:52:26 2020 -0700

    add app builder shorthand for system function

[33mcommit 092f3888ca1a56c190c1c82d733cd9bed502aa97[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Apr 28 02:31:01 2020 -0700

    Resource system functions

[33mcommit d5a33c9d0d9506186da3bad10e07fe4e5ad69714[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Apr 28 01:27:18 2020 -0700

    Add thread safety to "function systems"

[33mcommit d5dcc96c39a81dd5ae6b5f8e7b3ec4f5656828b9[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Apr 28 01:00:30 2020 -0700

    "functions as systems"

[33mcommit 0c3a77ac9fa56779514ef3645e2c465653fb3118[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Apr 28 00:59:26 2020 -0700

    impl AddAssign for Color

[33mcommit c2c543e0babb049e1918df3bc89dbc211ff65430[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Apr 27 17:41:02 2020 -0700

    move batch to its own module

[33mcommit 9a7f49a39ac39f078789cdd542066ddcd98afd40[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Apr 25 19:48:41 2020 -0700

    remove example plugin from workspace

[33mcommit 57109f8726d86cff1877f71dfce8a1a2047dab22[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Apr 24 18:58:54 2020 -0700

    remove broken instancing example

[33mcommit 115a009c1614210b87e94cbdc14c7d88bdb3680b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Apr 24 18:55:15 2020 -0700

    cargo fmt

[33mcommit 057ad97a46136b77082d0867dcebc324dbd1b6f9[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Apr 24 18:23:37 2020 -0700

    fix dynamic plugin example

[33mcommit 65d072fc6a22e3286ad28b3b8a4e435ec63b9b64[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Apr 24 18:14:31 2020 -0700

    re-add bevy_legion

[33mcommit 8dcb7413d6475ac02423dab643b407f1b33aae61[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Apr 24 18:07:33 2020 -0700

    (temporarily) remove bevy_legion

[33mcommit fa81289fc71c840f7214a61efb5cdc32a7a437e3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Apr 24 18:01:50 2020 -0700

    try using an image link

[33mcommit 87066cafd35e81d1edaf07f28888b6e6b31b14fc[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Apr 24 17:57:20 2020 -0700

    move bevy crates to their own folder

[33mcommit 791c47535424422593069a053b2bf20dc0aa4d22[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Apr 24 17:46:54 2020 -0700

    RenderGraph2: Finish porting, refactor, cleanup

[33mcommit 06b6ade902c816506fc91671e9f0a430479d6fa9[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Apr 24 15:13:00 2020 -0700

    RenderGraph2: Lights node

[33mcommit c124cbe22f1474c03f88b91fa4a55f1023951ca6[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Apr 24 13:16:04 2020 -0700

    add license

[33mcommit f47315afa3d9ca09d6f2fcf294e1642cd9b54518[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Apr 24 12:48:12 2020 -0700

    RenderGraph2: fix uniform node textures

[33mcommit 512bf118bf3451700611512362e55cd23a888d87[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Apr 24 11:08:46 2020 -0700

    RenderGraph2: UniformNode

[33mcommit 209b4b48d903a1d84ee1f26949d76804f6a3022c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Apr 23 21:41:13 2020 -0700

    RenderGraph2: rendering works again!

[33mcommit b7d2f068ec053cf64f6c150bac60f2dd8646dbe6[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Apr 23 21:06:40 2020 -0700

    RenderGraph2: compile pipelines and setup draw targets in pass node

[33mcommit 5780bf40259df92dcbde6485ec23bf4c6c6c5246[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Apr 23 20:53:38 2020 -0700

    RenderGraph2: Finish graph executor, fix window textures

[33mcommit 8326a1a3c2167d66547ef3704d4e66ee97bb1a23[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Apr 23 17:24:41 2020 -0700

    RenderGraph2: Stager, (semi-functional) Executor, PassNode, and tests.
    
    Rendering doesn't quite work yet, but we're close!

[33mcommit b6711d8eaea6ac79ee4e28f40b577dc6c7e75f46[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Apr 21 11:43:35 2020 -0700

    use swap chain node

[33mcommit 5fec31b63cd191ebc019af3ebb43a7373118b433[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Apr 21 10:30:01 2020 -0700

    render graph 2: schedulers + window nodes

[33mcommit 210a50e78184325d5fb3bba10a96af17c345f938[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Apr 20 14:29:21 2020 -0700

    Initial RenderGraph2. Port CameraResourceProvider

[33mcommit 3c83e34cc1153ed4b6a36ca9cf96dab4af6c2a31[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Apr 19 22:31:14 2020 -0700

    re-enable opt=3 for debug

[33mcommit 1143f16743f6a3ebc04d6d5ecf5f41c7e783a634[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Apr 19 19:29:33 2020 -0700

    model loading works!

[33mcommit 75ab0e21e54d780659ccb6dfa8ef2e2ef9185c9e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Apr 19 19:11:12 2020 -0700

    upgrade legion

[33mcommit 7fe22888141be8b63b15788f8d9282d40ff52189[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Apr 19 19:06:41 2020 -0700

    pipeline specialization (support different primitive topologies within the same pipeline)

[33mcommit 86d0ae6470a25f3ce62d9f7e1d0bec4d69f9bafc[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Apr 19 15:39:24 2020 -0700

    Fix mesh byte generation

[33mcommit d8b183de026aef5ee873971232d88db937a9cbeb[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Apr 19 13:23:19 2020 -0700

    use cargo workspace

[33mcommit e59693fe679dc5ab0518b3bef5839683c6fbf1af[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Apr 19 12:13:04 2020 -0700

    exit events and systems

[33mcommit 649ffebb7ffcc3d373d4f02e3683d2d5f043f047[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Apr 19 10:08:47 2020 -0700

    New Mesh implementation (adapts to arbitrary vertex descriptors). Initial gltf model loading.

[33mcommit 2aaf23b9fd62244a537cf3b5c1901b3b4bb9d3e5[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Apr 16 12:13:05 2020 -0700

    remove unused resources variable

[33mcommit 2eda84a0b8936be1dd810928414a812379c4fc42[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Apr 16 11:16:22 2020 -0700

    Add latest and earliest methods to events and begin camera system port

[33mcommit dcd71d1b72474e5cdc7f60e9a3fdc94b55fc7d49[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Apr 15 19:40:24 2020 -0700

    Rework AppBuilder system interfaces. Remove setup() in favor of startup_system

[33mcommit b5ec8e78d89be17f2d347ba76d969901223e33ea[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Apr 15 17:46:22 2020 -0700

    begin migrating to render resource providers to systems

[33mcommit 71460baa3d01ac2006b504c10a72985fc87df51f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Apr 15 15:55:00 2020 -0700

    cargo fmt

[33mcommit c213865cbf8569411241dbcfc263ee9d6a571b1c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Apr 15 15:52:29 2020 -0700

    support downcasting RenderResourceContext ... this should be a part of std!

[33mcommit 1f5f432e6c110b00ce404af878261cabdea7aebf[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Apr 15 12:48:04 2020 -0700

    merge asset resources / support arbitrary asset handles / make them RwLocked

[33mcommit bcbddf87192f7e3cd159b37c85c9da019b637857[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Apr 15 12:01:07 2020 -0700

    tweaks

[33mcommit 07cf7897b167c448d1ae82a9989f1bd72eb55fac[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Apr 15 11:58:33 2020 -0700

    add additional context to wgpu resource threading docs

[33mcommit 318b7dee1a20eeb8555d7cadb5dbe5d7bc53f07e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Apr 15 11:42:56 2020 -0700

    RwLock WgpuResources works now!

[33mcommit b53f198b992a9698c95226a19f374f3f6d165c26[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Apr 14 20:17:22 2020 -0700

    partially working rwlock implementation (blocked on lifetime issues)

[33mcommit 537d75bbcec2e67d386627cc65eae485f80ce379[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Apr 14 11:04:25 2020 -0700

    small notes

[33mcommit a99b5600bc9653baf3ea018f979ba4fd1cb41c1b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Apr 13 13:04:31 2020 -0700

    Refactor render passes

[33mcommit 837e1dc13941dea8f55f8ef5ae6c2b25d71c4b48[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Apr 12 14:47:41 2020 -0700

    Port remaining functionality to RenderContext and remove Renderer

[33mcommit a8f5402ff1ddd8d1503f8b31cf941b64d9cc73af[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Apr 12 11:45:44 2020 -0700

    make DrawTarget setup world read only. add render_resource_sets_system

[33mcommit 1d44b4034f808fd9f21131d4d16336e2b8c3ae81[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Apr 12 00:54:51 2020 -0700

    asset handle batcher system

[33mcommit 32bce28b0062f4622ad9129a653fcbaea24246aa[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Apr 12 00:05:47 2020 -0700

    resource update is now parallel

[33mcommit 77a6619bf481fa6134db14829e0efa5c808db924[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Apr 11 20:32:25 2020 -0700

    update ResourceProvider::update to actually use read-only world

[33mcommit b9f4c0a53b99d1ce1ed852c41048ae6ef21117d2[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Apr 11 20:27:46 2020 -0700

    move shader defs updates to their own systems. make UniformResourceProvider::update World read-only

[33mcommit 394b7ce9405543f1823d0acbc416a273f7314d30[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Apr 11 18:40:30 2020 -0700

    RenderContext, RenderResourceContext and wgpu implementations

[33mcommit 08abef1c752a318164a88d86c2822a3ce0baceec[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Apr 11 13:29:29 2020 -0700

    start making ResourceProvider::update world read-only

[33mcommit 78d19580905e4de41c013d9c0a2b1555933aa360[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Apr 10 18:25:10 2020 -0700

    add some stage docs (and POST_UPDATE stage)

[33mcommit 4b114c9dd1879539f5d65275cf3080071ba050b7[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Apr 10 13:10:46 2020 -0700

    prepare for parallel resource creation

[33mcommit de2fb1fca2ad32fdafb0c1fec9a2d626b676faad[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Apr 10 01:39:38 2020 -0700

    use RenderContext in ResourceProviders. make RenderContext contain a read-only view of global resources. Merge RenderContext changes back into global resources.

[33mcommit a7605b2d7a2f5c358d9ebc00ec5d3c9bf8b7c473[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Apr 9 15:03:54 2020 -0700

    initial multi-threaded resource creation using WgpuRenderContext

[33mcommit d8c748644c1ae42737566c6dfef30432324e4353[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Apr 9 12:35:15 2020 -0700

    "Arc" device

[33mcommit d9b2324f08e06036d9def2135d649396ca988c4f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Apr 7 19:54:46 2020 -0700

    rename update_uniform_handles_info

[33mcommit 7b48960d424940569f99528610b5c2483ab98f24[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Apr 7 19:36:57 2020 -0700

    upgrade to wgpu 0.5.0

[33mcommit 89d72ae0444754325e0f3733be9983f9fa8554aa[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Apr 7 18:04:22 2020 -0700

    default assets

[33mcommit f2b2065fbe602825f2dfba3cfb49bd151cb52995[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Apr 7 13:29:11 2020 -0700

    make CommandBufferBuilder non-consuming

[33mcommit 2565a692300993c8bb78673713479c5802809cbe[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Apr 7 13:25:01 2020 -0700

    make WorldBuilder non-consuming

[33mcommit 45e28ef32bca00d949f120d9649fe51e7083f1aa[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Apr 6 22:11:28 2020 -0700

    add modular design as a goal

[33mcommit 8c4815b56e5ff76dc2b5a66aa6c37096ff6986d8[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Apr 6 21:44:32 2020 -0700

    rename WgpuPlugin

[33mcommit bd97da3a513ca9e05477aa063d257be13297d7fd[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Apr 6 21:32:19 2020 -0700

    Add comments to examples and fix example_showcase script timing

[33mcommit 67b9d182ede66274d3d60140af1307f5220017e4[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Apr 6 21:04:09 2020 -0700

    expand lib docs a little bit

[33mcommit 9aae341a2c946bc855a99bbe79d0e13b75248a00[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Apr 6 17:56:17 2020 -0700

    add bevy logo to api docs

[33mcommit 574bc93e4f11c1cc23d49da2138387699916f399[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Apr 6 17:39:06 2020 -0700

    expand top level crate docs slightly and add hello world example

[33mcommit ecf89a5ba7bdf1bfa74e9819b3e3d8921e6a164d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Apr 6 17:21:15 2020 -0700

    Add some top level bevy crate docs

[33mcommit 0af36cfaedee1165630e76d0a30242e0f67839d5[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Apr 6 17:03:21 2020 -0700

    make every bevy dependency optional in bevy crate

[33mcommit b5d78477cf381d13b842da1221f5ca4a873728d2[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Apr 6 16:15:59 2020 -0700

    cargo fmt

[33mcommit 1d5388c4f09be27a4ecf819696321b73db357124[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Apr 6 16:13:07 2020 -0700

    cleanup cargo.tomls

[33mcommit b1c583f500ec39940a9c5a5c44c8a8ec17788148[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Apr 6 16:09:58 2020 -0700

    crate-ify serialization. crate-ification is now complete!

[33mcommit 398c89d30773e1148cb6a9b8ea1de77903d78c61[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Apr 6 15:54:17 2020 -0700

    use "min_specialization" feature

[33mcommit ab8648721530c816fd9ba8f50f08029f14ef7364[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Apr 6 15:43:38 2020 -0700

    remove release customization and embrace dev as the default

[33mcommit b19e3004b873398cba5dc2afe4c5144760950237[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Apr 6 14:20:53 2020 -0700

    rework marco modules, crate-ify ui

[33mcommit 016bf2152c348759a119890322b590e6849808c6[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Apr 6 02:00:00 2020 -0700

    rename default_stage to stage

[33mcommit 683a70d8e7f4c59ecf03e23779fa7a54cfae6cbe[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Apr 6 01:57:00 2020 -0700

    add SchedulePlans

[33mcommit 1471cc84c5cd7b759d3f08ade5161c8f1c812afd[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Apr 6 00:12:54 2020 -0700

    crate-ify bevy_diagnostic

[33mcommit 819c7708f9cd4ac3df87c58281ef737f31f32bd1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Apr 5 20:23:39 2020 -0700

    remove env_logger from App::build()

[33mcommit 686e1422db9bbaa0e48bd59285ca73389b5f26f2[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Apr 5 20:19:02 2020 -0700

    Crate-ify (almost) everything

[33mcommit 0202dcb009055d028bd30bcc3176511200b57e4f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Apr 5 14:12:14 2020 -0700

    Use type_name as plugin name default

[33mcommit 7bb889bada9e1415dface341e821c6e19c3dd88e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Apr 5 13:22:27 2020 -0700

    refactor renderer to avoid resource access collisions. this fixes the legion errors in debug builds.
    
    NOTE: these "random resource access" issues are a pretty compelling reason to remove Resources from the render api

[33mcommit 6d53100ff3f0885b1be5fcf55afe4939b25ca13c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Apr 5 00:32:53 2020 -0700

    mouse motion

[33mcommit ec65cfef4ab0f8d8b175e04a08adfd0c0b8d5695[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Apr 4 23:42:39 2020 -0700

    Add mouse input

[33mcommit 5b836987385a7cf2bfe0bf44b688a7c9c11dae4d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Apr 4 21:02:31 2020 -0700

    add move roadmap, readme, and faq to the bevy website

[33mcommit f089df3a494fd2008e16dcd09eae7ab750b4af07[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Apr 4 14:59:49 2020 -0700

    keyboard input events

[33mcommit 4c3af427e98ca91093e7e11b8bee248b61fe5896[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Apr 4 13:00:52 2020 -0700

    dont force static lifetime on appplugin string

[33mcommit ef8c85f0c740012b40e7d0dc9057f9e5c052c591[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Apr 4 12:43:16 2020 -0700

    cargo fmt

[33mcommit 5cbf606ef779e1f8bb1349075fc69ecac37ab356[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Apr 4 12:40:32 2020 -0700

    make window its own plugin and rename add_defaults to add_default_plugins

[33mcommit f6f8ba2cb62839c0c125c4031788d474efbd8620[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Mar 31 18:04:54 2020 -0700

    Document and test Events. Rename EventHandle to EventReader. Fix buffer indexing. Customizable bevy path for proc macros

[33mcommit 8a759d3b18b84a2b9220a971ea1c272821852778[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 30 22:23:48 2020 -0700

    begin work on supporting multiple swap chains

[33mcommit bfa8afbc9706a8e23616188b1618cad4a336d065[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 30 19:34:48 2020 -0700

    some cleanup wgpu_renderer cleanup

[33mcommit 17d4bec08c15e4463ea9b4a8bc3eb9eb919aa0a0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 30 19:21:12 2020 -0700

    rework surface and swap chain creation to support arbitrary number of surfaces/windows

[33mcommit 70b4100132363be56fa6ea4177a42409d8b7878e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 30 15:51:41 2020 -0700

    using consistent system naming conventions

[33mcommit dcb292e00a8e7a5c36cc554bfe7fb3373cf59e6b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 30 15:44:29 2020 -0700

    quad uses size. polish examples

[33mcommit 29bbc05eae5cd23e92b8632388f70147cb2a2cdb[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 30 14:53:32 2020 -0700

    add support for multiple windows

[33mcommit 7c121563db8003e9245d76cf23f768ea7f0847a2[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 30 11:52:33 2020 -0700

    headless apps

[33mcommit c7ee4bc133fdb16bc2f40c07f805cb5286eb5860[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 30 00:56:15 2020 -0700

    upgrade wgpu

[33mcommit 13da707aeef0084a9194f2fc1202648581fb7281[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 29 23:51:13 2020 -0700

    add event example

[33mcommit 5eb789ff7756228f059a1478565645ab68ba8e00[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 29 22:44:38 2020 -0700

    Add Events. add WindowResize event to WgpuRenderer. remove Renderer from App

[33mcommit 4435d536e8fdaee8ecc89525f38e9d323d0674a4[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 29 01:52:06 2020 -0700

    change clear color

[33mcommit f814695b001b09c4892af8df2d79d1c0331bdc18[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 29 01:49:35 2020 -0700

    everything is a plugin!

[33mcommit d8e7a3dcca473bb53d178063c5d01dcea5a1a7d3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 29 01:34:08 2020 -0700

    fix material shader example

[33mcommit 3d261f72de015563bcfc21e74c5d7d4e99c8e153[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 29 01:15:47 2020 -0700

    move plugin to app module

[33mcommit e2393de97c491389eef5f869731140e32e962e41[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 29 01:04:27 2020 -0700

    move plugin to core

[33mcommit 45d4f25a931d10803537e0b065e00e0b1edb1bb1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 29 00:53:47 2020 -0700

    WinitPlugin

[33mcommit ec84a33b438a6e7d06b677ba2a27daec67acad6b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Mar 28 23:18:33 2020 -0700

    everything is a plugin
    
    ... well almost everything

[33mcommit 5db5f6de9c2b79ecff2068f526e7daa2e707c662[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Mar 28 20:33:11 2020 -0700

    batched draw target works! embrace the "log" crate

[33mcommit 2d0bff97a8b22ec5bc1f12634a3573f1d241fdce[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Mar 28 14:51:24 2020 -0700

    Handle::from_untyped

[33mcommit ed9eb88835b4d5079c8ba8b7d4344cdf3558d327[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Mar 28 13:56:29 2020 -0700

    only create wgpu swap chain when surface is ready

[33mcommit 26ff878469992ff05a252d2882e3f876c5397c88[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Mar 28 13:55:55 2020 -0700

    add default diagnostics wait time

[33mcommit 38a808db84844cdbd6728e2c14c6a6eca145ce60[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Mar 28 13:42:16 2020 -0700

    change diagnostics formatting

[33mcommit 78de2fe2a136dbd9ae839861f3fc7c36e5d87d90[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Mar 27 22:41:45 2020 -0700

    fix dynamic uniforms and unit tests

[33mcommit 92c421b5e1ecb31fdb79aee302d8bdb63e115e3c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Mar 27 18:00:21 2020 -0700

    add empty_defaults example

[33mcommit a7704fda31815747851d26d341037509de2e0c30[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Mar 27 17:43:03 2020 -0700

    make winit optional and vsync configurable

[33mcommit 93bf728475e82dadc04225d7ced89171306a9801[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Mar 27 15:03:47 2020 -0700

    new Diagnostics system

[33mcommit 0073f4a58b45e1d7e5b9cf187381a432a2dd9393[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Mar 26 23:40:25 2020 -0700

    refactor pipeline compilation into PipelineCompiler

[33mcommit d1db46ef54a13da78732f3b3155067b8ab694e48[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Mar 26 01:57:36 2020 -0700

    begin bind group rework
    
    global and local bind groups are set up the same way (RenderResourceAssignments).  bind groups are reused whenever possible

[33mcommit 0316efc909ccc72b4c31242d23fbeec49cc63706[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Mar 25 21:27:32 2020 -0700

    add core Window resource

[33mcommit c2545fd1618b9eeee10eb1e166730c2e79a9b18c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Mar 25 19:20:52 2020 -0700

    RenderResourceSetId

[33mcommit aec817c533c12138764deaa51d46665f99b8f998[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Mar 25 18:17:48 2020 -0700

    Rename BindGroup to BindGroupDescriptor. Add BindGroupDescriptorId

[33mcommit 47ef339e7b7e6fd4d059550aaf781071efebe41a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Mar 25 17:40:14 2020 -0700

    remove BindGroupInfo

[33mcommit 64cd9244131015f0954f3ec227fd8d78caf6b047[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Mar 25 17:31:59 2020 -0700

    refactor render resource assignments

[33mcommit e523dc92d84bf08887b1dfad729c1b76f14ce583[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Mar 25 13:24:17 2020 -0700

    shader_def: use to_upper instead of to_screaming_snake

[33mcommit 4d17763c8556a2cbb32fd0a11a520da4b4b333ab[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Mar 24 19:17:41 2020 -0700

    finish new uniform resource provider staging buffer. dynamic uniforms work again. both dynamic and non-dynamic uniforms perform better than the previous implementation.

[33mcommit c71b886165d647caeef635d59f753950fed9eea9[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Mar 24 13:50:40 2020 -0700

    begin rewrite of UniformResourceProvider (no instancing or dynamic uniform support yet)

[33mcommit 55745b0812ea13d86397bc58e7aa4028be0a2677[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 22 18:22:35 2020 -0700

    renderable owns render resource assignments. refactor shader assignment logic. renderers are responsible for intializing during updates.

[33mcommit 55130bbe1c768db2d91fcf07bda0e5ca7f18e18c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 22 13:14:34 2020 -0700

    remove field_infos from UniformInfoIter

[33mcommit 08cd5964a4416c503ce58126fe0c28eec3c51d1b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 22 13:08:20 2020 -0700

    get_field_info is now static

[33mcommit 0e18c4b70b58f61695bc0cd4ae5adc63eae550a0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 22 13:05:50 2020 -0700

    fix render graph lifetimes

[33mcommit a0fa4d2d79b9e87a4a92748f8fbbd6c25ee3e315[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 22 03:06:47 2020 -0700

    cargo fmt

[33mcommit eaff311a805a5f1db88f10d1b570b0c36f55ed5e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 22 03:06:08 2020 -0700

    simplify render graph builder interface

[33mcommit c6d7402318cdd28ab33b5efa4cf3d2627b271f8b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 22 01:33:53 2020 -0700

    add bevy_derive to prelude

[33mcommit 5d893a83f2a6fd585c98f25ea235b32b354deb06[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 22 01:16:29 2020 -0700

    remove unneeded light rotation

[33mcommit 8c201dcbc5117bc04c0d635cc65677f13a126031[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 22 01:13:45 2020 -0700

    fix LocalToWorld vertex buffer attribute names

[33mcommit cfc7aae41393b669795220105cefb75640be3bdc[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 22 01:06:38 2020 -0700

    better batch iteration (no allocations + abstracted out)

[33mcommit c9aec26f88b601b0f44549dbeec90b70f0c92c49[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Mar 21 22:35:57 2020 -0700

    CommandBufferBuilder and setup systems

[33mcommit d2e160d44af1ba0a19fbfd8215a14f9a76b33f8f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Mar 21 21:55:33 2020 -0700

    refactor cameras. add defaults

[33mcommit fb496a6172b70d785c8b6b6548d586b2a32de862[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Mar 21 21:10:58 2020 -0700

    validate VertexBufferDescriptors and fill in blanks when possible

[33mcommit a4eed1880086f8bcbf0fb67c32e20bbfc9e527de[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Mar 21 19:57:59 2020 -0700

    RenderGraph is now a Resource. RenderGraph owns vertex buffer descriptors. Assorted cleanup

[33mcommit 7660b8bf3f47269774f8fd8d7c7460d7a7f1733f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Mar 21 18:12:30 2020 -0700

    batched resource creation, vertex buffer macro

[33mcommit 8f4296c4ff43421af1ba1f93079137fb445d67ec[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Mar 20 20:19:55 2020 -0700

    lighten up

[33mcommit a55053cf1449a1752c6e9ecf3abb839718aae8ed[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Mar 20 19:32:59 2020 -0700

    Refactor / cleanup buffer metadata. Fix dynamic uniforms

[33mcommit ae0d5abf457cda9ad90341b733fac3c349f3e87b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Mar 20 17:49:29 2020 -0700

    use RenderResourceAssignments in place of Entity

[33mcommit f90205a40d3485046ad527f01aadc72dc6c60b60[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Mar 20 17:15:56 2020 -0700

    RenderResourceAssignmentsProvider / unique ids

[33mcommit 71d091e10cba2d2fb56db3d971317dc4eb2d8351[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Mar 20 16:58:21 2020 -0700

    entities with renderable.is_instanced are now removed from normal rendering

[33mcommit cbba656f16d785a99234fbb244e309567a97a8f7[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Mar 20 16:35:19 2020 -0700

    replace appbuilder::new() with app::build()

[33mcommit 43e69484ba7d691ddba63d805a3993694e755fbe[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Mar 20 14:17:50 2020 -0700

    migrate entity render resources to RenderResourceAssignments

[33mcommit 9881f647154a009531058c19a1f20a0d9b12fb3d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Mar 20 12:47:33 2020 -0700

    cargo fmt

[33mcommit faaf307edbdd4e75266586d09f5d93bff063aeed[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Mar 20 11:43:14 2020 -0700

    smaller bevy logo

[33mcommit 51c4f7af273300231951109fb0ced30dd9fab791[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Mar 20 01:05:37 2020 -0700

    more logo tweaks

[33mcommit 7e6fa64f1b1196cd082d9e461dee344439b8a90f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Mar 20 00:58:13 2020 -0700

    add variants

[33mcommit f37f4caa72ca07d8818197e5a6a0243c7c8276ac[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Mar 20 00:33:22 2020 -0700

    update logos

[33mcommit ae72c2cdb031ac6cf0b8bf851839e2ec82ca5b9a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Mar 19 17:53:53 2020 -0700

    Refactor and integrate AssetBatcher. Add AssignedBatchesDrawTarget shim

[33mcommit 99983b40a59e1f0a7a56142a643f67ec71200d56[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Mar 19 13:21:55 2020 -0700

    AssetBatcher

[33mcommit 1e1980bf4deba651ef3f589592308cf172116993[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Mar 18 16:06:33 2020 -0700

    support tags in entity archetypes

[33mcommit 04590de678232bc0b145b7d12895677cf36333b9[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Mar 17 22:02:01 2020 -0700

    separate albedo color and make it required
    
    I worked really hard to make ColorSource work, but sadly we need color to be instanceable and making it optional would add too much complexity. Maybe at some point in the future we can add it back. On the plus side, albedo color now modulates the albedo texture

[33mcommit ffa0bbe9ee3e6da7e1933b3f8734e7fe87645490[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Mar 17 21:56:27 2020 -0700

    example showcase script (useful for testing for regressions)

[33mcommit d9663d740b3352c50c069ce3f240084e6efab851[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Mar 17 18:25:27 2020 -0700

    AsUniforms provide VertexBufferDescriptor. Initial macro work

[33mcommit 28fb0fdfc8f922cc3b3ee190feaaf07020ee873d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Mar 17 13:09:51 2020 -0700

    Reflect Vertex Buffer Attributes
    
    Must follow VertexBufferDescriptorName_AttributeName format
    
    I_VertexBufferDescriptorName_AttributeName indicates that an attribute is instanced
    
    Currently all attributes must be defined in shaders or offsets will be incorrect.

[33mcommit 62d1e710a5fe979da3b61ca7d80812fbb460ee08[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 16 12:15:51 2020 -0700

    rename vertex_buffer to instanceable

[33mcommit 0ba48ed83abbabc062b87c1de85ffb1c23066b4a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 16 01:49:31 2020 -0700

    use dynamic uniforms by default for Handle<T>

[33mcommit 5d99f3a7e8c056d997d541d00df2f4b26824867f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 16 00:45:28 2020 -0700

    Add Handle<T> support to uniform resource provider. Use Handle<StandardMaterial> instead of StandardMaterial

[33mcommit c1e66089ccc6f8ebcd47bec414c423ac748d06ad[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 15 12:35:02 2020 -0700

    add vertex buffer flag to uniform attributes

[33mcommit 1332630fa37b46ffbedb2e33e0b5adf07ac1a456[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 15 01:12:56 2020 -0700

    tweaks

[33mcommit 4d92ef0119edf4f2391f35a0fb7bad92d3bc6b51[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Mar 14 18:32:33 2020 -0700

    zero copy uniform bytes

[33mcommit 63f40589e3c9d33229b19a472bf8f600e2153438[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Mar 14 12:58:22 2020 -0700

    begin instancing work

[33mcommit 56e79d522585243c3e43eae568ec37f74a6022ee[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Mar 14 12:56:37 2020 -0700

    reorganize texture and mesh

[33mcommit 0c3e83452d51812e2b7ab73682cb1a3135496716[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Mar 11 18:19:02 2020 -0700

    remove empty buffer warning because its too noisey

[33mcommit ad654a3c255dac318653e0dc1dd14ca1ee59c1dd[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Mar 11 01:44:46 2020 -0700

    add fps printer system to diagnostics mod

[33mcommit 41e15a2d90ede7d9094e3e618fa29aac42b64a35[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Mar 10 22:20:49 2020 -0700

    make wgpu renderer optional

[33mcommit 64b897016c09f01afb7fcf29e504b9fb7438c5ba[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Mar 10 21:57:57 2020 -0700

    swap out remaining wgpu references

[33mcommit 7342f9617491fca45fbc1182d22f414c6aab0de2[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Mar 10 02:46:27 2020 -0700

    named pipelines (makes custom shaders easier)

[33mcommit fb4752532b85e17b5ce6799cc193421d592d291c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Mar 10 02:16:01 2020 -0700

    rename pipelinebuilder.build() to finish()

[33mcommit cfaee577e76d78830c24b54f7fdce6e2609a6597[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Mar 10 02:10:44 2020 -0700

    move bind type

[33mcommit d08b243317e7a896a636f147a028310a79cc63df[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Mar 10 01:52:28 2020 -0700

    cargo fmt

[33mcommit 4eaf730b8a860b3f77308a6878ca02d55c8479fd[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Mar 10 01:51:59 2020 -0700

    add default draw target impl

[33mcommit 1ac33b1477c2e61b571fe35d27b93581599a2010[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Mar 10 01:51:06 2020 -0700

    add default resource provider impls

[33mcommit aca17f15b72f409ee0543e78b7d771e0cfc74955[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Mar 10 00:53:07 2020 -0700

    start moving away from wgpu types

[33mcommit 807929f9e39548afafdc9850d0ccca5aedcf8b00[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 9 23:50:17 2020 -0700

    fix plugin example

[33mcommit 99cdf56e7d59d4f89e995a3d163cbf2cd5e7a6fa[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 9 23:43:40 2020 -0700

    add Color type

[33mcommit aa09e93980b086536c58416ff6f80b6805f3e78f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 9 23:08:09 2020 -0700

    reorganize render modules

[33mcommit ccb240c4c4f4609a014a48e7f8e3d982f9ec63af[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 9 14:57:46 2020 -0700

    upgrade dependencies

[33mcommit cda657b401b84ab2eff204db1fcc4c6d1455b0d7[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 9 14:55:07 2020 -0700

    upgrade winit

[33mcommit 440d883322432aefba8197529c7f78573ded0852[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 9 12:07:16 2020 -0700

    use static dispatch in add_resource_provider

[33mcommit 7d3f271cfaf148f9d3ce97b188d84348058a3e2f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 9 11:56:45 2020 -0700

    fix resources name

[33mcommit 29df5c5e5fed62b1a7016d8b6a222f83c0325830[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 9 03:05:53 2020 -0700

    logo: add divider "cuts"

[33mcommit fc5d8061d5d4b628d475cdc4398c07af7ca42816[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 9 02:08:44 2020 -0700

    cargo fmt

[33mcommit e4550aaab29466905b5d84d9080d3ae73eea77e3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 9 02:08:27 2020 -0700

    tweak add_children

[33mcommit 8eec5653b621c637a512ec8405818198e884f50f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 9 02:02:17 2020 -0700

    rename add_archetype to add_entity

[33mcommit a790332505195def0b238c5a128a77e962456111[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 9 02:00:59 2020 -0700

    better parenting ergonomics in world builder

[33mcommit 91a6c0d9dbf19bcb140f8dddf7515bbc9f1c9be0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 9 01:40:04 2020 -0700

    remove "asset scopes" now that resources are separate from world

[33mcommit f6dd6a5ca9506aff9ff135d1118f9b75c037a986[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 9 01:31:15 2020 -0700

    fix parenting example, add missing transform components, add parenting to world builder

[33mcommit 6ef1c099ff7c63c978d84b7e37a025bf3d8707f0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 9 00:46:38 2020 -0700

    upgrade bevy_legion / re-apply fork

[33mcommit 9355a539803d1bfe0a44f3da27ae529a3aca3468[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 8 23:19:07 2020 -0700

    upgrade legion (breaks plugins)

[33mcommit 6055bf677b0577ef2585dbff5b724b95b6bf6f90[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 8 20:31:40 2020 -0700

    update wgpu-rs

[33mcommit 9d2909b43e04eff7bf47a1c091655de1885aa513[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 8 20:29:21 2020 -0700

    cleanup

[33mcommit c5f781b4e575f65ec9baa329167a6ad5a7621f36[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 8 20:27:07 2020 -0700

    fix ui draw target

[33mcommit e0a1a83bc98199753539f6e8d0ff8206815eac74[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 8 20:06:59 2020 -0700

    create entities as a separate step before starting a render pass

[33mcommit cadea8deb0e5a9ebbe6f13b4b57b720c72f812f2[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 8 19:26:50 2020 -0700

    Break up wgpu renderer

[33mcommit 85c880e7546ea93eda26c8ff7b93b3844d826ae0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Mar 5 00:44:53 2020 -0800

    upgrade wgpu. work around new wgpu lifetimes (this was painful)

[33mcommit 8beed27c0e361152dd36a2bb22a4cd141fe48222[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 2 22:36:11 2020 -0800

    wgpu resources are separated

[33mcommit b64f51d10be8e19b267cf2a2945e60c0866c5d0e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 2 17:53:39 2020 -0800

    try breaking out wgpu resources

[33mcommit c3130541adff82a29790fa1d1295c904dccc5c99[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 2 23:55:42 2020 -0800

    fix logo spacing

[33mcommit baac7ff2965bb1124ac6084a6fcb74e8445b1673[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 2 20:33:46 2020 -0800

    add png image loading and enable transparency

[33mcommit 9d71d0d3fc94cc860adff881d47bd05a279817be[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 2 08:33:52 2020 -0800

    clean up examples

[33mcommit 22be0b33663df0714a6b762822acde69bc40a093[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 2 08:32:15 2020 -0800

    reset uniform count on each update (oops)

[33mcommit ca563ea1b3111411d33df3f5dd65f8f2b187195e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Mar 2 00:19:28 2020 -0800

    fix uniform providers with different field sets

[33mcommit 5154320f70858e1a86a5ff8c5329e640590cc95f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 1 17:48:37 2020 -0800

    textures work!

[33mcommit 8d3026899d13bad26f743f8148c9f0d7601b8a4b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Mar 1 10:22:58 2020 -0800

    more texture work

[33mcommit 9e5f4aeefc11908ca971e60a4d4777003a5fb4a2[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Feb 23 23:50:44 2020 -0800

    implement Copy for Handle

[33mcommit 1a4bd984343917af32e793784088effa9ee8b217[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Feb 23 23:41:48 2020 -0800

    more texture work

[33mcommit 79c900bc2d7cff0c616a7c5d85e090b45fd51afe[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Feb 23 21:13:03 2020 -0800

    RenderResource ids

[33mcommit f84e71d051da464e1a3f0a37f6b84a53d9910dc6[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Feb 22 15:02:01 2020 -0800

    cargo fmt

[33mcommit 7eb99f3eb5cd7b6bb11fd28007f6d3021307d366[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Feb 22 15:01:11 2020 -0800

    finish uniform names refactor

[33mcommit ba1f48f7438872d6e16360ecc4cdec7fda8bc5c0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Feb 22 12:42:40 2020 -0800

    start working out field bind type info

[33mcommit 65284fcacb1fb232475664c198493688dea274a7[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Feb 21 00:15:24 2020 -0800

    more work on texture bindings

[33mcommit fb61204d537023032f525155d6727c5adcffa246[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Feb 20 21:52:45 2020 -0800

    start working out how AsUNiforms works with textures

[33mcommit 4eaae0f815557c9a271bae64fc6d8dea39ae40b1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Feb 19 00:24:59 2020 -0800

    add texture and sampler shader reflection

[33mcommit 2f1a0cb4a42dca59ced20316e224d20aa73e493a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Feb 18 22:59:33 2020 -0800

    macros are now fully screaming snake

[33mcommit 8a10c06ad59c0b224084354ced09373e27f82088[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Feb 18 20:26:02 2020 -0800

    add texture to frag shader. fix weird macro name collision bug

[33mcommit a1b9e3a7a5ab7bf5e1ea479efea518ce3c810569[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Feb 18 19:08:17 2020 -0800

    add shader_def to albedo ColorSource and auto import trait in macro

[33mcommit b809b225898bc8debfe22a7da522b1e3922f2710[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Feb 18 09:16:34 2020 -0800

    add ColorSource and remove test macro from StandardMaterial

[33mcommit f820e4207c9be1c5881174c1e94f075dc1541ea9[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Feb 18 09:06:24 2020 -0800

    add macro example to custom_shader

[33mcommit e0e0e41c33e2ee8f795edb7bdf5d47d4d20e64f1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Feb 17 20:43:50 2020 -0800

    Add "standard config" to pipeline builder

[33mcommit ad7acb111ab31dfb3e02b8e8888503648aa4daa1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Feb 17 20:23:00 2020 -0800

    fix custom_shader example

[33mcommit 6cf981c6107d46d8e7e31ecbd97177ce23555707[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Feb 17 19:53:48 2020 -0800

    use full path in macro references

[33mcommit c96183cf1cd84b05ae528835c13d589ceec718ac[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Feb 17 19:33:41 2020 -0800

    update readme

[33mcommit cb251a6da265db0e4587d70de9094290adc19c21[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Feb 17 19:31:33 2020 -0800

    update readme

[33mcommit a76b40bbb4e191eef8ac28469e17073db096fd49[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Feb 17 19:15:28 2020 -0800

    Fix pipeline name

[33mcommit 57f798c0bd6450bf34b574563227fbddcf491a2f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Feb 17 19:06:12 2020 -0800

    cleanup

[33mcommit 6f376b5f3fff0205837269adc75cd80681a08f86[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Feb 17 18:36:31 2020 -0800

    remove old render graph

[33mcommit acebeb924c8bb6a350704eddfc3c2ce9391fa313[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Feb 17 16:33:46 2020 -0800

    shader reflection for dynamic uniforms

[33mcommit 2fe9710c04024ff4bca3c4e25aa0577ef2f2f385[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Feb 17 14:12:10 2020 -0800

    Shader reflection works for everything but dynamic uniforms

[33mcommit c29a6f7dd22e33ccd41428aff3b70afcc217f767[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Feb 16 20:35:44 2020 -0800

    more shader reflection

[33mcommit 8698dcea25149ea6300755a160fbf8cca30f6316[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Feb 16 12:12:55 2020 -0800

    start work on shader reflection

[33mcommit dbd634b8d8ea466d659df1b0e86d61ff1111d8cf[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Feb 16 01:02:05 2020 -0800

    upgrade winit

[33mcommit decf5d1462bb3835a6c5e2e20500e49b1d6676db[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Feb 15 23:27:23 2020 -0800

    add rspirv

[33mcommit c20894583345d3a09c1142589132fa854bab1892[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Feb 15 22:17:24 2020 -0800

    add assigned meshes render target
    dynamic compiling w/ entity-specifc macros works!

[33mcommit 56e5414b634387b9de4572fdf599c7495706edb2[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Feb 15 19:00:30 2020 -0800

    only update pipelines when macros change. better handle debug print

[33mcommit 26588d0c412534da77e8adc8105f047c7ab6c541[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Feb 15 17:08:46 2020 -0800

    make pipelines cloneable and draw_target a part of render_graph

[33mcommit 4de039eb71258b3a7dcff5ac0be7af1ca7e742e4[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Feb 15 16:28:17 2020 -0800

    Make PipelineDescriptor an Asset that references Handle<Shader>

[33mcommit 478d4752198c4780d151240a7d3cc0f45617ab0d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Feb 15 13:58:40 2020 -0800

    more shader assignment work

[33mcommit e38d3be0e3bda9184e094994f40557ec05a491df[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Feb 13 09:17:18 2020 -0800

    move wgpu shader code out of Shader

[33mcommit 7759fdefac18573aadc46abded2cb1e6840a1ce1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Feb 12 17:58:58 2020 -0800

    collect uniform shader_defs in preparation for on-demand shader compiling

[33mcommit edf57c0dd384ee20a2e96098c542ac4c60d1089c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Feb 11 19:39:10 2020 -0800

    rename entitybuilder to worldbuilder

[33mcommit 649e1b113f4263893807fe4566f716fe6a805596[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Feb 11 19:37:48 2020 -0800

    add world.insert passthrough to entitybuilder

[33mcommit cd6ccc45b178e54c9c96e14223cd669d5a6da45a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Feb 11 19:10:38 2020 -0800

    resolve warnings

[33mcommit f24a274a2af77e1341ba87c195fa493106e282d4[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Feb 11 19:09:05 2020 -0800

    add renderable to render related queries

[33mcommit d58c5e7f5c14c63d195018fc8e2672859b087529[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Feb 11 18:54:04 2020 -0800

    tweak simple new

[33mcommit 7cdc2351ba9fc248196c1b02d35b66574a513d1c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Feb 11 09:31:49 2020 -0800

    add default to MeshEntity

[33mcommit 7a1036fa0bebe923f77ed2572dcb054587be7bf5[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Feb 10 22:13:05 2020 -0800

    add quick profiling doc

[33mcommit eedec80e890e7a53d2fe7c6a44c331e2515ce17d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Feb 10 19:26:04 2020 -0800

    add shader def fields / proc macro

[33mcommit 4a12d16307c850990e78f0b5d44656cb1d43936b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Feb 9 21:41:51 2020 -0800

    add uniform field attribute

[33mcommit c1bac8869eb176b3449b613db1e6e3091a269a57[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Feb 9 18:09:54 2020 -0800

    move uniforms around

[33mcommit 5b48de96db57ca2b1ad7857e9cd5d9ae921afa50[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Feb 9 18:04:18 2020 -0800

    Add Uniforms proc macro

[33mcommit 9078b676773953c391766d0ef558e2fae5f6605f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Feb 9 13:53:43 2020 -0800

    add texture_new example (not working)

[33mcommit a9754cd91eef077097743f4cac6a9ff42c19e7ff[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Feb 9 12:38:17 2020 -0800

    enable incremental release builds and optimized dev builds (unoptimized results in completely useless framerates)

[33mcommit a721f3595dbac63387ef8924c13d4d397dd6a4e0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Feb 9 11:43:45 2020 -0800

    rustfmt: use field init shorthand

[33mcommit 76d5f6057ce5e0d8bcc8bdb9812fd29e88535dae[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Feb 9 11:42:26 2020 -0800

    add rustfmt.toml and set merge_imports to true

[33mcommit 4f4213be11452688a3828fa1629ff39ec7729786[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Feb 8 17:21:11 2020 -0800

    update logo

[33mcommit 5306fa36fae56a6fab14478f33ac1b2c0bb92043[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Feb 8 17:17:07 2020 -0800

    break up shader mod

[33mcommit 428bb985c4d44fa5668b79c454e65fba8374383a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Feb 8 15:42:07 2020 -0800

    move mesh draw target to draw target folder

[33mcommit ebcb925d6fb2cbdf44ed06172a1c959f9db80a15[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Feb 8 15:31:38 2020 -0800

    remove broken import

[33mcommit 8aaa3581e23bfe28d272a6cd5a351ab4867b99e0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Feb 8 15:12:00 2020 -0800

    fix roadmap link

[33mcommit c604843b54f58d0fe3abba9ed3122ca4d252a303[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Feb 8 15:07:57 2020 -0800

    move uniform resource provider to resource provider folder

[33mcommit d89a23edd5e441581bcca9afeb71591c923f9eca[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Feb 8 11:05:30 2020 -0800

    add rendergraph v2 to roadmap

[33mcommit 8ca465ba9842a00c91889da3f38034607621bb46[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Feb 8 11:04:42 2020 -0800

    update roadmap

[33mcommit 8f1c9e9333d34733a37b7ec1ffd1901a8cdd6462[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Feb 7 23:18:53 2020 -0800

    remove super

[33mcommit 3b0b40a79d05ce5ab5fe8c62a1f1606140ef25af[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Feb 7 23:17:51 2020 -0800

    cargo fmt

[33mcommit f68909ac006e0fcee7566425ad13d1cd8e5c1b10[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Feb 7 23:15:35 2020 -0800

    reorganize

[33mcommit 88ecc9ed43a723e8bcd7cf0459481d065779f503[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Feb 7 22:42:30 2020 -0800

    port ui over to new render graph

[33mcommit be1a8789437e0653c0fb220dc2045a735cbe2bce[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Feb 6 08:56:44 2020 -0800

    fix forward flat depth

[33mcommit aab7034e99b6402f8f49181fdc0c4e73534fee09[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Feb 5 18:59:09 2020 -0800

    FrameTexture resource providers

[33mcommit 8c831845f91d7f852b1e18bbe27018f8d0e6bb44[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Feb 5 17:50:56 2020 -0800

    initial texture support

[33mcommit 6d0661d299eb5b6da76ccb4deaeaeee5df87845a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Feb 5 11:02:53 2020 -0800

    fix lights

[33mcommit 489580f6885f24763d4b779ecd8db45dd343096c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Feb 5 09:59:36 2020 -0800

    port forward lighting and add struct + array uniforms

[33mcommit 380e59ee23c5efd2e6ebeb98a26482e183f7e2d3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Feb 4 23:14:13 2020 -0800

    begin porting over lighting

[33mcommit 48e8967acc2b2064c913dcf0c9e48c2a8f15e885[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Feb 4 22:07:02 2020 -0800

    use staging buffer and add command encoder for resize events

[33mcommit c3a388b1b94fcd629da6d6fc99b51f97bf901503[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Feb 4 18:48:42 2020 -0800

    add some perf notes

[33mcommit b32c80ceba4c8a059db7ce961873514b79ff3c78[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Feb 4 09:41:05 2020 -0800

    add todo

[33mcommit dff18f78dbb2023812098e767055742165c781ea[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Feb 4 09:39:23 2020 -0800

    slightly optimize UniformResourceProvider

[33mcommit 14efda15bf06bb37a09baf0387224a08ecf139df[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Feb 4 00:27:34 2020 -0800

    remember!

[33mcommit 7c2eb63a47df4c2d57cb0d0090a99fff2978d525[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Feb 4 00:06:17 2020 -0800

    improve performance dynamic uniforms

[33mcommit c4b10ea4f7bd0c431a789948671104619836c48c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Feb 3 21:00:00 2020 -0800

    Continue moving uniform buffers to ResourceProviders

[33mcommit 45dbe90d8557836761464d8d4e0b2a4bc2f83439[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jan 29 12:49:32 2020 -0800

    simple legacy comparison example

[33mcommit cd1fb92a7ae22567c5a80802f3f560e57d1a5ddd[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jan 28 01:53:28 2020 -0800

    cache bind group hashes

[33mcommit 599d30d861137cca49eb02daafcf3488d02cdeff[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jan 28 01:08:57 2020 -0800

    remove unused indices

[33mcommit 0eb6c6fa742251a3348f7dfa014932c6ab24b4bd[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jan 28 00:36:51 2020 -0800

    dynamic uniform buffer info

[33mcommit 6ba659049dffca30bb2e98dd3952aba588be74ea[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jan 27 19:36:06 2020 -0800

    cleanup

[33mcommit 4675996e4f808287e00c923296ba2dc8b84861a7[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jan 27 19:35:54 2020 -0800

    remove unneeded uniform data copy

[33mcommit 0b49557237fce283dae89ecad58d6b451f2b2f1d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jan 27 19:07:05 2020 -0800

    cleanup

[33mcommit 07ba56c6cf3e155a3a91aee5fa39c5261ddbd142[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jan 27 01:44:02 2020 -0800

    add plane to example

[33mcommit be2a3659c7b7bbabc9fb7ca9b24c03a8800324d6[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jan 27 01:40:53 2020 -0800

    dynamic uniforms now actually work!

[33mcommit 36568d91d27d288ecc3580fafdf3987b4279e2ec[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jan 27 01:13:38 2020 -0800

    use buffers + dynamic offsets for shaderuniforms

[33mcommit d76b2b032e7f113206abb8443a4c61eb7f3349a7[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jan 26 21:44:01 2020 -0800

    entity uniforms kind of work in the new render graph
    but only the last entity because they all use the same buffer

[33mcommit 5ca84dbde0ac1458cd5767486289a9035af3a74f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jan 26 00:24:50 2020 -0800

    add new materials to example

[33mcommit a2d0d937e02bde1a1b838f8055e948e60c36105c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jan 25 16:33:26 2020 -0800

    render graph bind groups

[33mcommit bcd7dae0ec38fa55e60a790da1d9bb14ed293cd9[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jan 23 23:39:56 2020 -0800

    more renderer work

[33mcommit 7b89531268ce232679572e297b73e46435211076[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jan 23 01:06:37 2020 -0800

    add resource providers to render_graph

[33mcommit 2226292ce099d2369d30634b2089cb2d6d2d2950[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Jan 23 00:31:56 2020 -0800

    more graph work

[33mcommit 8967e3523032e0289ea5d116e5afa94088299323[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jan 22 01:05:53 2020 -0800

    update readme

[33mcommit 1ad62361b39525a9c009f0faa6b8aab56a104393[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jan 22 01:04:55 2020 -0800

    update readme

[33mcommit 5a9dfb2e9b49ae254b9975d666f6fb8ed7e69477[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jan 21 22:29:28 2020 -0800

    add temporary logo

[33mcommit 650ab99914f465ba25179d890823dd121636235e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jan 21 20:13:08 2020 -0800

    remove warning color

[33mcommit 7558d3b9302b96448d77f331d2340e90fe07f012[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jan 21 20:12:20 2020 -0800

    update readme

[33mcommit 843ae0e11cb527919666adbe786fb161a8405e2a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jan 21 20:00:24 2020 -0800

    update readme

[33mcommit 9e0d29d27e56fabf4ca5b6f0c20f61787f118c54[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jan 21 03:15:28 2020 -0800

    prep flat pipeline

[33mcommit de9b91eeb51dface3b41be70e53f6916ced6e0f4[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jan 21 03:11:38 2020 -0800

    Expand README

[33mcommit 3f5e46f679d3fd71500d692cd875116ecde7646e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jan 21 03:11:16 2020 -0800

    Add fast build config example

[33mcommit 5975289f4cd7066cc9a8b600e1faf709174559c0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jan 20 23:05:53 2020 -0800

    bind group data model

[33mcommit 129a9747bba8484c614d95e0d0719f0c6bcc5c28[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jan 20 20:10:40 2020 -0800

    add dynamic plugin loading

[33mcommit e8dfc0081b027d5c1ab92cffddfbecdaea7db88b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jan 20 02:03:05 2020 -0800

    supress warnings

[33mcommit d7bd49694b19260d84c5ad77100cee62a329b054[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jan 20 02:02:53 2020 -0800

    add resize event to new renderer

[33mcommit 79bb83732fd70d446704e51715e1b0440dac310f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jan 20 00:57:54 2020 -0800

    more graph work

[33mcommit 54005fcdd024151359aab721eeba5c523f1854e5[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jan 19 23:03:08 2020 -0800

    finish wiring up new renderer / render_graph

[33mcommit e4d42c29a96f1adb61281bbebe11d8d1067495b8[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jan 19 13:24:01 2020 -0800

    incomplete plug in

[33mcommit b0df4915599e58a5c7e1b2d9e28e4f57b5d4e57e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jan 19 12:43:18 2020 -0800

    make legacy rendergraph optional (and off by default)

[33mcommit 3783deed07bfadddf5ad632685aad6dff3b3589b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jan 19 02:10:29 2020 -0800

    rename object3d to mesh

[33mcommit ec4ca5559f65ba6402ed3f32d975b1eeb66160e4[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jan 19 02:02:12 2020 -0800

    EntityArchetype proc macro

[33mcommit 48cf0190ad250210d7d4ce4369d18c88b5280f03[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jan 18 15:38:57 2020 -0800

    add comments about future entity archetype plans

[33mcommit e0753c8acec45038af46e6d312a92a3e61c61ef2[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jan 18 15:36:24 2020 -0800

    entity archetypes
    (for organization and compile time speedups)

[33mcommit 7a386b8b46229e98bb9842b0312393db9d6c9e0f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jan 18 14:09:53 2020 -0800

    more render_graph work

[33mcommit d9bd2d4f152ec1e0614489ddfe475b9f7abd01d7[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jan 17 18:54:05 2020 -0800

    pipeline builder

[33mcommit 3a674394b977e71dbe5b44a39fa543f2d9809399[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jan 17 01:29:01 2020 -0800

    add immutable versions of run_on_hierarchy to save allocations

[33mcommit e649d4f6e1eec4a394b969abca284682d0d5b896[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jan 17 00:46:40 2020 -0800

    initial render graph v2 work

[33mcommit 435357ee8612321642f1a0cb00080baed3e93cba[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jan 15 10:28:27 2020 -0800

    start working on render_graph v2

[33mcommit 724ad16c95d04ae58e508dced56a017df37dd1ba[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jan 15 01:03:33 2020 -0800

    remove comments

[33mcommit 50722089ef20bc7bda627725cf4b5747b10c5e50[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jan 15 00:51:32 2020 -0800

    replace glsl_to_spirv with shaderc

[33mcommit 35705dfad26cc122fa00e91873bda03351d79302[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jan 14 22:40:52 2020 -0800

    move render_graph and prevent panic when there are no passes

[33mcommit 7037c8c49492f7e3da55b96e647cd81a7937fb51[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jan 14 22:23:00 2020 -0800

    cargo fmt

[33mcommit 68676bf6fa2c1eeb57fadc9020cca6dc8d4167bb[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jan 14 22:19:28 2020 -0800

    add initial serialization

[33mcommit 0e72f073e16532126df89437a222082e64fef398[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jan 14 18:57:10 2020 -0800

    move swap_chain and device initialization to render_graph

[33mcommit e1c1da027b62fb139b93840bb3ce53b4c3fd8add[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jan 14 12:53:56 2020 -0800

    move app to its own namespace

[33mcommit 5f6bad2dc81e47e870b203a013a3046b0e22978d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jan 14 12:37:01 2020 -0800

    add system stages to app builder

[33mcommit 27eaaead3072a1e115a48eeb74027a610f4c8807[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jan 14 12:04:55 2020 -0800

    make time optional

[33mcommit 2da6ea63933784634c175ac7b3d05fe81a96d91e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jan 14 11:53:57 2020 -0800

    set msaa to 4 to be kinder to my laptop

[33mcommit 3853e0f1c9b6795df3ae5b37e0918fa0a6e2a149[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jan 13 19:23:28 2020 -0800

    remove legion_transform_bundle from lib.rs

[33mcommit 5433ba7ea1a36d2c240ea52c52d4d1aaa307e0b1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jan 13 19:20:58 2020 -0800

    add prelude

[33mcommit 32f196c7c274052af149d557f97b80b4a6731307[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jan 13 18:59:30 2020 -0800

    move mesh and texture to asset mod

[33mcommit c867c021c9e8a04f237398af23fa3630a0587da2[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jan 13 18:06:06 2020 -0800

    add texture types

[33mcommit 7a6c9384093e88ad6764f3a6afd4cc545b0d10c3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jan 13 17:35:30 2020 -0800

    add uvs to vertex layout

[33mcommit 5ab026d943a002fba4ad48c3ba49190c5cf644a2[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jan 13 02:14:10 2020 -0800

    update alpha dst_factor

[33mcommit 019cad9e041ddc2d252a0f8c1dda2cff96682276[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jan 13 02:11:30 2020 -0800

    add msaa

[33mcommit a798cf334604344a791f037d7039af9bea727b66[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Jan 13 01:32:04 2020 -0800

    add alpha to ui pipeline

[33mcommit 5d9bb88d1bcca55381d060486ec5c34f99b0c405[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jan 12 22:26:07 2020 -0800

    update simple

[33mcommit ae325846ff2e7bc94a07f5b482a4f59493af5ba6[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jan 12 22:18:17 2020 -0800

    Node tree structure

[33mcommit dd34c1e2379303059c4a7776ebe5bb085000401e[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jan 12 18:47:17 2020 -0800

    ui example comments

[33mcommit 875b7492c878fbdc24c79878ef013ed9aaed04ea[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jan 12 18:00:58 2020 -0800

    rename ui_update_system

[33mcommit 6da891be2919b4ab1d224f61e9fd1965d81a06fd[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jan 12 16:51:21 2020 -0800

    ui node system

[33mcommit 480443d35a822ed6f4f2005f3885a16aa7b6b8b0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jan 12 11:46:34 2020 -0800

    Add roadmap

[33mcommit 7f0f2d0515048e403f3d09dd3c565a58a5807648[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jan 11 17:33:44 2020 -0800

    Add anchor data

[33mcommit 9c3c92f39a1de317f198f00254e741381abda107[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jan 11 15:21:31 2020 -0800

    cargo fmt

[33mcommit 133cbe7846218ae3e769db7e51231f96d4f0c4a0[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jan 11 14:16:47 2020 -0800

    upgrade wgpu and winit

[33mcommit e1fb86ef8e63db5e984585784b9d0d9e8a50613a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jan 11 13:14:26 2020 -0800

    support instancing multiple meshes

[33mcommit 4d903df33cf9f28b05e22dc3b2595b4066af3f01[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jan 11 12:32:38 2020 -0800

    simplify AssetStorage and Handles

[33mcommit 41722830bde8b82610c08feda4ddcf58b41473a3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jan 11 11:57:16 2020 -0800

    remove some todos

[33mcommit 25064490972768b379e241e682faabee4a61b066[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jan 11 11:51:46 2020 -0800

    use creat_quad in create_plane

[33mcommit 13eea44bce9914aa608b236b98e19e72983035f4[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jan 11 11:33:49 2020 -0800

    remove Mesh2D for now

[33mcommit a9635b2c3ddc3dea1528a922faa864fbe9e17e0d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jan 11 11:29:57 2020 -0800

    move vertex to render mod

[33mcommit 0049715070abd510cd18bb1aa2c4e13454f496fb[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jan 11 03:32:22 2020 -0800

    remove explicit type

[33mcommit 151675a5efd9598c4ca7ff698d86b3fe17cad30f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jan 11 03:31:36 2020 -0800

    upgrade legion. refactor system and world construction

[33mcommit 9f7e313dc4cea5970aeef9d6d4097cb87a5a2091[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jan 11 02:11:27 2020 -0800

    rustfmt crate

[33mcommit ee03942e40a3fae0ada6bd4ab287d4c86a6744dc[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jan 11 01:59:39 2020 -0800

    rustfmt examples

[33mcommit fdbe42dd7d5d5ea9a535b8607fce16b7519dde4a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jan 11 01:51:20 2020 -0800

    app_builder: add world and scheduler setters

[33mcommit 7e0d0c6e3d292700cf12af6c7f46db4ac1a3b771[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jan 11 01:47:32 2020 -0800

    remove notes

[33mcommit 55c50f7185b403ae0d8f8727e309845b8046816f[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Jan 11 01:46:51 2020 -0800

    refactor app startup. AppBuilder. clean up examples

[33mcommit aeeb85b7b0dd23a616d5d3a6813415058bf2d056[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Jan 10 22:42:54 2020 -0800

    batched rect rendering

[33mcommit eb1233d9f08327e82934e7fc1bc74d38b98e6520[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jan 8 19:17:11 2020 -0800

    initial ui pass

[33mcommit edd0bca622e90a28f887b3c3b87fca2b0d9804ce[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jan 8 09:12:54 2020 -0800

    rename forward bind group

[33mcommit 62364660deee55d56fa901f3c7cb0cd0e1eb46d3[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jan 8 09:07:49 2020 -0800

    local -> material bind group layout

[33mcommit 86a467f0f36151e7d0243bb2fe216ad21e475ea8[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jan 7 23:03:09 2020 -0800

    initial gltf example

[33mcommit f27942e961fa2d406cf8e87f2fc42aaf4c3a3dc9[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Jan 7 22:35:07 2020 -0800

    port shadow pipeline. clean up

[33mcommit 42236cfe57e4833e6375af266f5ba3226dcf0969[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Jan 5 21:38:43 2020 -0600

    new shadow pass. pipeline assignments

[33mcommit aa16023f4166a05bda78683e747fb90d1f95d451[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jan 1 14:23:39 2020 -0600

    port forward-instanced to RenderGraph

[33mcommit cb6de5b2bfd222b67c4fea48d88bf1b6a4838fef[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Jan 1 13:53:44 2020 -0600

    initial RenderGraph

[33mcommit 7bfafc22bc19ac8408470e1d3493316207c7d0e8[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Fri Dec 27 15:35:07 2019 -0600

    initial instancing support

[33mcommit 6a819a1884e8e15e8e43fbc86c5f57f94efc552b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Dec 23 18:13:05 2019 -0600

    render resources refactor and normal forward rendering

[33mcommit c0f8ded06279f6766efb736e167aa3639c06a23c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Dec 9 23:32:18 2019 -0800

    make variable immutable

[33mcommit 8e39268d56bc3ec29a52064ca08d610cd1efd867[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Dec 9 23:29:52 2019 -0800

    add simple readme

[33mcommit aa2f7e9789f9b6c3116a642e35dd407034fc1263[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Dec 9 23:12:50 2019 -0800

    Use floats for vertex values

[33mcommit 5c1ce0597ff76072a1810db5f22425b42b23febe[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Dec 7 23:48:25 2019 -0800

    average frame time

[33mcommit 42fd25cfd9b587610eca3889411d80223109e6d1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Thu Dec 5 09:29:26 2019 -0800

    move forward uniform setup to forward pass

[33mcommit 6bdf0a5e1460ada5f64b70f10b629384a94be46c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Dec 4 00:22:16 2019 -0800

    remove tiny town

[33mcommit 03c1ec34053e7fa1ca1ed09e901f7b2034f75831[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Wed Dec 4 00:11:14 2019 -0800

    we glam now

[33mcommit 7ed5b2252dcc9fd8dee164547ac1095e82fef61a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Dec 3 22:13:14 2019 -0800

    vscode debug

[33mcommit 4437f376904e3fc473268957137d06dab2714019[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Dec 3 22:13:04 2019 -0800

    light debugging

[33mcommit 072346bb94dd99e60981bad934aa982f44fd2b19[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Dec 3 22:12:33 2019 -0800

    fix variable name

[33mcommit 25b7dad1c2da41a53e7377c9efd142383df232c1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Dec 3 19:01:48 2019 -0800

    update example

[33mcommit 0e0eb974301aebf7df21896c06af2566fd733b94[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Dec 3 09:01:15 2019 -0800

    cleanup

[33mcommit 816d0c9bdd9e6d1022c5654ffdef186d73c02d5c[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Dec 3 00:30:30 2019 -0800

    wander spawner

[33mcommit 21ce87ba45805198262d7984e6fc0b47d93e228d[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Dec 2 15:51:24 2019 -0800

    fix camera projection

[33mcommit 2a27cacba853f520d21b4bdaa7585a4793fe50cf[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Dec 2 15:19:56 2019 -0800

    lights and cameras data driven. setup moved to relevant passes

[33mcommit df5c74a0eabb490bbe8c34da95394e4ae3c71be2[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Dec 2 11:05:35 2019 -0800

    material constructor

[33mcommit 6b937d5df463a013099aebd7482d77c453e8c7cc[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Dec 2 10:54:42 2019 -0800

    use more harmonious colors in sample

[33mcommit 3922c76efe69d1051a46edc3dac883bdb0205f1b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Dec 2 10:48:08 2019 -0800

    fix asset loading. no more temp!

[33mcommit a96f3cfda596e988496c8fcb5bda66d7bd6c65dc[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Mon Dec 2 01:31:07 2019 -0800

    asset loading, hierarchies, more refactoring

[33mcommit 188d355d1054a102b55d64e5921cf5f15c019b78[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Dec 1 20:03:04 2019 -0800

    render refactors. ecs integration

[33mcommit 07c0fa07045e1114944d65c9a556c5b4b150973a[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sun Dec 1 01:16:15 2019 -0800

    refactor pipelines

[33mcommit e204538ad7c8262f6208d5fc64197e4443b74099[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Nov 30 21:21:45 2019 -0800

    transition math to nalgebra and add tiny-town.

[33mcommit cd60778d462f427e1c5d6ab27bda27c4e4c6162b[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Sat Nov 30 17:42:27 2019 -0800

    use wgpu example as base

[33mcommit 515be6c8727318836de881210e2aa0dc8a2c3be5[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Nov 12 22:31:17 2019 -0800

    new legion version

[33mcommit 669849c4547f1fd0950d7f03f56f78d4681db7f1[m
Author: Carter Anderson <mcanders1@gmail.com>
Date:   Tue Nov 12 19:36:02 2019 -0800

    initial commit
